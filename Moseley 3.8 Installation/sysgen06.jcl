//SYSGEN06 JOB 'USERMODS 1-5',
//             CLASS=A,
//             MSGCLASS=A,
//             MSGLEVEL=(1,1),
//             REGION=4096K
/*JOBPARM LINES=100
//JOBCAT   DD  DSN=SYS1.VSAM.MASTER.CATALOG,DISP=SHR
//*
//*        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//*        !!                                !!
//*        !! DO NOT RENUMBER THIS JOBSTREAM !!
//*        !!                                !!
//*        !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//*
//*********************************************************************
//* Install USERMOD TMVS804 (source: Kevin Leonard) - modify MSTRJCL  *
//* to remove autostart of JES2; add JES2 START command to COMMND00   *
//*********************************************************************
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//RECV01   EXEC SMPREC
//SMPPTFIN DD  DATA,DLM='><'
++ USERMOD(TMVS804) /* REWORK(20020624) */                 .
++ VER (Z038)
   FMID(EBB1102)
 /*
  PROBLEM DESCRIPTION(S):
    TMVS804 -
      Delete autostart for primary subsystem from master
      scheduler JCL.

  COMPONENT:  5752-SC1B6-EBB1102

  SPECIAL CONDITIONS:
    ACTION:  An IPL is required after installation of this user
      modification.

  COMMENTS:
    LAST CHANGE:  2002/06/24

    THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:

    MODULES
      MSTRJCL
    MACROS
      SGIEE0MS
 */.
++ MACUPD   (SGIEE0MS) DISTLIB(AMODGEN ).
./ CHANGE NAME=SGIEE0MS
         DC    CL80'//*START &SSNAME'                          @TMVS804 04900002
><
//SMPCNTL  DD  *
  RECEIVE S(TMVS804)
        .
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV01
//*
//APPLY01  EXEC SMPAPP
//SMPCNTL  DD  *
  APPLY S(TMVS804)
        DIS(WRITE)
        .
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY01
//*
//IEHPROGM EXEC PGM=IEHPROGM
//* ***************************************************************** *
//* SYS1.PARMLIB: BACKUP COMMND00 TO COMMND98                         *
//* ***************************************************************** *
//SYSPRINT DD  SYSOUT=*
//MVSRES   DD  UNIT=3350,VOL=SER=MVSRES,DISP=OLD
//SYSIN    DD  *
  RENAME DSNAME=SYS1.PARMLIB,VOL=3350=MVSRES,                          C
               MEMBER=COMMND00,NEWNAME=COMMND98
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEHPROGM
//*
//IEBUPDTE EXEC PGM=IEBUPDTE,PARM=NEW
//* ***************************************************************** *
//* SYS1.PARMLIB: CREATE COMMND00 (AUTOMATIC COMMANDS AT IPL)         *
//* ***************************************************************** *
//SYSUT2   DD  DSN=SYS1.PARMLIB,DISP=OLD
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  *
./ ADD NAME=COMMND00,LIST=ALL
./ NUMBER NEW1=10,INCR=10
COM='SEND 'AUTO COMMANDS IN COMMND00 BEING PROCESSED',CN=01'
COM='START JES2'
COM='START SETPFKEY,M=00'
COM='START ZTIMER'
./ ENDUP
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBUPDTE
//*
//*********************************************************************
//* Install USERMOD AY12275 (source: Kevin Leonard) - corrects TCTRSZ *
//* in job/step accounting                                            *
//*********************************************************************
//*
//* 2002/02/25 @kl
//*
//*        OY12275 - TCTRSZ INCORRECTLY REFLECTS SIZE OF PRIVATE AREA,
//*                  RATHER THAN REGION SIZE REQUESTED.
//*
//RECV02   EXEC SMPREC
//SMPPTFIN DD  DATA,DLM='><'
++USERMOD(AY12275).
++VER(Z038) FMID(EBB1102) PRE(UZ35042)
 /*
  PROBLEM DESCRIPTION(S):
           OY12275 - TCTRSZ INCORRECTLY REFLECTS SIZE OF PRIVATE AREA,
                     RATHER THAN REGION SIZE REQUESTED.
  COMPONENT: 5752-SC1CH-EBB1102
  APARS FIXED: OY12275
  SPECIAL CONDITIONS:
  COMMENTS:          NONE
 */.
++ZAP(IEAVPRT0) DISTLIB(AOSC5).
NAME IEAVPRT0
VER 032E 58D0,7014     L  RWORK3,PQESIZE    GET REGION SIZE FROM PQE
REP 032E 58D0,45BC     L  RWORK3,VVREGSZ    GET REGION SIZE FROM LDA
IDRDATA AY12275
><
//SMPCNTL  DD  *
  RECEIVE S(AY12275)
        .
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV02
//*
//APPLY02  EXEC SMPAPP
//NUCLEUS  DD  DISP=SHR,DSN=SYS1.NUCLEUS
//SMPCNTL  DD  *
  APPLY S(AY12275)
        DIS(WRITE)
        .
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY02
//*
//*********************************************************************
//* Install USERMOD TTS0801 (source: Kevin Leonard) - eliminates      *
//* IKT012D message after P TSO command                               *
//*********************************************************************
//*
//* 2002/03/26 @kl TTSO801 eliminate msgikt012d after p tso
//*
//RECV03   EXEC SMPREC
//SMPPTFIN DD  DATA,DLM='><'
++ USERMOD(TTSO801)     /* REWORK(20020624) */             .
++ VER (Z038)
   FMID(ETV0108)
/*
 PROBLEM DESCRIPTION(S):
   TTSO801 -
     Eliminate msgIKT012D after P TSO.

  COMPONENT:  5752-SC1  -ETV0108

  SPECIAL CONDITIONS:
    ACTION:  TSO must be restarted after this user modification
      is installed.

  COMMENTS:
    LAST CHANGE:  2002/06/24

    THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:

    MODULES
      IKTCAS41

    NOTE:  This was fixed in ACF/VTAM V3 for MVS/370 HVT3204 by
      OY24140 (UY41051) and in ACF/VTAM V3 for MVS/XA HVT3205
      by OY24473 (UY41052)
 */.
++ ZAP      (IKTCAS41) DISTLIB(AOST3   ).
NAME IKTCAS41
VER 01E6 9207,A009    MVI   WERC2(@10),X'07'
REP 01E6 9206,A009    MVI   WERC2(@10),X'06'
IDRDATA TTSO801
><
//SMPCNTL  DD  *
  RECEIVE S(TTSO801)
        .
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV03
//*
//APPLY03  EXEC SMPAPP
//SMPCNTL  DD  *
  APPLY S(TTSO801)
        DIS(WRITE)
        .
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY03
//*
//*********************************************************************
//* Install USERMOD AZ58122 (source: Peter van der Woude) eliminates  *
//* IEC233I message after user logs off TSO                           *
//*********************************************************************
//*
//RECV04   EXEC SMPREC
//SMPPTFIN DD *
++APAR(AZ58122).
++VER(Z038) FMID(EDM1102) PRE(UZ52294).
++ZAP(IGC00020).
  NAME IGC00020 IGC00020
  VER 02CC 4770,32E0,12BB,4780,330A
  VER 0698 0000,0000,0000,0000
  REP 0698 4770,32E0
  REP 069C 41B0,B000
  REP 06A0 12BB
  REP 06A2 4780,330A
  REP 06A6 910F,B000
  REP 06AA 4710,330A
  REP 06AE 06B0,06B0,06B0
  REP 06B4 9584,B000
  REP 06B8 4780,3382
  REP 06BC 47F0,330A
  REP 02CC 47F0,3696
++ZAP(IFG0200V).
  NAME IFG0200V
  VER 01FC 12BB,4780,3248,910F,B000
  VER 0404 0000,0000,0000,0000
  REP 0404 41B0,B000
  REP 0408 12BB,4780,3248
  REP 040E 910F,B000
  REP 0412 4710,3248
  REP 0416 06B0,06B0,06B0
  REP 041C 9584,B000
  REP 0420 4780,3208
  REP 0424 47F0,3248
  REP 01FC 47F0,3402
//*
//SMPCNTL  DD *
  RECEIVE .
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV04
//APPLY04  EXEC SMPAPP
//SMPCNTL  DD *
  APPLY SELECT(AZ58122) .
//*
//*********************************************************************
//* Install USERMOD SLB0002 (source: Shelby Beach) allows use of      *
//* 'M' as the megabyte indicator for REGION in JCL                   *
//*********************************************************************
//*
//RECV05   EXEC SMPREC
//SMPPTFIN DD  *
++USERMOD(SLB0002)       /* CONVERTER/INTERPRETER */ .
++VER(Z038) FMID(EBB1102) PRE(UZ36835,UZ39248)
 /*
   PROBLEM DESCRIPTION:
     THE JOB AND EXEC REGION PARAMETERS ONLY ALLOW REGION SIZE
       TO BE SPECIFIED AS KILOBYTES(K). THIS CHANGE, ALLOWS
       THOSE OF US USED TO CODING AN 'M' FOR THE REGION SIZE
       VALUE TO CONTINUE TO DO SO.

   SPECIAL CONDITIONS:
     ACTION:
       A "CLPA" MUST BE PERFORMED AT IPL TIME FOR THIS SYSMOD TO
       BECOME ACTIVE.

   COMMENTS:
     THIS USERMOD WAS WRITTEN AND PUBLISHED BY SHELBY BEACH.

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IEFVEA, IEFVJA
 */.
++ZAP(IEFVEA) DISTLIB(AOSB3).
 NAME IEFVEA
 IDRDATA SLB0002
*
*  VALIDATE EXEC REGION VALUE
*
 VER 0AEE 4770B56E           BNE   EAPGM10         NO. -FORMAT ERROR
 REP 0AEE 477084C6           BNE   PATCH1          NO CHECK FOR 'M'
 VER 14C8 00000000           PATCH AREA 1
 REP 14C8 95D46000           CLI   0(R6),C'M'      NOT 'K' & NOT 'M',
 REP 14CC 4770B56E           BNE   EAPGM10         SO IT'S AN ERROR
 REP 14D0 47F0BAF0           B     BACK            BACK TO MAIN
*
*  ADJUST STORAGE IF MB
*
 VER 0AFC 9180A0B4           TM    EATEMP2,EAREGION FIRST PASS ?
 REP 0AFC 47F084D2           B PATCH2              GO TO PATCH AREA
 VER 14D4 00000000           PATCH AREA 2
 REP 14D4 95D26000           CLI   0(R6),C'K'      REGION IN KB ?
 REP 14D8 478084E6           BE    *+16            YES, SKIP MB CONV
 REP 14DC 4800A0B0           LH    R0,EATEMP1      R0 =3D MEGABYTES
 REP 14E0 8900000A           SLL   R0,10           CONVERT TO KB
 REP 14E4 4000A0B0           STH   R0,EATEMP1      AND SAVE IT
 REP 14E8 9180A0B4           TM    EATEMP2,EAREGION FIRST PASS ?
 REP 14EC 47F0BAFE           B     BACK            BACK TO MAIN
++ZAP(IEFVJA) DISTLIB(AOSB3).
 NAME IEFVJA
 IDRDATA SLB0002
*
*  VALIDATE JOB REGION VALUE
*
 VER 0310 4770B4FE           BNE   JAER1           NOT 'K' - ERROR
 REP 0310 4770B67E           BNE   PATCH1          NO CHECK FOR 'M'
 VER 0680 00000000           PATCH AREA 1
 REP 0680 95D46000           CLI   0(R6),C'M'      NOT 'K' & NOT 'M',
 REP 0684 4770B4FE           BNE   JAER1           SO IT'S AN ERROR
 REP 0688 47F0B312           B     BACK            BACK TO MAIN
*
*  ADJUST NORMAL STORAGE IF MB
*
 VER 02C6 9640C22A           OI    SWD,JOBREGNS    SET SW - JOB REGION
 REP 02C6 47F0B68A           B PATCH2              GO TO PATCH AREA
 VER 068C 00000000           PATCH AREA 2
 REP 068C 9640C22A           OI    SWD,JOBREGNS    SET SW - JOB REGION
 REP 0690 95D26000           CLI   0(R6),C'K'      REGION IN KB ?
 REP 0694 4780B2C8           BE    BACK            YES, BACK TO MAIN
 REP 0698 4808005C           LH    R0,JAREGOFF(R8) R0 =3D MEGABYTES
 REP 069C 8900000A           SLL   R0,10           CONVERT TO KB
 REP 06A0 4008005C           STH   R0,JAREGOFF(R8) SAVE REQUESTED VALUE
 REP 06A4 47F0B2C8           B     BACK            BACK TO MAIN
*
*  ADJUST BULK STORAGE IF MB
*
 VER 02F2 4A48005C           AH    R4,JAREGOFF(R8) ADD H0 VALUE TO H1
 REP 02F2 47F0B6A6           B     PATCH3          GO TO PATCH AREA
 VER 06A8 00000000           PATCH AREA 3
 REP 06A8 95D26000           CLI   0(R6),C'K'      REGION IN KB ?
 REP 06AC 4780B6B2           BE    *+8             YES
 REP 06B0 8940000A           SLL   R4,10           CONVERT MB TO KB
 REP 06B4 4A48005C           AH    R4,JAREGOFF(R8) ADD H0 VALUE TO H1
 REP 06B8 47F0B2F4           B     BACK            BACK TO MAIN
/*
//SMPCNTL  DD  *
  RECEIVE SELECT(SLB0002).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV05
//*
//APPLY05  EXEC SMPAPP
//SMPCNTL  DD *
  APPLY S(SLB0002) DIS(WRITE) .
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY05
//*
//
//SYSGEN06 JOB 'USERMODS 6-10',
//             CLASS=A,
//             MSGCLASS=A,
//             MSGLEVEL=(1,1),
//             REGION=4096K
/*JOBPARM LINES=100
//JOBCAT   DD  DSN=SYS1.VSAM.MASTER.CATALOG,DISP=SHR
//*
//*********************************************************************
//* Install USERMOD SYZM001 (source: Brian Westerman) suppress CN(00) *
//* being appended to SEND operator command                           *
//*********************************************************************
//*
//RECV06   EXEC SMPREC
//SMPCNTL  DD  *
  RECEIVE SELECT(SYZM001).
//SMPPTFIN  DD *
++USERMOD (SYZM001) /* SEND COMMAND IMPROVEMENT */.
++VER (Z038) FMID(EBB1102) /*
  THIS USER MOD FIXES THE SEND OPERATOR COMMAND TO NOT APPEND
  CN(00) TO THE MESSAGE WHEN SEND IS ISSUED BY A SYSTEM TASK.
  THIS IMPROVES THE APPEARANCE OF JES2 NOTIFY MESSAGES. */.
++ZAP (IEEVSND6).
 NAME IEEVSND6
 VER 0078 4350,A01D
 VER 058C 0000,0000
 REP 0078 47F0,B586
 REP 058C BF51,A01D,4770,B076
 REP 0594 D205,C16D,C16C,47F0,B098
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV06
//*
//APPLY06  EXEC SMPAPP
//SMPCNTL  DD *
  APPLY  SELECT(SYZM001).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY06
//*
//*********************************************************************
//* Install USERMOD ZUM0007 (source: Michael Koehne) to update TSO to *
//* display dates correctly post Y2k                                  *
//*********************************************************************
//*
//RECV07   EXEC SMPREC
//SMPCNTL  DD  *
  RECEIVE SELECT(ZUM0007).
//SMPPTFIN  DD *
++USERMOD (ZUM0007) .
++VER (Z038) FMID(EBB1102)
  PRE(UZ27405 UZ80230)
  /*
   Update date offsets for post Y2k
  */ .
++ ZAP (IKJEFLA) .
 NAME IKJEFLPB
 VER 0000 197A6B40    from 19
 REP 0000 207A6B40    to   20
 IDRDATA ZUM0007
++ ZAP (IKJEFT25) .
 NAME IKJEFT25
 VER 06C4 4040F1F9    from '  19'
 REP 06C4 4040F2F0    to   '  20'
 IDRDATA ZUM0007
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV07
//*
//APPLY07  EXEC SMPAPP
//SMPCNTL  DD *
  APPLY  SELECT(ZUM0007).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY07
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//*********************************************************************
//* Install USERMOD ZUM0001 (source: Volker Bandke) - replace TSO     *
//* Command Authorization Table (IKJEFTE2)                            *
//*********************************************************************
//*
//IEBUPDTE EXEC PGM=IEBUPDTE,PARM=NEW
//SYSPRINT DD  SYSOUT=*
//SYSUT2   DD  DISP=SHR,DSN=SYS1.UMODSRC
//SYSIN    DD  *
./ ADD NAME=IKJEFTE2
         ENTRY APFCTABL
IKJEFTE2 CSECT
         DC    CL8'IKJEFTE2'
         DC    CL8'&SYSDATE'
APFCTABL DC    CL8'#       '       CMDSBSYS TSO interface
         DC    CL8'CMDSBTSO'        CMDSBSYS Alias
         DC    CL8'HERCMD  '       HERCMD by Philippe Leite
         DC    CL8'IEBCOPY '       IEBCOPY under TSO
         DC    CL8'IM      '       IMON/370
         DC    CL8'LISTD   '       TSO List Dataset commands
         DC    CL8'LISTDS  '        LISTDS Alias
         DC    CL8'IKJEHDS1'         LISTDS Alias
         DC    CL8'PDS     '       PDS Utility
         DC    CL8'QUEUE   '       QUEUE COMMAND
         DC    CL8'Q       '        QUEUE Alias
         DC    CL8'QUE     '         QUEUE Alias
         DC    CL8'RPF     '       RPF
         DC    CL8'RPFMAIN '        RPF
         DC    CL8'RPFOUT  '         RPF
         DC    CL8'        '       TABLE TERMINATOR
         END
         ENTRY APFCTABL
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBUPDTE
//*
//SMPASML  EXEC SMPASML,M=IKJEFTE2
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - SMPASML
//*
//RECV08   EXEC SMPREC
//SMPPTFIN DD  *
++ USERMOD(ZUM0001).
++ VER(Z038)
   FMID(EBB1102)
   .
++ MOD(IKJEFTE2)
   DISTLIB(AOST4)
   LKLIB(UMODLIB)
   .
//SMPCNTL  DD  *
 RECEIVE SELECT(ZUM0001).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV08
//*
//APPLY08  EXEC SMPAPP
//SMPCNTL  DD  *
   APPLY S(ZUM0001) DIS(WRITE).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY08
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//*********************************************************************
//* Install USERMOD ZP60001 (source: Greg Price) - WTO exit to start  *
//* TSO after VTAM initialization.                                    *
//*********************************************************************
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
++USERMOD(ZP60001)       /* IEECVXIT WTO EXIT TO START TSO */  .
++VER(Z038) FMID(EBB1102)
 /*
   PROBLEM DESCRIPTION:
     TSO IS DIFFICULT TO START AUTOMATICALLY AFTER AN IPL.
       IF STARTED FROM A COMMNDXX MEMBER OF PARMLIB THEN TSO
       TRIES TO INITIALIZE BEFORE VTAM IS READY.  THE OPERATOR
       MUST THEN REPLY TO RETRY AFTER VTAM IS INITIALIZED.  IF
       TSO IS CONVERTED TO A TWO-STEP PROCEDURE WHERE THE FIRST
       STEP RUNS A PROGRAM TO WAIT FOR VTAM INITIALIZATION THEN
       IKTCAS00 LOSES THE "SYSTEM TASK" STATUS (WHICH REQUIRES
       THAT A STARTED TASK HAVE ONLY ONE STEP) WHICH SHOULD BE
       ASSIGNED AS PER THE PROGRAM PROPERTIES TABLE ENTRY.
       THE "PROBLEM PROGRAM ATTRIBUTES ASSIGNED" MESSAGE IS THEN
       ISSUED BY THE SYSTEM.

       THIS USERMOD CONTAINS AN IEECVXIT WTO EXIT WHICH WILL
       ISSUE THE "S TSO" OPERATOR COMMAND WHENEVER MESSAGE
       "IST02OI  VTAM INITIALIZATION COMPLETE" IS ISSUED.
       ONCE IMPLEMENTED, THIS ACTION WILL OCCUR EVERY TIME
       VTAM INITIALIZES, NOT NECCESSARILY JUST AFTER AN IPL.
       TSO CAN THEN REMAIN A SINGLE-STEP TASK AS DISTRIBUTED
       AND BE AUTOMATICALLY AVAILABLE AFTER VTAM IS READY.

   SPECIAL CONDITIONS:
     ACTION:
       A "CLPA" MUST BE PERFORMED AT IPL TIME FOR THIS EXIT TO
       BECOME ACTIVE.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NUMBER 1.

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IEECVXIT
 */.
++MOD(IEECVXIT) DISTLIB(AOSC5).
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(NEW,PASS),UNIT=SYSDA,SPACE=(CYL,3),
//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=4080)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
IEECVXIT TITLE ' SINGLE LINE WTO/WTOR EXIT FOR MVS 3.8 '
***********************************************************************
*                                                                     *
*   THIS EXIT RECEIVES CONTROL FROM IEAVVWTO BEFORE THE WQE (AND      *
*   ORE IF IT IS A WTOR) ARE BUILT.  THE EXIT CAN CHANGE THE          *
*   ROUTING AND DESCRIPTOR CODES OF THE WTO (FIELDS USERRC AND        *
*   USERDC RESPECTIVELY).  (A WTOR WILL NOT YET HAVE A REPLY ID       *
*   ASSIGNED.)                                                        *
*                                                                     *
*   THIS EXIT WILL LOOK FOR MESSAGE                                   *
*             IST020I  VTAM INITIALIZATION COMPLETE                   *
*   (ONLY THE MESSAGE ID WILL BE CHECKED) AND WILL THEN ISSUE THE     *
*             S TSO                                                   *
*   OPERATOR COMMAND.                                                 *
*                                                                     *
*   THE INTENTION IS TO ALLOW FOR AN AUTOMATED IPL.  VTAM CAN BE      *
*   STARTED FROM THE COMMNDXX MEMBER OF PARMLIB, AND TSO WILL NOW     *
*   BE AUTOMATICALLY STARTED WHENEVER VTAM INITIALIZES.  THE TSO      *
*   STARTED TASK WILL THEREFORE NOT HAVE TO BE CHANGED TO INCLUDE     *
*   A FIRST STEP TO WAIT FOR VTAM TO COME UP, AND THE "PROBLEM        *
*   PROGRAM ATTRIBUTES ASSIGNED" MESSAGE WILL NOT BE ISSUED.          *
*                                                                     *
*   WRITTEN BY GREG PRICE          22 SEPTEMBER 2001                  *
*                                                                     *
***********************************************************************
         EJECT
IEECVXIT CSECT
         USING IEECVXIT,R15
         B     $START
         DROP  R15                 IEECVXIT
         DC    AL1(17),CL17'IEECVXIT &SYSDATE'
         USING IEECVXIT,R11
$START   STM   R14,R12,12(R13)     SAVE REGISTERS
         LR    R11,R15             SET BASE REGISTER
         L     R2,0(,R1)           POINT TO PARAMETER
         USING USERPARM,R2
         CLC   =C'IST020I ',USERTEXT
         BNE   RETURN              NOT THE MESSAGE TO BE ACTED UPON
         LA    R1,STSO             POINT TO COMMAND BUFFER
         SLR   R0,R0               CLEAR CONSOLE ID FOR MASTER
         SVC   34                  ISSUE OPERATOR COMMAND
         DROP  R2                  USERPARM
RETURN   LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN - R15 IS NOT CHECKED
         SPACE
STSO     DC    H'10',H'0',CL6'S TSO '
         LTORG
         DS    0D                  END OF CSECT
         TITLE ' EXIT PARAMETER STRUCTURE AND EQUATES '
USERPARM DSECT
USERTEXT DS    CL128
USERROUT DS    CL4
USERRC   EQU   USERROUT,2
USERDESC DS    CL4
USERDC   EQU   USERDESC,2
*        ORG   USERPARM+136
         SPACE 2
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE 2
         END   IEECVXIT
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
  IDENTIFY IEECVXIT('ZP60001')
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//RECV09  EXEC SMPREC
//SMPPTFIN DD  DSN=&&SMPMCS,DISP=(OLD,DELETE)
//SMPCNTL  DD  *
  RECEIVE SELECT(ZP60001).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV09
//APPLY09  EXEC SMPAPP
//SMPCNTL  DD  *
  APPLY SELECT(ZP60001) DIS(WRITE).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY09
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//*********************************************************************
//* Install USERMOD ZP60002 (source: Greg Price) - modify TSO TEST to *
//* not stop after an invalid opcode.                                 *
//*********************************************************************
//*
//RECV10   EXEC SMPREC
//SMPPTFIN DD  *
++USERMOD(ZP60002)         /* TSO TEST (LIST SUBCOMMAND) */  .
++VER(Z038) FMID(EBB1102) PRE(UY29953)
 /*
   PROBLEM DESCRIPTION:
     IN TSO TEST, A LIST OF INSTRUCTIONS STOPS AT A BAD OPCODE.
       WHEN LISTING INSTRUCTIONS IN TSO TEST, THE LIST STOPS
       WHENEVER AN INVALID OPCODE IS ENCOUNTERED.  THIS CAN
       REDUCE THE EASE-OF-USE OF TSO TEST DURING DEBUGGING.

       THIS USERMOD CHANGES LIST INSTRUCTION PROCESSING TO
       DISPLAY THE HEXADECIMAL OF EACH HALFWORD ENCOUNTERED
       WITH AN INVALID OPCODE AS A "DC" INSTRUCTION.  THIS
       CAN SIMPLIFY DEBUGGING PASSAGES OF CODE CONTAINING
       SMALL INLINE MACRO EXPANSIONS.

   SPECIAL CONDITIONS:
     NONE.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NO. 2.
     THIS IS A COMPLETE REWORK FOR MVS 3.8J OF A MODIFICATION
     SHIPPED IN CBT FILE 300 AND DISCUSSED IN AN ARTICLE BY
     ALAN FIELD IN THE AUGUST 1990 ISSUE OF THE NASPA TECHNICAL
     SUPPORT MAGAZINE.  THIS USERMOD ALSO ADDS SOME EXTRA
     CHARACTERS NOT SUPPORTED BY THE 3277 BUT WHICH ARE AVAILABLE
     ON LATER TERMINALS TO THE DISPLAYABLE CHARACTER TRANSLATE
     TABLE WHICH IS USED WHEN LISTING CHARACTERS.

     ORIGINALLY FOR UZ39425 (OCT 2001).
     THIS REWORK FOR UY29953 (NOV 2002).

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IKJEGLSA
 */.
++ZAP(IKJEGLSA) DISTLIB(ACMDLIB).
 NAME IKJEGLSA
 IDRDATA ZP60002
VER 0A44 12FF                  LTR   R15,R15
VER 0A46 4770,CB96             BNZ   LSTI80
VER 0A4A 43F2,0000             IC    R15,CONLNTH(R2)
VER 0A4E 06F0                  BCTR  R15,NULL
VER 0ABA 5930,A038    LSTI70   C     R3,A2
VER 0EBC 0000,0004    FFOUR    DC    F'4'
VER 0F20 E9E9,E9E9,E9E9,E9E9   PATCH AREA
VER 0F28 E9E9,E9E9,E9E9,E9E9   PATCH AREA
VER 0F30 E9E9,E9E9,E9E9,E9E9   PATCH AREA
VER 0F38 E9E9                  PATCH AREA
VER 0FDA 4B4B7A7B              DC    C'..:#'
VER 1002 4B4BA2A3              DC    C'..ST' (LOWER CASE)
VER 1022 4BC1C2C3              DC    C'.ABC'
VER 1032 4BD1D2D3              DC    C'.JKL'
VER 1042 4B4BE2E3              DC    C'..ST'
REP 0A46 47F0,CF20             B     TO THE FOLLOWING CODE
REP 0F20 41B0,0001             LA    R11,1
REP 0F24 41BB,CFFF             LA    R11,4095(R11,R12)
REP 0F28 59F0,CEBC             C     R15,FFOUR
REP 0F2C 4780,B07A             BE    XX
REP 0F30 12FF                  LTR   R15,R15
REP 0F32 4770,CB96             BNZ   LSTI80
REP 0F36 47F0,CA4A             B     BACK TO WHERE WE CAME FROM
REP 0FDA 4B797A7B              DC    C'.`:#'
REP 1002 4BA1A2A3              DC    C'.~ST' (LOWER CASE)
REP 1022 C0C1C2C3              DC    C'{ABC'
REP 1032 D0D1D2D3              DC    C'}JKL'
REP 1042 E04BE2E3              DC    C'\.ST'
REP 1062 F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6   HEXTAB DC  C'0123...DEF'
REP 1072 C4C340404040E77D  DC  DC    C'DC    X'''
REP 107A D207,6004,B072    XX  MVC   4(8,R6),DC
REP 1080 58F0,A04C             L     R15,VPDEPT
REP 1084 F342,600C,F000        UNPK  12(5,R6),0(3,R15)
REP 108A DC03,600C,CF72        TR    12(4,R6),HEXTAB-240
REP 1090 927D,6010             MVI   16(R6),C''''
REP 1094 41F0,F002             LA    R15,2(,R15)
REP 1098 4130,3002             LA    R3,2(,R3)
REP 109C 4160,6011             LA    R6,17(,R6)
REP 10A0 47F0,CABA             B     LSTI70
//SMPCNTL  DD  *
  RECEIVE SELECT(ZP60002).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV10
//*
//APPLY10  EXEC SMPAPP
//SMPCNTL  DD  *
  APPLY SELECT(UY29953 ZP60002) DIS(WRITE).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV10
//*
//SYSGEN06 JOB 'USERMODS 11-15',
//             CLASS=A,
//             MSGCLASS=A,
//             MSGLEVEL=(1,1),
//             REGION=4096K
/*JOBPARM LINES=100
//JOBCAT   DD  DSN=SYS1.VSAM.MASTER.CATALOG,DISP=SHR
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//*********************************************************************
//* Install USERMOD ZP60003 (source: Greg Price) - modify IFOX00 to   *
//* accept blank records as valid input.                              *
//*********************************************************************
//*
//RECV11   EXEC SMPREC
//SMPPTFIN DD  *
++USERMOD(ZP60003)       /* XF ASSEMBLER */  .
++VER(Z038) FMID(EAS1102) PRE(UZ32460)
 /*
   PROBLEM DESCRIPTION:
     THE XF ASSEMBLER CANNOT ACCEPT BLANK INPUT SOURCE RECORDS.
       MUCH ASSEMBLER CODE WRITTEN FOR THE HIGH-LEVEL ASSEMBLER
       WHICH WOULD OTHERWISE BE FULLY PROCESSABLE BY PUBLICLY
       AVAILABLE ASSEMBLERS CANNOT BE PROCESSED BECAUSE OF
       CHANGES TO RULES FOR ALLOWABLE INPUT.  ONE SUCH RULE IS
       THE REQUIREMENT FOR THE "SPACE" ASSEMBLER INSTRUCTION
       WHENEVER A BLANK LINE IS TO BE PRODUCED IN THE OUTPUT
       LISTING, WHEREAS THE HIGH-LEVEL ASSEMBLER (ASMA90) CAN
       ALSO ACCEPT BLANK INPUT RECORDS.

       THIS USERMOD UPDATES THE XF ASSEMBLER (IFOX00) TO
       ALLOW RECORDS WITH BLANKS IN THE FIRST 72 COLUMNS AS
       VALID INPUT.  NEW LOGIC ADDS THE INTERNAL TEXT FOR THE
       "SPACE" INSTRUCTION IN COLUMN 10 BEFORE THE INPUT RECORD
       IS PARSED WHENEVER A RECORD IS FOUND TO START WITH 72
       BLANKS.

   SPECIAL CONDITIONS:
     NONE.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NO. 3.

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IF0X0F
 */.
++ZAP(IFOX0F) DISTLIB(AOS03).
 NAME IFOX0F00
 EXPAND IFOX0F00(35)
 IDRDATA ZP60003
VER 0076 12B1                  LTR   R11,R1
VER 0078 47F0,C02A             B     RETURN
VER 0100 12BB                  LTR   R11,R11
VER 0102 47F0,C02A             B     RETURN
REP 0078 47F0,C34E             B     NEWCODE
REP 0102 47F0,C34E             B     NEWCODE
REP 0351 1C190A0C0E   SPACE    DC    C'SPACE'
REP 0356 952F,B000    NEWCODE  CLI   0(R11),C' '
REP 035A 4770,C366             BNE   GOBACK
REP 035E D546,B001,B000        CLC   1(71,R11),0(R11)
REP 0364 4770,C366             BNE   GOBACK
REP 0368 D204,B009,C349        MVC   9(5,R11),SPACE
REP 036E 12BB         GOBACK   LTR   R11,R11
REP 0370 47F0,C02A             B     RETURN
//SMPCNTL  DD  *
  RECEIVE SELECT(ZP60003).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV11
//*
//APPLY11  EXEC SMPAPP
//SMPCNTL  DD  *
  APPLY SELECT(ZP60003) DIS(WRITE).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY11
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//*********************************************************************
//* Install USERMOD ZP60004 (source: Greg Price) - show action        *
//* console messages in high intensity.                               *
//*********************************************************************
//*
//RECV12   EXEC SMPREC
//SMPPTFIN DD  *
++USERMOD(ZP60004)       /* 3277 CONSOLE I/O */  .
++VER(Z038) FMID(EBB1102) PRE(UZ35462)
 /*
   PROBLEM DESCRIPTION:
     3270 HIGH INTENSITY IS NOT USED FOR IMMEDIATE ACTION MESSAGES.
       ALL CONSOLE MESSAGES DISPLAYED USING THE SHIPPED 3277
       CONSOLE SUPPORT ARE SHOWN IN LOW INTENSITY, WHEREAS THE
       EXPECTED BEHAVIOUR FOR 3270 OS CONSOLES IS THAT 3270
       DUAL INTENSITY IS EXPLOITED SO THAT IMMEDIATE MESSAGES
       INCLUDING WTORS ARE DISPLAYED IN HIGH INTENSITY UNTIL
       PROCESSED BY DOM.

       THIS USERMOD UPDATES THE 3277 CONSOLE WRITE MODULE TO
       UPDATE THE 3270 FIELD ATTRIBUTE BYTE FOR EACH IN-LINE
       MESSAGE LINE ACCORDING TO THE ACTION MESSAGE STATUS OF
       THE MESSAGE SHOWN ON THAT LINE BEFORE THE SCREEN IS
       WRITTEN.

   SPECIAL CONDITIONS:
     ACTION:
       A "CLPA" MUST BE PERFORMED AT IPL TIME FOR THIS SYSMOD TO
       BECOME ACTIVE.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NO. 4.

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IEECVETV
 */.
++ZAP(IEECVETV) DISTLIB(AOSC5).
 NAME IEECVETV
 IDRDATA ZP60004
VER 0000 05B0                  BALR  RBBASE,N0
VER 0078 9110,A121    FULLWRT  TM    DCMIOCM1,DCMWRMSG
VER 007C 47E0,B0A6             BNO   PARTWRT
VER 0524 5C5C                  PATCH AREA
REP 0078 47F0,B522    FULLWRT  B     PATCH-AREA
REP 0524 5850,A030             L     R5KEEP,DCMASCRN
REP 0528 4B50,B3D8             SH    R5KEEP,H6
REP 052C 92E4,5004    LINELOOP MVI   N4(R5KEEP),LO
REP 0530 915C,5009             TM    N9(R5KEEP),ASTER
REP 0534 47E0,B53A             BNO   NEXTLINE   NOT * OR @
REP 0538 92E8,5004             MVI   N4(R5KEEP),HI
REP 053C 4A50,A104    NEXTLINE AH    R5KEEP,DCMCORLN
REP 0540 5950,A04C             C     R5KEEP,DCMPFKLN
REP 0544 4740,B52A             BL    LINELOOP
REP 0548 9110,A121    FULLWRT  TM    DCMIOCM1,DCMWRMSG
REP 054C 47F0,B07A             B     AFTER-BRANCH-HERE
//SMPCNTL  DD  *
  RECEIVE SELECT(ZP60004).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV12
//*
//APPLY12  EXEC SMPAPP
//SMPCNTL  DD  *
  APPLY SELECT(ZP60004) DIS(WRITE).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY12
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//*********************************************************************
//* Install USERMOD ZP60005 (source: Greg Price) - always maintain    *
//* channel and device sio counters.                                  *
//*********************************************************************
//*
//RECV13   EXEC SMPREC
//SMPPTFIN DD  *
++USERMOD(ZP60005)       /* IOS SIO COUNTERS */  .
++VER(Z038) FMID(FBB1221) PRE(UZ68196)
 /*
   PROBLEM DESCRIPTION:
     IOS DOES NOT MAINTAIN CHANNEL AND DEVICE SIO COUNTS BY DEFAULT.
       THE HALFWORD WRAP-AROUND SIO COUNTERS FOR CHANNELS (IN
       THE CHANNEL AVAILABILITY TABLE) AND DEVICES (IN THE UNIT
       CONTROL BLOCK COMMON EXTENSION) ARE NOT MAINTAINED UNLESS
       MF/1 IS ACTIVE.  MF/1 ACTIVATION AND DEACTIVATION OVERLAYS
       THE "HOOK" INSTRUCTION WITH AN APPROPRIATE INSTRUCTION.
       BY REPLACING THE DEACTIVATION INSTRUCTION WITH THE ACTIVATION
       INSTRUCTION, SIO COUNTS WILL BE MAINTAINED AS SOON AS NUCLEUS
       INITIALIZATION DISABLES I/O TRACE.  FURTHER, BY REPLACING THE
       ASSEMBLED "HOOK" INSTRUCTION WITH THE ACTIVATION INSTRUCTION
       SIO COUNTS WILL BE MAINTAINED FROM THE START OF THE IPL.  TO
       COVER ALL POSSIBILITIES, THE I/O TRACE HOOK IS ALSO CHANGED
       SO THAT THE SIO COUNTER CODE IS NOT BYPASSED IF AN I/O TRACE
       IS PERFORMED.

       THIS USERMOD UPDATES THE ASSEMBLED HOOK INSTRUCTION AND THE
       MF/1 DEACTIVATION INSTRUCTION IN IOS TO MATCH THE MF/1 IOS
       ACTIVATION INSTRUCTION.

   SPECIAL CONDITIONS:
     ACTION:
       AN IPL MUST BE PERFORMED FOR THIS SYSMOD TO BECOME ACTIVE.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NO. 5.

     ORIGINALLY FOR UZ64419 (DEC 2001).
     THIS REWORK FOR UZ68196 (NOV 2002).

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IECIOSAM
 */.
++ZAP(IECIOSAM) DISTLIB(AOSC5).
 NAME IECIOSCN
 IDRDATA ZP60005
VER 0A24 47F0,5A92    ESIO3    B     ISIO050      TRACE ON, MF/1 INACT
VER 0A40 47F0,5A50    ESIO4    B     ISIO030      MF/1 ACTIVE
VER 0A44 58B0,32F0    ISIO41   L     IOQR,IRTIOQ  MF/1 INACTIVE
VER 0A48 47F0,5A92    ISI042   B     ISIO050      TRACE ON, MF/1 INACT
REP 0A24 47F0,5A50    ESIO3    B     ISIO030
REP 0A44 47F0,5A50    ISIO41   B     ISIO030
REP 0A48 47F0,5A50    ISIO42   B     ISIO030
//*
//SMPCNTL  DD  *
  RECEIVE SELECT(ZP60005).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV13
//*
//APPLY13  EXEC SMPAPP
//SMPCNTL  DD  *
  APPLY SELECT(UZ68196 ZP60005) DIS(WRITE).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY13
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//*********************************************************************
//* Install USERMOD ZP60006 (source: Greg Price) - show excp count    *
//* on data set disposition messages.                                 *
//*********************************************************************
//*
//RECV14   EXEC SMPREC
//SMPPTFIN DD  *
++USERMOD(ZP60006)         /* DATA SET DEALLOCATION MESSAGES */  .
++VER(Z038) FMID(EBB1102) PRE(UZ75723)
 /*
   PROBLEM DESCRIPTION:
     THERE IS NO FEEDBACK IN JOB MESSAGES ABOUT EXCP ACTIVITY.
       STANDARD JOB MESSAGE OUTPUT DOES NOT CONTAIN ANY DATA
       ABOUT I/O ACTIVITY PERFORMED BY THE JOB.  VERY USEFUL
       PERFORMANCE AND DEBUGGING INFORMATION CAN BE DEDUCED
       BY SHOWING THE NUMBER OF EXCPS TO EACH DATA SET.

       THIS USERMOD CHANGES THE SYSTEM GENERATED DATA SET
       DEALLOCATION MESSAGE IEF285I BY SHOWING THE EXCP COUNT
       AFTER THE DATA SET NAME.  UP TO 9,999,999 CAN BE SHOWN
       CORRECTLY.

   SPECIAL CONDITIONS:
     ACTION:
       A "CLPA" MUST BE PERFORMED AT IPL TIME FOR THIS SYSMOD TO
       BECOME ACTIVE.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NO. 6.
     THIS IS MERELY A REPACKAGING FOR MVS 3.8J OF THE FAMOUS
     "I/O COUNT ZAP" DOCUMENTED IN DETAIL BY SAM GOLOB IN HIS
     "MVS TOOLS AND TRICKS OF THE TRADE" COLUMN IN THE JULY 1989
     ISSUE OF THE NASPA TECHNICAL SUPPORT MAGAZINE.  THE ARTICLE
     IS SHIPPED IN MEMBER CL8907JL OF CBT FILE 120, AND THE USERMODS
     FOR VARIOUS LEVELS OF MVS ARE SHIPPED IN CBT FILE 369.

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IEFAB4A2 (TO VERIFY DATA OFFSET)
       IEFAB4B0
 */.
++ZAP(IEFAB4A2) DISTLIB(AOSB3).
 NAME IEFAB4A2
 IDRDATA ZP60006
VER 0005 C9C5C6C1C2F4C1F2    DC    C'IEFAB4A2'
VER 0086 D203,A138,8094      MVC   DSABPTR(4),SIOTETIO(@08)
REP 0005 C9C5C6C1C2F4C1F2    DC    C'IEFAB4A2'
++ZAP(IEFAB4B0) DISTLIB(AOSB3).
 NAME IEFAB4B0
 EXPAND IEFAB4B0(128)
 IDRDATA ZP60006
*                            ORG   CLRKEY
VER 0052 4220,B10B           STC   @02,@OLDKEY
*                            ORG   CLRTXT
VER 0076 D248,B0C1,B0C0      MVC   MSGBUFFR+1(73),MSGBUFFR  BLANK ENTIRE BUFFER
*                            ORG   STEAL
VER 0156 9240,B0F8           MVI   MSGDISP+1,C' '      DISPLACED INSTRUCTION
*                            ORG   @EL00001
VER 02EE 4320,B10B           IC    @02,@OLDKEY
*                            ORG   @SIZDATD
VER 03E8 E600,010C           DC    AL1(230),AL3(@ENDATD-@DATD)
*                            ORG   PATCH
VER 045C 0000,0000,0000,0000 DC    4F'0'
VER 0464 0000,0000,0000,0000
*                            ORG   CLRKEY
REP 0052 4220,B120           STC   @02,@NEWKEY
*                            ORG   CLRTXT
REP 0076 D24D,B0C1,B0C0      MVC   MSGBUFFR+1(78),MSGBUFFR  BLANK ENTIRE BUFFER
*                            ORG   STEAL
REP 0156 47F0,C440           B     PATCH
*                   MAINLINE EQU   *
*                            ORG   @EL00001
REP 02EE 4320,B120           IC    @02,@NEWKEY
*                            ORG   @SIZDATD
REP 03E8 E600,0130           DC    AL1(230),AL3(@NEWDATD-@DATD)
*                            ORG   PATCH
*                   PATCHOUT EQU   *
REP 045C 924F,B0B7           MVI   MSGLNGTH+3,79       SET MSGLNGTH TO 79
REP 0460 58A0,B048           L     @10,@PC00001        ADDR OF MSGID
REP 0464 9101,A000           TM    0(@10),X'01'        MSGID=1 ?
REP 0468 47E0,C4C6           BNO   PATEXIT                 NO ==> WE EXIT.
REP 046C 58A0,D004           L     @10,4(,@13)         ADDR OF IEFAB4A2'S SAVE A
REP 0470 58A0,A03C           L     @10,X'3C'(,@10)     IEFAB4A2'S R10
REP 0474 BFAF,A138           ICM   @10,15,X'138'(@10)  ADDR OF DSAB (IEFAB4A2
*                               DSABPTR LEVEL JBB1329 RMID UZ75725 - SAME AS
*                               DSABPTR LEVEL EBB1102 RMID UZ75723)
REP 0478 4780,C4C6           BZ    PATEXIT             EXIT IF NO DSAB
REP 047C 58A0,A010           L     @10,DSABTIOT(,@10)  ADDR OF TIOT ENTRY
REP 0480 1F66                SLR   @06,@06             CLEAR WORK REG
REP 0482 4960,A012           CH    @06,TIOPSTTB(,@10)  IS THERE A UCB ENTRY IN T
REP 0486 4780,C4C6           BZ    PATEXIT                NO ==> WE QUIT.
REP 048A 5810,B058           L     @01,@PC00001+16     ADDR OF JSCB PTR
REP 048E 5810,1000           L     @01,0(,@01)         ADDR OF JSCB
REP 0492 5840,10D0           L     @04,JSCBTCBP(,@01)  ADDR OF INIT'S TCB
REP 0496 5810,114C           L     @01,JSCTMCOR(,@01)  ADDR OF TIOT MGMT AREA
REP 049A 5BA0,1018           S     @10,X'18'(,@01)     CALC TIOT ENTRY OFFSET
REP 049E BF4F,40A4           ICM   @04,15,TCBTCT(@04)  ADDR OF TIMING CONTROL TA
REP 04A2 4780,C4C6           BZ    PATEXIT             EXIT IF NONE
REP 04A6 5840,400C           L     @04,TCTIOTBL(,@04)  ADDR OF TCT I/O TABLE
REP 04AA 4150,4008           LA    @05,TCTDCBTD(,@04)  ADDR OF 1ST DD LOOKUP TAB
*                   PATDDLOP EQU   *
REP 04AE 4960,5000           CH    @06,0(,@05)         LAST ENTRY IS ZERO
*
REP 04B2 4780,C4C6           BZ    PATEXIT                  EXIT IF ZERO.
REP 04B6 49A0,5000           CH    @10,0(,@05)         DO THE TIOT DISPLACEMENTS
REP 04BA 4780,C4AA           BE    PATPRINT                 YES ==> PRINT I/O CO
REP 04BE 4150,5004           LA    @05,4(,@05)         BUMP TO NEXT DD TABLE ENT
REP 04C2 47F0,C492           B     PATDDLOP
*                   PATPRINT EQU   *
REP 04C6 4A40,5002           AH    @04,TCTIOTSD(,@05)  OFFSET TO THE DEVICE ENTR
*                                  (TCTDDENT OR TCBUCBP)
REP 04CA 5860,4004           L     @06,TCTDCTR(,@04)   GET THE I/O COUNT
REP 04CE 4E60,B0F8           CVD   @06,MSGDISP+1       INTO PACKED FORMAT
REP 04D2 D209,B105,C4CE      MVC   MSGCOUNT(L'EDMSK1),EDMSK1 PREPARE TO EDIT
REP 04D8 DE09,B105,B0FC      ED    MSGCOUNT(L'EDMSK1),MSGDISP+5 STICK IN SOME CO
REP 04DE 925C,B105           MVI   MSGCOUNT,C'*'       MARK WITH A SPLAT
*                   PATEXIT  EQU   *
REP 04E2 9240,B0F8           MVI   MSGDISP+1,C' '      DISPLACED INSTRUCTION
REP 04E6 47F0,C13E           B     MAINLINE
*
*                   EDMSK1   EQU   *
REP 04EA 6020,6B20,2020,6B20 DC    X'60206B2020206B202120'
REP 04F2 2120
* DECK PRODUCED BY THE ASMTOZAP UTILITY 85/12/16 165820
//SMPCNTL  DD  *
  RECEIVE SELECT(ZP60006).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV14
//*
//APPLY14  EXEC SMPAPP
//SMPCNTL  DD  *
  APPLY SELECT(ZP60006) DIS(WRITE).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY14
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//*********************************************************************
//* Install USERMOD ZP60007 (source: Greg Price) - add CONFTXT para-  *
//* meter support to TSO/VTAM initialization.                         *
//*********************************************************************
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
++USERMOD(ZP60007)           /* ADD CONFTXT SUPPORT TO TSO */  .
++VER(Z038) FMID(ETV0108) PRE(UZ28155,UZ28257,UZ33846)
 /*
   PROBLEM DESCRIPTION:
     TSO/VTAM 3270 DATA STREAMS CANNOT BE TRACED BY GTF.
       WHEN ATTEMPTING TO DIAGNOSE PROBLEMS WITH TSO APPLICATIONS
       IT IS A USEFUL TECHNIQUE TO TRACE THE VTAM DATA TRAFFIC
       TO AND FROM THE TSO TERMINAL.  HOWEVER, TSO/VTAM SPECIFIES
       PROC=CONFTXT IN THE VTAM NIB WHICH INSTRUCTS VTAM TO TREAT
       TERMINAL TRAFFIC AS CONFIDENTIAL TEXT WHICH SHOULD NOT BE
       REPORTED BY A TRACE.  IBM HAS ADDED THE CONFTXT PARMLIB
       PARAMETER TO LATER VERSIONS OF VTAM SO THAT AN INSTALLATION
       CAN CONTROL THIS SETTING, BUT THIS FEATURE IS NOT SUPPORTED
       BY THE FREELY AVAILABLE VERSION OF TSO/VTAM.

       THIS USERMOD ADDS SUPPORT TO CORRECTLY PROCESS THE CONFTXT
       PARAMETER IN THE PARMLIB FILE OF THE TSO STARTED TASK,
       WHICH IS USUALLY A TSOKEY__ MEMBER OF SYS1.PARMLIB.
       FURTHER, TSO APPLICATION NIB INITIALISATION WILL ALTER THE
       NIB CONTENTS ACCORDING TO THE PARAMETER SETTING.  THE
       TCAST CONTROL BLOCK DSECT MACRO IS UPDATED TO REFLECT WHERE
       THIS SETTING IS STORED.

   SPECIAL CONDITIONS:
     ACTION:
       A "CLPA" MUST BE PERFORMED AT IPL TIME FOR THIS SYSMOD TO
       BECOME ACTIVE.
     DOC:
       CONFTXT=YES OR CONFTXT=NO CAN NOW BE SPECIFIED IN THE
       TSOKEY__ MEMBER OF SYS1.PARMLIB.  CONFTXT=YES IS THE DEFAULT.
       CONFTXT=YES WILL PREVENT THE TRACING OF TERMINAL DATA STREAMS.
       CONFTXT=NO WILL ALLOW THE TRACING OF TERMINAL DATA STREAMS.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NUMBER 7.

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IKTCAS54
       IKTXINIT
     MACROS:
       IKTTCAST
 */.
++MOD(IKTCAS54) DISTLIB(AOST3).
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(NEW,PASS),UNIT=SYSDA,SPACE=(CYL,3),
//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=4080)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE '*** IKTCAS54 - PARAMETER PROCESSOR SCANNER'
*
*  MODIFIED BY GREG PRICE 30TH NOVEMBER 2002 FOR USERMOD ZP60007
*           TO SUPPORT THE CONFTXT PARMLIB SETTING
*
IKTCAS54 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKTCAS54  79.255'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @00,@12,20(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  LA    @08,4095(,@12)                                      0001
         USING @PSTART,@12                                         0001
         USING @PSTART+4095,@08                                    0001
         L     @00,@SIZDATD                                        0001
         GETMAIN  R,LV=(0)
         LR    @10,@01                                             0001
         USING @DATD,@10                                           0001
         ST    @13,@SA00001+4                                      0001
         LM    @00,@01,20(@13)                                     0001
         ST    @10,8(,@13)                                         0001
         LR    @13,@10                                             0001
         EJECT
*                                                                  0119
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS PROGRAM IS ORGANIZED AS FOLLOWS:                         */
*/*                                                                  */
*/*        A - HOUSEKEEPING                                          */
*/*                                                                  */
*/*        B - MAINLINE, WHICH CONSISTS OF THE FOLLOWING:            */
*/*            1)  IF DATA IS IN A CIB, MOVE IT INTO A WORK BUFFER   */
*/*                AND RELEASE THE CIB WITH THE QEDIT MACRO          */
*/*            2)  VALIDITY CHECKING OF INPUT OPTIONS.  IF ANY       */
*/*                INCONSISTENCIES ARE FOUND, TERMINATE WITH A RETURN*/
*/*                CODE OF 4.                                        */
*/*            3)  SCAN PARAMETERS, FROM EITHER A DATA OR WORK       */
*/*                BUFFER.                                           */
*/*            4)  IF PARAMETERS FROM A PARMLIB ARE DESIRED, READ IN */
*/*                THE DESIRED MEMBER AND PROCESS ITS PARAMETERS.    */
*/*            5)  IF NECESSARY, OVERLAY MEMBER PARAMETERS WITH      */
*/*                BUFFER PARAMETERS.                                */
*/*            6)  IF REQUESTED, UPDATE TCAS TABLE                   */
*/*            7)  IF REQUESTED, WRITE OUT PARAMETERS                */
*/*                                                                  */
*/*        C - CLEANUP AND RETURN                                    */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0119
*   SCANERR='0'B;                   /* INITIALIZE SW                 */
*   GOSW1='1'B;                     /* INITIALIZE SW                 */
         OI    GOSW1,B'00100000'                                   0120
         NI    SCANERR,B'01111111'                                 0120
*   PRNTPTR=ADDR(PRNTDAT5);         /* 1ST CHAR IN PRINT LINE        */
         LA    PRNTPTR,PRNTDAT5                                    0121
*   PRNTEND=PRNTPTR+67;             /* LAST CHAR IN PRINT LINE       */
         LA    @15,67                                              0122
         ALR   @15,PRNTPTR                                         0122
         ST    @15,PRNTEND                                         0122
*   SYNADSW1='N';                   /* INITIALIZE                    */
         MVI   SYNADSW1,C'N'                                       0123
*   SYNADSW2='N';                   /* ERROR                         */
         MVI   SYNADSW2,C'N'                                       0124
*   DCBABSW1='N';                   /* HANDLING                      */
         MVI   DCBABSW1,C'N'                                       0125
*   DCBABSW2='N';                   /* SWITCHES                      */
         MVI   DCBABSW2,C'N'                                       0126
*   CALL CHKOPTNS;                  /* CHECK INPUT OPTIONS, ETC      */
         BAL   @14,CHKOPTNS                                        0127
*   IF MLPMINV='1'B THEN            /* ERRORS                        */
         TM    MLPMINV(MLPMPTR),B'01000000'                        0128
         BNO   @RF00128                                            0128
*     RTNCODE=4;                    /* YES - NON-ZERO RTN CODE       */
         MVC   RTNCODE(2),@CH00063                                 0129
*   ELSE                                                           0130
*     DO;                           /* NO - CONTINUE ON WITH         */
         B     @RC00128                                            0130
@RF00128 DS    0H                                                  0131
*       RTNCODE=0;                  /* ZERO RETURN CODE              */
         SLR   @02,@02                                             0131
         STH   @02,RTNCODE                                         0131
*       CALL SCANPARM;              /* SCAN BUFFER PARAMETERS        */
         BAL   @14,SCANPARM                                        0132
*       IF MLPMINV='0'B THEN        /* ALL THE PARMS OK              */
         TM    MLPMINV(MLPMPTR),B'01000000'                        0133
         BNZ   @RF00133                                            0133
*         DO;                       /* YES - CONTINUE ON             */
*           CALL READMBR;           /* READ AND PROCESS PARMLIB      */
         BAL   @14,READMBR                                         0135
*           CALL OVERLAY;           /* MERGE PARMS                   */
         BAL   @14,OVERLAY                                         0136
*           CALL TCASUPDT;          /* UPDATE TCAS TABLE PARMS       */
         BAL   @14,TCASUPDT                                        0137
*           CALL WRITEOUT;          /* PRINT TCAS TABLE PARMS        */
         BAL   @14,WRITEOUT                                        0138
*         END;                                                     0139
*       ELSE                        /* NO - ERROR FOUND              */
*         IF PRINTSW='1'B THEN      /* DOING A PRINTOUT              */
         B     @RC00133                                            0140
@RF00133 TM    PRINTSW,B'00001000'                                 0140
         BNO   @RF00140                                            0140
*           DO;                     /* YES                           */
*             GEN(CLOSE PRINTOUT)   /* CLOSE PRINTOUT                */
*             REFS(R0,R1,R14,R15,PRINTOUT);                        0142
         CLOSE PRINTOUT
*           END;                                                   0143
*     END;                                                         0144
@RF00140 DS    0H                                                  0144
@RC00133 DS    0H                                                  0145
*   RESPECIFY                                                      0145
*    (R15) RESTRICTED;                                             0145
@RC00128 DS    0H                                                  0146
*   R15=RTNCODE;                    /* INSERT RETURN CODE            */
         LH    R15,RTNCODE                                         0146
*   RESPECIFY                                                      0147
*    (R15) UNRESTRICTED;                                           0147
*   RETURN;                         /* FINISHED                      */
@EL00001 L     @13,4(,@13)                                         0148
@EF00001 L     @00,@SIZDATD                                        0148
         LR    @01,@10                                             0148
         FREEMAIN R,LV=(0),A=(1)
@ER00001 L     @14,12(,@13)                                        0148
         LM    @00,@12,20(@13)                                     0148
         BR    @14                                                 0148
         EJECT
*CHKOPTNS:                                                         0149
*   PROC OPTIONS(SAVE(14));                                        0149
CHKOPTNS ST    @14,@SA00002                                        0149
*                                                                  0150
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE DOES THREE THINGS:                            */
*/*                                                                  */
*/*    -   IF PARAMETERS ARE IN A CIB BUFFER, MOVE THEM INTO A WORK  */
*/*        BUFFER AND FREE THE CIB BUFFER                            */
*/*    -   MAKE SURE THE INPUT OPTIONS ARE CONSISTENT.               */
*/*    -   IF A PRINTOUT WANTED, OPEN THE PRINTOUT DCB               */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0150
*   CIBUFFER='';                    /* CLEAR WORK BUFFER             */
         MVI   CIBUFFER,C' '                                       0150
         MVC   CIBUFFER+1(47),CIBUFFER                             0150
*   IF MLPMCIB='0'B MLPMSCA=0 THEN                                 0151
         TM    MLPMCIB(MLPMPTR),B'00000001'                        0151
         BZ    @RT00151                                            0151
         L     @15,MLPMSCA(,MLPMPTR)                               0151
         LTR   @15,@15                                             0151
         BZ    @RT00151                                            0151
*     ;                             /* SKIP IF NO CIB BUFFER         */
*   ELSE                            /* A CIB BUFFER                  */
*     DO;                           /* YES                           */
*       RESPECIFY                                                  0154
*        (CIBNAME)                  /* SET UP NEW BASE FOR CIB       */
*             BASED(MLPMSCA);                                      0154
*       IF CIBDATLN>0 THEN          /* IF DATA, MOVE INTO            */
         L     @15,MLPMSCA(,MLPMPTR)                               0155
         LH    @14,CIBDATLN(,@15)                                  0155
         LTR   @14,@14                                             0155
         BNP   @RF00155                                            0155
*         MVC(CIBUFFER(1:CIBDATLN),CIBDATA);/* WORK BUFFER           */
         L     @01,MLPMSCA(,MLPMPTR)                               0156
         LH    @14,CIBDATLN(,@01)                                  0156
         BCTR  @14,0                                               0156
         EX    @14,@SM01645                                        0156
*       RESPECIFY                                                  0157
*        (CIBNAME);                 /* REVERT TO OLD BASE            */
@RF00155 DS    0H                                                  0158
*       RESPECIFY                                                  0158
*        (R2,                                                      0158
*         R3) RESTRICTED;                                          0158
*       R2=ADDR(CHCIBP);            /* ADDR OF CIB PTR               */
         L     R2,CSCBPTR(,TWAPTR)                                 0159
         LA    R2,CHCIBP(,R2)                                      0159
*       R3=MLPMSCA;                 /* ADDR OF CIB TO BE FREED       */
         L     R3,MLPMSCA(,MLPMPTR)                                0160
*       GEN(QEDIT ORIGIN=(R2),BLOCK=(R3))/* FREE CIB                 */
*       REFS(R0,R1,R2,R3,R14,R15);                                 0161
         QEDIT ORIGIN=(R2),BLOCK=(R3)
*       RESPECIFY                                                  0162
*        (R2,                                                      0162
*         R3) UNRESTRICTED;                                        0162
*     END;                                                         0163
*   IF MLPMFL1='00'X                /* CHECK                         */
*       (MLPMBUF='1'B&MLPMCIB='1'B) /* OBVIOUS                       */
*     THEN                                                         0164
@RT00151 CLI   MLPMFL1(MLPMPTR),X'00'                              0164
         BE    @RT00164                                            0164
         TM    MLPMBUF(MLPMPTR),B'00000011'                        0164
         BNO   @RF00164                                            0164
@RT00164 DS    0H                                                  0165
*     DO;                           /* INPUT                         */
*       MLPMINV='1'B;               /* ERRORS                        */
         OI    MLPMINV(MLPMPTR),B'01000000'                        0166
*       RETURN;                     /* .                             */
@EL00002 DS    0H                                                  0167
@EF00002 DS    0H                                                  0167
@ER00002 L     @14,@SA00002                                        0167
         BR    @14                                                 0167
*     END;                          /* .                             */
*   IF MLPMWPM='1'B THEN            /* PRINTOUT WANTED               */
@RF00164 TM    MLPMWPM(MLPMPTR),B'00010000'                        0169
         BNO   @RF00169                                            0169
*     DO;                           /* YES                           */
*       GEN(OPEN  (PRINTOUT,OUTPUT))                               0171
*       REFS(R0,R1,R14,R15,PRINTOUT);                              0171
         OPEN  (PRINTOUT,OUTPUT)
*       DCBPTR=ADDR(PRINTOUT);      /* SETUP PTR                     */
         LA    DCBPTR,PRINTOUT                                     0172
*       IF DCBABSW2='Y' DCBOFOPN='0'B THEN/* GOOD OPEN               */
         CLI   DCBABSW2,C'Y'                                       0173
         BE    @RT00173                                            0173
         TM    DCBOFOPN+40(DCBPTR),B'00010000'                     0173
         BNZ   @RF00173                                            0173
@RT00173 DS    0H                                                  0174
*         DO;                       /* NO                            */
*           RESPECIFY                                              0175
*            (R1) RESTRICTED;                                      0175
*           R1=17;                  /* MESSAGE NUMBER                */
         LA    R1,17                                               0176
*           CALL MSGBLK;            /* ADDR OF LIST FORM OF MSG      */
         L     @15,TWAMSG(,TWAPTR)                                 0177
         BALR  @14,@15                                             0177
*           R1=ADDR(IKT017I);       /* ADDR OF LIST FORM             */
         LA    @00,IKT017I(,R1)                                    0178
         LR    R1,@00                                              0178
*           GEN(WTO   MF=(E,(1)))   /* ISSUE WTO                     */
*           REFS(R0,R1,R14,R15);                                   0179
         WTO   MF=(E,(1))
*           RESPECIFY                                              0180
*            (R1) UNRESTRICTED;                                    0180
*           PRINTSW='0'B;           /* TURN OFF PRINT SW             */
         NI    PRINTSW,B'11110111'                                 0181
*         END;                                                     0182
*       ELSE                                                       0183
*         PRINTSW='1'B;             /* TURN ON PRINT SW              */
         B     @RC00173                                            0183
@RF00173 OI    PRINTSW,B'00001000'                                 0183
*     END;                                                         0184
*   ELSE                                                           0185
*     PRINTSW='0'B;                 /* TURN OFF PRINT SW             */
         B     @RC00169                                            0185
@RF00169 NI    PRINTSW,B'11110111'                                 0185
*   END CHKOPTNS;                                                  0186
         B     @EL00002                                            0186
         EJECT
*SCANPARM:                                                         0187
*   PROC OPTIONS(SAVE(14));                                        0187
SCANPARM ST    @14,@SA00003                                        0187
*                                                                  0188
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE PROCESSES THE PARAMETERS ENTERED BY THE       */
*/*    OPERATOR ON THE VARIOUS COMMANDS.  THE FOLLOWING THINGS ARE   */
*/*    DONE:                                                         */
*/*                                                                  */
*/*    -   INITIALIZE THE BUFFER SAVE AREA                           */
*/*    -   SET UP POINTER TO PROPER INPUT BUFFER                     */
*/*    -   IF BUFFER EMPTY, EXIT                                     */
*/*    -   EXCEPTION CODING                                          */
*/*    -   PROCESS THE PARMS FOUND IN THE BUFFER.  IF ANY PARMS ARE  */
*/*        IN ERROR, SET THE ERROR SWITCH AND EXIT.                  */
*/*    -   IF THE OPERATOR WANTS TO USE A DIFFERENT MEMBER NAME      */
*/*        WHEN ACCESSING PARMLIB, SET UP THE NEW NAME               */
*/*    -   IF CERTAIN OPTIONS ARE SPECIFIED BY THE OPERATOR, SET     */
*/*        SWITCHES TO INDICATE WHAT THEY ARE                        */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0188
*   SAVEBUFR=SAVES1;                /* INITIALIZE SAVE AREA          */
         MVC   SAVEBUFR(24),SAVES1                                 0188
*   IF MLPMBUF='1'B THEN            /* DATA BUFFER                   */
         TM    MLPMBUF(MLPMPTR),B'00000010'                        0189
         BNO   @RF00189                                            0189
*     SCANPTR=MLPMSCA;              /* YES                           */
         L     SCANPTR,MLPMSCA(,MLPMPTR)                           0190
*   ELSE                                                           0191
*     SCANPTR=ADDR(CIBUFFER);       /* NO                            */
         B     @RC00189                                            0191
@RF00189 LA    SCANPTR,CIBUFFER                                    0191
*   IF PRINTSW='1'B THEN            /* PRINTOUT WANTED               */
@RC00189 TM    PRINTSW,B'00001000'                                 0192
         BNO   @RF00192                                            0192
*     DO;                           /* YES                           */
*       PRNTCC='1';                 /* SKIP TO TOP OF PAGE           */
         MVI   PRNTCC,C'1'                                         0194
*       PRNTDATA='CONSOLE VALUES ENTERED:';/* HEADER LINE            */
         MVI   PRNTDATA+23,C' '                                    0195
         MVC   PRNTDATA+24(108),PRNTDATA+23                        0195
         MVC   PRNTDATA(23),@CC01526                               0195
*       CALL PRINTIT;               /* PRINT THE HEADER              */
         BAL   @14,PRINTIT                                         0196
*       PRNTLINE='';                /* SKIP TO NEXT LINE             */
         MVI   PRNTLINE,C' '                                       0197
         MVC   PRNTLINE+1(132),PRNTLINE                            0197
*       IF WORKCHAR=' ' THEN        /* DATA                          */
         CLI   WORKCHAR(SCANPTR),C' '                              0198
         BNE   @RF00198                                            0198
*         PRNTDAT5='*NONE ENTERED*';/* FROM                          */
         MVI   PRNTDAT5+14,C' '                                    0199
         MVC   PRNTDAT5+15(113),PRNTDAT5+14                        0199
         MVC   PRNTDAT5(14),@CC01529                               0199
*       ELSE                        /* THE                           */
*         PRNTDAT5=DATABUF;         /* BUFFER                        */
         B     @RC00198                                            0200
@RF00198 MVI   PRNTDAT5+48,C' '                                    0200
         MVC   PRNTDAT5+49(79),PRNTDAT5+48                         0200
         MVC   PRNTDAT5(48),DATABUF(SCANPTR)                       0200
*       CALL PRINTIT;               /* PRINT THE BUFFER              */
@RC00198 BAL   @14,PRINTIT                                         0201
*     END;                                                         0202
*   IF WORKCHAR=' ' THEN            /* FIRST CHARACTER BLANK         */
@RF00192 CLI   WORKCHAR(SCANPTR),C' '                              0203
         BE    @RT00203                                            0203
*     RETURN;                       /* YES - EXIT                    */
*                                                                  0205
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SECTION OF CODE HANDLES INPUT DATA THAT IS NOT IN        */
*/*    KEYWORD NAME, EQUAL SIGN, KEYWORD PARAMETER, SEQUENCE.        */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0205
*   IF DATA2='U ' DATA7='IGNORE ' THEN/* IGNORE RESPONSE             */
         CLC   DATA2(2,SCANPTR),@CC01531                           0205
         BE    @RT00205                                            0205
         CLC   DATA7(7,SCANPTR),@CC01532                           0205
         BNE   @RF00205                                            0205
@RT00205 DS    0H                                                  0206
*     DO;                           /* YES                           */
*       MLPMIGN='1'B;               /* SET SWITCH                    */
         OI    MLPMIGN(MLPMPTR),B'00000001'                        0207
*       RETURN;                     /* EXIT                          */
@EL00003 DS    0H                                                  0208
@EF00003 DS    0H                                                  0208
@ER00003 L     @14,@SA00003                                        0208
         BR    @14                                                 0208
*     END;                                                         0209
*   IF DATA6='FSTOP ' THEN          /* 'FSTOP' BY ITSELF             */
@RF00205 CLC   DATA6(6,SCANPTR),@CC01533                           0210
         BNE   @RF00210                                            0210
*     DATA11='USER=FSTOP ';         /* YES - ADD KEYWORD NAME        */
         MVC   DATA11(11,SCANPTR),@CC01534                         0211
*   ELSE                                                           0212
*     IF DATA4='SIC ' THEN          /* 'SIC' BY ITSELF               */
         B     @RC00210                                            0212
@RF00210 CLC   DATA4(4,SCANPTR),@CC01536                           0212
         BNE   @RF00212                                            0212
*       DATA9='USER=SIC ';          /* YES - ADD KEYWORD NAME        */
         MVC   DATA9(9,SCANPTR),@CC01537                           0213
*   DO WHILE(WORKCHAR^=' ');        /* PROCESS PARMS                 */
@RF00212 DS    0H                                                  0214
@RC00210 B     @DE00214                                            0214
@DL00214 DS    0H                                                  0215
*     TABLEPTR=ADDR(VERIBUFR);      /* INITIALIZE                    */
         LA    TABLEPTR,VERIBUFR                                   0215
*     SAVEPTR=ADDR(SAVEBUFR);       /* POINTERS                      */
         LA    SAVEPTR,SAVEBUFR                                    0216
*     CALL FNDNMTCH;                /* GET A KEYWORD NAME            */
         BAL   @14,FNDNMTCH                                        0217
*     IF SCANERR='1'B THEN          /* WAS AN ERROR FOUND            */
         TM    SCANERR,B'10000000'                                 0218
         BNO   @RF00218                                            0218
*       DO;                         /* YES                           */
*         MLPMINV='1'B;             /* SHOW IT                       */
         OI    MLPMINV(MLPMPTR),B'01000000'                        0220
*         RETURN;                   /* AND EXIT                      */
         B     @EL00003                                            0221
*       END;                                                       0222
*     CALL PRCSPARM;                /* VERIFY KEYWORD PARAMETER      */
@RF00218 BAL   @14,PRCSPARM                                        0223
*     IF SAVECHAR=HEXFF THEN        /* WAS THE PARM INVALID          */
         CLI   SAVECHAR(SAVEPTR),X'FF'                             0224
         BNE   @RF00224                                            0224
*       DO;                         /* YES                           */
*         MLPMINV='1'B;             /* SHOW IT                       */
         OI    MLPMINV(MLPMPTR),B'01000000'                        0226
*         RETURN;                   /* AND EXIT                      */
         B     @EL00003                                            0227
*       END;                                                       0228
*     IF WORKCHAR^=' ' THEN         /* IF NOT THE END                */
@RF00224 CLI   WORKCHAR(SCANPTR),C' '                              0229
         BE    @RF00229                                            0229
*       SCANPTR=SCANPTR+1;          /* PT PAST THE COMMA             */
         AL    SCANPTR,@CF00057                                    0230
*   END;                                                           0231
@RF00229 DS    0H                                                  0231
@DE00214 CLI   WORKCHAR(SCANPTR),C' '                              0231
         BNE   @DL00214                                            0231
*   CALL GETMBRNM;                  /* SETUP PARMLIB MBR NAME        */
         BAL   @14,GETMBRNM                                        0232
*   IF PRINTSW='1'B THEN            /* PRINTOUT WANTED               */
         TM    PRINTSW,B'00001000'                                 0233
         BNO   @RF00233                                            0233
*     DO;                           /* YES - PRNT ACCPTD VALUES      */
*       PRNTCC='0';                 /* SKIP AN EXTRA LINE            */
         MVI   PRNTCC,C'0'                                         0235
*       PRNTDATA='CONSOLE VALUES ACCEPTED:';/* SUB-HEADER LINE       */
         MVI   PRNTDATA+24,C' '                                    0236
         MVC   PRNTDATA+25(107),PRNTDATA+24                        0236
         MVC   PRNTDATA(24),@CC01543                               0236
*       CALL PRINTIT;               /* PRINT SUB-HEADER              */
         BAL   @14,PRINTIT                                         0237
*       PRNTLINE='';                /* CLEAR PRINT LINE              */
         MVI   PRNTLINE,C' '                                       0238
         MVC   PRNTLINE+1(132),PRNTLINE                            0238
*       TABLEPTR=ADDR(VERIBUFR);    /* SETUP POINTER                 */
         LA    TABLEPTR,VERIBUFR                                   0239
*       L=(LENGTH(SAVEBUFR))/8;     /* NUMBER OF PARMS               */
         MVC   L(2),@CH00118                                       0240
*       DO M=1 TO L;                /* PRINT BUFFER PARMS            */
         LA    @04,1                                               0241
         B     @DE00241                                            0241
@DL00241 DS    0H                                                  0242
*         SAVEPTR=ADDR(SAVEBUFR)+8*(TBLDISP-1);/* SAVE AREA PTR      */
         LA    SAVEPTR,SAVEBUFR                                    0242
         LH    @04,TBLDISP(,TABLEPTR)                              0242
         BCTR  @04,0                                               0242
         SLA   @04,3                                               0242
         ALR   SAVEPTR,@04                                         0242
*         IF SAVECHAR^=HEXBC&SAVECHAR^=HEXFF THEN/* GOOD ENTRY       */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0243
         BE    @RF00243                                            0243
         CLI   SAVECHAR(SAVEPTR),X'FF'                             0243
         BE    @RF00243                                            0243
*           DO;                     /* YES                           */
*             WORKPARM=SAVAREA;     /* PRINT GOOD                    */
         MVC   WORKPARM(8),SAVAREA(SAVEPTR)                        0245
*             CALL EDITIT;          /* ENTRY                         */
         BAL   @14,EDITIT                                          0246
*           END;                                                   0247
*         ELSE                                                     0248
*           TABLEPTR=TABLEPTR+20;   /* NO - PT TO NEXT ENTRY         */
         B     @RC00243                                            0248
@RF00243 AL    TABLEPTR,@CF00144                                   0248
*       END;                                                       0249
@RC00243 LA    @04,1                                               0249
         AH    @04,M                                               0249
@DE00241 STH   @04,M                                               0249
         CH    @04,L                                               0249
         BNH   @DL00241                                            0249
*       EDFIELD(1)=HEXFF;           /* CAUSE LAST LINE               */
         MVI   EDFIELD,X'FF'                                       0250
*       CALL NSRTNPRT;              /* TO BE PRINTED                 */
         BAL   @14,NSRTNPRT                                        0251
*     END;                                                         0252
*   KEYWDNM='USER    ';             /* KEYWORD NAME WANTED           */
@RF00233 MVC   KEYWDNM(8),@CC00340                                 0253
*   TABLEPTR=ADDR(VERIBUFR);        /* KEYWORD TABLE                 */
         LA    TABLEPTR,VERIBUFR                                   0254
*   DO WHILE(TBLNAME^=KEYWDNM);     /* FIND                          */
         B     @DE00255                                            0255
@DL00255 DS    0H                                                  0256
*     TABLEPTR=TABLEPTR+20;         /* PROPER                        */
         AL    TABLEPTR,@CF00144                                   0256
*   END;                            /* ENTRY                         */
@DE00255 CLC   TBLNAME(8,TABLEPTR),KEYWDNM                         0257
         BNE   @DL00255                                            0257
*   SAVEPTR=ADDR(SAVEBUFR)+8*(TBLDISP-1);/* ADDR OF WORK AREA        */
         LA    SAVEPTR,SAVEBUFR                                    0258
         LH    @04,TBLDISP(,TABLEPTR)                              0258
         BCTR  @04,0                                               0258
         SLA   @04,3                                               0258
         ALR   SAVEPTR,@04                                         0258
*   IF SAVECHAR^=HEXBC THEN         /* USER= ENTERED                 */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0259
         BE    @RF00259                                            0259
*     IF SAVAREA='FSTOP   ' THEN    /* YES -                         */
         CLC   SAVAREA(8,SAVEPTR),@CC00302                         0260
         BNE   @RF00260                                            0260
*       MLPMFS='1'B;                /* SET                           */
         OI    MLPMFS(MLPMPTR),B'00000100'                         0261
*     ELSE                          /* PROPER                        */
*       MLPMSIC='1'B;               /* SWITCH                        */
         B     @RC00260                                            0262
@RF00260 OI    MLPMSIC(MLPMPTR),B'00000010'                        0262
*   KEYWDNM='USERMAX ';             /* KEYWORD NAME WANTED           */
@RC00260 DS    0H                                                  0263
@RF00259 MVC   KEYWDNM(8),@CC00350                                 0263
*   TABLEPTR=ADDR(VERIBUFR);        /* KEYWORD TABLE                 */
         LA    TABLEPTR,VERIBUFR                                   0264
*   DO WHILE(TBLNAME^=KEYWDNM);     /* FIND                          */
         B     @DE00265                                            0265
@DL00265 DS    0H                                                  0266
*     TABLEPTR=TABLEPTR+20;         /* PROPER                        */
         AL    TABLEPTR,@CF00144                                   0266
*   END;                            /* ENTRY                         */
@DE00265 CLC   TBLNAME(8,TABLEPTR),KEYWDNM                         0267
         BNE   @DL00265                                            0267
*   SAVEPTR=ADDR(SAVEBUFR)+8*(TBLDISP-1);/* ADDR OF WORK AREA        */
         LA    SAVEPTR,SAVEBUFR                                    0268
         LH    @04,TBLDISP(,TABLEPTR)                              0268
         BCTR  @04,0                                               0268
         SLA   @04,3                                               0268
         ALR   SAVEPTR,@04                                         0268
*   IF SAVECHAR^=HEXBC THEN         /* USERMAX= ENTERED              */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0269
         BE    @RF00269                                            0269
*     IF SAVAREAF=0 THEN            /* YES -                         */
         L     @15,SAVAREAF(,SAVEPTR)                              0270
         LTR   @15,@15                                             0270
         BNZ   @RF00270                                            0270
*       MLPMUZ='1'B;                /* SET                           */
         OI    MLPMUZ(MLPMPTR),B'00010000'                         0271
*     ELSE                          /* PROPER                        */
*       MLPMUNZ='1'B;               /* SWITCH                        */
         B     @RC00270                                            0272
@RF00270 OI    MLPMUNZ(MLPMPTR),B'00001000'                        0272
*   END SCANPARM;                                                  0273
         B     @EL00003                                            0273
         EJECT
*GETMBRNM:                                                         0274
*   PROC OPTIONS(SAVE(14));                                        0274
GETMBRNM ST    @14,12(,@13)                                        0274
*                                                                  0275
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE DETERMINES WHAT MEMBER NAME THE OPERATOR      */
*/*    WANTS USED IN ACCESSING PARMLIB.                              */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0275
*   KEYWDNM='MEMBER  ';             /* KEYWORD NAME WANTED           */
         MVC   KEYWDNM(8),@CC00329                                 0275
*   TABLEPTR=ADDR(VERIBUFR);        /* KEYWORD TABLE                 */
         LA    TABLEPTR,VERIBUFR                                   0276
*   DO WHILE(TBLNAME^=KEYWDNM);     /* FIND                          */
         B     @DE00277                                            0277
@DL00277 DS    0H                                                  0278
*     TABLEPTR=TABLEPTR+20;         /* PROPER                        */
         AL    TABLEPTR,@CF00144                                   0278
*   END;                            /* ENTRY                         */
@DE00277 CLC   TBLNAME(8,TABLEPTR),KEYWDNM                         0279
         BNE   @DL00277                                            0279
*   SAVEPTR=ADDR(SAVEBUFR)+8*(TBLDISP-1);/* ADDR OF WORK AREA        */
         LA    SAVEPTR,SAVEBUFR                                    0280
         LH    @04,TBLDISP(,TABLEPTR)                              0280
         BCTR  @04,0                                               0280
         SLA   @04,3                                               0280
         ALR   SAVEPTR,@04                                         0280
*   IF SAVECHAR=HEXBC THEN                                         0281
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0281
         BE    @RT00281                                            0281
*     ;                             /* MEMBER= ENTERED NO - USE NAME
*                                      IN PROC                       */
*   ELSE                                                           0283
*     DO;                           /* YES - GET MEMBER NAME         */
*       WORKPARM=SAVAREA;           /* GET NAME ENTERED BY THE     0284
*                                      OPERATOR IF ITS 2 DIGITS, ADD
*                                      THEM TO 'MEMDEFLT', ELSE USE
*                                      THE NAME AS IS                */
         MVC   WORKPARM(8),SAVAREA(SAVEPTR)                        0284
*       IF(WORKPRM(1)>='0'&WORKPRM(1)<='9')&(WORKPRM(2)>='0'&WORKPRM(2)
*           <='9') THEN                                            0285
         CLI   WORKPRM,C'0'                                        0285
         BL    @RF00285                                            0285
         CLI   WORKPRM,C'9'                                        0285
         BH    @RF00285                                            0285
         CLI   WORKPRM+1,C'0'                                      0285
         BL    @RF00285                                            0285
         CLI   WORKPRM+1,C'9'                                      0285
         BH    @RF00285                                            0285
*         DO;                                                      0286
*           TSO=MEMDEFLT;                                          0287
         MVC   TSO(6),@CC00181                                     0287
*           TSO1=WORKPRM(1);                                       0288
         MVC   TSO1(1),WORKPRM                                     0288
*           TSO2=WORKPRM(2);                                       0289
         MVC   TSO2(1),WORKPRM+1                                   0289
*           SAVAREA=TSOKEYNN;                                      0290
         MVC   SAVAREA(8,SAVEPTR),TSOKEYNN                         0290
*         END;                                                     0291
*     END;                                                         0292
*   END GETMBRNM;                                                  0293
@EL00004 DS    0H                                                  0293
@EF00004 DS    0H                                                  0293
@ER00004 L     @14,12(,@13)                                        0293
         BR    @14                                                 0293
         EJECT
*READMBR:                                                          0294
*   PROC OPTIONS(SAVE(14));                                        0294
READMBR  ST    @14,@SA00005                                        0294
*                                                                  0295
*/*  *****************************************************************/
*/*                                                                  */
*/*    THE PURPOSE OF THIS SUBROUTINE IS TO READ AND PROCESS THE     */
*/*    MEMBER OF PARMLIB WHICH THE OPERATOR WANTS TO USE IN          */
*/*    BRINGING UP TCAS.  THE FOLLOWING THINGS ARE DONE:             */
*/*                                                                  */
*/*    -   INITIALIZE THE MEMBER SAVE AREA                           */
*/*    -   EXIT IF PARMLIB NOT WANTED                                */
*/*    -   OPEN THE PARMLIB WITH THE PROPER MEMBER NAME.  IF AN      */
*/*        ERROR IS ENCOUNTERED, ISSUE AN ERROR MESSAGE AND EXIT     */
*/*    -   PROCESS THE PARMS FOUND IN THE MEMBER.  NOTE THAT THEY    */
*/*        MAY BE CONTINUED FROM ONE CARD TO THE NEXT.  THE ONLY     */
*/*        REQUIREMENT FOR CONTINUING A CARD IS TO HAVE ', ' AFTER   */
*/*        THE LAST PARAMETER ON THE CARD.  THE NEXT CARD CAN START  */
*/*        ANYPLACE.                                                 */
*/*    -   CLOSE PARMLIB                                             */
*/*    -   MAKE ANY CONSISTENCY CHECKS THAT ARE NEEDED               */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0295
*   SAVEMBR=SAVES2;                 /* INITIALIZE WORK AREA          */
         MVC   SAVEMBR(208),SAVES2                                 0295
*   IF MLPMRLIB='0'B THEN           /* SHOULD WE READ PARMLIB        */
         TM    MLPMRLIB(MLPMPTR),B'00000100'                       0296
         BZ    @RT00296                                            0296
*     RETURN;                       /* NO - EXIT                     */
*   RESPECIFY                                                      0298
*    (R15) RESTRICTED;                                             0298
*   GEN(RDJFCB PARMLIB)             /* READ THE JFCB INTO CORE       */
*   REFS(R0,R1,R14,R15,PARMLIB);                                   0299
         RDJFCB PARMLIB
*   IF R15=4 THEN                   /* GOOD READ                     */
         C     R15,@CF00063                                        0300
         BNE   @RF00300                                            0300
*     DO;                           /* NO                            */
*       RESPECIFY                                                  0302
*        (R1) RESTRICTED;                                          0302
*       R1=13;                      /* MESSAGE NUMBER                */
         LA    R1,13                                               0303
*       CALL MSGBLK;                /* ADDR OF LIST FORM OF MSG      */
         L     @15,TWAMSG(,TWAPTR)                                 0304
         BALR  @14,@15                                             0304
*       R1=ADDR(IKT013I);           /* ADDR OF LIST FORM             */
         LA    @14,IKT013I(,R1)                                    0305
         LR    R1,@14                                              0305
*       GEN(WTO   MF=(E,(1)))       /* ISSUE WTO                     */
*       REFS(R0,R1,R14,R15);                                       0306
         WTO   MF=(E,(1))
*       RESPECIFY                                                  0307
*        (R1) UNRESTRICTED;                                        0307
*       RETURN;                                                    0308
@EL00005 DS    0H                                                  0308
@EF00005 DS    0H                                                  0308
@ER00005 L     @14,@SA00005                                        0308
         BR    @14                                                 0308
*     END;                                                         0309
*   RESPECIFY                                                      0310
*    (R15) UNRESTRICTED;                                           0310
@RF00300 DS    0H                                                  0311
*   KEYWDNM='MEMBER  ';             /* KEYWORD NAME WANTED           */
         MVC   KEYWDNM(8),@CC00329                                 0311
*   TABLEPTR=ADDR(VERIBUFR);        /* KEYWORD TABLE                 */
         LA    TABLEPTR,VERIBUFR                                   0312
*   DO WHILE(TBLNAME^=KEYWDNM);     /* FIND                          */
         B     @DE00313                                            0313
@DL00313 DS    0H                                                  0314
*     TABLEPTR=TABLEPTR+20;         /* PROPER                        */
         AL    TABLEPTR,@CF00144                                   0314
*   END;                            /* ENTRY                         */
@DE00313 CLC   TBLNAME(8,TABLEPTR),KEYWDNM                         0315
         BNE   @DL00313                                            0315
*   SAVEPTR=ADDR(SAVEBUFR)+8*(TBLDISP-1);/* ADDR OF MBR SAVE AREA    */
         LA    SAVEPTR,SAVEBUFR                                    0316
         LH    @15,TBLDISP(,TABLEPTR)                              0316
         BCTR  @15,0                                               0316
         SLA   @15,3                                               0316
         ALR   SAVEPTR,@15                                         0316
*   JFCBPTR=ADDR(JFCBAREA);         /* ADDR OF JFCB                  */
         LA    JFCBPTR,JFCBAREA                                    0317
*   IF SAVECHAR^=HEXBC THEN         /* MEMBER= ENTERED               */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0318
         BE    @RF00318                                            0318
*     JFCBELNM=SAVAREA;             /* YES - MOVE IN NEW NAME        */
         MVC   JFCBELNM(8,JFCBPTR),SAVAREA(SAVEPTR)                0319
*   ELSE                            /* NO                            */
*     IF JFCBELNM=BLANK THEN        /* DEFAULT MBR NAME NEEDED       */
         B     @RC00318                                            0320
@RF00318 CLC   JFCBELNM(8,JFCBPTR),@CC00097                        0320
         BNE   @RF00320                                            0320
*       JFCBELNM=MBRDEFLT;          /* YES - SUPPLY IT               */
         MVC   JFCBELNM(8,JFCBPTR),@CC00179                        0321
*   GEN(OPEN  (PARMLIB),TYPE=J)     /* OPEN PARMLIB                  */
*   REFS(R0,R1,R14,R15,PARMLIB);                                   0322
@RF00320 DS    0H                                                  0322
@RC00318 DS    0H                                                  0322
         OPEN  (PARMLIB),TYPE=J
*   DCBPTR=ADDR(PARMLIB);           /* PTR TO DCB                    */
         LA    DCBPTR,PARMLIB                                      0323
*   IF DCBABSW1='Y' DCBOFOPN='0'B THEN/* GOOD OPEN                   */
         CLI   DCBABSW1,C'Y'                                       0324
         BE    @RT00324                                            0324
         TM    DCBOFOPN+40(DCBPTR),B'00010000'                     0324
         BNZ   @RF00324                                            0324
@RT00324 DS    0H                                                  0325
*     DO;                           /* NO                            */
*       RESPECIFY                                                  0326
*        (R1) RESTRICTED;                                          0326
*       R1=13;                      /* MESSAGE NUMBER                */
         LA    R1,13                                               0327
*       CALL MSGBLK;                /* ADDR OF LIST FORM OF MSG      */
         L     @15,TWAMSG(,TWAPTR)                                 0328
         BALR  @14,@15                                             0328
*       R1=ADDR(IKT013I);           /* ADDR OF LIST FORM             */
         LA    @06,IKT013I(,R1)                                    0329
         LR    R1,@06                                              0329
*       GEN(WTO   MF=(E,(1)))       /* ISSUE WTO                     */
*       REFS(R0,R1,R14,R15);                                       0330
         WTO   MF=(E,(1))
*       RESPECIFY                                                  0331
*        (R1) UNRESTRICTED;                                        0331
*       RETURN;                                                    0332
         B     @EL00005                                            0332
*     END;                                                         0333
*   IF PRINTSW='1'B THEN            /* PRINTOUT WANTED               */
@RF00324 TM    PRINTSW,B'00001000'                                 0334
         BNO   @RF00334                                            0334
*     DO;                           /* YES                           */
*       PRNTCC='-';                 /* SKIP                          */
         MVI   PRNTCC,C'-'                                         0336
*       PRNTDATA='';                /* TWO                           */
         MVI   PRNTDATA,C' '                                       0337
         MVC   PRNTDATA+1(131),PRNTDATA                            0337
*       CALL PRINTIT;               /* LINES                         */
         BAL   @14,PRINTIT                                         0338
*       PRNTDATA='PARMLIB VALUES ENTERED:';/* SUB-HEADER LINE        */
         MVI   PRNTDATA+23,C' '                                    0339
         MVC   PRNTDATA+24(108),PRNTDATA+23                        0339
         MVC   PRNTDATA(23),@CC01556                               0339
*       CALL PRINTIT;               /* PRINT THE SUB-HEADER          */
         BAL   @14,PRINTIT                                         0340
*       PRNTLINE='';                /* CLEAR THE LINE                */
         MVI   PRNTLINE,C' '                                       0341
         MVC   PRNTLINE+1(132),PRNTLINE                            0341
*     END;                                                         0342
*   DUMPCNT=0;                      /* INITIALIZE RCFBDUMP KEY- WORD
*                                      COUNTER               @ZM20856*/
@RF00334 SLR   @02,@02                                             0343
         STH   @02,DUMPCNT                                         0343
*   DO WHILE(GOSW1='1'B);           /* PROCESS ALL RECDS IN MBR      */
         B     @DE00344                                            0344
@DL00344 DS    0H                                                  0345
*     READSW1='1'B;                 /* SET READ SW                   */
         OI    READSW1,B'01000000'                                 0345
*     DO WHILE(READSW1='1'B);       /* FIND A NON-BLANK RECD         */
         B     @DE00346                                            0346
@DL00346 DS    0H                                                  0347
*       GEN(GET   PARMLIB,MBRRECD)  /* READ A MBR RECD               */
*       REFS(R0,R1,R14,R15,PARMLIB,MBRRECD);                       0347
         GET   PARMLIB,MBRRECD
*       IF SYNADSW1='Y' THEN        /* I/O ERROR DETECTED            */
         CLI   SYNADSW1,C'Y'                                       0348
         BE    @RT00348                                            0348
*         GOTO SYNAD;               /* YES - IGNORE REST OF MBR      */
*       IF PRINTSW='1'B THEN        /* PRINTOUT WANTED               */
         TM    PRINTSW,B'00001000'                                 0350
         BNO   @RF00350                                            0350
*         DO;                       /* YES                           */
*           PRNTDAT5=MBRRECD;       /* PARMLIB RECORD                */
         MVI   PRNTDAT5+80,C' '                                    0352
         MVC   PRNTDAT5+81(47),PRNTDAT5+80                         0352
         MVC   PRNTDAT5(80),MBRRECD                                0352
*           CALL PRINTIT;           /* PRINT RECORD                  */
         BAL   @14,PRINTIT                                         0353
*         END;                                                     0354
*       MBR7380=BLANK;              /* BLANK OUT SEQUENCE NBR        */
@RF00350 MVC   MBR7380(8),@CC00097                                 0355
*       MBR80=HEXFF;                /* SCAN ENDING CHARACTER         */
         MVI   MBR80,X'FF'                                         0356
*       SCANPTR=ADDR(MBRRECD);      /* START OF RECORD               */
         LA    SCANPTR,MBRRECD                                     0357
*       DO WHILE(WORKCHAR=' ');     /* SKIP BLANKS                   */
         B     @DE00358                                            0358
@DL00358 DS    0H                                                  0359
*         SCANPTR=SCANPTR+1;                                       0359
         AL    SCANPTR,@CF00057                                    0359
*       END;                                                       0360
@DE00358 CLI   WORKCHAR(SCANPTR),C' '                              0360
         BE    @DL00358                                            0360
*       IF WORKCHAR^=HEXFF THEN     /* GOOD RECORD                   */
         CLI   WORKCHAR(SCANPTR),X'FF'                             0361
         BE    @RF00361                                            0361
*         READSW1='0'B;             /* YES                           */
         NI    READSW1,B'10111111'                                 0362
*     END;                                                         0363
@RF00361 DS    0H                                                  0363
@DE00346 TM    READSW1,B'01000000'                                 0363
         BO    @DL00346                                            0363
*     GOSW2='1'B;                   /* SET GO SW                     */
         OI    GOSW2,B'00010000'                                   0364
*     DO WHILE(GOSW2='1'B);         /* PROCESS RECORD                */
         B     @DE00365                                            0365
@DL00365 DS    0H                                                  0366
*       TABLEPTR=ADDR(VERIMBR);     /* SETUP                         */
         LA    TABLEPTR,VERIMBR                                    0366
*       SAVEPTR=ADDR(SAVEMBR);      /* POINTERS                      */
         LA    SAVEPTR,SAVEMBR                                     0367
*       CALL FNDNMTCH;              /* GET A KEYWORD NAME            */
         BAL   @14,FNDNMTCH                                        0368
*       IF SCANERR='1'B THEN        /* ERROR                         */
         TM    SCANERR,B'10000000'                                 0369
         BNO   @RF00369                                            0369
*         CALL MBRERROR;            /* YES                           */
         BAL   @14,MBRERROR                                        0370
*       ELSE                                                       0371
*         DO;                       /* NO                            */
         B     @RC00369                                            0371
@RF00369 DS    0H                                                  0372
*           CALL PRCSPARM;          /* VERIFY KEYWORD PARAMETER SEE
*                                      IF MORE PARMS                 */
         BAL   @14,PRCSPARM                                        0372
*           IF WORKCHAR=' ' DATA2=', ' THEN                        0373
         CLI   WORKCHAR(SCANPTR),C' '                              0373
         BE    @RT00373                                            0373
         CLC   DATA2(2,SCANPTR),@CC01560                           0373
         BNE   @RF00373                                            0373
@RT00373 DS    0H                                                  0374
*             GOSW2='0'B;                                          0374
         NI    GOSW2,B'11101111'                                   0374
*           ELSE                                                   0375
*             SCANPTR=SCANPTR+1;                                   0375
         B     @RC00373                                            0375
@RF00373 AL    SCANPTR,@CF00057                                    0375
*         END;                                                     0376
@RC00373 DS    0H                                                  0377
*     END;                                                         0377
@RC00369 DS    0H                                                  0377
@DE00365 TM    GOSW2,B'00010000'                                   0377
         BO    @DL00365                                            0377
*     IF WORKCHAR=' ' THEN          /* END OF ALL PARMS              */
         CLI   WORKCHAR(SCANPTR),C' '                              0378
         BNE   @RF00378                                            0378
*       GOSW1='0'B;                 /* YES                           */
         NI    GOSW1,B'11011111'                                   0379
*   END;                                                           0380
@RF00378 DS    0H                                                  0380
@DE00344 TM    GOSW1,B'00100000'                                   0380
         BO    @DL00344                                            0380
*   GOTO EOF;                       /* SKIP SYNAD RTN                */
         B     EOF                                                 0381
*SYNAD:                                                            0382
*   ;                                                              0382
SYNAD    DS    0H                                                  0383
*   RESPECIFY                                                      0383
*    (R1) RESTRICTED;                                              0383
*   R1=14;                          /* MESSAGE NUMBER                */
         LA    R1,14                                               0384
*   CALL MSGBLK;                    /* ADDR OF LIST FORM OF MSG      */
         L     @15,TWAMSG(,TWAPTR)                                 0385
         BALR  @14,@15                                             0385
*   R1=ADDR(IKT014I);               /* ADDR OF LIST FORM             */
         LA    @00,IKT014I(,R1)                                    0386
         LR    R1,@00                                              0386
*   GEN(WTO   MF=(E,(1)))           /* ISSUE WTO                     */
*   REFS(R0,R1,R14,R15);                                           0387
         WTO   MF=(E,(1))
*   RESPECIFY                                                      0388
*    (R1) UNRESTRICTED;                                            0388
*EOF:                                                              0389
*   ;                               /* ENTRY FOR EODAD               */
EOF      DS    0H                                                  0390
*   GEN(CLOSE PARMLIB)              /* CLOSE PARMLIB                 */
*   REFS(R0,R1,R14,R15,PARMLIB);                                   0390
         CLOSE PARMLIB
*   KEYWDNM='HIBFREXT';             /* KEYWORD NAME WANTED           */
         MVC   KEYWDNM(8),@CC00394                                 0391
*   TABLEPTR=ADDR(VERIMBR);         /* KEYWORD TABLE                 */
         LA    TABLEPTR,VERIMBR                                    0392
*   DO WHILE(TBLNAME^=KEYWDNM);     /* FIND                          */
         B     @DE00393                                            0393
@DL00393 DS    0H                                                  0394
*     TABLEPTR=TABLEPTR+20;         /* PROPER                        */
         AL    TABLEPTR,@CF00144                                   0394
*   END;                            /* ENTRY                         */
@DE00393 CLC   TBLNAME(8,TABLEPTR),KEYWDNM                         0395
         BNE   @DL00393                                            0395
*   SAVEPTR=ADDR(SAVEMBR)+8*(TBLDISP-1);/* ADDR OF WORK AREA         */
         LA    SAVEPTR,SAVEMBR                                     0396
         LH    @04,TBLDISP(,TABLEPTR)                              0396
         BCTR  @04,0                                               0396
         SLA   @04,3                                               0396
         ALR   SAVEPTR,@04                                         0396
*   IF SAVECHAR^=HEXBC&SAVECHAR^=HEXFF THEN/* VALID ENTRY            */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0397
         BE    @RF00397                                            0397
         CLI   SAVECHAR(SAVEPTR),X'FF'                             0397
         BE    @RF00397                                            0397
*     DO;                           /* YES                           */
*       WORKPARM=SAVAREA;           /* SAVE VALUE                    */
         MVC   WORKPARM(8),SAVAREA(SAVEPTR)                        0399
*       TEMPPTR=SAVEPTR;            /* SAVE PTR                      */
         LR    TEMPPTR,SAVEPTR                                     0400
*       KEYWDNM='LOBFREXT';         /* KEYWORD NAME WANTED           */
         MVC   KEYWDNM(8),@CC00403                                 0401
*       TABLEPTR=ADDR(VERIMBR);     /* KEYWORD TABLE                 */
         LA    TABLEPTR,VERIMBR                                    0402
*       DO WHILE(TBLNAME^=KEYWDNM); /* FIND                          */
         B     @DE00403                                            0403
@DL00403 DS    0H                                                  0404
*         TABLEPTR=TABLEPTR+20;     /* PROPER                        */
         AL    TABLEPTR,@CF00144                                   0404
*       END;                        /* ENTRY                         */
@DE00403 CLC   TBLNAME(8,TABLEPTR),KEYWDNM                         0405
         BNE   @DL00403                                            0405
*       SAVEPTR=ADDR(SAVEMBR)+8*(TBLDISP-1);/* ADDR OF WORK AREA     */
         LA    SAVEPTR,SAVEMBR                                     0406
         LH    @04,TBLDISP(,TABLEPTR)                              0406
         BCTR  @04,0                                               0406
         SLA   @04,3                                               0406
         ALR   SAVEPTR,@04                                         0406
*       IF SAVECHAR^=HEXBC&SAVECHAR^=HEXFF THEN/* VALID ENTRY        */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0407
         BE    @RF00407                                            0407
         CLI   SAVECHAR(SAVEPTR),X'FF'                             0407
         BE    @RF00407                                            0407
*         DO;                       /* YES                           */
*           IF WRKPRMF2<=SAVAREAF THEN/* HIBFREXT <= LOBFREXT        */
         L     @15,WRKPRMF2                                        0409
         C     @15,SAVAREAF(,SAVEPTR)                              0409
         BH    @RF00409                                            0409
*             DO;                   /* YES                           */
*               SAVECHAR=HEXFF;     /* FLAG LOBFREXT                 */
         MVI   SAVECHAR(SAVEPTR),X'FF'                             0411
*               TEMPPTR->SAVECHAR=HEXFF;/* FLAG HIBFREXT             */
         MVI   SAVECHAR(TEMPPTR),X'FF'                             0412
*             END;                                                 0413
*         END;                                                     0414
@RF00409 DS    0H                                                  0415
*     END;                                                         0415
@RF00407 DS    0H                                                  0416
*   IF PRINTSW='1'B THEN            /* PRINTOUT WANTED               */
@RF00397 TM    PRINTSW,B'00001000'                                 0416
         BNO   @RF00416                                            0416
*     DO;                           /* YES                           */
*       PRNTCC='0';                 /* SKIP AN EXTRA LINE            */
         MVI   PRNTCC,C'0'                                         0418
*       PRNTDATA='PARMLIB VALUES ACCEPTED:';/* SUB-HEADER            */
         MVI   PRNTDATA+24,C' '                                    0419
         MVC   PRNTDATA+25(107),PRNTDATA+24                        0419
         MVC   PRNTDATA(24),@CC01564                               0419
*       CALL PRINTIT;               /* PRINT SUB-HEADER              */
         BAL   @14,PRINTIT                                         0420
*       PRNTLINE='';                /* CLEAR THE PRINT LINE          */
         MVI   PRNTLINE,C' '                                       0421
         MVC   PRNTLINE+1(132),PRNTLINE                            0421
*       TABLEPTR=ADDR(VERIMBR);     /* SETUP POINTER                 */
         LA    TABLEPTR,VERIMBR                                    0422
*       L=(LENGTH(SAVEMBR))/8;      /* NUMBER OF PARMS               */
         MVC   L(2),@CH00189                                       0423
*       DO M=1 TO L;                /* PRINT PARMLIB PARMS           */
         LA    @04,1                                               0424
         B     @DE00424                                            0424
@DL00424 DS    0H                                                  0425
*         SAVEPTR=ADDR(SAVEMBR)+8*(TBLDISP-1);/* SAVE AREA ADDR      */
         LA    SAVEPTR,SAVEMBR                                     0425
         LH    @04,TBLDISP(,TABLEPTR)                              0425
         BCTR  @04,0                                               0425
         SLA   @04,3                                               0425
         ALR   SAVEPTR,@04                                         0425
*         IF SAVECHAR^=HEXBC&SAVECHAR^=HEXFF THEN/* GOOD ENTRY       */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0426
         BE    @RF00426                                            0426
         CLI   SAVECHAR(SAVEPTR),X'FF'                             0426
         BE    @RF00426                                            0426
*           DO;                     /* YES                           */
*             IF TBLNAME=RCFBDUMP THEN                             0428
         CLC   TBLNAME(8,TABLEPTR),RCFBDUMP                        0428
         BNE   @RF00428                                            0428
*               DO;                 /* PROCESS DUMP          @ZM20856*/
*                 DUMPPTR=SAVEPTR+5;/* SKIP TO CODES         @ZM21059*/
         LA    @04,5                                               0430
         ALR   @04,SAVEPTR                                         0430
         ST    @04,DUMPPTR                                         0430
*                 CALL EDITIT;      /* PRINT KEYWORD         @ZM20856*/
         BAL   @14,EDITIT                                          0431
*               END;                /* END RCFBDUMP PROCESSING     0432
*                                                            @ZM20856*/
*             ELSE                                                 0433
*               DO;                 /* OTHER KEYWORDS        @ZM20856*/
         B     @RC00428                                            0433
@RF00428 DS    0H                                                  0434
*                 WORKPARM=SAVAREA; /* PRINT GOOD                    */
         MVC   WORKPARM(8),SAVAREA(SAVEPTR)                        0434
*                 CALL EDITIT;      /* ENTRY                         */
         BAL   @14,EDITIT                                          0435
*               END;                /*                       @ZM20856*/
*           END;                                                   0437
*         ELSE                                                     0438
*           TABLEPTR=TABLEPTR+20;   /* NO - PT TO NEXT ENTRY         */
         B     @RC00426                                            0438
@RF00426 AL    TABLEPTR,@CF00144                                   0438
*       END;                                                       0439
@RC00426 LA    @04,1                                               0439
         AH    @04,M                                               0439
@DE00424 STH   @04,M                                               0439
         CH    @04,L                                               0439
         BNH   @DL00424                                            0439
*       EDFIELD(1)=HEXFF;           /* CAUSE LAST LINE               */
         MVI   EDFIELD,X'FF'                                       0440
*       CALL NSRTNPRT;              /* TO BE PRINTED                 */
         BAL   @14,NSRTNPRT                                        0441
*     END;                                                         0442
*   END READMBR;                                                   0443
         B     @EL00005                                            0443
         EJECT
*MBRERROR:                                                         0444
*   PROC OPTIONS(SAVE(14));                                        0444
MBRERROR ST    @14,12(,@13)                                        0444
*                                                                  0445
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE HANDLES THE ERRORS FOUND BY 'FNDNMTCH' WHEN   */
*/*    WORKING WITH A PARMLIB MEMBER.                                */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0445
*   SCANERR='0'B;                   /* TURN OFF ERROR SW             */
         NI    SCANERR,B'01111111'                                 0445
*   DO WHILE(GOSW2='1'B);           /* GO THRU ONCE OR TWICE         */
         B     @DE00446                                            0446
@DL00446 DS    0H                                                  0447
*     IF WORKCHAR=' ' DATA2=', ' THEN/* END OF A RECORD              */
         CLI   WORKCHAR(SCANPTR),C' '                              0447
         BE    @RT00447                                            0447
         CLC   DATA2(2,SCANPTR),@CC01560                           0447
         BNE   @RF00447                                            0447
@RT00447 DS    0H                                                  0448
*       DO;                         /* YES                           */
*         GOSW2='0'B;               /* END RECORD LOOP               */
         NI    GOSW2,B'11101111'                                   0449
*         RETURN;                   /* EXIT                          */
@EL00006 DS    0H                                                  0450
@EF00006 DS    0H                                                  0450
@ER00006 L     @14,12(,@13)                                        0450
         BR    @14                                                 0450
*       END;                                                       0451
*     IF WORKCHAR=',' THEN          /* END OF A PARM                 */
@RF00447 CLI   WORKCHAR(SCANPTR),C','                              0452
         BNE   @RF00452                                            0452
*       DO;                         /* YES                           */
*         SCANPTR=SCANPTR+1;        /* POINT PAST ','                */
         AL    SCANPTR,@CF00057                                    0454
*         RETURN;                   /* EXIT                          */
         B     @EL00006                                            0455
*       END;                                                       0456
*     DO WHILE(WORKCHAR^=' '&WORKCHAR^=',');                       0457
@RF00452 B     @DE00457                                            0457
@DL00457 DS    0H                                                  0458
*       SCANPTR=SCANPTR+1;          /* SKIP TO NEXT PARM             */
         AL    SCANPTR,@CF00057                                    0458
*     END;                                                         0459
@DE00457 CLI   WORKCHAR(SCANPTR),C' '                              0459
         BE    @DC00457                                            0459
         CLI   WORKCHAR(SCANPTR),C','                              0459
         BNE   @DL00457                                            0459
@DC00457 DS    0H                                                  0460
*   END;                                                           0460
@DE00446 TM    GOSW2,B'00010000'                                   0460
         BO    @DL00446                                            0460
*   END MBRERROR;                                                  0461
         B     @EL00006                                            0461
         EJECT
*OVERLAY:                                                          0462
*   PROC OPTIONS(SAVE(14));                                        0462
OVERLAY  ST    @14,12(,@13)                                        0462
*                                                                  0463
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE BUILDS A TABLE OF PARM VALUES THAT MAY BE     */
*/*    USED TO UPDATE THE TCAS TABLE.  NOTE THAT THE TABLE 'DEFAULTS'*/
*/*    IS DEPENDENT ON THE ORDER OF THE KEYWORD NAMES AS SET UP IN   */
*/*    'VERIMBR'.                                                    */
*/*                                                                  */
*/*    THE PROCESS OF UPDATTING THE TCAS TABLE WITH NEW VALUES IS    */
*/*    DONE IN THE FOLLOWING MANNER:                                 */
*/*                                                                  */
*/*    -   INITIALIZE THE BUFFER SAVE AREA (DONE IN 'SCANPARM').     */
*/*    -   MOVE VALIDATED PARAMETERS INTO THEIR PROPER SPOT IN THE   */
*/*        BUFFER SAVE AREA (DONE IN 'SCANPARM').                    */
*/*    -   INITIALIZE THE MEMBER SAVE AREA (DONE IN 'READMBR').      */
*/*    -   MOVE VALIDATED PARAMETERS INTO THEIR PROPER SPOT IN THE   */
*/*        MEMBER SAVE AREA (DONE IN 'READMBR').                     */
*/*    -   INITIALIZE THE MERGE AREA.  IF NO PARMLIB WAS READ, THE   */
*/*        AREA IS NULL'ED OUT, OTHERWISE, HARD-CODED DEFAULT VALUES */
*/*        ARE MOVED INTO THE MERGE AREA.  NOTE THAT THE MERGE AREA  */
*/*        HAS THE SAME ORGANIZATION AS THE MEMBER SAVE AREA.        */
*/*    -   SCAN THE MEMBER SAVE AREA.  IF A VALIDATED PARAMETER IS   */
*/*        ENCOUNTERED, MOVE IT TO ITS PROPER SPOT IN THE MERGE AREA.*/
*/*    -   SCAN THE BUFFER SAVE AREA.  IF A VALIDATED PARAMETER IS   */
*/*        ENCOUNTERED, MOVE IT TO ITS PROPER SPOT IN THE MERGE AREA.*/
*/*        NOTE THAT THE ABOVE 3 STATEMENTS IMPLY THAT OPERATOR      */
*/*        ENTERED PARAMETERS OVERRIDE PARMLIB MEMBER PARAMETERS,    */
*/*        WHICH IN TURN OVERRIDE HARD-CODED DEFAULTS.               */
*/*    -   SCAN THE MERGE AREA.  IF A VALIDATED PARAMETER IS         */
*/*        ENCOUNTERED, MOVE IT TO ITS PROPER SPOT IN THE TCAS       */
*/*        TABLE (DONE IN 'TCASUPDT').                               */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0463
*   IF MLPMRLIB='0'B THEN           /* PARMLIB MEMBER READ           */
         TM    MLPMRLIB(MLPMPTR),B'00000100'                       0463
         BNZ   @RF00463                                            0463
*     MERGAREA=SAVES2;              /* NO                            */
         MVC   MERGAREA(208),SAVES2                                0464
*   ELSE                                                           0465
*     DO;                           /* YES                           */
         B     @RC00463                                            0465
@RF00463 DS    0H                                                  0466
*       MERGAREA=DEFAULTS;          /* SETUP DEFAULT VALUES          */
         MVI   MERGAREA+80,C' '                                    0466
         MVC   MERGAREA+81(127),MERGAREA+80                        0466
         MVC   MERGAREA(88),DEFAULTS                       ZP60007 0466
*       SAVEPTR=ADDR(SAVEMBR);      /* INITIALIZE PTR                */
         LA    SAVEPTR,SAVEMBR                                     0467
*       J=(LENGTH(SAVEMBR))/8;      /* NUMBER OF PARMS               */
         LA    J,26                                                0468
*       DO I=1 TO J;                /* MOVE IN MBR PARMS             */
         LA    I,1                                                 0469
         B     @DE00469                                            0469
@DL00469 DS    0H                                                  0470
*         IF SAVECHAR^=HEXFF&SAVECHAR^=HEXBC THEN                  0470
         CLI   SAVECHAR(SAVEPTR),X'FF'                             0470
         BE    @RF00470                                            0470
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0470
         BE    @RF00470                                            0470
*           MERGE(I)=SAVAREA;                                      0471
         LR    @05,I                                               0471
         SLA   @05,3                                               0471
         LA    @03,MERGE-8(@05)                                    0471
         MVC   0(8,@03),SAVAREA(SAVEPTR)                           0471
*         SAVEPTR=SAVEPTR+8;                                       0472
@RF00470 AL    SAVEPTR,@CF00034                                    0472
*       END;                                                       0473
         AL    I,@CF00057                                          0473
@DE00469 CR    I,J                                                 0473
         BNH   @DL00469                                            0473
*     END;                                                         0474
*   IF MLPMUZ='1'B MLPMUNZ='1'B THEN/* OPERATOR ENTER USERMAX=       */
@RC00463 TM    MLPMUZ(MLPMPTR),B'00011000'                         0475
         BZ    @RF00475                                            0475
*     DO;                           /* YES                           */
*       KEYWDNM='USERMAX ';         /* KEYWORD NAME WANTED           */
         MVC   KEYWDNM(8),@CC00350                                 0477
*       TABLEPTR=ADDR(VERIBUFR);    /* KEYWORD TABLE                 */
         LA    TABLEPTR,VERIBUFR                                   0478
*       DO WHILE(TBLNAME^=KEYWDNM); /* FIND                          */
         B     @DE00479                                            0479
@DL00479 DS    0H                                                  0480
*         TABLEPTR=TABLEPTR+20;     /* PROPER                        */
         AL    TABLEPTR,@CF00144                                   0480
*       END;                        /* ENTRY                         */
@DE00479 CLC   TBLNAME(8,TABLEPTR),KEYWDNM                         0481
         BNE   @DL00479                                            0481
*       SAVEPTR=ADDR(SAVEBUFR)+8*(TBLDISP-1);/* USERMAX SAVE AREA    */
         LA    SAVEPTR,SAVEBUFR                                    0482
         LH    @06,TBLDISP(,TABLEPTR)                              0482
         BCTR  @06,0                                               0482
         SLA   @06,3                                               0482
         ALR   SAVEPTR,@06                                         0482
*       TABLEPTR=ADDR(VERIMBR);     /* KEYWORD TABLE                 */
         LA    TABLEPTR,VERIMBR                                    0483
*       DO WHILE(TBLNAME^=KEYWDNM); /* FIND                          */
         B     @DE00484                                            0484
@DL00484 DS    0H                                                  0485
*         TABLEPTR=TABLEPTR+20;     /* PROPER                        */
         AL    TABLEPTR,@CF00144                                   0485
*       END;                        /* ENTRY                         */
@DE00484 CLC   TBLNAME(8,TABLEPTR),KEYWDNM                         0486
         BNE   @DL00484                                            0486
*       MERGE(TBLDISP)=SAVAREA;     /* MOVE IN OPERATOR'S VALUE      */
         LH    @06,TBLDISP(,TABLEPTR)                              0487
         SLA   @06,3                                               0487
         LA    @04,MERGE-8(@06)                                    0487
         MVC   0(8,@04),SAVAREA(SAVEPTR)                           0487
*     END;                                                         0488
*   END OVERLAY;                                                   0489
@EL00007 DS    0H                                                  0489
@EF00007 DS    0H                                                  0489
@ER00007 L     @14,12(,@13)                                        0489
         BR    @14                                                 0489
         EJECT
*TCASUPDT:                                                         0490
*   PROC OPTIONS(SAVE(14));                                        0490
TCASUPDT ST    @14,12(,@13)                                        0490
*                                                                  0491
*/*  *****************************************************************/
*/*                                                                  */
*/*    THE PURPOSE OF THIS SUBROUTINE IS TO UPDATE THE TCAS TABLE    */
*/*    WITH ANY VALUES THAT HAVE CHANGED.  NOTE THAT THE CODING IS   */
*/*    DEPENDENT ON THE ORDER OF THE KEYWORD NAMES AS SET UP IN      */
*/*    'VERIMBR'.                                                    */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0491
*   IF MLPMUPTB='0'B THEN           /* UPDATE WANTED                 */
         TM    MLPMUPTB(MLPMPTR),B'00001000'                       0491
         BZ    @RT00491                                            0491
*     RETURN;                       /* NO - EXIT                     */
*   SAVEPTR=ADDR(MERGAREA);         /* SET UP PTR                    */
         LA    SAVEPTR,MERGAREA                                    0493
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE 'USERMAX'              */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0494
         BE    @RF00494                                            0494
*     DO;                           /* YES                           */
*LOOP1:                             /* COMPARE AND SWAP LOOP         */
*       WRKPRMF1=TCASUSER;          /* CURRENT VALUE                 */
LOOP1    L     @06,TCASTPTR(,TWAPTR)                               0496
         L     @03,TCASUSER(,@06)                                  0496
         ST    @03,WRKPRMF1                                        0496
*       WRKPRMF2=WRKPRMF1;          /* VALUE TO WORK WITH            */
         ST    @03,WRKPRMF2                                        0497
*       WRKPRMH=SAVAREAH;           /* NEW 'USERMAX' VALUE           */
         LH    @15,SAVAREAH(,SAVEPTR)                              0498
         STH   @15,WRKPRMH                                         0498
*       CS(WRKPRMF1,WRKPRMF2,TCASUSER);/* 'USERMAX' STILL OK         */
         L     @15,WRKPRMF2                                        0499
         CS    @03,@15,TCASUSER(@06)                               0499
         BZ    @BC00499                                            0499
         ST    @03,WRKPRMF1                                        0499
@BC00499 DS    0H                                                  0500
*       BC(7,LOOP1);                /* NO - TRY AGAIN                */
         BC    7,LOOP1                                             0500
*     END;                                                         0501
*   SAVEPTR=SAVEPTR+8;              /* POINT TO NEXT ENTRY           */
@RF00494 AL    SAVEPTR,@CF00034                                    0502
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE 'ACBPW'                */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0503
         BE    @RF00503                                            0503
*     TCASACBP=SAVAREA;             /* YES                           */
         L     @06,TCASTPTR(,TWAPTR)                               0504
         MVC   TCASACBP(8,@06),SAVAREA(SAVEPTR)                    0504
*   SAVEPTR=SAVEPTR+8;              /* POINT TO NEXT ENTRY           */
@RF00503 AL    SAVEPTR,@CF00034                                    0505
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE 'RECONLIM'             */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0506
         BE    @RF00506                                            0506
*     TCASRCON=SAVAREAH;            /* YES                           */
         L     @06,TCASTPTR(,TWAPTR)                               0507
         LH    @03,SAVAREAH(,SAVEPTR)                              0507
         STH   @03,TCASRCON(,@06)                                  0507
*   SAVEPTR=SAVEPTR+8;              /* POINT TO NEXT ENTRY           */
@RF00506 AL    SAVEPTR,@CF00034                                    0508
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE 'BUFRSIZE'             */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0509
         BE    @RF00509                                            0509
*     TCASCLSZ=SAVAREAH;            /* YES                           */
         L     @06,TCASTPTR(,TWAPTR)                               0510
         LH    @03,SAVAREAH(,SAVEPTR)                              0510
         STH   @03,TCASCLSZ(,@06)                                  0510
*   SAVEPTR=SAVEPTR+8;              /* POINT TO NEXT ENTRY           */
@RF00509 AL    SAVEPTR,@CF00034                                    0511
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE 'HIBFREXT'             */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0512
         BE    @RF00512                                            0512
*     TCASHBUF=SAVAREAF;            /* YES                           */
         L     @06,TCASTPTR(,TWAPTR)                               0513
         L     @03,SAVAREAF(,SAVEPTR)                              0513
         ST    @03,TCASHBUF(,@06)                                  0513
*   SAVEPTR=SAVEPTR+8;              /* POINT TO NEXT ENTRY           */
@RF00512 AL    SAVEPTR,@CF00034                                    0514
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE 'LOBFREXT'             */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0515
         BE    @RF00515                                            0515
*     TCASLBUF=SAVAREAF;            /* YES                           */
         L     @06,TCASTPTR(,TWAPTR)                               0516
         L     @03,SAVAREAF(,SAVEPTR)                              0516
         ST    @03,TCASLBUF(,@06)                                  0516
*   SAVEPTR=SAVEPTR+8;              /* POINT TO NEXT ENTRY           */
@RF00515 AL    SAVEPTR,@CF00034                                    0517
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE 'SCRSIZE'              */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0518
         BE    @RF00518                                            0518
*     TCASCRSZ=SAVAREAH;            /* YES                           */
         L     @06,TCASTPTR(,TWAPTR)                               0519
         LH    @03,SAVAREAH(,SAVEPTR)                              0519
         STH   @03,TCASCRSZ(,@06)                                  0519
*   SAVEPTR=SAVEPTR+8;              /* POINT TO NEXT ENTRY           */
@RF00518 AL    SAVEPTR,@CF00034                                    0520
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE 'CHNLEN'               */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0521
         BE    @RF00521                                            0521
*     TCASCHNL=SAVAREAC;            /* YES                           */
         L     @06,TCASTPTR(,TWAPTR)                               0522
         IC    @03,SAVAREAC(,SAVEPTR)                              0522
         STC   @03,TCASCHNL(,@06)                                  0522
*   SAVEPTR=SAVEPTR+8;              /* PT TO NEXT ENTY       @G58AK3A*/
@RF00521 AL    SAVEPTR,@CF00034                                    0523
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE 'MODE'         @G58AK3A*/
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0524
         BE    @RF00524                                            0524
*     IF SAVAREA=BREAK THEN         /*                       @G58AK3A*/
         CLC   SAVAREA(8,SAVEPTR),BREAK                            0525
         BNE   @RF00525                                            0525
*       TCASBKMD='1'B;              /* YES                   @G58AK3A*/
         L     @06,TCASTPTR(,TWAPTR)                               0526
         OI    TCASBKMD(@06),B'10000000'                           0526
*     ELSE                                                         0527
*       ;                           /*                       @G58AK3A*/
@RF00525 DS    0H                                                  0528
*   ELSE                                                           0528
*     ;                             /*                       @G58AK3A*/
@RF00524 DS    0H                                                  0529
*   SAVEPTR=SAVEPTR+8;              /* PT TO NEXT ENTY       @G58AK3A*/
         AL    SAVEPTR,@CF00034                                    0529
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE 'MODESW'       @G58AK3A*/
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0530
         BE    @RF00530                                            0530
*     IF SAVAREA=YES THEN           /*                       @G58AK3A*/
         CLC   SAVAREA(8,SAVEPTR),YES                              0531
         BNE   @RF00531                                            0531
*       TCASMDSW='1'B;              /* YES                   @G58AK3A*/
         L     @06,TCASTPTR(,TWAPTR)                               0532
         OI    TCASMDSW(@06),B'01000000'                           0532
*     ELSE                                                         0533
*       ;                           /*                       @G58AK3A*/
@RF00531 DS    0H                                                  0534
*   ELSE                                                           0534
*     ;                             /*                       @G58AK3A*/
@RF00530 DS    0H                                                  0535
*   SAVEPTR=SAVEPTR+8;              /* PT TO NEXT ENTY       @ZM20856*/
         AL    SAVEPTR,@CF00034                                    0535
*                                      CHANGE 'CONFTXT'         ZP60007
         CLC   SAVAREA(8,SAVEPTR),NO  WAS NO SPECIFIED?         ZP60007
         BE    CFTXOKAY               YES, LEAVE FLAG OFF       ZP60007
         L     @06,TCASTPTR(,TWAPTR)  POINT TO THE TCAS TABLE   ZP60007
         OI    TCASCONF(@06),X'01'    YES, SET FLAG ON          ZP60007
CFTXOKAY AL    SAVEPTR,@CF00034       POINT TO NEXT ENTRY       ZP60007
*   IF SAVECHAR^=HEXBC THEN         /* CHANGE RCFBDUMP       @ZM20856*/
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0536
         BE    @RF00536                                            0536
*     DO;                           /* UPDATE RC TABLE       @ZM20856*/
*       DUMPPTR=(TCASDUMP+3);       /* INCREMENT PAST COUNT AND    0538
*                                      RESERVED FIELDS       @ZM20856*/
         L     @06,TCASTPTR(,TWAPTR)                               0538
         LA    @03,3                                               0538
         AL    @03,TCASDUMP(,@06)                                  0538
         ST    @03,DUMPPTR                                         0538
*       RFY                                                        0539
*         DMPCD BASED(DUMPPTR);     /* RESPECIFY PAST COUNT AND    0539
*                                      RESERVED              @ZM20856*/
*       DO I=1 TO DUMPCNT;          /*                       @ZM20856*/
         LA    I,1                                                 0540
         B     @DE00540                                            0540
@DL00540 DS    0H                                                  0541
*         DMPCD(1:3)=SAVAREAI;      /* UPDATE CODE TABL      @ZM20856*/
         L     @03,DUMPPTR                                         0541
         MVC   DMPCD(3,@03),SAVAREAI(SAVEPTR)                      0541
*         DUMPPTR=DUMPPTR+3;        /* NEXT TABLE ENTY       @ZM20856*/
         AL    @03,@CF00118                                        0542
         ST    @03,DUMPPTR                                         0542
*         SAVEPTR=SAVEPTR+8;        /* NEXT SAVE ENTRY       @ZM20856*/
         AL    SAVEPTR,@CF00034                                    0543
*       END;                        /* END PROCESS           @ZM20856*/
         AL    I,@CF00057                                          0544
@DE00540 CH    I,DUMPCNT                                           0544
         BNH   @DL00540                                            0544
*       RFY                                                        0545
*         DMPCD BASED(TCASDUMP);    /* RFY TO TOP TABL       @ZM20856*/
*       DMPRCCT=DUMPCNT;            /* TOTAL COUNT OF KEYWORD      0546
*                                      'RCFBDUMP' SPECFIED.NOTE:   0546
*                                      DUMPCNT WAS UPDATED IN PROC 0546
*                                      SPLITPRM              @ZM20856*/
         L     @06,TCASTPTR(,TWAPTR)                               0546
         L     @06,TCASDUMP(,@06)                                  0546
         LH    @15,DUMPCNT                                         0546
         STC   @15,DMPRCCT(,@06)                                   0546
*     END;                          /* END 'RCFBDUMP'        @ZM20856
*                                      UPDATING              @ZM20856*/
*   ELSE                                                           0548
*     ;                                                            0548
@RF00536 DS    0H                                                  0549
*   END TCASUPDT;                                                  0549
@EL00008 DS    0H                                                  0549
@EF00008 DS    0H                                                  0549
@ER00008 L     @14,12(,@13)                                        0549
         BR    @14                                                 0549
         EJECT
*WRITEOUT:                                                         0550
*   PROC OPTIONS(SAVE(14));                                        0550
WRITEOUT ST    @14,@SA00009                                        0550
*                                                                  0551
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE PRINTS OUT ALL OF THE PARMLIB VALUES FROM THE */
*/*    TCAS TABLE.  NOTE THAT THE CODING IS DEPENDENT ON THE ORDER   */
*/*    OF THE KEYWORD NAMES AS SET UP IN 'VERIMBR':                  */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0551
*   IF PRINTSW='0'B THEN            /* PRINTOUT WANTED               */
         TM    PRINTSW,B'00001000'                                 0551
         BZ    @RT00551                                            0551
*     RETURN;                       /* NO - EXIT                     */
*   PRNTCC='-';                     /* SKIP                          */
         MVI   PRNTCC,C'-'                                         0553
*   PRNTDATA='';                    /* TWO                           */
         MVI   PRNTDATA,C' '                                       0554
         MVC   PRNTDATA+1(131),PRNTDATA                            0554
*   CALL PRINTIT;                   /* LINES                         */
         BAL   @14,PRINTIT                                         0555
*   PRNTDATA='CURRENT TCAS PARAMETERS:';/* SUB-HEADER LINE           */
         MVI   PRNTDATA+24,C' '                                    0556
         MVC   PRNTDATA+25(107),PRNTDATA+24                        0556
         MVC   PRNTDATA(24),@CC01585                               0556
*   CALL PRINTIT;                   /* PRINT THE SUB-HEADER          */
         BAL   @14,PRINTIT                                         0557
*   PRNTLINE='';                    /* CLEAR THE LINE                */
         MVI   PRNTLINE,C' '                                       0558
         MVC   PRNTLINE+1(132),PRNTLINE                            0558
*   TABLEPTR=ADDR(VERIMBR);         /* SETUP POINTER                 */
         LA    TABLEPTR,VERIMBR                                    0559
*   WORKPARM=''B;                   /* PRINTOUT                      */
         XC    WORKPARM(8),WORKPARM                                0560
*   WRKPRMH=TCASUMAX;               /* USERMAX=                      */
         L     @04,TCASTPTR(,TWAPTR)                               0561
         LH    @04,TCASUMAX(,@04)                                  0561
         STH   @04,WRKPRMH                                         0561
*   CALL EDITIT;                    /* VALUE                         */
         BAL   @14,EDITIT                                          0562
*   WORKPARM=TCASACBP;              /* PRINTOUT                      */
         L     @04,TCASTPTR(,TWAPTR)                               0563
         MVC   WORKPARM(8),TCASACBP(@04)                           0563
*   CALL EDITIT;                    /* ACBPW= VALUE                  */
         BAL   @14,EDITIT                                          0564
*   WORKPARM=''B;                   /* PRINTOUT                      */
         XC    WORKPARM(8),WORKPARM                                0565
*   WRKPRMH=TCASRCON;               /* RECONLIM=                     */
         L     @04,TCASTPTR(,TWAPTR)                               0566
         LH    @04,TCASRCON(,@04)                                  0566
         STH   @04,WRKPRMH                                         0566
*   CALL EDITIT;                    /* VALUE                         */
         BAL   @14,EDITIT                                          0567
*   WORKPARM=''B;                   /* PRINTOUT                      */
         XC    WORKPARM(8),WORKPARM                                0568
*   WRKPRMH=TCASCLSZ;               /* BUFRSIZE=                     */
         L     @04,TCASTPTR(,TWAPTR)                               0569
         LH    @04,TCASCLSZ(,@04)                                  0569
         STH   @04,WRKPRMH                                         0569
*   CALL EDITIT;                    /* VALUE                         */
         BAL   @14,EDITIT                                          0570
*   WORKPARM=''B;                   /* PRINTOUT                      */
         XC    WORKPARM(8),WORKPARM                                0571
*   WRKPRMF2=TCASHBUF;              /* HIBFREXT=                     */
         L     @04,TCASTPTR(,TWAPTR)                               0572
         L     @04,TCASHBUF(,@04)                                  0572
         ST    @04,WRKPRMF2                                        0572
*   CALL EDITIT;                    /* VALUE                         */
         BAL   @14,EDITIT                                          0573
*   WORKPARM=''B;                   /* PRINTOUT                      */
         XC    WORKPARM(8),WORKPARM                                0574
*   WRKPRMF2=TCASLBUF;              /* LOBFREXT=                     */
         L     @04,TCASTPTR(,TWAPTR)                               0575
         L     @04,TCASLBUF(,@04)                                  0575
         ST    @04,WRKPRMF2                                        0575
*   CALL EDITIT;                    /* VALUE                         */
         BAL   @14,EDITIT                                          0576
*   WORKPARM=''B;                   /* PRINTOUT                      */
         XC    WORKPARM(8),WORKPARM                                0577
*   WRKPRMH=TCASCRSZ;               /* SCRSIZE=                      */
         L     @04,TCASTPTR(,TWAPTR)                               0578
         LH    @04,TCASCRSZ(,@04)                                  0578
         STH   @04,WRKPRMH                                         0578
*   CALL EDITIT;                    /* VALUE                         */
         BAL   @14,EDITIT                                          0579
*   WORKPARM=''B;                   /* PRINTOUT                      */
         XC    WORKPARM(8),WORKPARM                                0580
*   WRKPRMC=TCASCHNL;               /* CHNLEN=                       */
         L     @04,TCASTPTR(,TWAPTR)                               0581
         IC    @02,TCASCHNL(,@04)                                  0581
         STC   @02,WRKPRMC                                         0581
*   CALL EDITIT;                    /* VALUE                         */
         BAL   @14,EDITIT                                          0582
*   IF TCASBKMD='1'B THEN           /* PRINTOUT              @G58AK3A*/
         L     @06,TCASTPTR(,TWAPTR)                               0583
         TM    TCASBKMD(@06),B'10000000'                           0583
         BNO   @RF00583                                            0583
*     WORKPARM=BREAK;               /* MODE=                 @G58AK3A*/
         MVC   WORKPARM(8),BREAK                                   0584
*   ELSE                            /* VALUE                 @G58AK3A*/
*     WORKPARM=NOBREAK;             /*                       @G58AK3A*/
         B     @RC00583                                            0585
@RF00583 MVC   WORKPARM(8),NOBREAK                                 0585
*   CALL EDITIT;                    /*                       @G58AK3A*/
@RC00583 BAL   @14,EDITIT                                          0586
*   IF TCASMDSW='1'B THEN           /* PRINTOUT              @G58AK3A*/
         L     @06,TCASTPTR(,TWAPTR)                               0587
         TM    TCASMDSW(@06),B'01000000'                           0587
         BNO   @RF00587                                            0587
*     WORKPARM=YES;                 /* MODESW=               @G58AK3A*/
         MVC   WORKPARM(8),YES                                     0588
*   ELSE                            /* VALUE                 @G58AK3A*/
*     WORKPARM=NO;                  /*                       @G58AK3A*/
         B     @RC00587                                            0589
@RF00587 MVC   WORKPARM(8),NO                                      0589
*   CALL EDITIT;                    /*                       @G58AK3A*/
@RC00587 BAL   @14,EDITIT                                          0590
*   IF TCASCONF='1'B THEN           /*                       ZP60007 */
         L     @06,TCASTPTR(,TWAPTR)                         ZP60007
         TM    TCASCONF(@06),B'00000001'                     ZP60007
         BNO   CONFOFF                                       ZP60007
*     WORKPARM=YES;                 /* CONFTXT=              ZP60007 */
         MVC   WORKPARM(8),YES                               ZP60007
*   ELSE                            /* VALUE                 ZP60007 */
*     WORKPARM=NO;                  /*                       ZP60007 */
         B     SHOWCONF                                      ZP60007
CONFOFF  MVC   WORKPARM(8),NO                                ZP60007
*   CALL EDITIT;                    /*                       ZP60007 */
SHOWCONF BAL   @14,EDITIT                                    ZP60007
*   DUMPPTR=(TCASDUMP+3);           /* SKIP TO CODES         @ZM20856*/
         L     @04,TCASTPTR(,TWAPTR)                               0591
         LA    @15,3                                               0591
         AL    @15,TCASDUMP(,@04)                                  0591
         ST    @15,DUMPPTR                                         0591
*   DO N=1 TO DUMPCNT;              /* EDIT PARAMETER FOR EACH VALID
*                                      'RCFBDUMP' KEYWORD SPECIFIED
*                                                            @ZM20856*/
         LA    @04,1                                               0592
         B     @DE00592                                            0592
@DL00592 DS    0H                                                  0593
*     CALL EDITIT;                  /* EDIT KEYWORDS         @ZM20856*/
         BAL   @14,EDITIT                                          0593
*     DUMPPTR=DUMPPTR+3;            /* NEXT ENTRY            @ZM20856*/
         LA    @04,3                                               0594
         AL    @04,DUMPPTR                                         0594
         ST    @04,DUMPPTR                                         0594
*   END;                            /*                       @ZM20856*/
         LA    @04,1                                               0595
         AH    @04,N                                               0595
@DE00592 STH   @04,N                                               0595
         CH    @04,DUMPCNT                                         0595
         BNH   @DL00592                                            0595
*   EDFIELD(1)=HEXFF;               /* CAUSE LAST LINE               */
         MVI   EDFIELD,X'FF'                                       0596
*   CALL NSRTNPRT;                  /* TO BE PRINTED                 */
         BAL   @14,NSRTNPRT                                        0597
*   GEN(CLOSE PRINTOUT)                                            0598
*   REFS(R0,R1,R14,R15,PRINTOUT);                                  0598
         CLOSE PRINTOUT
*   END WRITEOUT;                                                  0599
@EL00009 DS    0H                                                  0599
@EF00009 DS    0H                                                  0599
@ER00009 L     @14,@SA00009                                        0599
         BR    @14                                                 0599
         EJECT
*EDITIT:                                                           0600
*   PROC OPTIONS(SAVE(14));                                        0600
EDITIT   ST    @14,@SA00010                                        0600
*                                                                  0601
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE TAKES A KEYWORD NAME, ITS VALUE, PLACES THEM  */
*/*    INTO AN EDITTED FORMAT, AND PRINTS THEM.  UPON ENTRY,         */
*/*    'TABLEPTR' POINTS AT THE TABLE ENTRY, AND 'WORKPARM' CONTAINS */
*/*    THE PARAMETER VALUE, WITH THE EXCEPTION OF THE RCFBDUMP       */
*/*    KEYWORD, WHICH SETS UP 'WORKPARM' HERE.                       */
*/*  *****************************************************************/
*                                                                  0601
*   EDITFLD='';                     /* CLEAR WORK FIELD              */
         MVI   EDITFLD,C' '                                        0601
         MVC   EDITFLD+1(19),EDITFLD                               0601
*   SCANPTR=TABLEPTR;               /* SETUP PTR                     */
         LR    SCANPTR,TABLEPTR                                    0602
*   DO I=1 TO 8 WHILE(WORKCHAR^=' ');/* MOVE IN KEYWORD NAME         */
         LA    I,1                                                 0603
@DL00603 CLI   WORKCHAR(SCANPTR),C' '                              0603
         BE    @DC00603                                            0603
*     EDFIELD(I)=WORKCHAR;                                         0604
         LA    @04,EDFIELD-1(I)                                    0604
         MVC   0(1,@04),WORKCHAR(SCANPTR)                          0604
*     SCANPTR=SCANPTR+1;                                           0605
         AL    SCANPTR,@CF00057                                    0605
*   END;                                                           0606
         AL    I,@CF00057                                          0606
         C     I,@CF00034                                          0606
         BNH   @DL00603                                            0606
@DC00603 DS    0H                                                  0607
*   EDFIELD(I)='=';                 /* ADD '=' SIGN                  */
         LA    @04,EDFIELD-1(I)                                    0607
         MVI   0(@04),C'='                                         0607
*   I=I+1;                          /* POINT PAST '=' SIGN           */
         LA    @04,1                                               0608
         ALR   I,@04                                               0608
*   IF TBLNAME=RCFBDUMP THEN        /* 'RCFBDUMP'            @ZM20856*/
         CLC   TBLNAME(8,TABLEPTR),RCFBDUMP                        0609
         BNE   @RF00609                                            0609
*     DO;                           /* PROCESS PARM          @ZM20856*/
*       RFY                                                        0611
*         DMPCD BASED(DUMPPTR);                                    0611
*       WRKPRMF=''B;                /* ZERO WORK FIELD       @ZM20856*/
         XC    WRKPRMF(8),WRKPRMF                                  0612
*       WORKPARM(8:8)=DMPCD(1:1);   /* EXTRACT RC            @ZM20856*/
         L     @02,DUMPPTR                                         0613
         MVC   WORKPARM+7(1),DMPCD(@02)                            0613
*       TEMPAREA(8)=WORKPARM(8);    /* SAVE RC               @ZM20856*/
         MVC   TEMPAREA+7(1),WORKPARM+7                            0614
*       SLDL(TEMPAREA,4);           /* SHIFT RC TO PROPER POSITION 0615
*                                                            @ZM21059*/
         LM    @00,@01,TEMPAREA                                    0615
         SLDL  @00,4                                               0615
         STM   @00,@01,TEMPAREA                                    0615
*       WORKPARM(8:8)=WORKPARM(8:8)&'0F'X;/* ELIMINATE ZONED PORTION
*                                      OF BYTE RC            @ZM20856*/
         NI    WORKPARM+7,X'0F'                                    0616
*       TEMPAREA(7:8)=TEMPAREA(7:8)&'0F00'X;/* ELIMINATE DIGIT     0617
*                                      PORTION OF BYTE RC    @ZM21059*/
         NC    TEMPAREA+6(2),@CB01595                              0617
*       WRKPRMF=WRKPRMF TEMPAREA;   /* MERGE BYTES           @ZM20856*/
         OC    WRKPRMF(8),TEMPAREA                                 0618
*       TR(WORKPARM(7:8),TABDEC);   /* TO PRINTABLES         @ZM20856*/
         TR    WORKPARM+6(2),TABDEC                                0619
*       EDITFLD(I:(I+1))=WORKPARM(7:8);/* TO EDIT FIELD      @ZM21059*/
         LA    @01,EDITFLD-1(I)                                    0620
         MVC   0(2,@01),WORKPARM+6                                 0620
*       I=I+2;                      /* UPDATE 2 BYTES        @ZM20856*/
         LA    @15,2                                               0621
         ALR   I,@15                                               0621
*       WRKPRMF=''B;                /* ZERO WORK FIELD       @ZM20856*/
         XC    WRKPRMF(8),WRKPRMF                                  0622
*       WORKPARM(8:8)=DMPCD(2:2);   /* EXTRACT FB            @ZM20856*/
         MVC   WORKPARM+7(1),DMPCD+1(@02)                          0623
*       TEMPAREA(8)=WORKPARM(8);    /* SAVE FB               @ZM20856*/
         MVC   TEMPAREA+7(1),WORKPARM+7                            0624
*       SLDL(TEMPAREA,4);           /* SHIFT FB TO PROPER POSITION 0625
*                                                            @ZM21059*/
         LM    @00,@01,TEMPAREA                                    0625
         SLDL  @00,4                                               0625
         STM   @00,@01,TEMPAREA                                    0625
*       WORKPARM(8:8)=WORKPARM(8:8)&'0F'X;/* ELIMINATE ZONED PORTION
*                                      OF BYTE FB            @ZM20856*/
         NI    WORKPARM+7,X'0F'                                    0626
*       TEMPAREA(7:8)=TEMPAREA(7:8)&'0F00'X;/* ELIMINATE DIGIT     0627
*                                      PORTION OF BYTE FB    @ZM21059*/
         NC    TEMPAREA+6(2),@CB01595                              0627
*       WRKPRMF=WRKPRMF TEMPAREA;   /* MERGE BYTES           @ZM20856*/
         OC    WRKPRMF(8),TEMPAREA                                 0628
*       TR(WORKPARM(7:8),TABDEC);   /* TO PRINTABLES         @ZM20856*/
         TR    WORKPARM+6(2),TABDEC                                0629
*       EDITFLD(I:(I+1))=WORKPARM(7:8);/* TO EDIT FIELD      @ZM21059*/
         LA    @01,EDITFLD-1(I)                                    0630
         MVC   0(2,@01),WORKPARM+6                                 0630
*       I=I+2;                      /* UPDATE 2 BYTES        @ZM20856*/
         ALR   I,@15                                               0631
*       WRKPRMF=''B;                /* ZERO WORK FIELD       @ZM20856*/
         XC    WRKPRMF(8),WRKPRMF                                  0632
*       WORKPARM(8:8)=DMPCD(3:3);   /* EXTRACT SDUMP         @ZM20856*/
         MVC   WORKPARM+7(1),DMPCD+2(@02)                          0633
*       CVD(WRKPRMF2,TEMPAREA);     /* TO DECIMAL            @ZM20856*/
         L     @02,WRKPRMF2                                        0634
         CVD   @02,TEMPAREA                                        0634
*       UNPK(WORKPARM,TEMPAREA(8)); /* UNPACK                @ZM20856*/
         UNPK  WORKPARM(8),TEMPAREA+7(1)                           0635
*       WORKPARM(8)=WORKPARM(8) 'F0'X;/* REMOVE SIGN         @ZM20856*/
         OI    WORKPARM+7,X'F0'                                    0636
*       EDFIELD(I)=WORKPARM(8);     /* TO EDIT FIELD         @ZM20856*/
         LA    @02,EDFIELD-1(I)                                    0637
         MVC   0(1,@02),WORKPARM+7                                 0637
*       I=I+1;                      /* UPDATE 1 BYTES        @ZM20856*/
         ALR   I,@04                                               0638
*       RFY                                                        0639
*         DMPCD BASED(TCASDUMP);    /*                       @ZM20856*/
*     END;                          /* END RCFBDUMP          @ZM20856*/
*   ELSE                                                           0641
*     DO;                           /* OTHER KEYWORDS        @ZM20856*/
         B     @RC00609                                            0641
@RF00609 DS    0H                                                  0642
*       IF TBLBINRY='1'B THEN       /* PARM VALUE A NUMBER           */
         TM    TBLBINRY(TABLEPTR),B'00100000'                      0642
         BNO   @RF00642                                            0642
*         CALL PARMMOV;             /* PROCESS ALL OTHER KEYWORDS  0643
*                                                            @ZM20856*/
         BAL   @14,PARMMOV                                         0643
*       ELSE                                                       0644
*         DO;                       /* NO - ALPHANUMERIC             */
         B     @RC00642                                            0644
@RF00642 DS    0H                                                  0645
*           SCANPTR=ADDR(WORKPARM); /* SETUP PTR                     */
         LA    SCANPTR,WORKPARM                                    0645
*           DO J=1 TO 8 WHILE(WORKCHAR^=' ');/* MOVE IN VALUE        */
         LA    J,1                                                 0646
@DL00646 CLI   WORKCHAR(SCANPTR),C' '                              0646
         BE    @DC00646                                            0646
*             EDFIELD(I)=WORKCHAR;                                 0647
         LA    @02,EDFIELD-1(I)                                    0647
         MVC   0(1,@02),WORKCHAR(SCANPTR)                          0647
*             I=I+1;                                               0648
         LA    @02,1                                               0648
         ALR   I,@02                                               0648
*             SCANPTR=SCANPTR+1;                                   0649
         ALR   SCANPTR,@02                                         0649
*           END;                                                   0650
         AL    J,@CF00057                                          0650
         C     J,@CF00034                                          0650
         BNH   @DL00646                                            0650
@DC00646 DS    0H                                                  0651
*         END;                                                     0651
*     END;                          /*                       @ZM20856*/
@RC00642 DS    0H                                                  0653
*   I=I-1;                          /* LENGTH OF EDITTED DATA        */
@RC00609 BCTR  I,0                                                 0653
*   CALL NSRTNPRT;                  /* INSERT & PRINT VALUE          */
         BAL   @14,NSRTNPRT                                        0654
*   TABLEPTR=TABLEPTR+20;           /* PT AT NEXT TABLE ENTRY        */
         AL    TABLEPTR,@CF00144                                   0655
*   END EDITIT;                                                    0656
@EL00010 DS    0H                                                  0656
@EF00010 DS    0H                                                  0656
@ER00010 L     @14,@SA00010                                        0656
         BR    @14                                                 0656
         EJECT
*NSRTNPRT:                                                         0657
*   PROC OPTIONS(SAVE(14));                                        0657
NSRTNPRT ST    @14,@SA00011                                        0657
*                                                                  0658
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE BUILDS UP A PRINT LINE FROM DATA FOUND IN     */
*/*    'EDITFLD', AND WHEN THE PRINT LINE IS FULL, PRINTS IT.        */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0658
*   IF EDFIELD(1)=HEXFF THEN        /* PRINT LAST LINE               */
         CLI   EDFIELD,X'FF'                                       0658
         BNE   @RF00658                                            0658
*     DO;                           /* YES                           */
*       CALL PRINTIT;               /* PRINT IT                      */
         BAL   @14,PRINTIT                                         0660
*       PRNTDAT5='';                /* BLANK OUT LINE                */
         MVI   PRNTDAT5,C' '                                       0661
         MVC   PRNTDAT5+1(127),PRNTDAT5                            0661
*       PRNTPTR=ADDR(PRNTDAT5);     /* RE-SET PTR                    */
         LA    PRNTPTR,PRNTDAT5                                    0662
*     END;                                                         0663
*   ELSE                                                           0664
*     DO;                                                          0664
         B     @RC00658                                            0664
@RF00658 DS    0H                                                  0665
*       IF PRNTPTR>ADDR(PRNTDAT5) THEN/* VALUE ALREADY THERE         */
         LA    @04,PRNTDAT5                                        0665
         CR    PRNTPTR,@04                                         0665
         BNH   @RF00665                                            0665
*         DO;                       /* YES                           */
*           PRNTCHAR=',';           /* PUT COMMA AFTER IT            */
         MVI   PRNTCHAR(PRNTPTR),C','                              0667
*           PRNTPTR=PRNTPTR+1;      /* PT PAST COMMA                 */
         AL    PRNTPTR,@CF00057                                    0668
*         END;                                                     0669
*       IF(PRNTPTR+I)>PRNTEND THEN  /* ROOM LEFT ON PRINT LINE       */
@RF00665 LR    @04,PRNTPTR                                         0670
         ALR   @04,I                                               0670
         C     @04,PRNTEND                                         0670
         BNH   @RF00670                                            0670
*         DO;                       /* NO                            */
*           CALL PRINTIT;           /* PRINT IT                      */
         BAL   @14,PRINTIT                                         0672
*           PRNTDAT5='';            /* BLANK OUT LINE                */
         MVI   PRNTDAT5,C' '                                       0673
         MVC   PRNTDAT5+1(127),PRNTDAT5                            0673
*           PRNTPTR=ADDR(PRNTDAT5); /* RE-SET PTR                    */
         LA    PRNTPTR,PRNTDAT5                                    0674
*         END;                                                     0675
*       DO J=1 TO I;                /* MOVE EDITTED                  */
@RF00670 LA    J,1                                                 0676
         B     @DE00676                                            0676
@DL00676 DS    0H                                                  0677
*         PRNTCHAR=EDFIELD(J);      /* DATA                          */
         LA    @02,EDFIELD-1(J)                                    0677
         MVC   PRNTCHAR(1,PRNTPTR),0(@02)                          0677
*         PRNTPTR=PRNTPTR+1;        /* INTO                          */
         AL    PRNTPTR,@CF00057                                    0678
*       END;                        /* PRINT LINE                    */
         AL    J,@CF00057                                          0679
@DE00676 CR    J,I                                                 0679
         BNH   @DL00676                                            0679
*     END;                                                         0680
*   END NSRTNPRT;                                                  0681
@EL00011 DS    0H                                                  0681
@EF00011 DS    0H                                                  0681
@ER00011 L     @14,@SA00011                                        0681
         BR    @14                                                 0681
         EJECT
*PRINTIT:                                                          0682
*   PROC OPTIONS(SAVE(14));                                        0682
PRINTIT  ST    @14,@SA00012                                        0682
*                                                                  0683
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE PRINTS A LINE OF DATA.  IN ADDITION, IF A     */
*/*    SYNAD ERROR IS DETECTED, THE 'PRINTSW' IS TURNED OFF AND THE  */
*/*    FILE IS CLOSED.                                               */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0683
*   IF PRINTSW='0'B THEN            /* PRINTOUT WANTED               */
         TM    PRINTSW,B'00001000'                                 0683
         BZ    @RT00683                                            0683
*     RETURN;                       /* NO - EXIT                     */
*   GEN(PUT   PRINTOUT,PRNTLINE)                                   0685
*   REFS(R0,R1,R14,R15,PRINTOUT,PRNTLINE);                         0685
         PUT   PRINTOUT,PRNTLINE
*   IF SYNADSW2='Y' THEN            /* SYNAD ERROR                   */
         CLI   SYNADSW2,C'Y'                                       0686
         BNE   @RF00686                                            0686
*     DO;                           /* YES                           */
*       RESPECIFY                                                  0688
*        (R1) RESTRICTED;                                          0688
*       R1=18;                      /* MESSAGE NUMBER                */
         LA    R1,18                                               0689
*       CALL MSGBLK;                /* ADDR OF LIST FORM OF MSG      */
         L     @15,TWAMSG(,TWAPTR)                                 0690
         BALR  @14,@15                                             0690
*       R1=ADDR(IKT018I);           /* ADDR OF LIST FORM             */
         LA    @04,IKT018I(,R1)                                    0691
         LR    R1,@04                                              0691
*       GEN(WTO   MF=(E,(1)))       /* ISSUE WTO                     */
*       REFS(R0,R1,R14,R15);                                       0692
         WTO   MF=(E,(1))
*       RESPECIFY                                                  0693
*        (R1) UNRESTRICTED;                                        0693
*       PRINTSW='0'B;               /* TURN OFF PRINT SW             */
         NI    PRINTSW,B'11110111'                                 0694
*       GEN(CLOSE PRINTOUT)         /* CLOSE FILE                    */
*       REFS(R0,R1,R14,R15,PRINTOUT);                              0695
         CLOSE PRINTOUT
*     END;                                                         0696
*   END PRINTIT;                                                   0697
@EL00012 DS    0H                                                  0697
@EF00012 DS    0H                                                  0697
@ER00012 L     @14,@SA00012                                        0697
         BR    @14                                                 0697
         EJECT
*                                                                  0698
*/*  *****************************************************************/
*/*                                                                  */
*/*    IN ORDER TO MAKE PARAMETER VALIDATION AS INDEPENDENT AS       */
*/*    POSSIBLE, THE ROUTINES WHICH DO THIS ARE PRIMARILY            */
*/*    TABLE-DRIVEN.  THE MAIN TABLES WHICH ACCOMPLISH THIS ARE      */
*/*    CALLED VERIFY TABLES ('VERIBUFR', 'VERIMBR', ETC.).  THEY     */
*/*    CONTAIN THE CONTROL INFORMATION REGARDING EACH KEYWORD.       */
*/*                                                                  */
*/*    AN ELEMENT IN A VERIFY TABLE IS ORGANIZED AS FOLLOWS (SEE     */
*/*    'SCANTBL'):                                                   */
*/*    -   KEYWORD NAME                                              */
*/*    -   DISPLACEMENT INDEX INTO A SAVE AREA WHERE THE VALUE       */
*/*        ENTERED WITH THE KEYWORD NAME IS SAVED.                   */
*/*    -   FLAGS, WHICH SHOW WHAT KIND OF EDITTING TO DO ON THE      */
*/*        ENTERED VALUE.                                            */
*/*    -   IF THE ENTERED VALUE HAS TO BE ONE OF A SET OF VALUES, A  */
*/*        POINTER TO A LIST OF THE VALUES,                          */
*/*      OR                                                          */
*/*        A LOW NUMBER AND A HIGH NUMBER USED FOR A RANGE CHECK.    */
*/*                                                                  */
*/*    THE SUBROUTINES WHICH ACTUALLY DO THE VALIDATION ARE          */
*/*    'FNDNMTCH', 'PRCSPARM', 'NBRXTRCT', AND 'REGXTRCT'.           */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0698
         EJECT
*FNDNMTCH:                                                         0698
*   PROC OPTIONS(SAVE(14));                                        0698
FNDNMTCH ST    @14,12(,@13)                                        0698
*                                                                  0699
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE HAS TWO FUNCTIONS: 1) SCAN A BUFFER LOOKING   */
*/*    FOR A KEYWORD NAME, AND 2) MATCH THAT KEYWORD NAME AGAINST THE*/
*/*    ENTRIES IN A TABLE.  UPON ENTRY, 'SCANPTR' SHOULD POINT AT THE*/
*/*    BUFFER TO BE SCANNED, AND 'TABLEPTR' SHOULD POINT AT THE      */
*/*    TABLE USED FOR MATCHING.  UPON EXIT, 'SCANPTR' WILL POINT AT  */
*/*    THE FIRST CHARACTER PAST THE '=' SIGN, 'WORKPARM' WILL        */
*/*    CONTAIN THE KEYWORD NAME LEFT-JUSTIFIED AND BLANK-FILLED, AND */
*/*    'TABLEPTR' WILL POINT AT EITHER THE MATCHING TABLE ENTRY, OR  */
*/*    THE END OF THE TABLE IF NO MATCH WAS FOUND.                   */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0699
*   WORKPARM=BLANK;                 /* BLANK OUT WORK AREA           */
         MVC   WORKPARM(8),@CC00097                                0699
*   I=0;                            /* ZERO OUT COUNTER MOVE KEYWORD
*                                      NAME INTO WORK AREA, AND ALSO
*                                      CHECK ITS LENGTH              */
         SLR   I,I                                                 0700
*   DO WHILE(WORKCHAR^='='&WORKCHAR^=' '&WORKCHAR^=',');           0701
         B     @DE00701                                            0701
@DL00701 DS    0H                                                  0702
*     I=I+1;                                                       0702
         AL    I,@CF00057                                          0702
*     IF I<9 THEN                                                  0703
         C     I,@CF00069                                          0703
         BNL   @RF00703                                            0703
*       WORKPRM(I)=WORKCHAR;                                       0704
         LA    @04,WORKPRM-1(I)                                    0704
         MVC   0(1,@04),WORKCHAR(SCANPTR)                          0704
*     SCANPTR=SCANPTR+1;                                           0705
@RF00703 AL    SCANPTR,@CF00057                                    0705
*   END;                                                           0706
@DE00701 CLI   WORKCHAR(SCANPTR),C'='                              0706
         BE    @DC00701                                            0706
         CLI   WORKCHAR(SCANPTR),C' '                              0706
         BE    @DC00701                                            0706
         CLI   WORKCHAR(SCANPTR),C','                              0706
         BNE   @DL00701                                            0706
@DC00701 DS    0H                                                  0707
*   IF I=0                          /* ERROR IN                      */
*       I>8                         /* LENGTH OR                     */
*       WORKCHAR=' '                /* ENDING                        */
*       WORKCHAR=',' THEN           /* CHARACTER                     */
         LTR   I,I                                                 0707
         BZ    @RT00707                                            0707
         C     I,@CF00034                                          0707
         BH    @RT00707                                            0707
         CLI   WORKCHAR(SCANPTR),C' '                              0707
         BE    @RT00707                                            0707
         CLI   WORKCHAR(SCANPTR),C','                              0707
         BNE   @RF00707                                            0707
@RT00707 DS    0H                                                  0708
*     DO;                           /* YES                           */
*       SCANERR='1'B;               /* SHOW ERROR                    */
         OI    SCANERR,B'10000000'                                 0709
*       RETURN;                     /* EXIT                          */
@EL00013 DS    0H                                                  0710
@EF00013 DS    0H                                                  0710
@ER00013 L     @14,12(,@13)                                        0710
         BR    @14                                                 0710
*     END;                                                         0711
*   ELSE                            /* NO                            */
*     SCANPTR=SCANPTR+1;            /* POINT PAST '=' SIGN SCAN TABLE
*                                      LOOKING FOR A MATCH, OR THE 0712
*                                      END OF THE TABLE              */
@RF00707 AL    SCANPTR,@CF00057                                    0712
*   DO WHILE(TBLNAME1^='FF'X&TBLNAME^=WORKPARM);                   0713
         B     @DE00713                                            0713
@DL00713 DS    0H                                                  0714
*     TABLEPTR=TABLEPTR+20;                                        0714
         AL    TABLEPTR,@CF00144                                   0714
*   END;                                                           0715
@DE00713 CLI   TBLNAME1(TABLEPTR),X'FF'                            0715
         BE    @DC00713                                            0715
         CLC   TBLNAME(8,TABLEPTR),WORKPARM                        0715
         BNE   @DL00713                                            0715
@DC00713 DS    0H                                                  0716
*   IF TBLNAME1='FF'X THEN          /* END OF TABLE                  */
         CLI   TBLNAME1(TABLEPTR),X'FF'                            0716
         BNE   @RF00716                                            0716
*     SCANERR='1'B;                 /* YES - SHOW ERROR              */
         OI    SCANERR,B'10000000'                                 0717
*   END FNDNMTCH;                                                  0718
         B     @EL00013                                            0718
         EJECT
*PRCSPARM:                                                         0719
*   PROC OPTIONS(SAVE(14));                                        0719
PRCSPARM ST    @14,@SA00014                                        0719
*                                                                  0720
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE WILL VERIFY THAT THE PARAMETER FOLLOWING A    */
*/*    KEYWORD NAME IS A LEGAL PARAMETER.  UPON ENTRY, 'SCANPTR'     */
*/*    SHOULD POINT TO THE FIRST CHARACTER OF THE PARAMETER,         */
*/*    'TABLEPTR' SHOULD POINT AT THE TABLE ENTRY WE WILL USE FOR    */
*/*    VALIDATION, AND 'SAVEPTR' SHOULD POINT AT TABLE WHICH WILL BE */
*/*    USED TO SAVE THE EDITED AND VERIFIED PARAMETER.               */
*/*    UPON EXIT, 'SCANPTR' WILL POINT AT THE CHARACTER WHICH STOPPED*/
*/*    THE SCANNING OF THE PARAMETER, 'TABLEPTR' WILL BE UNCHANGED,  */
*/*    AND 'SAVEPTR' WILL POINT AT THE SAVE AREA WHERE THE EDITED    */
*/*    AND VERIFIED PARAMETER IS.  NOTES: - IF THE PARAMETER IS      */
*/*    INVALID, THE FIRST BYTE OF THE SAVE AREA WILL BE 'FF'X.       */
*/*                                       - IF MORE THAN ONE         */
*/*    PARAMETER IS ENTERED FOR A SINGLE KEYWORD, THEN THAT          */
*/*    KEYWORD WILL BE FLAGGED AS AN ERROR, WITH THE EXCEPTION OF    */
*/*    THE 'RCFBDUMP' KEYWORD.                                       */
*/*  *****************************************************************/
*                                                                  0720
*   IF TBLZERO='1'B THEN            /* ZERO-FILL                     */
         TM    TBLZERO(TABLEPTR),B'00001000'                       0720
         BNO   @RF00720                                            0720
*     WORKPARM=ZERO;                /* YES                           */
         MVC   WORKPARM(8),@CC00103                                0721
*   ELSE                                                           0722
*     WORKPARM=BLANK;               /* NO - BLANK-FILL               */
         B     @RC00720                                            0722
@RF00720 MVC   WORKPARM(8),@CC00097                                0722
*   IF TBLNAME=RCFBDUMP THEN        /* 'RCFBDUMP             @ZM20856*/
@RC00720 CLC   TBLNAME(8,TABLEPTR),RCFBDUMP                        0723
         BNE   @RF00723                                            0723
*     DO;                                                          0724
*       SAVEPTR=SAVEPTR+8*(TBLDISP-1+DUMPCNT);/* ADDRESS PROPER WORK
*                                      AREA                  @ZM20856*/
         LH    @04,DUMPCNT                                         0725
         LH    @15,TBLDISP(,TABLEPTR)                              0725
         BCTR  @15,0                                               0725
         ALR   @15,@04                                             0725
         SLA   @15,3                                               0725
         ALR   SAVEPTR,@15                                         0725
*       IF DUMPCNT>16 THEN          /* MAX '16' PARMS        @ZM20856
*                                      NOTE: DUMPCNT INITIALIZED IN
*                                      PROC 'READMBR' TO 0.  @ZM20856*/
         C     @04,@CF00176                                        0726
         BNH   @RF00726                                            0726
*         DO;                       /* POSITION SCAN         @ZM20856*/
*           DO WHILE(WORKPARM^=','&WORKPARM^=' ');/*         @ZM20856*/
         B     @DE00728                                            0728
@DL00728 DS    0H                                                  0729
*             SCANPTR=SCANPTR+1;    /* NEXT CHAR             @ZM20856*/
         AL    SCANPTR,@CF00057                                    0729
*           END;                    /* PT PAST PARM          @ZM20856*/
@DE00728 CLI   WORKPARM,C','                                       0730
         BE    @DC00728                                            0730
         CLI   WORKPARM,C' '                                       0730
         BNE   @DL00728                                            0730
@DC00728 DS    0H                                                  0731
*           RETURN;                 /* IGNORE > 16           @ZM20856*/
@EL00014 DS    0H                                                  0731
@EF00014 DS    0H                                                  0731
@ER00014 L     @14,@SA00014                                        0731
         BR    @14                                                 0731
*         END;                      /*                       @ZM20856*/
*       ELSE                        /* INCREMENT COUNT       @ZM20856*/
*         CALL SPLITPRM;            /* SPLIT PARMS           @ZM20856*/
@RF00726 BAL   @14,SPLITPRM                                        0733
*     END;                          /* END PROCESS           @ZM20856*/
*   ELSE                                                           0735
*     DO;                           /* OTHER KEYWORD         @ZM20856*/
         B     @RC00723                                            0735
@RF00723 DS    0H                                                  0736
*       SAVEPTR=SAVEPTR+8*(TBLDISP-1);/* ADDRESS PROPER WORK AREA  0736
*                                                            @ZM20856*/
         LH    @04,TBLDISP(,TABLEPTR)                              0736
         BCTR  @04,0                                               0736
         SLA   @04,3                                               0736
         ALR   SAVEPTR,@04                                         0736
*       IF SAVECHAR^=HEXBC THEN     /* PARAMETER ALREADY THERE       */
         CLI   SAVECHAR(SAVEPTR),X'BC'                             0737
         BE    @RF00737                                            0737
*         DO;                       /* YES                           */
*           SAVECHAR=HEXFF;         /* FLAG AS AN ERROR              */
         MVI   SAVECHAR(SAVEPTR),X'FF'                             0739
*           RETURN;                 /* EXIT                          */
         B     @EL00014                                            0740
*         END;                                                     0741
*       IF TBLNUMRC='1'B THEN       /* VALUE MUST BE NUMERIC         */
@RF00737 TM    TBLNUMRC(TABLEPTR),B'01000000'                      0742
         BNO   @RF00742                                            0742
*         CALL NBRXTRCT;            /* YES                           */
         BAL   @14,NBRXTRCT                                        0743
*       ELSE                                                       0744
*         CALL REGXTRCT;            /* NO                            */
         B     @RC00742                                            0744
@RF00742 BAL   @14,REGXTRCT                                        0744
*       IF SAVECHAR=HEXFF THEN      /* ERROR DETECTED                */
@RC00742 CLI   SAVECHAR(SAVEPTR),X'FF'                             0745
         BE    @RT00745                                            0745
*         RETURN;                   /* YES                           */
*       IF TBLRIGHT='1'B&I<8 THEN   /* RIGHT-JUSTIFY                 */
         TM    TBLRIGHT(TABLEPTR),B'00010000'                      0747
         BNO   @RF00747                                            0747
         C     I,@CF00034                                          0747
         BNL   @RF00747                                            0747
*         DO;                       /* YES                           */
*           IF TBLZERO='1'B THEN    /* FILL TEMPORARY                */
         TM    TBLZERO(TABLEPTR),B'00001000'                       0749
         BNO   @RF00749                                            0749
*             TEMPAREA=ZERO;        /* AREA WITH                     */
         MVC   TEMPAREA(8),@CC00103                                0750
*           ELSE                    /* PROPER FILL                   */
*             TEMPAREA=BLANK;       /* CHARACTER                     */
         B     @RC00749                                            0751
@RF00749 MVC   TEMPAREA(8),@CC00097                                0751
*           I=9-I;                  /* STARTING PT IN TEMPAREA       */
@RC00749 LA    @04,9                                               0752
         SLR   @04,I                                               0752
         LR    I,@04                                               0752
*           MVC(TEMPAREA(I:8),WORKPARM);/* SHIFT RIGHT INTO AREA     */
         LA    @04,TEMPAREA-1(I)                                   0753
         LA    @15,8                                               0753
         SLR   @15,I                                               0753
         EX    @15,@SM01657                                        0753
*           WORKPARM=TEMPAREA;      /* MOVE BACK                     */
         MVC   WORKPARM(8),TEMPAREA                                0754
*         END;                                                     0755
*       IF TBLRSTD='1'B THEN        /* RESTRICTED VALUES             */
@RF00747 TM    TBLRSTD(TABLEPTR),B'10000000'                       0756
         BNO   @RF00756                                            0756
*         DO;                       /* YES                           */
*           RSTDPTR=TBLPTR;         /* PTR TO RSTD TABLE             */
         L     RSTDPTR,TBLPTR(,TABLEPTR)                           0758
*           DO WHILE(RSTDCHAR^=HEXFF&RSTDNAME^=WORKPARM);/* SEARCH   */
         B     @DE00759                                            0759
@DL00759 DS    0H                                                  0760
*             RSTDPTR=RSTDPTR+8;    /* FOR A                         */
         AL    RSTDPTR,@CF00034                                    0760
*           END;                    /* MATCH                         */
@DE00759 CLI   RSTDCHAR(RSTDPTR),X'FF'                             0761
         BE    @DC00759                                            0761
         CLC   RSTDNAME(8,RSTDPTR),WORKPARM                        0761
         BNE   @DL00759                                            0761
@DC00759 DS    0H                                                  0762
*           IF RSTDCHAR=HEXFF THEN  /* FIND ONE                      */
         CLI   RSTDCHAR(RSTDPTR),X'FF'                             0762
         BNE   @RF00762                                            0762
*             SAVECHAR=HEXFF;       /* NOPE                          */
         MVI   SAVECHAR(SAVEPTR),X'FF'                             0763
*         END;                                                     0764
@RF00762 DS    0H                                                  0765
*       IF SAVECHAR^=HEXFF THEN     /* STILL GOOD VALUE              */
@RF00756 CLI   SAVECHAR(SAVEPTR),X'FF'                             0765
         BE    @RF00765                                            0765
*         IF TBLBINRY='1'B THEN     /* CONVERT TO BINARY             */
         TM    TBLBINRY(TABLEPTR),B'00100000'                      0766
         BNO   @RF00766                                            0766
*           DO;                                                    0767
*             PACK(TEMPAREA,WORKPARM);/* PACK THE NUMBER             */
         PACK  TEMPAREA(8),WORKPARM(8)                             0768
*             WORKPARM=''B;         /* ZERO OUT RECEIVNG FIELD       */
         XC    WORKPARM(8),WORKPARM                                0769
*             CVB(WRKPRMF2,TEMPAREA);/* CVB INTO WORKPARM            */
         CVB   @04,TEMPAREA                                        0770
         ST    @04,WRKPRMF2                                        0770
*             IF TBLRANGE='1'B THEN /* DO A RANGE CHECK              */
         TM    TBLRANGE(TABLEPTR),B'00000100'                      0771
         BNO   @RF00771                                            0771
*               DO;                 /* YES                           */
*                 IF WRKPRMF2<TBLLOW WRKPRMF2>TBLHIGH THEN         0773
         C     @04,TBLLOW(,TABLEPTR)                               0773
         BL    @RT00773                                            0773
         C     @04,TBLHIGH(,TABLEPTR)                              0773
         BNH   @RF00773                                            0773
@RT00773 DS    0H                                                  0774
*                   SAVECHAR=HEXFF;                                0774
         MVI   SAVECHAR(SAVEPTR),X'FF'                             0774
*               END;                                               0775
@RF00773 DS    0H                                                  0776
*           END;                                                   0776
@RF00771 DS    0H                                                  0777
*       IF SAVECHAR^=HEXFF THEN     /* STILL OK                      */
@RF00766 DS    0H                                                  0777
@RF00765 CLI   SAVECHAR(SAVEPTR),X'FF'                             0777
         BE    @RF00777                                            0777
*         SAVAREA=WORKPARM;         /* YES - MOVE IN GOOD VALUE      */
         MVC   SAVAREA(8,SAVEPTR),WORKPARM                         0778
*     END;                          /* ALL OTHER KEYWORDS    @ZM20856*/
*   END PRCSPARM;                                                  0780
         B     @EL00014                                            0780
         EJECT
*NBRXTRCT:                                                         0781
*   PROC OPTIONS(SAVE(14));                                        0781
NBRXTRCT ST    @14,12(,@13)                                        0781
*                                                                  0782
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE MOVES A PARAMETER INTO A WORKAREA, VERIFIES   */
*/*    THAT IT IS NUMERIC, AND CHECKS ITS LENGTH.                    */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0782
*   I=0;                            /* ZERO OUT LENGTH COUNTER       */
         SLR   I,I                                                 0782
*   DO WHILE(WORKCHAR^=','&WORKCHAR^=' ');                         0783
         B     @DE00783                                            0783
@DL00783 DS    0H                                                  0784
*     I=I+1;                        /* ADD 1 TO LENGTH               */
         AL    I,@CF00057                                          0784
*     IF I<9 THEN                   /* LENGTH STILL GOOD             */
         C     I,@CF00069                                          0785
         BNL   @RF00785                                            0785
*       DO;                         /* YES                           */
*         WORKPRM(I)=WORKCHAR;      /* MOVE NEXT CHARACTER           */
         LA    @04,WORKPRM-1(I)                                    0787
         MVC   0(1,@04),WORKCHAR(SCANPTR)                          0787
*         IF WORKCHAR<'0'           /* IS IT                         */
*             WORKCHAR>'9' THEN     /* NON-NUMERIC                   */
         CLI   WORKCHAR(SCANPTR),C'0'                              0788
         BL    @RT00788                                            0788
         CLI   WORKCHAR(SCANPTR),C'9'                              0788
         BNH   @RF00788                                            0788
@RT00788 DS    0H                                                  0789
*           I=9;                    /* YES - FORCE ERROR             */
         LA    I,9                                                 0789
*       END;                                                       0790
@RF00788 DS    0H                                                  0791
*     SCANPTR=SCANPTR+1;            /* PT AT NEXT CHARACTER          */
@RF00785 AL    SCANPTR,@CF00057                                    0791
*   END;                                                           0792
@DE00783 CLI   WORKCHAR(SCANPTR),C','                              0792
         BE    @DC00783                                            0792
         CLI   WORKCHAR(SCANPTR),C' '                              0792
         BNE   @DL00783                                            0792
@DC00783 DS    0H                                                  0793
*   IF I=0 I>8 THEN                 /* ANY ERRORS DISCOVERED         */
         LTR   I,I                                                 0793
         BZ    @RT00793                                            0793
         C     I,@CF00034                                          0793
         BNH   @RF00793                                            0793
@RT00793 DS    0H                                                  0794
*     SAVECHAR=HEXFF;               /* YES                           */
         MVI   SAVECHAR(SAVEPTR),X'FF'                             0794
*   END NBRXTRCT;                                                  0795
@EL00015 DS    0H                                                  0795
@EF00015 DS    0H                                                  0795
@ER00015 L     @14,12(,@13)                                        0795
         BR    @14                                                 0795
         EJECT
*REGXTRCT:                                                         0796
*   PROC OPTIONS(SAVE(14));                                        0796
REGXTRCT ST    @14,12(,@13)                                        0796
*                                                                  0797
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE MOVES A PARAMETER INTO A WORKAREA, AND        */
*/*    CHECKS ITS LENGTH.                                            */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0797
*   I=0;                            /* ZERO OUT LENGTH COUNTER       */
         SLR   I,I                                                 0797
*   DO WHILE(WORKCHAR^=','&WORKCHAR^=' ');                         0798
         B     @DE00798                                            0798
@DL00798 DS    0H                                                  0799
*     I=I+1;                        /* ADD 1 TO LENGTH               */
         AL    I,@CF00057                                          0799
*     IF I<9 THEN                   /* LENGTH STILL GOOD             */
         C     I,@CF00069                                          0800
         BNL   @RF00800                                            0800
*       WORKPRM(I)=WORKCHAR;        /* YES - MOVE CHARACTER          */
         LA    @04,WORKPRM-1(I)                                    0801
         MVC   0(1,@04),WORKCHAR(SCANPTR)                          0801
*     SCANPTR=SCANPTR+1;            /* PT AT NEXT CHARACTER          */
@RF00800 AL    SCANPTR,@CF00057                                    0802
*   END;                                                           0803
@DE00798 CLI   WORKCHAR(SCANPTR),C','                              0803
         BE    @DC00798                                            0803
         CLI   WORKCHAR(SCANPTR),C' '                              0803
         BNE   @DL00798                                            0803
@DC00798 DS    0H                                                  0804
*   IF I=0 I>8 THEN                 /* IF BAD LENGTH                 */
         LTR   I,I                                                 0804
         BZ    @RT00804                                            0804
         C     I,@CF00034                                          0804
         BNH   @RF00804                                            0804
@RT00804 DS    0H                                                  0805
*     SAVECHAR=HEXFF;               /* SHOW IT                       */
         MVI   SAVECHAR(SAVEPTR),X'FF'                             0805
*   END REGXTRCT;                                                  0806
@EL00016 DS    0H                                                  0806
@EF00016 DS    0H                                                  0806
@ER00016 L     @14,12(,@13)                                        0806
         BR    @14                                                 0806
         EJECT
*SPLITPRM:                                                         0807
*   PROC OPTIONS(SAVE(14));                                        0807
SPLITPRM ST    @14,12(,@13)                                        0807
*                                                                  0808
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE SPLITS THE KEYWORD 'RCFBDUMP' INTO 3 LOGICAL  */
*/*    VALUES AND TRANSLATES THEM TO BINARY. VALUES:                 */
*/*            1. VTAM RETURN CODE                                   */
*/*            2. VTAM FEEDBACK CODE                                 */
*/*            3. DUMP OPTION - 0=LOCAL, 1=ALL                       */
*/*  *****************************************************************/
*                                                                  0808
*   I=0;                            /* ZERO LENGTH COUNT     @ZM20856*/
         SLR   I,I                                                 0808
*   SAVAREAD=SAVAREAD&&SAVAREAD;    /* INITIALIZE AREA       @ZM20856*/
         XC    SAVAREAD(8,SAVEPTR),SAVAREAD(SAVEPTR)               0809
*   DO WHILE(WORKCHAR^=','&WORKCHAR^=' ');/*                 @ZM20856*/
         B     @DE00810                                            0810
@DL00810 DS    0H                                                  0811
*     I=I+1;                        /* 1 TO LENGTH           @ZM20856*/
         AL    I,@CF00057                                          0811
*     IF I<6 THEN                   /* GOOD LENGTH           @ZM20856*/
         C     I,@CF00065                                          0812
         BNL   @RF00812                                            0812
*       WORKPARM(I)=WORKCHAR;       /* MOVE NEXT CHAR        @ZM20856*/
         LA    @01,WORKPARM-1(I)                                   0813
         MVC   0(1,@01),WORKCHAR(SCANPTR)                          0813
*     SCANPTR=SCANPTR+1;            /* PT NEXT CHAR          @ZM20856*/
@RF00812 AL    SCANPTR,@CF00057                                    0814
*   END;                            /* END DO WHILE          @ZM20856*/
@DE00810 CLI   WORKCHAR(SCANPTR),C','                              0815
         BE    @DC00810                                            0815
         CLI   WORKCHAR(SCANPTR),C' '                              0815
         BNE   @DL00810                                            0815
@DC00810 DS    0H                                                  0816
*   IF I^=5 THEN                    /* INVALID PARM          @ZM20856*/
         C     I,@CF00248                                          0816
         BE    @RF00816                                            0816
*     DO;                           /* YES                   @ZM20856*/
*       SAVECHAR=HEXFF;             /* YES                   @ZM20856*/
         MVI   SAVECHAR(SAVEPTR),X'FF'                             0818
*       RETURN;                     /* NEXT KEYWORD          @ZM20856*/
@EL00017 DS    0H                                                  0819
@EF00017 DS    0H                                                  0819
@ER00017 L     @14,12(,@13)                                        0819
         BR    @14                                                 0819
*     END;                          /*                       @ZM20856*/
*   ELSE                                                           0821
*     ;                             /* VALID                 @ZM20856*/
*                                                                  0821
@RF00816 DS    0H                                                  0822
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS VTAM RETURN CODE                              @ZM20856*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0822
*   SPLIT(5:6)=WORKPARM(1:2);       /* EXTRACT RC            @ZM21059*/
         MVC   SPLIT+4(2),WORKPARM                                 0822
*   TR(SPLIT(5:6),TABBINRY);        /* TRANS TO BINARY-ALSO TRANS  0823
*                                      INVALIDS              @ZM20856*/
         TR    SPLIT+4(2),TABBINRY                                 0823
*   CHKFIELD(5:6)=SPLIT(5:6)&'F0F0'X;/* INVALIDS             @ZM20856*/
         MVC   CHKFIELD+4(2),SPLIT+4                               0824
         NC    CHKFIELD+4(2),@CB01628                              0824
*   IF CHKFIELD(5:6)^=0 THEN        /* INVALID RC            @ZM20856*/
         ICM   @15,3,CHKFIELD+4                                    0825
         BZ    @RF00825                                            0825
*     DO;                           /* YES                   @ZM20856*/
*       SAVECHAR=HEXFF;             /* FLAG ERROR            @ZM20856*/
         MVI   SAVECHAR(SAVEPTR),X'FF'                             0827
*       RETURN;                     /*                       @ZM20856*/
         B     @EL00017                                            0828
*     END;                          /*                       @ZM20856*/
*   ELSE                                                           0830
*     DO;                           /* VALID RC              @ZM20856*/
@RF00825 DS    0H                                                  0831
*       PACK(TEMPAREA(7:8),SPLIT(5:7));/* COMBINE            @ZM21059*/
         PACK  TEMPAREA+6(2),SPLIT+4(3)                            0831
*       VTAMRC=TEMPAREA(7);         /* WORKAREA UPT          @ZM21059*/
         MVC   VTAMRC(1,SAVEPTR),TEMPAREA+6                        0832
*     END;                                                         0833
*                                                                  0833
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS VTAM FEEDBACK CODE                            @ZM20856*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0834
*   SPLIT(5:6)=WORKPARM(3:4);       /* EXTRACT FEEDBCK       @ZM21059*/
         MVC   SPLIT+4(2),WORKPARM+2                               0834
*   TR(SPLIT(5:6),TABBINRY);        /* TRANS TO BINARY- ALSO TRANS 0835
*                                      INVALIDS              @ZM20856*/
         TR    SPLIT+4(2),TABBINRY                                 0835
*   CHKFIELD(5:6)=SPLIT(5:6)&'F0F0'X;/* INVALIDS             @ZM20856*/
         MVC   CHKFIELD+4(2),SPLIT+4                               0836
         NC    CHKFIELD+4(2),@CB01628                              0836
*   IF CHKFIELD(5:6)^=0 THEN        /* INVALID FB            @ZM20856*/
         ICM   @15,3,CHKFIELD+4                                    0837
         BZ    @RF00837                                            0837
*     DO;                           /* YES                   @ZM20856*/
*       SAVECHAR=HEXFF;             /* FLAG ERROR            @ZM20856*/
         MVI   SAVECHAR(SAVEPTR),X'FF'                             0839
*       RETURN;                     /*                       @ZM20856*/
         B     @EL00017                                            0840
*     END;                          /*                       @ZM20856*/
*   ELSE                                                           0842
*     DO;                           /* VALID FB              @ZM20856*/
@RF00837 DS    0H                                                  0843
*       PACK(TEMPAREA(7:8),SPLIT(5:7));/* COMBINE            @ZM21059*/
         PACK  TEMPAREA+6(2),SPLIT+4(3)                            0843
*       VTAMFB=TEMPAREA(7);         /* WORKAREA UPT          @ZM21059*/
         MVC   VTAMFB(1,SAVEPTR),TEMPAREA+6                        0844
*     END;                                                         0845
*                                                                  0845
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS DUMP OPTION CODE                              @ZM20856*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0846
*   IF WORKPARM(5)^='F1'X&WORKPARM(5)^='F0'X THEN/* DUMP OPTION HAS
*                                      TO BE EITHER 1 OR 0   @ZM21059*/
         CLI   WORKPARM+4,X'F1'                                    0846
         BE    @RF00846                                            0846
         CLI   WORKPARM+4,X'F0'                                    0846
         BE    @RF00846                                            0846
*     SAVECHAR=HEXFF;               /* FLAG AS ERROR         @ZM20856*/
         MVI   SAVECHAR(SAVEPTR),X'FF'                             0847
*   ELSE                            /* OK PARM               @ZM20856*/
*     DUMPCNT=DUMPCNT+1;            /* BUMP COUNT            @ZM20856*/
         B     @RC00846                                            0848
@RF00846 LH    @01,DUMPCNT                                         0848
         LA    @01,1(,@01)                                         0848
         STH   @01,DUMPCNT                                         0848
*   IF WORKPARM(5)='F1'X THEN       /* '1'                   @ZM21059*/
@RC00846 CLI   WORKPARM+4,X'F1'                                    0849
         BNE   @RF00849                                            0849
*     SDUMP=1;                      /* WORKAREA UPT 1        @ZM20856*/
         MVI   SDUMP(SAVEPTR),X'01'                                0850
*   ELSE                            /*                       @ZM20856*/
*     SDUMP=0;                      /* WORKAREA UPT 0        @ZM20856*/
         B     @RC00849                                            0851
@RF00849 MVI   SDUMP(SAVEPTR),X'00'                                0851
*   END SPLITPRM;                                                  0852
         B     @EL00017                                            0852
         EJECT
*PARMMOV:                                                          0853
*   PROC OPTIONS(SAVE(14));                                        0853
PARMMOV  ST    @14,12(,@13)                                        0853
*                                                                  0854
*/*  *****************************************************************/
*/*                                                                  */
*/*    THIS SUBROUTINE MOVES THE PARMS ENTERED FOR EACH KEYWORD INTO */
*/*    A EDIT FIELD SUITABLE FOR PRINTING. NOTE: THIS PROC IS NOT    */
*/*    INVOKED FOR THE 'RCFBDUMP' KEYWORD.                           */
*/*  *****************************************************************/
*                                                                  0854
*   CVD(WRKPRMF2,TEMPAREA);         /* TO DECIMAL            @ZM20856*/
         L     @04,WRKPRMF2                                        0854
         CVD   @04,TEMPAREA                                        0854
*   UNPK(WORKPARM,TEMPAREA);        /* UNPACK                @ZM20856*/
         UNPK  WORKPARM(8),TEMPAREA(8)                             0855
*   WORKPARM(8)=WORKPARM(8) 'F0'X;  /* REMOVE SIGN           @ZM20856*/
         OI    WORKPARM+7,X'F0'                                    0856
*   SCANPTR=ADDR(WORKPARM);         /* START SCAN            @ZM20856*/
         LA    SCANPTR,WORKPARM                                    0857
*   DO J=1 TO 8 WHILE(WORKCHAR='0');/* FIND LEADING DIGIT            */
         LA    J,1                                                 0858
@DL00858 CLI   WORKCHAR(SCANPTR),C'0'                              0858
         BNE   @DC00858                                            0858
*     SCANPTR=SCANPTR+1;            /* NEXT BYTE             @ZM20856*/
         AL    SCANPTR,@CF00057                                    0859
*   END;                            /*                       @ZM20856*/
         AL    J,@CF00057                                          0860
         C     J,@CF00034                                          0860
         BNH   @DL00858                                            0860
@DC00858 DS    0H                                                  0861
*   IF J=9 THEN                     /* ALL ZERO              @ZM20856*/
         C     J,@CF00069                                          0861
         BNE   @RF00861                                            0861
*     J=8;                          /* PRINT 1 ZERO          @ZM20856*/
         LA    J,8                                                 0862
*   DO K=J TO 8;                    /* MOVE CORRECT          @ZM20856*/
@RF00861 LR    K,J                                                 0863
         B     @DE00863                                            0863
@DL00863 DS    0H                                                  0864
*     EDFIELD(I)=WORKPARM(K);       /* NUMBER TO FIELD       @ZM20856*/
         LA    @01,EDFIELD-1(I)                                    0864
         LA    @15,WORKPARM-1(K)                                   0864
         MVC   0(1,@01),0(@15)                                     0864
*     I=I+1;                        /*                       @ZM20856*/
         AL    I,@CF00057                                          0865
*   END;                            /*                       @ZM20856*/
         AL    K,@CF00057                                          0866
@DE00863 C     K,@CF00034                                          0866
         BNH   @DL00863                                            0866
*   END PARMMOV;                    /*                       @ZM20856*/
@EL00018 DS    0H                                                  0867
@EF00018 DS    0H                                                  0867
@ER00018 L     @14,12(,@13)                                        0867
         BR    @14                                                 0867
         EJECT
*                                                                  0868
*/*  *****************************************************************/
*/*                                                                  */
*/*    THESE 2 PAGES CONTAIN THE ASSEMBLER CODING FOR THE PARMLIB    */
*/*    DCB, THE PRINTOUT DCB, THE SYNAD EXITS, THE DCB ABEND EXITS,  */
*/*    THE EXIT LISTS, AND THE JFCB AREA.                            */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0868
*   GENERATE DATA DEFS(PARMLIB,EXITLST1,SYNAD1,DCBABND1,JFCBAREA); 0868
*   GENERATE DATA DEFS(PRINTOUT,EXITLST2,SYNAD2,DCBABND2);         0869
         EJECT
*   END IKTCAS54                                                   0870
*                                                                  0870
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IEECHAIN)                                       */
*/*%INCLUDE SYSLIB  (IEZCIB  )                                       */
*/*%INCLUDE SYSLIB  (IHADCBDF)                                       */
*/*%INCLUDE SYSLIB  (IHADCB  )                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBN)                                       */
*/*%INCLUDE SYSLIB  (IKTTCAST)                                       */
*/*%INCLUDE SYSLIB  (IKTDMPCD)                                       */
*/*%INCLUDE SYSLIB  (IKTCASWA)                                       */
*                                                                  0870
*       ;                                                          0870
         B     @EL00001                                            0870
@DATA    DS    0H
@CH00189 DC    H'26'
@SM01645 MVC   CIBUFFER(0),CIBDATA(@15)
@SM01657 MVC   0(0,@04),WORKPARM
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00002 DS    1F
@SA00003 DS    1F
@SA00005 DS    1F
@SA00009 DS    1F
@SA00012 DS    1F
@SA00014 DS    1F
@SA00010 DS    1F
@SA00011 DS    1F
IKTCAS54 CSECT
         DS    0F
@CF00057 DC    F'1'
@CF00118 DC    F'3'
@CH00118 EQU   @CF00118+2
@CF00063 DC    F'4'
@CH00063 EQU   @CF00063+2
@CF00248 DC    F'5'
@CF00065 DC    F'6'
@CF00034 DC    F'8'
@CF00069 DC    F'9'
@CF00176 DC    F'16'
@CF00144 DC    F'20'
@DATD    DSECT
         DS    0D
DUMPPTR  DS    A
PRNTEND  DS    A
L        DS    H
M        DS    H
N        DS    H
RTNCODE  DS    H
DUMPCNT  DS    H
         DS    CL6
TEMPAREA DS    CL8
CHKFIELD DS    CL8
CIBUFFER DS    CL48
KEYWDNM  DS    CL8
SPLIT    DS    CL8
SYNADSW1 DS    CL1
SYNADSW2 DS    CL1
DCBABSW1 DS    CL1
DCBABSW2 DS    CL1
SWITCHES DS    CL1
         ORG   SWITCHES
SCANERR  DS    BL1
READSW1  EQU   SWITCHES+0
GOSW1    EQU   SWITCHES+0
GOSW2    EQU   SWITCHES+0
PRINTSW  EQU   SWITCHES+0
@NM00001 EQU   SWITCHES+0
         ORG   SWITCHES+1
         DS    CL3
WORKPARM DS    CL8
         ORG   WORKPARM
WORKPRM  DS    8CL1
         ORG   WORKPARM+8
MBRRECD  DS    CL80
         ORG   MBRRECD
@NM00004 DS    CL72
MBR7380  DS    CL8
         ORG   MBR7380
@NM00005 DS    CL7
MBR80    DS    CL1
         ORG   MBRRECD+80
PRNTLINE DS    CL133
         ORG   PRNTLINE
PRNTCC   DS    CL1
PRNTDATA DS    CL132
         ORG   PRNTDATA
@NM00006 DS    CL4
PRNTDAT5 DS    CL128
         ORG   PRNTLINE+133
EDITFLD  DS    CL20
         ORG   EDITFLD
EDFIELD  DS    20CL1
         ORG   EDITFLD+20
TSOKEYNN DS    CL8
         ORG   TSOKEYNN
TSO      DS    CL6
TSO1     DS    CL1
TSO2     DS    CL1
         ORG   TSOKEYNN+8
MERGAREA DS    CL208
         ORG   MERGAREA
MERGE    DS    26CL8
         ORG   MERGAREA+208
         DS    CL3
SAVEBUFR DS    CL24
SAVEMBR  DS    CL208
IKTCAS54 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CC01543 DC    C'CONSOLE VALUES ACCEPTED:'
@CC01564 DC    C'PARMLIB VALUES ACCEPTED:'
@CC01585 DC    C'CURRENT TCAS PARAMETERS:'
@CC01526 DC    C'CONSOLE VALUES ENTERED:'
@CC01556 DC    C'PARMLIB VALUES ENTERED:'
@CC01529 DC    C'*NONE ENTERED*'
@CC01534 DC    C'USER=FSTOP '
@CC01537 DC    C'USER=SIC '
@CC00097 DC    C'        '
@CC00103 DC    C'00000000'
@CC00179 DC    C'TSOKEY00'
@CC00302 DC    C'FSTOP   '
@CC00329 DC    C'MEMBER  '
@CC00340 DC    C'USER    '
@CC00350 DC    C'USERMAX '
@CC00394 DC    C'HIBFREXT'
@CC00403 DC    C'LOBFREXT'
@CC01532 DC    C'IGNORE '
@CC00181 EQU   @CC00179
@CC01533 EQU   @CC00302
@CC01536 DC    C'SIC '
@CC01531 DC    C'U '
@CC01560 DC    C', '
@CB01595 DC    X'0F00'
@CB01628 DC    X'F0F0'
RCFBDUMP DC    CL8'RCFBDUMP'
         DS    CL1
DEFAULTS DS    CL88                                           ZP60007
         ORG   DEFAULTS
@NM00011 DS    CL8
         ORG   @NM00011
@NM00012 DC    F'0'
@NM00013 DC    F'40'
         ORG   DEFAULTS+8
@NM00014 DS    CL8
         ORG   @NM00014
@NM00015 DC    CL8'        '
         ORG   DEFAULTS+16
@NM00016 DS    CL8
         ORG   @NM00016
@NM00017 DC    F'0'
@NM00018 DC    F'3'
         ORG   DEFAULTS+24
@NM00019 DS    CL8
         ORG   @NM00019
@NM00020 DC    F'0'
@NM00021 DC    F'132'
         ORG   DEFAULTS+32
@NM00022 DS    CL8
         ORG   @NM00022
@NM00023 DC    F'0'
@NM00024 DC    F'48000'
         ORG   DEFAULTS+40
@NM00025 DS    CL8
         ORG   @NM00025
@NM00026 DC    F'0'
@NM00027 DC    F'24000'
         ORG   DEFAULTS+48
@NM00028 DS    CL8
         ORG   @NM00028
@NM00029 DC    F'0'
@NM00030 DC    F'480'
         ORG   DEFAULTS+56
@NM00031 DS    CL8
         ORG   @NM00031
@NM00032 DC    F'0'
@NM00033 DC    F'4'
         ORG   DEFAULTS+64
@NM00034 DS    CL8
         ORG   @NM00034
@NM00035 DC    CL8'NOBREAK '
         ORG   DEFAULTS+72
@NM00036 DS    CL8
         ORG   @NM00036
@NM00037 DC    CL8'NO      '
         ORG   DEFAULTS+80
         DC    CL8'YES     '                                   ZP60007
         ORG   DEFAULTS+88                                     ZP60007
SAVES2   DS    CL208
         ORG   SAVES2
SAVES1   DS    CL24
         ORG   SAVES1
@NM00038 DC    24X'BC'
         ORG   SAVES2+24
@NM00039 DS    CL56
         ORG   @NM00039
@NM00040 DC    56X'BC'
         ORG   SAVES2+80
@NM00041 DS    CL128
         ORG   @NM00041
@NM00042 DC    128X'BC'
         ORG   SAVES2+208
         DS    CL4
TABBINRY DS    CL256
         ORG   TABBINRY
@NM00048 DC    X'F0F0F0F0F0F0F0F0'
@NM00049 DC    X'F0F0F0F0F0F0F0F0'
@NM00050 DC    X'F0F0F0F0F0F0F0F0'
@NM00051 DC    X'F0F0F0F0F0F0F0F0'
@NM00052 DC    X'F0F0F0F0F0F0F0F0'
@NM00053 DC    X'F0F0F0F0F0F0F0F0'
@NM00054 DC    X'F0F0F0F0F0F0F0F0'
@NM00055 DC    X'F0F0F0F0F0F0F0F0'
@NM00056 DC    X'F0F0F0F0F0F0F0F0'
@NM00057 DC    X'F0F0F0F0F0F0F0F0'
@NM00058 DC    X'F0F0F0F0F0F0F0F0'
@NM00059 DC    X'F0F0F0F0F0F0F0F0'
@NM00060 DC    X'F0F0F0F0F0F0F0F0'
@NM00061 DC    X'F0F0F0F0F0F0F0F0'
@NM00062 DC    X'F0F0F0F0F0F0F0F0'
@NM00063 DC    X'F0F0F0F0F0F0F0F0'
@NM00064 DC    X'F0F0F0F0F0F0F0F0'
@NM00065 DC    X'F0F0F0F0F0F0F0F0'
@NM00066 DC    X'F0F0F0F0F0F0F0F0'
@NM00067 DC    X'F0F0F0F0F0F0F0F0'
@NM00068 DC    X'F0F0F0F0F0F0F0F0'
@NM00069 DC    X'F0F0F0F0F0F0F0F0'
@NM00070 DC    X'F0F0F0F0F0F0F0F0'
@NM00071 DC    X'F0F0F0F0F0F0F0F0'
@NM00072 DC    X'F00A0B0C0D0E0FF0'
@NM00073 DC    X'F0F0F0F0F0F0F0F0'
@NM00074 DC    X'F0F0F0F0F0F0F0F0'
@NM00075 DC    X'F0F0F0F0F0F0F0F0'
@NM00076 DC    X'F0F0F0F0F0F0F0F0'
@NM00077 DC    X'F0F0F0F0F0F0F0F0'
@NM00078 DC    X'0001020304050607'
@NM00079 DC    X'0809F0F0F0F0F0F0'
         ORG   TABBINRY+256
TABDEC   DS    CL16
         ORG   TABDEC
ALPHANUM DC    X'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'
         ORG   TABDEC+16
RSTDUSER DS    CL17
         ORG   RSTDUSER
@NM00080 DC    CL8'FSTOP   '
@NM00081 DC    CL8'SIC     '
@NM00082 DC    X'FF'
         ORG   RSTDUSER+17
RSTDSCRN DS    CL17
         ORG   RSTDSCRN
@NM00083 DC    CL8'00000480'
@NM00084 DC    CL8'00001920'
@NM00085 DC    X'FF'
         ORG   RSTDSCRN+17
RSTDMODE DS    CL17
         ORG   RSTDMODE
NOBREAK  DC    CL8'NOBREAK '
BREAK    DC    CL8'BREAK   '
@NM00086 DC    X'FF'
         ORG   RSTDMODE+17
RSTDMDSW DS    CL17
         ORG   RSTDMDSW
NO       DC    CL8'NO      '
YES      DC    CL8'YES     '
@NM00087 DC    X'FF'
         ORG   RSTDMDSW+17
VERIBUFR DS    CL61
         ORG   VERIBUFR
@NM00089 DS    CL20
         ORG   @NM00089
@NM00090 DC    CL8'MEMBER  '
@NM00091 DC    H'1'
@NM00092 DC    CL1' '
@NM00093 DC    B'00000000'
@NM00094 DC    CL4'    '
@NM00095 DC    CL4'    '
         ORG   VERIBUFR+20
@NM00096 DS    CL20
         ORG   @NM00096
@NM00097 DC    CL8'USER    '
@NM00098 DC    H'2'
@NM00099 DC    CL1' '
@NM00100 DC    B'10000000'
@NM00101 DC    AL4(RSTDUSER)
@NM00102 DC    CL4'    '
         ORG   VERIBUFR+40
@NM00103 DS    CL20
         ORG   @NM00103
@NM00104 DC    CL8'USERMAX '
@NM00105 DC    H'3'
@NM00106 DC    CL1' '
@NM00107 DC    B'01111100'
@NM00108 DC    F'0'
@NM00109 DC    F'32767'
         ORG   VERIBUFR+60
@NM00110 DC    X'FF'
         ORG   VERIBUFR+61
         DS    CL3
VERIMBR  DS    CL521
         ORG   VERIMBR
@NM00111 DS    CL20
         ORG   @NM00111
@NM00112 DC    CL8'USERMAX '
@NM00113 DC    H'1'
@NM00114 DC    CL1' '
@NM00115 DC    B'01111100'
@NM00116 DC    F'0'
@NM00117 DC    F'32767'
         ORG   VERIMBR+20
@NM00118 DS    CL20
         ORG   @NM00118
@NM00119 DC    CL8'ACBPW   '
@NM00120 DC    H'2'
@NM00121 DC    CL1' '
@NM00122 DC    B'00000000'
@NM00123 DC    CL4'    '
@NM00124 DC    CL4'    '
         ORG   VERIMBR+40
@NM00125 DS    CL20
         ORG   @NM00125
@NM00126 DC    CL8'RECONLIM'
@NM00127 DC    H'3'
@NM00128 DC    CL1' '
@NM00129 DC    B'01111100'
@NM00130 DC    F'0'
@NM00131 DC    F'32767'
         ORG   VERIMBR+60
@NM00132 DS    CL20
         ORG   @NM00132
@NM00133 DC    CL8'BUFRSIZE'
@NM00134 DC    H'4'
@NM00135 DC    CL1' '
@NM00136 DC    B'01111100'
@NM00137 DC    F'4'
@NM00138 DC    F'4092'
         ORG   VERIMBR+80
@NM00139 DS    CL20
         ORG   @NM00139
@NM00140 DC    CL8'HIBFREXT'
@NM00141 DC    H'5'
@NM00142 DC    CL1' '
@NM00143 DC    B'01111100'
@NM00144 DC    F'1'
@NM00145 DC    F'16777215'
         ORG   VERIMBR+100
@NM00146 DS    CL20
         ORG   @NM00146
@NM00147 DC    CL8'LOBFREXT'
@NM00148 DC    H'6'
@NM00149 DC    CL1' '
@NM00150 DC    B'01111100'
@NM00151 DC    F'0'
@NM00152 DC    F'16777215'
         ORG   VERIMBR+120
@NM00153 DS    CL20
         ORG   @NM00153
@NM00154 DC    CL8'SCRSIZE '
@NM00155 DC    H'7'
@NM00156 DC    CL1' '
@NM00157 DC    B'11111000'
@NM00158 DC    AL4(RSTDSCRN)
@NM00159 DC    CL4'    '
         ORG   VERIMBR+140
@NM00160 DS    CL20
         ORG   @NM00160
@NM00161 DC    CL8'CHNLEN  '
@NM00162 DC    H'8'
@NM00163 DC    CL1' '
@NM00164 DC    B'01111100'
@NM00165 DC    F'1'
@NM00166 DC    F'10'
         ORG   VERIMBR+160
@NM00167 DS    CL20
         ORG   @NM00167
@NM00168 DC    CL8'MODE    '
@NM00169 DC    H'9'
@NM00170 DC    CL1' '
@NM00171 DC    B'10000000'
@NM00172 DC    AL4(RSTDMODE)
@NM00173 DC    CL4'    '
         ORG   VERIMBR+180
@NM00174 DS    CL20
         ORG   @NM00174
@NM00175 DC    CL8'MODESW  '
@NM00176 DC    H'10'
@NM00177 DC    CL1' '
@NM00178 DC    B'10000000'
@NM00179 DC    AL4(RSTDMDSW)
@NM00180 DC    CL4'    '
         ORG   VERIMBR+200
@NM00181 DS    CL20
         ORG   @NM00181
@NM00182 DC    CL8'CONFTXT '                                   ZP60007
@NM00183 DC    H'11'
@NM00184 DC    CL1' '
@NM00185 DC    B'10000000'                                     ZP60007
@NM00186 DC    AL4(RSTDMDSW)                                   ZP60007
@NM00187 DC    CL4'    '
         ORG   VERIMBR+220
@NM00188 DS    CL20
         ORG   @NM00188
@NM00189 DC    CL8'RCFBDUMP'
@NM00190 DC    H'12'
@NM00191 DC    CL1' '
@NM00192 DC    B'00001000'
@NM00193 DC    CL4'    '
@NM00194 DC    CL4'    '
         ORG   VERIMBR+240
@NM00195 DS    CL20
         ORG   @NM00195
@NM00196 DC    CL8'RCFBDUMP'
@NM00197 DC    H'13'
@NM00198 DC    CL1' '
@NM00199 DC    B'00001000'
@NM00200 DC    CL4'    '
@NM00201 DC    CL4'    '
         ORG   VERIMBR+260
@NM00202 DS    CL20
         ORG   @NM00202
@NM00203 DC    CL8'RCFBDUMP'
@NM00204 DC    H'14'
@NM00205 DC    CL1' '
@NM00206 DC    B'00001000'
@NM00207 DC    CL4'    '
@NM00208 DC    CL4'    '
         ORG   VERIMBR+280
@NM00209 DS    CL20
         ORG   @NM00209
@NM00210 DC    CL8'RCFBDUMP'
@NM00211 DC    H'15'
@NM00212 DC    CL1' '
@NM00213 DC    B'00001000'
@NM00214 DC    CL4'    '
@NM00215 DC    CL4'    '
         ORG   VERIMBR+300
@NM00216 DS    CL20
         ORG   @NM00216
@NM00217 DC    CL8'RCFBDUMP'
@NM00218 DC    H'16'
@NM00219 DC    CL1' '
@NM00220 DC    B'00001000'
@NM00221 DC    CL4'    '
@NM00222 DC    CL4'    '
         ORG   VERIMBR+320
@NM00223 DS    CL20
         ORG   @NM00223
@NM00224 DC    CL8'RCFBDUMP'
@NM00225 DC    H'17'
@NM00226 DC    CL1' '
@NM00227 DC    B'00001000'
@NM00228 DC    CL4'    '
@NM00229 DC    CL4'    '
         ORG   VERIMBR+340
@NM00230 DS    CL20
         ORG   @NM00230
@NM00231 DC    CL8'RCFBDUMP'
@NM00232 DC    H'18'
@NM00233 DC    CL1' '
@NM00234 DC    B'00001000'
@NM00235 DC    CL4'    '
@NM00236 DC    CL4'    '
         ORG   VERIMBR+360
@NM00237 DS    CL20
         ORG   @NM00237
@NM00238 DC    CL8'RCFBDUMP'
@NM00239 DC    H'19'
@NM00240 DC    CL1' '
@NM00241 DC    B'00001000'
@NM00242 DC    CL4'    '
@NM00243 DC    CL4'    '
         ORG   VERIMBR+380
@NM00244 DS    CL20
         ORG   @NM00244
@NM00245 DC    CL8'RCFBDUMP'
@NM00246 DC    H'20'
@NM00247 DC    CL1' '
@NM00248 DC    B'00001000'
@NM00249 DC    CL4'    '
@NM00250 DC    CL4'    '
         ORG   VERIMBR+400
@NM00251 DS    CL20
         ORG   @NM00251
@NM00252 DC    CL8'RCFBDUMP'
@NM00253 DC    H'21'
@NM00254 DC    CL1' '
@NM00255 DC    B'00001000'
@NM00256 DC    CL4'    '
@NM00257 DC    CL4'    '
         ORG   VERIMBR+420
@NM00258 DS    CL20
         ORG   @NM00258
@NM00259 DC    CL8'RCFBDUMP'
@NM00260 DC    H'22'
@NM00261 DC    CL1' '
@NM00262 DC    B'00001000'
@NM00263 DC    CL4'    '
@NM00264 DC    CL4'    '
         ORG   VERIMBR+440
@NM00265 DS    CL20
         ORG   @NM00265
@NM00266 DC    CL8'RCFBDUMP'
@NM00267 DC    H'23'
@NM00268 DC    CL1' '
@NM00269 DC    B'00001000'
@NM00270 DC    CL4'    '
@NM00271 DC    CL4'    '
         ORG   VERIMBR+460
@NM00272 DS    CL20
         ORG   @NM00272
@NM00273 DC    CL8'RCFBDUMP'
@NM00274 DC    H'24'
@NM00275 DC    CL1' '
@NM00276 DC    B'00001000'
@NM00277 DC    CL4'    '
@NM00278 DC    CL4'    '
         ORG   VERIMBR+480
@NM00279 DS    CL20
         ORG   @NM00279
@NM00280 DC    CL8'RCFBDUMP'
@NM00281 DC    H'25'
@NM00282 DC    CL1' '
@NM00283 DC    B'00001000'
@NM00284 DC    CL4'    '
@NM00285 DC    CL4'    '
         ORG   VERIMBR+500
@NM00286 DS    CL20
         ORG   @NM00286
@NM00287 DC    CL8'RCFBDUMP'
@NM00288 DC    H'26'
@NM00289 DC    CL1' '
@NM00290 DC    B'00001000'
@NM00291 DC    CL4'    '
@NM00292 DC    CL4'    '
         ORG   VERIMBR+520
@NM00293 DC    X'FF'
         ORG   VERIMBR+521
IKTCAS54 CSECT
PARMLIB  DCB   DSORG=PS,MACRF=GM,EXLST=EXITLST1,EODAD=EOF,            XX
               SYNAD=SYNAD1,EROPT=ACC,DDNAME=PARMLIB
EXITLST1 DS    0F
         DC    X'07'
         DC    AL3(JFCBAREA)
         DC    X'91'
         DC    AL3(DCBABND1)
JFCBAREA DS    0F,CL176
SYNAD1   DS    0F
         MVI   SYNADSW1,C'Y'       TURN SW ON
         RETURN
DCBABND1 DS    0F
         MVI   DCBABSW1,C'Y'      SHOW EXIT ENTERED
         TM    3(1),B'00000100'   IGNORE BIT ON
         BZ    *+12               NO
         MVI   3(1),4             YES - IGNORE ERROR
         B     *+8                EXIT
         MVI   3(1),0             ACCEPT ABEND
         RETURN
IKTCAS54 CSECT
PRINTOUT DCB   DSORG=PS,MACRF=PM,EXLST=EXITLST2,LRECL=133,RECFM=FA,   XX
               SYNAD=SYNAD2,EROPT=ACC,DDNAME=PRINTOUT,BLKSIZE=133
SYNAD2   DS    0F
         MVI   SYNADSW2,C'Y'
         RETURN
EXITLST2 DS    0F
         DC    X'91'
         DC    AL3(DCBABND2)
DCBABND2 DS    0F
         MVI   DCBABSW2,C'Y'
         TM    3(1),B'00000100'
         BZ    *+12
         MVI   3(1),4
         B     *+8
         MVI   3(1),0
         RETURN
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKTCAS54 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
TABLEPTR EQU   @05
RSTDPTR  EQU   @04
SAVEPTR  EQU   @02
K        EQU   @02
J        EQU   @04
I        EQU   @06
SCANPTR  EQU   @03
PRNTPTR  EQU   @07
TEMPPTR  EQU   @03
JFCBPTR  EQU   @04
DCBPTR   EQU   @02
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
MLPMPTR  EQU   @09
TWAPTR   EQU   @11
R14      EQU   @14
R15      EQU   @15
PRNTCHAR EQU   0
WORKCHAR EQU   0
DATA2    EQU   0
DATA4    EQU   0
DATA6    EQU   0
DATA7    EQU   0
DATA9    EQU   0
DATA11   EQU   0
DATABUF  EQU   0
@NM00007 EQU   0
MSGDATA  EQU   @NM00007+4
MSGBLK   EQU   0
MLPMPML  EQU   0
MLPMFL1  EQU   MLPMPML
MLPMWPM  EQU   MLPMFL1
MLPMUPTB EQU   MLPMFL1
MLPMRLIB EQU   MLPMFL1
MLPMBUF  EQU   MLPMFL1
MLPMCIB  EQU   MLPMFL1
MLPMFL2  EQU   MLPMPML+1
MLPMINV  EQU   MLPMFL2
MLPMUZ   EQU   MLPMFL2
MLPMUNZ  EQU   MLPMFL2
MLPMFS   EQU   MLPMFL2
MLPMSIC  EQU   MLPMFL2
MLPMIGN  EQU   MLPMFL2
MLPMSCA  EQU   MLPMPML+4
SAVAREA  EQU   0
SAVECHAR EQU   SAVAREA
RSTDNAME EQU   0
RSTDCHAR EQU   RSTDNAME
SCANTBL  EQU   0
TBLNAME  EQU   SCANTBL
TBLNAME1 EQU   TBLNAME
TBLDISP  EQU   SCANTBL+8
TBLFLAG  EQU   SCANTBL+11
TBLRSTD  EQU   TBLFLAG
TBLNUMRC EQU   TBLFLAG
TBLBINRY EQU   TBLFLAG
TBLRIGHT EQU   TBLFLAG
TBLZERO  EQU   TBLFLAG
TBLRANGE EQU   TBLFLAG
TBLPTR   EQU   SCANTBL+12
TBLLOW   EQU   TBLPTR
TBLHIGH  EQU   SCANTBL+16
CHAIN    EQU   0
CHFLG    EQU   CHAIN+4
CHSTS    EQU   CHFLG+2
CHACT    EQU   CHFLG+3
CHKEY    EQU   CHAIN+8
CHPARM   EQU   CHKEY
CHPKE    EQU   CHAIN+28
CHTJID   EQU   CHAIN+30
CHPROCSN EQU   CHAIN+32
CHACT1   EQU   CHPROCSN+3
CHASM    EQU   CHAIN+40
CHCIBP   EQU   CHASM+4
CHRGNSZ  EQU   CHASM+8
CHSTEP   EQU   CHASM+24
CHSWT    EQU   CHSTEP
CHSHORT  EQU   CHASM+32
CIBNAME  EQU   0
CIBASID  EQU   CIBNAME+10
CIBDATLN EQU   CIBNAME+14
CIBDATA  EQU   CIBNAME+16
IHADCB   EQU   0
IHADCS11 EQU   0
DCBRELB  EQU   IHADCS11
DCBREL   EQU   DCBRELB+1
DCBBUFCB EQU   IHADCS11+4
DCBDSORG EQU   IHADCS11+10
DCBDSRG1 EQU   DCBDSORG
DCBDSRG2 EQU   DCBDSORG+1
DCBIOBAD EQU   IHADCS11+12
DCBODEB  EQU   DCBIOBAD
DCBLNP   EQU   DCBODEB
DCBQSLM  EQU   DCBLNP
DCBIOBAA EQU   DCBODEB+1
IHADCS50 EQU   0
DCBSVCXL EQU   IHADCS50
DCBEODAD EQU   IHADCS50+4
DCBBFALN EQU   DCBEODAD
DCBHIARC EQU   DCBBFALN
DCBBFTEK EQU   DCBHIARC
DCBBFT   EQU   DCBBFTEK
DCBEXLST EQU   IHADCS50+8
DCBRECFM EQU   DCBEXLST
DCBRECLA EQU   DCBRECFM
IHADCS24 EQU   0
DCBOFLGS EQU   IHADCS24+8
DCBOFLWR EQU   DCBOFLGS
DCBOFOPN EQU   DCBOFLGS
DCBIFLG  EQU   IHADCS24+9
DCBIBPCT EQU   DCBIFLG
DCBMACR  EQU   IHADCS24+10
DCBMACR1 EQU   DCBMACR
DCBMRFE  EQU   DCBMACR1
DCBMRGET EQU   DCBMRFE
DCBMRAPG EQU   DCBMACR1
DCBMRRD  EQU   DCBMRAPG
DCBMRCI  EQU   DCBMACR1
DCBMRMVG EQU   DCBMRCI
DCBMRLCG EQU   DCBMACR1
DCBMRABC EQU   DCBMACR1
DCBMRPT1 EQU   DCBMRABC
DCBMRSBG EQU   DCBMRPT1
DCBMRCRL EQU   DCBMACR1
DCBMRCHK EQU   DCBMRCRL
DCBMRRDX EQU   DCBMRCHK
DCBMRDMG EQU   DCBMACR1
DCBMACR2 EQU   DCBMACR+1
DCBMRPUT EQU   DCBMACR2
DCBMRWRT EQU   DCBMACR2
DCBMRMVP EQU   DCBMACR2
DCBMR5WD EQU   DCBMACR2
DCBMRLDM EQU   DCBMR5WD
DCBMRLCP EQU   DCBMRLDM
DCBMR4WD EQU   DCBMACR2
DCBMRPT2 EQU   DCBMR4WD
DCBMRTMD EQU   DCBMRPT2
DCBMR3WD EQU   DCBMACR2
DCBMRCTL EQU   DCBMR3WD
DCBMRSTK EQU   DCBMRCTL
DCBMR1WD EQU   DCBMACR2
DCBMRSWA EQU   DCBMR1WD
DCBMRDMD EQU   DCBMRSWA
IHADCS25 EQU   0
DCBMACRF EQU   IHADCS25+2
DCBMACF1 EQU   DCBMACRF
DCBMFFE  EQU   DCBMACF1
DCBMFGET EQU   DCBMFFE
DCBMFAPG EQU   DCBMACF1
DCBMFRD  EQU   DCBMFAPG
DCBMFCI  EQU   DCBMACF1
DCBMFMVG EQU   DCBMFCI
DCBMFLCG EQU   DCBMACF1
DCBMFABC EQU   DCBMACF1
DCBMFPT1 EQU   DCBMFABC
DCBMFSBG EQU   DCBMFPT1
DCBMFCRL EQU   DCBMACF1
DCBMFCHK EQU   DCBMFCRL
DCBMFDMG EQU   DCBMACF1
DCBMACF2 EQU   DCBMACRF+1
DCBMFPUT EQU   DCBMACF2
DCBMFWRT EQU   DCBMACF2
DCBMFMVP EQU   DCBMACF2
DCBMF5WD EQU   DCBMACF2
DCBMFLDM EQU   DCBMF5WD
DCBMFLCP EQU   DCBMFLDM
DCBMF4WD EQU   DCBMACF2
DCBMFPT2 EQU   DCBMF4WD
DCBMFTMD EQU   DCBMFPT2
DCBMF3WD EQU   DCBMACF2
DCBMFCTL EQU   DCBMF3WD
DCBMFSTK EQU   DCBMFCTL
DCBMF1WD EQU   DCBMACF2
DCBMFSWA EQU   DCBMF1WD
DCBMFDMD EQU   DCBMFSWA
DCBDEBAD EQU   IHADCS25+4
DCBIFLGS EQU   DCBDEBAD
DCBIFPCT EQU   DCBIFLGS
IHADCS27 EQU   0
DCBGET   EQU   IHADCS27
DCBPUT   EQU   DCBGET
DCBGETA  EQU   DCBPUT+1
IHADCS36 EQU   0
DCBGERR  EQU   IHADCS36
DCBPERR  EQU   DCBGERR
DCBCHECK EQU   DCBPERR
DCBOPTCD EQU   DCBCHECK
DCBOPTH  EQU   DCBOPTCD
DCBOPTO  EQU   DCBOPTH
DCBOPTZ  EQU   DCBOPTCD
DCBGERRA EQU   DCBCHECK+1
DCBPERRA EQU   DCBGERRA
DCBSYNAD EQU   IHADCS36+4
DCBCIND1 EQU   IHADCS36+8
DCBCIND2 EQU   IHADCS36+9
DCBIOBA  EQU   IHADCS36+16
DCBCICB  EQU   DCBIOBA
IHADCS52 EQU   0
DCBDIRCT EQU   IHADCS52
DCBQSWS  EQU   DCBDIRCT
DCBUSASI EQU   DCBQSWS
DCBQADFS EQU   DCBUSASI
DCBBUFOF EQU   DCBDIRCT+1
IHADCS37 EQU   0
DCBFLAG1 EQU   IHADCS37
IHADCS40 EQU   0
DCBEOBAD EQU   IHADCS40
DCBCCCW  EQU   IHADCS40+4
DCBRECAD EQU   DCBCCCW
DCBRECBT EQU   DCBRECAD
DCBRCREL EQU   DCBRECBT
DCBCNTRL EQU   IHADCS40+12
DCBEROPT EQU   DCBCNTRL
INFMJFCB EQU   0
JFCBDSNM EQU   INFMJFCB
JFCBELNM EQU   INFMJFCB+44
JFCBTSDM EQU   INFMJFCB+52
JFCFCBID EQU   INFMJFCB+56
JFCBFRID EQU   JFCFCBID
JFCBLTYP EQU   INFMJFCB+66
JFCBOTTR EQU   INFMJFCB+67
JFCBUFOF EQU   JFCBOTTR
JFCBFLSQ EQU   JFCBOTTR+1
JFCFUNC  EQU   JFCBFLSQ
JFCBMASK EQU   INFMJFCB+72
JFCBFLG1 EQU   JFCBMASK+5
JFCOPEN  EQU   JFCBFLG1
JFCBFLG2 EQU   JFCBMASK+6
JFCDEFER EQU   JFCBFLG2
JFCBIND1 EQU   INFMJFCB+86
JFCBIND2 EQU   INFMJFCB+87
JFCAMPTR EQU   INFMJFCB+88
JFCBUFRQ EQU   JFCAMPTR
JFCBUFNO EQU   JFCBUFRQ
JFCBGNCP EQU   JFCAMPTR+1
JFCBHIAR EQU   JFCBGNCP
JFCBFALN EQU   JFCBHIAR
JFCBFTEK EQU   JFCBFALN
JFCBBFTA EQU   JFCBFTEK
JFCEROPT EQU   INFMJFCB+92
JFCTRTCH EQU   INFMJFCB+93
TCAST    EQU   0
TCASUSER EQU   TCAST+4
TCASUMAX EQU   TCASUSER+2
TCASACBP EQU   TCAST+8
TCASRCON EQU   TCAST+16
TCASCLSZ EQU   TCAST+18
TCASHBUF EQU   TCAST+20
TCASLBUF EQU   TCAST+24
TCASCRSZ EQU   TCAST+28
TCASCHNL EQU   TCAST+30
TCASFLG1 EQU   TCAST+88
TCASBKMD EQU   TCASFLG1
TCASMDSW EQU   TCASFLG1
TCASCONF EQU   TCASFLG1                                        ZP60007
TCASDUMP EQU   TCAST+132
DMPCD    EQU   0
DMPRCCT  EQU   DMPCD
DMPCD01  EQU   DMPCD+3
DMPCD02  EQU   DMPCD+6
DMPCD03  EQU   DMPCD+9
DMPCD04  EQU   DMPCD+12
DMPCD05  EQU   DMPCD+15
DMPCD06  EQU   DMPCD+18
DMPCD07  EQU   DMPCD+21
DMPCD08  EQU   DMPCD+24
DMPCD09  EQU   DMPCD+27
DMPCD10  EQU   DMPCD+30
DMPCD11  EQU   DMPCD+33
DMPCD12  EQU   DMPCD+36
DMPCD13  EQU   DMPCD+39
DMPCD14  EQU   DMPCD+42
DMPCD15  EQU   DMPCD+45
DMPCD16  EQU   DMPCD+48
TWAR     EQU   0
TWACSCB  EQU   TWAR+16
TWATCAST EQU   TWAR+20
TWAMSG   EQU   TWAR+48
TWAMFL   EQU   TWAR+80
TWAVFL   EQU   TWAR+81
TWAUFL   EQU   TWAR+82
TWACFL   EQU   TWAR+83
TWAM     EQU   TWAR+84
TWAME    EQU   TWAM+68
TWAMEI   EQU   TWAME
TWAV     EQU   TWAR+184
TWAVE    EQU   TWAV+68
TWAVEI   EQU   TWAVE
TWAVI    EQU   TWAR+284
TWAU     EQU   TWAR+300
TWAUE    EQU   TWAU+68
TWAUEI   EQU   TWAUE
TWAUI    EQU   TWAR+400
TWAC     EQU   TWAR+408
TWACE    EQU   TWAC+68
TWACEI   EQU   TWACE
TWACI    EQU   TWAR+508
CIBPTR   EQU   CHCIBP
CSCBPTR  EQU   TWACSCB
TCASTPTR EQU   TWATCAST
WRKPRMF  EQU   WORKPARM
WRKPRMF1 EQU   WRKPRMF
WRKPRMF2 EQU   WRKPRMF+4
WRKPRMH  EQU   WRKPRMF2+2
WRKPRMC  EQU   WRKPRMH+1
IKT013I  EQU   MSGDATA
IKT014I  EQU   MSGDATA
IKT017I  EQU   MSGDATA
IKT018I  EQU   MSGDATA
SAVAREAB EQU   SAVAREA
SAVAREAF EQU   SAVAREAB+4
SAVAREAH EQU   SAVAREAF+2
SAVAREAC EQU   SAVAREAH+1
SAVAREAD EQU   SAVAREA
SAVAREAI EQU   SAVAREAD+5
VTAMRC   EQU   SAVAREAI
VTAMFB   EQU   SAVAREAI+1
SDUMP    EQU   SAVAREAI+2
CHAINS01 EQU   CHASM
CHTYPE   EQU   CHAINS01+124
CHTRSTAT EQU   CHAINS01+125
CHCSYSO  EQU   CHAINS01+134
JFCKEYLE EQU   JFCTRTCH
JFCCODE  EQU   JFCKEYLE
JFCSTACK EQU   JFCTRTCH
JFCMODE  EQU   JFCSTACK
JFCSPPRT EQU   JFCTRTCH
JFCBABFS EQU   JFCSPPRT+2
JFCLIMCT EQU   JFCBABFS
JFCDSORG EQU   JFCSPPRT+5
JFCDSRG1 EQU   JFCDSORG
JFCDSRG2 EQU   JFCDSORG+1
JFCRECFM EQU   JFCSPPRT+7
JFCRCFM  EQU   JFCRECFM
JFCOPTCD EQU   JFCSPPRT+8
JFCWVCSP EQU   JFCOPTCD
JFCWVCIS EQU   JFCWVCSP
JFCWVCBD EQU   JFCWVCIS
JFCALLOW EQU   JFCOPTCD
JFCRSV17 EQU   JFCALLOW
JFCOVER  EQU   JFCRSV17
JFCPCIBT EQU   JFCOPTCD
JFCMAST  EQU   JFCPCIBT
JFCEXT   EQU   JFCMAST
JFCBCKPT EQU   JFCOPTCD
JFCIND   EQU   JFCBCKPT
JFCRSV18 EQU   JFCOPTCD
JFCCYL   EQU   JFCRSV18
JFCACT   EQU   JFCCYL
JFCREDUC EQU   JFCOPTCD
JFCRSV19 EQU   JFCREDUC
JFCRSV20 EQU   JFCRSV19
JFCRSV21 EQU   JFCOPTCD
JFCDEL   EQU   JFCRSV21
JFCOPTJ  EQU   JFCOPTCD
JFCREORG EQU   JFCOPTJ
JFCBLKSI EQU   JFCSPPRT+9
JFCBUFSI EQU   JFCBLKSI
JFCAMSYN EQU   JFCSPPRT+11
JFCNCP   EQU   JFCAMSYN+2
JFCNTM   EQU   JFCAMSYN+3
JFCBFSEQ EQU   JFCNTM
JFCPCI   EQU   JFCBFSEQ
JFCRESRV EQU   JFCAMSYN+4
JFCUCSEG EQU   JFCRESRV
JFCUCSOP EQU   JFCUCSEG+4
JFCOUTLI EQU   JFCUCSEG+5
JFCTHRSH EQU   JFCOUTLI
JFCCPRI  EQU   JFCTHRSH
JFCBVOLS EQU   JFCUCSEG+10
JFCBS001 EQU   JFCBVOLS
JFCBPQTY EQU   JFCBS001+34
JFCBCTRI EQU   JFCBS001+37
JFCBSQTY EQU   JFCBS001+38
JFCFLGS1 EQU   JFCBS001+41
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
JFCBEND  EQU   JFCBS001+58
JFCBSPTN EQU   JFCBS001+57
JFCBVLCT EQU   JFCBS001+56
JFCBDRLH EQU   JFCBS001+53
JFCBSBNM EQU   JFCBS001+50
JFCBABST EQU   JFCBS001+48
JFCBSPNM EQU   JFCBS001+45
JFCBDQTY EQU   JFCBS001+42
JFCBUAFF EQU   JFCFLGS1
JFCRSV45 EQU   JFCFLGS1
JFCVRDS  EQU   JFCFLGS1
JFCBCEOV EQU   JFCFLGS1
JFCRSV42 EQU   JFCFLGS1
JFCRSV41 EQU   JFCFLGS1
JFCTOPEN EQU   JFCFLGS1
JFCBDLET EQU   JFCFLGS1
JFCRQID  EQU   JFCBSQTY
JFCROUND EQU   JFCBCTRI
JFCALX   EQU   JFCBCTRI
JFCMIXG  EQU   JFCBCTRI
JFCONTIG EQU   JFCBCTRI
JFCRSV29 EQU   JFCBCTRI
JFCBMSGP EQU   JFCBCTRI
JFCBSPAC EQU   JFCBCTRI
JFCRUNIT EQU   JFCBPQTY
JFCBEXAD EQU   JFCBS001+31
JFCBEXTL EQU   JFCBS001+30
JFCMSVGP EQU   JFCBS001+22
@NM00327 EQU   JFCBS001
JFCAVOLS EQU   JFCBVOLS
JFCBNVOL EQU   JFCUCSEG+9
JFCBNTCS EQU   JFCUCSEG+8
JFCSOWA  EQU   JFCOUTLI+1
JFCSEND  EQU   JFCCPRI
JFCEQUAL EQU   JFCCPRI
JFCRECV  EQU   JFCCPRI
JFCRSV34 EQU   JFCCPRI
JFCRSV33 EQU   JFCCPRI
JFCRSV55 EQU   JFCCPRI
JFCRSV54 EQU   JFCCPRI
JFCRSV53 EQU   JFCCPRI
JFCRSV27 EQU   JFCUCSOP
JFCRSV26 EQU   JFCUCSOP
JFCFCBVR EQU   JFCUCSOP
JFCFCBAL EQU   JFCUCSOP
JFCVER   EQU   JFCUCSOP
JFCRSV25 EQU   JFCUCSOP
JFCFOLD  EQU   JFCUCSOP
JFCBEXTP EQU   JFCUCSOP
JFCUCSID EQU   JFCUCSEG
JFCINTVL EQU   JFCSPPRT+19
JFCDBUFN EQU   JFCRESRV+3
JFCCYLOF EQU   JFCRESRV+2
JFCRKP   EQU   JFCRESRV
JFCPCIR2 EQU   JFCPCI
JFCPCIR1 EQU   JFCPCI
JFCPCIN2 EQU   JFCPCI
JFCPCIN1 EQU   JFCPCI
JFCPCIA2 EQU   JFCPCI
JFCPCIA1 EQU   JFCPCI
JFCPCIX2 EQU   JFCPCI
JFCPCIX1 EQU   JFCPCI
JFCBUFMX EQU   JFCNCP
JFCLRECL EQU   JFCAMSYN
JFCBAXBF EQU   JFCBUFSI
JFCREL   EQU   JFCREORG
JFCRSV22 EQU   JFCDEL
JFCSRCHD EQU   JFCRSV20
JFCOPTQ  EQU   JFCACT
JFCFEED  EQU   JFCIND
JFCCBWU  EQU   JFCEXT
JFCWUMSG EQU   JFCOVER
JFCSDNAM EQU   JFCWVCBD
@NM00326 EQU   JFCRECFM
JFCCHAR  EQU   JFCRECFM
JFCRFS   EQU   JFCRECFM
JFCRFB   EQU   JFCRECFM
JFCRFO   EQU   JFCRCFM
JFCFMREC EQU   JFCRCFM
JFCRSV16 EQU   JFCDSRG2
JFCRSV15 EQU   JFCDSRG2
JFCORGTR EQU   JFCDSRG2
JFCORGAM EQU   JFCDSRG2
JFCRSV13 EQU   JFCDSRG2
JFCORGTQ EQU   JFCDSRG2
JFCORGTX EQU   JFCDSRG2
JFCORGGS EQU   JFCDSRG2
JFCORGU  EQU   JFCDSRG1
JFCORGPO EQU   JFCDSRG1
JFCORGMQ EQU   JFCDSRG1
JFCORGCQ EQU   JFCDSRG1
JFCORGCX EQU   JFCDSRG1
JFCORGDA EQU   JFCDSRG1
JFCORGPS EQU   JFCDSRG1
JFCORGIS EQU   JFCDSRG1
JFCTRKBL EQU   JFCLIMCT+1
@NM00325 EQU   JFCLIMCT
JFCDEN   EQU   JFCSPPRT+1
JFCPRTSP EQU   JFCSPPRT
JFCONE   EQU   JFCMODE
JFCTWO   EQU   JFCMODE
JFCRSV07 EQU   JFCMODE
JFCRSV06 EQU   JFCMODE
JFCMODER EQU   JFCMODE
JFCMODEO EQU   JFCMODE
JFCEBCD  EQU   JFCMODE
JFCBIN   EQU   JFCMODE
JFCRSV32 EQU   JFCCODE
JFCTTY   EQU   JFCCODE
JFCASCII EQU   JFCCODE
JFCNCR   EQU   JFCCODE
JFCBUR   EQU   JFCCODE
JFCFRI   EQU   JFCCODE
JFCBCD   EQU   JFCCODE
JFCNOCON EQU   JFCCODE
CHLAST   EQU   CHAINS01+136
CHSPA    EQU   CHAINS01+135
CHUSERID EQU   CHCSYSO
CHJB     EQU   CHCSYSO
CHDUMP   EQU   CHCSYSO
CHQUE    EQU   CHCSYSO
CHHOLD   EQU   CHCSYSO
CHOUT    EQU   CHCSYSO
CHINN    EQU   CHCSYSO
CHALL    EQU   CHCSYSO
CHINC    EQU   CHAINS01+132
CHPEND   EQU   CHAINS01+128
CHARID   EQU   CHAINS01+127
CHCNID   EQU   CHAINS01+126
@NM00300 EQU   CHTRSTAT
CHTSL    EQU   CHTRSTAT
CHTS     EQU   CHTRSTAT
CHINITL  EQU   CHTRSTAT
CHINIT   EQU   CHTRSTAT
CHJOBSL  EQU   CHTRSTAT
CHJOBS   EQU   CHTRSTAT
CHDEF    EQU   CHTYPE
CHHIAR   EQU   CHTYPE
CHARSV29 EQU   CHTYPE
CHARSV28 EQU   CHTYPE
CHARSV27 EQU   CHTYPE
CHARSV26 EQU   CHTYPE
CHARSV25 EQU   CHTYPE
CHDSTAT  EQU   CHTYPE
CHBUF    EQU   CHAINS01
@NM00047 EQU   SAVAREAD
@NM00046 EQU   SAVAREAH
@NM00045 EQU   SAVAREAF
@NM00044 EQU   SAVAREAB
@NM00003 EQU   WRKPRMH
@NM00002 EQU   WRKPRMF2
TWAEND   EQU   TWAR+536
TWAWORKE EQU   TWAR+524
@NM00340 EQU   TWACI+13
TWACSKIP EQU   TWACI+12
TWACMODQ EQU   TWACI+8
TWACSTPQ EQU   TWACI+4
TWACECB  EQU   TWACI
TWACERRS EQU   TWACE+4
TWACERA  EQU   TWACEI+1
TWACEIFC EQU   TWACEI
TWACRTFC EQU   TWAC+60
TWACABFC EQU   TWAC+56
TWACTWA  EQU   TWAC+52
TWACEWA  EQU   TWAC+4
TWACID   EQU   TWAC
TWAUACQH EQU   TWAUI+4
TWAUECB  EQU   TWAUI
TWAUERRS EQU   TWAUE+4
TWAUERA  EQU   TWAUEI+1
TWAUEIFC EQU   TWAUEI
TWAURTFC EQU   TWAU+60
TWAUABFC EQU   TWAU+56
TWAUTWA  EQU   TWAU+52
TWAUEWA  EQU   TWAU+4
TWAUID   EQU   TWAU
TWAVACQH EQU   TWAVI+12
TWAVTHQH EQU   TWAVI+8
TWAVTEQH EQU   TWAVI+4
TWAVECB  EQU   TWAVI
TWAVERRS EQU   TWAVE+4
TWAVERA  EQU   TWAVEI+1
TWAVEIFC EQU   TWAVEI
TWAVRTFC EQU   TWAV+60
TWAVABFC EQU   TWAV+56
TWAVTWA  EQU   TWAV+52
TWAVEWA  EQU   TWAV+4
TWAVID   EQU   TWAV
TWAMERRS EQU   TWAME+4
TWAMERA  EQU   TWAMEI+1
TWAMEIFC EQU   TWAMEI
TWAMRTFC EQU   TWAM+60
TWAMABFC EQU   TWAM+56
TWAMTWA  EQU   TWAM+52
TWAMEWA  EQU   TWAM+4
TWAMID   EQU   TWAM
@NM00339 EQU   TWACFL
TWACFL4  EQU   TWACFL
TWACFL2  EQU   TWACFL
TWACFL1  EQU   TWACFL
@NM00338 EQU   TWAUFL
TWAUFL4  EQU   TWAUFL
TWAUFL3  EQU   TWAUFL
TWAUFL2  EQU   TWAUFL
TWAUFL1  EQU   TWAUFL
@NM00337 EQU   TWAVFL
TWAVFL6  EQU   TWAVFL
TWAVFL5  EQU   TWAVFL
TWAVFL4  EQU   TWAVFL
TWAVFL3  EQU   TWAVFL
TWAVFL2  EQU   TWAVFL
TWAVFL1  EQU   TWAVFL
@NM00336 EQU   TWAMFL
TWAMFL1  EQU   TWAMFL
TWACCOMP EQU   TWAR+76
TWAUCOMP EQU   TWAR+72
TWAVCOMP EQU   TWAR+68
TWAMECB  EQU   TWAR+64
TWACTCB  EQU   TWAR+60
TWAUTCB  EQU   TWAR+56
TWAVTCB  EQU   TWAR+52
TWADEQAS EQU   TWAR+44
TWAEESR  EQU   TWAR+40
TWAPPSR  EQU   TWAR+36
TWATCSR  EQU   TWAR+32
TWATTSR  EQU   TWAR+28
TWAINIT  EQU   TWAR+24
TWAASCB  EQU   TWAR+12
TWAPASQH EQU   TWAR+8
TWASYNQH EQU   TWAR+4
TWARSON  EQU   TWAR+2
TWACOMP  EQU   TWAR
DMPOP16  EQU   DMPCD16+2
DMPFB16  EQU   DMPCD16+1
DMPRC16  EQU   DMPCD16
DMPOP15  EQU   DMPCD15+2
DMPFB15  EQU   DMPCD15+1
DMPRC15  EQU   DMPCD15
DMPOP14  EQU   DMPCD14+2
DMPFB14  EQU   DMPCD14+1
DMPRC14  EQU   DMPCD14
DMPOP13  EQU   DMPCD13+2
DMPFB13  EQU   DMPCD13+1
DMPRC13  EQU   DMPCD13
DMPOP12  EQU   DMPCD12+2
DMPFB12  EQU   DMPCD12+1
DMPRC12  EQU   DMPCD12
DMPOP11  EQU   DMPCD11+2
DMPFB11  EQU   DMPCD11+1
DMPRC11  EQU   DMPCD11
DMPOP10  EQU   DMPCD10+2
DMPFB10  EQU   DMPCD10+1
DMPRC10  EQU   DMPCD10
DMPOP09  EQU   DMPCD09+2
DMPFB09  EQU   DMPCD09+1
DMPRC09  EQU   DMPCD09
DMPOP08  EQU   DMPCD08+2
DMPFB08  EQU   DMPCD08+1
DMPRC08  EQU   DMPCD08
DMPOP07  EQU   DMPCD07+2
DMPFB07  EQU   DMPCD07+1
DMPRC07  EQU   DMPCD07
DMPOP06  EQU   DMPCD06+2
DMPFB06  EQU   DMPCD06+1
DMPRC06  EQU   DMPCD06
DMPOP05  EQU   DMPCD05+2
DMPFB05  EQU   DMPCD05+1
DMPRC05  EQU   DMPCD05
DMPOP04  EQU   DMPCD04+2
DMPFB04  EQU   DMPCD04+1
DMPRC04  EQU   DMPCD04
DMPOP03  EQU   DMPCD03+2
DMPFB03  EQU   DMPCD03+1
DMPRC03  EQU   DMPCD03
DMPOP02  EQU   DMPCD02+2
DMPFB02  EQU   DMPCD02+1
DMPRC02  EQU   DMPCD02
DMPOP01  EQU   DMPCD01+2
DMPFB01  EQU   DMPCD01+1
DMPRC01  EQU   DMPCD01
@NM00335 EQU   DMPCD+1
TCASTEND EQU   TCAST+148
TCASTTYO EQU   TCAST+144
TCAS767O EQU   TCAST+140
TCAS767I EQU   TCAST+136
TCASSCHD EQU   TCAST+128
TCASTPND EQU   TCAST+124
TCASOMJR EQU   TCAST+120
@NM00334 EQU   TCAST+118
TCASBR14 EQU   TCAST+116
TCASATTN EQU   TCAST+112
TCASASCI EQU   TCAST+108
TCASTTQH EQU   TCAST+104
@NM00333 EQU   TCAST+102
@NM00332 EQU   TCAST+100
@NM00331 EQU   TCAST+98
@NM00330 EQU   TCAST+96
TCASASCB EQU   TCAST+92
TCASFLG4 EQU   TCAST+91
TCASFLG3 EQU   TCAST+90
TCASFLG2 EQU   TCAST+89
@NM00329 EQU   TCASFLG1
TCASNACT EQU   TCASFLG1
TCASVSD  EQU   TCASFLG1
TCASABND EQU   TCASFLG1
TCASLTE  EQU   TCAST+84
TCASEXIT EQU   TCAST+80
TCASOQM  EQU   TCAST+76
TCASIQM  EQU   TCAST+72
TCASTSB  EQU   TCAST+68
TCASTTL  EQU   TCAST+64
TCASWA   EQU   TCAST+60
TCASFRR  EQU   TCAST+56
TCASMSGS EQU   TCAST+52
TCASDATO EQU   TCAST+48
TCASDATI EQU   TCAST+44
TCASXECB EQU   TCAST+40
TCASTID  EQU   TCAST+32
@NM00328 EQU   TCAST+31
TCASUSEC EQU   TCASUSER
TCASID   EQU   TCAST
JFCRSV05 EQU   JFCEROPT
JFCRSV04 EQU   JFCEROPT
JFCRSV03 EQU   JFCEROPT
JFCRSV02 EQU   JFCEROPT
JFCTOPT  EQU   JFCEROPT
JFCABN   EQU   JFCEROPT
JFCSKP   EQU   JFCEROPT
JFCACC   EQU   JFCEROPT
JFCBUFL  EQU   JFCAMPTR+2
JFCFWORD EQU   JFCBFTEK
JFCDWORD EQU   JFCBFTEK
JFCHIER1 EQU   JFCBFTEK
JFCDYN   EQU   JFCBFTEK
JFCEXC   EQU   JFCBFTEK
JFCBBFTR EQU   JFCBBFTA
JFCSIM   EQU   JFCBBFTA
JFCHIER  EQU   JFCBFTEK
JFCBFOUT EQU   JFCBUFNO
JFCBUFIN EQU   JFCBUFNO
JFCTEMP  EQU   JFCBIND2
JFCREQ   EQU   JFCBIND2
JFCENT   EQU   JFCBIND2
JFCSHARE EQU   JFCBIND2
JFCSECUR EQU   JFCBIND2
JFCDISP  EQU   JFCBIND2
JFCPDS   EQU   JFCBIND1
JFCGDG   EQU   JFCBIND1
JFCADDED EQU   JFCBIND1
JFCLOC   EQU   JFCBIND1
JFCRLSE  EQU   JFCBIND1
JFCBXPDT EQU   INFMJFCB+83
JFCBCRDT EQU   INFMJFCB+80
JFCBOPS2 EQU   JFCBMASK+7
JFCRCTLG EQU   JFCBFLG2
JFCBBUFF EQU   JFCBFLG2
JFCTRACE EQU   JFCBFLG2
JFCSDRPS EQU   JFCBFLG2
JFCMODNW EQU   JFCBFLG2
JFCNRPS  EQU   JFCDEFER
JFCOUTOP EQU   JFCBFLG2
JFCINOP  EQU   JFCBFLG2
JFCBPWBP EQU   JFCOPEN
@NM00324 EQU   JFCOPEN
JFCDUAL  EQU   JFCBFLG1
JFCSLDES EQU   JFCBFLG1
JFCSLCRE EQU   JFCBFLG1
JFCSTAND EQU   JFCBFLG1
JFCBOPS1 EQU   JFCBMASK
JFCBVLSQ EQU   INFMJFCB+70
JFCRSV31 EQU   JFCFUNC
JFCFNCBT EQU   JFCFUNC
JFCFNCBX EQU   JFCFUNC
JFCFNCBD EQU   JFCFUNC
JFCFNCBW EQU   JFCFUNC
JFCFNCBP EQU   JFCFUNC
JFCFNCBR EQU   JFCFUNC
JFCFNCBI EQU   JFCFUNC
JFCBFOFL EQU   JFCBUFOF
JFCNL    EQU   JFCBLTYP
JFCSL    EQU   JFCBLTYP
JFCNSL   EQU   JFCBLTYP
JFCSUL   EQU   JFCBLTYP
JFCBLP   EQU   JFCBLTYP
JFCBLTM  EQU   JFCBLTYP
JFCBAL   EQU   JFCBLTYP
JFCRSV38 EQU   JFCBLTYP
JFCVINDX EQU   INFMJFCB+64
JFCNLREC EQU   INFMJFCB+62
JFCBADBF EQU   INFMJFCB+60
JFCAMSTR EQU   JFCBFRID+2
JFCAMCRO EQU   JFCBFRID
JFCBDSCB EQU   INFMJFCB+53
JFCPAT   EQU   JFCBTSDM
JFCNDCB  EQU   JFCBTSDM
JFCNDSCB EQU   JFCBTSDM
JFCNWRIT EQU   JFCBTSDM
JFCTTR   EQU   JFCBTSDM
JFCSDS   EQU   JFCBTSDM
JFCVSL   EQU   JFCBTSDM
JFCCAT   EQU   JFCBTSDM
JFCIPLTX EQU   JFCBELNM
JFCBQNAM EQU   JFCBDSNM
DCBEOB   EQU   IHADCS40+20
DCBPRECL EQU   IHADCS40+18
@NM00323 EQU   IHADCS40+16
DCBCNTRA EQU   DCBCNTRL+1
@NM00322 EQU   DCBEROPT
DCBERABE EQU   DCBEROPT
DCBERSKP EQU   DCBEROPT
DCBERACC EQU   DCBEROPT
DCBLRECL EQU   IHADCS40+10
@NM00321 EQU   IHADCS40+9
@NM00320 EQU   IHADCS40+8
DCBRECA  EQU   DCBRECAD+1
@NM00319 EQU   DCBRECBT
DCBRCFGT EQU   DCBRCREL
DCBRCTRU EQU   DCBRCREL
DCBLCCW  EQU   DCBEOBAD
@NM00318 EQU   DCBFLAG1
DCBSTFLS EQU   DCBFLAG1
DCBSTQCK EQU   DCBFLAG1
DCBDIRCQ EQU   DCBBUFOF
DCBQSTRU EQU   DCBUSASI
@NM00317 EQU   DCBUSASI
DCBQADF3 EQU   DCBQADFS
DCBQADF2 EQU   DCBQADFS
DCBQADF1 EQU   DCBQADFS
DCBBLBP  EQU   DCBUSASI
@NM00316 EQU   DCBUSASI
DCBCICBA EQU   DCBCICB+1
@NM00315 EQU   DCBCICB
DCBOFFSW EQU   IHADCS36+15
DCBOFFSR EQU   IHADCS36+14
DCBWCPL  EQU   IHADCS36+13
DCBWCPO  EQU   IHADCS36+12
DCBBLKSI EQU   IHADCS36+10
DCBCNQSM EQU   DCBCIND2
DCBCNFEO EQU   DCBCIND2
DCBCNCHS EQU   DCBCIND2
DCBCNBFP EQU   DCBCIND2
DCBCNIOE EQU   DCBCIND2
DCBCNCLO EQU   DCBCIND2
DCBCNWRO EQU   DCBCIND2
DCBCNSTO EQU   DCBCIND2
DCBCNEXB EQU   DCBCIND1
@NM00314 EQU   DCBCIND1
DCBCNBRM EQU   DCBCIND1
@NM00313 EQU   DCBCIND1
DCBCNEVA EQU   DCBCIND1
DCBCNEVB EQU   DCBCIND1
DCBCNSRD EQU   DCBCIND1
DCBCNTOV EQU   DCBCIND1
DCBSYNA  EQU   DCBSYNAD+1
DCBIOBL  EQU   DCBSYNAD
DCBCHCKA EQU   DCBPERRA
DCBOPTJ  EQU   DCBOPTCD
DCBOPTT  EQU   DCBOPTCD
DCBSRCHD EQU   DCBOPTZ
DCBOPTQ  EQU   DCBOPTCD
DCBBCKPT EQU   DCBOPTO
DCBOPTC  EQU   DCBOPTCD
DCBOPTU  EQU   DCBOPTCD
DCBOPTW  EQU   DCBOPTCD
DCBPUTA  EQU   DCBGETA
@NM00312 EQU   DCBPUT
DCBDEBA  EQU   DCBDEBAD+1
@NM00311 EQU   DCBIFLGS
DCBIFIOE EQU   DCBIFLGS
DCBCH12  EQU   DCBIFPCT
DCBCH9   EQU   DCBIFPCT
DCBIFEC  EQU   DCBIFLGS
DCBMFSTI EQU   DCBMFDMD
DCBMFAWR EQU   DCBMFSTK
DCBMFUIP EQU   DCBMFTMD
DCBMFIDW EQU   DCBMFLCP
DCBMFWRK EQU   DCBMFMVP
DCBMFRDQ EQU   DCBMFWRT
DCBMFGTQ EQU   DCBMFPUT
DCBMFSTL EQU   DCBMACF2
DCBMFCK  EQU   DCBMFDMG
DCBMFRDX EQU   DCBMFCHK
DCBMFDBF EQU   DCBMFSBG
DCBMFRDI EQU   DCBMFLCG
DCBMFRDK EQU   DCBMFMVG
DCBMFWRQ EQU   DCBMFRD
DCBMFPTQ EQU   DCBMFGET
DCBMFECP EQU   DCBMACF1
DCBTIOT  EQU   IHADCS25
DCBMRSTI EQU   DCBMRDMD
DCBMRAWR EQU   DCBMRSTK
DCBMRUIP EQU   DCBMRTMD
DCBMRIDW EQU   DCBMRLCP
DCBMRWRK EQU   DCBMRMVP
DCBMRRDQ EQU   DCBMRWRT
DCBMRGTQ EQU   DCBMRPUT
DCBMRSTL EQU   DCBMACR2
DCBMRCK  EQU   DCBMRDMG
DCBPGFXA EQU   DCBMRRDX
DCBMRDBF EQU   DCBMRSBG
DCBMRRDI EQU   DCBMRLCG
DCBMRRDK EQU   DCBMRMVG
DCBMRWRQ EQU   DCBMRRD
DCBMRPTQ EQU   DCBMRGET
DCBMRECP EQU   DCBMACR1
@NM00310 EQU   DCBIFLG
DCBIBIOE EQU   DCBIFLG
DCBICH12 EQU   DCBIBPCT
DCBICH9  EQU   DCBIBPCT
DCBIBEC  EQU   DCBIFLG
DCBOFIOF EQU   DCBOFLGS
DCBOFUEX EQU   DCBOFLGS
DCBOFTM  EQU   DCBOFLGS
DCBOFPPC EQU   DCBOFLGS
DCBOFEOV EQU   DCBOFLGS
DCBOFLRB EQU   DCBOFLGS
DCBOFIOD EQU   DCBOFLWR
DCBDDNAM EQU   IHADCS24
DCBEXLSA EQU   DCBEXLST+1
DCBRECKL EQU   DCBRECFM
DCBRECCC EQU   DCBRECFM
DCBRECSB EQU   DCBRECFM
DCBRECBR EQU   DCBRECFM
DCBRECTO EQU   DCBRECLA
DCBRECL  EQU   DCBRECLA
DCBEODA  EQU   DCBEODAD+1
DCBBFA   EQU   DCBBFTEK
DCBH0    EQU   DCBBFTEK
DCBBFTKD EQU   DCBBFTEK
DCBBFTE  EQU   DCBBFT
DCBBFTKR EQU   DCBBFT
DCBBFTS  EQU   DCBBFT
DCBH1    EQU   DCBBFTEK
DCBSVCXA EQU   DCBSVCXL+1
@NM00309 EQU   DCBSVCXL
DCBODEBA EQU   DCBIOBAA
@NM00308 EQU   DCBQSLM
DCBUPDBT EQU   DCBQSLM
DCBUPDCM EQU   DCBQSLM
DCB1DVDS EQU   DCBQSLM
@NM00307 EQU   DCBDSRG2
DCBDSGTR EQU   DCBDSRG2
DCBACBM  EQU   DCBDSRG2
@NM00306 EQU   DCBDSRG2
DCBDSGTQ EQU   DCBDSRG2
DCBDSGTX EQU   DCBDSRG2
DCBDSGGS EQU   DCBDSRG2
DCBDSGU  EQU   DCBDSRG1
DCBDSGPO EQU   DCBDSRG1
@NM00305 EQU   DCBDSRG1
@NM00304 EQU   DCBDSRG1
DCBDSGCX EQU   DCBDSRG1
DCBDSGDA EQU   DCBDSRG1
DCBDSGPS EQU   DCBDSRG1
DCBDSGIS EQU   DCBDSRG1
DCBBUFL  EQU   IHADCS11+8
DCBBUFCA EQU   DCBBUFCB+1
DCBBUFNO EQU   DCBBUFCB
DCBDEVT  EQU   DCBREL
DCBKEYLE EQU   DCBRELB
@NM00303 EQU   IHADCB
@NM00302 EQU   CIBNAME+13
CIBCONID EQU   CIBNAME+12
CIBTJID  EQU   CIBASID
@NM00301 EQU   CIBNAME+6
CIBLEN   EQU   CIBNAME+5
CIBVERB  EQU   CIBNAME+4
CIBNEXT  EQU   CIBNAME
CHARSV16 EQU   CHSHORT+100
CHARSV15 EQU   CHSHORT+96
CHJSCBVS EQU   CHSHORT+92
CHUSCVS  EQU   CHSHORT+88
@NM00299 EQU   CHSHORT+84
@NM00298 EQU   CHSHORT+80
CHSQA    EQU   CHSHORT+44
CHQPA    EQU   CHSHORT+8
CHJCL    EQU   CHSHORT+4
CHSPC    EQU   CHSHORT
CHSPB    EQU   CHSTEP+4
CHTCB    EQU   CHSTEP+1
CHARSV23 EQU   CHSWT
CHARSV22 EQU   CHSWT
CHARSV21 EQU   CHSWT
CHAC     EQU   CHSWT
CHPSF    EQU   CHSWT
CHPSD    EQU   CHSWT
CHJCT    EQU   CHSWT
CHARSV20 EQU   CHSWT
CHCECB   EQU   CHASM+20
CHECB    EQU   CHASM+16
CHRGNAD  EQU   CHASM+12
CHARSV18 EQU   CHRGNSZ+1
CHRPRTY  EQU   CHRGNSZ
@NM00297 EQU   CHCIBP
CHEND    EQU   CHCIBP
CHECBP   EQU   CHASM
CHDER    EQU   CHPROCSN+4
CHARSV10 EQU   CHACT1
CHARSV09 EQU   CHACT1
CHARSV08 EQU   CHACT1
CHARSV07 EQU   CHACT1
CHARSV06 EQU   CHACT1
CHARSV05 EQU   CHACT1
CHARSV04 EQU   CHACT1
CHRDWTR  EQU   CHACT1
CHARSV30 EQU   CHPROCSN+2
CHQID    EQU   CHPROCSN
CHASID   EQU   CHTJID
CHUCMP   EQU   CHAIN+29
CHTRKID  EQU   CHPKE
CHCIBCTR EQU   CHAIN+27
CHUNIT   EQU   CHAIN+24
CHCLS    EQU   CHAIN+16
CHPCOI   EQU   CHPARM
CHIFY    EQU   CHACT
CHAIFX   EQU   CHACT
CHCLD    EQU   CHACT
CHCL     EQU   CHACT
CHDSI    EQU   CHACT
CHDISC   EQU   CHACT
CHTERM   EQU   CHACT
CHSWAP   EQU   CHACT
CHABTERM EQU   CHSTS
CHFC     EQU   CHSTS
CHDL     EQU   CHSTS
CHAD     EQU   CHSTS
CHQSPC   EQU   CHSTS
CHSOUT   EQU   CHSTS
CHSYS    EQU   CHSTS
CHAP     EQU   CHSTS
CHSZE    EQU   CHFLG+1
CHVCD    EQU   CHFLG
CHPTR    EQU   CHAIN
@NM00296 EQU   TBLFLAG
@NM00295 EQU   SCANTBL+10
@NM00294 EQU   TBLNAME+1
@NM00088 EQU   RSTDNAME+1
@NM00043 EQU   SAVAREA+1
@NM00010 EQU   MLPMPML+2
MLPMERR  EQU   MLPMFL2
@NM00009 EQU   MLPMFL2
MLPMSTRT EQU   MLPMFL1
@NM00008 EQU   MLPMFL1
MSGLNGTH EQU   @NM00007
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00169 EQU   @EL00002
@RT00203 EQU   @EL00003
@RC00270 EQU   @EL00003
@RF00269 EQU   @EL00003
@RT00281 EQU   @EL00004
@RF00285 EQU   @EL00004
@RT00296 EQU   @EL00005
@RT00348 EQU   SYNAD
@RC00428 EQU   @RC00426
@RF00416 EQU   @EL00005
@RF00475 EQU   @EL00007
@RT00491 EQU   @EL00008
@RT00551 EQU   @EL00009
@RC00658 EQU   @EL00011
@RT00683 EQU   @EL00012
@RF00686 EQU   @EL00012
@RF00716 EQU   @EL00013
@RT00745 EQU   @EL00014
@RC00723 EQU   @EL00014
@RF00777 EQU   @EL00014
@RF00793 EQU   @EL00015
@RF00804 EQU   @EL00016
@RC00849 EQU   @EL00017
@RC00173 EQU   @RC00169
@ENDDATA EQU   *
         END   IKTCAS54,(C'PLS2030',0702,79255)
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
  IDENTIFY IKTCAS54('ZP60007')
++ZAP(IKTXINIT) DISTLIB(AOST4).
 NAME IKTXINIT
 IDRDATA ZP60007
VER 001A 05C0                BALR  @12,0
VER 058E D23F,9000,CB54      MVC   ISTNIB(64,@09),DUMNIB
VER 0594 D207,900C,1068      MVC   NIBSYM(8,@09),TSBTRMID(@01)
VER 059A 58A0,A03C           L     @10,ASCBTSB(,@10)
VER 059E 50A0,9008           ST    @10,NIBUSER(,@09)
VER 05A2 9504,F048           CLI   TSBXTMTP(@15),4
VER 09FC 0000,0000  PATAREA  ***   PATCH AREA   ***
VER 0A00 0000,0000           ***   PATCH AREA   ***
VER 0A04 0000,0000           ***   PATCH AREA   ***
VER 0A08 0000,0000           ***   PATCH AREA   ***
VER 0A0C 0000,0000           ***   PATCH AREA   ***
VER 0A10 0000,0000           ***   PATCH AREA   ***
VER 0A14 0000,0000           ***   PATCH AREA   ***
VER 0B70 D000       DUMNIB   NIB
VER 0B94 0201                (CHECK CONFTXT IS ON)
REP 059E 47F0,C9E0           B     PATAREA
REP 09FC 50A0,9008           ST    @10,NIBUSER(,@09)
REP 0A00 58A0,0010           L     @10,CVTPTR
REP 0A04 58A0,A3F4           L     @10,CVTTCASP
REP 0A08 9101,A058           TM    TCASFLG1,TCASCONF
REP 0A0C 4710,C586           BO    **BACK-TO-INLINE-CODE**
REP 0A10 94FE,9025           NI    PROPROC2,255-PROCFTX
REP 0A14 47F0,C586           B     **BACK-TO-INLINE-CODE**
++MACUPD(IKTTCAST) DISTLIB(ATSOMAC).
./ CHANGE NAME=IKTTCAST
TCASCONF EQU   X'01'              RESTRICTED BUFFERS           ZP60007  04009000
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//RECV15   EXEC SMPREC
//SMPPTFIN DD  DSN=&&SMPMCS,DISP=(OLD,DELETE)
//SMPCNTL  DD  *
  RECEIVE SELECT(ZP60007).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV15
//*
//APPLY15  EXEC SMPAPP
//SMPCNTL  DD  *
  APPLY SELECT(ZP60007) DIS(WRITE).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY15
//*
//
//SYSGEN06 JOB 'USERMODS 16-20',
//             CLASS=A,
//             MSGCLASS=A,
//             MSGLEVEL=(1,1),
//             REGION=4096K
/*JOBPARM LINES=100
//JOBCAT   DD  DSN=SYS1.VSAM.MASTER.CATALOG,DISP=SHR
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//*********************************************************************
//* Install USERMOD ZP60008 (source: Greg Price) - add EWA and WSF    *
//* support for local non-SNA 3270 to VTAM.                           *
//*********************************************************************
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
++USERMOD(ZP60008)         /* ADD VTAM EWA AND WSF SUPPORT */  .
++VER(Z038) FMID(EVT0108)
 /*
   PROBLEM DESCRIPTION:
     ERASE/WRITE ALTERNATE AND WRITE STRUCTURED FIELD NOT SUPPORTED.
       VTAM APPLICATIONS CANNOT USE EXTENDED 3270 FACILITIES SINCE
       VTAM DOES NOT SUPPORT THE WRITE STRUCTURED FIELD (WSF)
       COMMAND NECESSARY TO ISSUE A READ PARTITION (QUERY) TO THE
       TERMINAL, AND THE ERASE/WRITE ALTERNATE (EWA) COMMAND
       NECESSARY TO SWITCH A 3270 SCREEN INTO ITS ALTERNATE AND
       USUALLY LARGER SCREEN SIZE.

       THIS USERMOD ADDS SUPPORT TO VTAM FOR THE WSF AND EWA COMMANDS
       FOR LOCAL NON-SNA 3270 TERMINALS ONLY.  THE RELEVANT COMMAND
       CODES (X'7E' FOR EWA AND X'F3' FOR WSF) HAVE NON-ZERO ENTRIES
       INSERTED INTO THE TRANSLATE TABLE OF THE 3270 SEND/RECEIVE LOCAL
       TRANSLATION CONTROLLER ISTZBF0L WHICH ARE DECODED BY THE 3270
       LOCAL WRITE CCW PROCESSOR ISTZBFBA SO THAT THE CORRECT CCW
       OPCODES ARE SET.

   SPECIAL CONDITIONS:
     ACTION:
       A "CLPA" MUST BE PERFORMED AT IPL TIME FOR THIS SYSMOD TO
       BECOME ACTIVE.
     DOC:
       WSF AND EWA ARE NOW VALID VTAM WRITE COMMANDS FOR LOCAL NON-SNA
       3270 TERMINALS.  IT IS UP TO THE VTAM APPLICATION TO DETERMINE
       IF THE USE OF EITHER OF THESE COMMANDS IS APPROPRIATE FOR THE
       3270 HARDWARE (OR EMULATION(S) THEREOF) INVOLVED.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NUMBER 8.
       THE ZAP DOES NOT VERIFY THAT THE TRANSLATE TABLE ENTRIES BEING
       REPLACED ARE NULL, SO THIS USERMOD CAN BE REAPPLIED IF NECESSARY.

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       ISTZBFBA
       ISTZBF0L
 */.
++MOD(ISTZBFBA) DISTLIB(AOS24).
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(NEW,PASS),UNIT=SYSDA,SPACE=(CYL,3),
//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=4080)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE 'ISTZBFBA/ABA-VS1/MBA-VS2 - 3270 LOCAL WRITE CCW PROCESS*
               SOR      '
*
*  MODIFIED BY GREG PRICE 15TH DECEMBER 2002 FOR USERMOD ZP60008
*           TO ADD EWA AND WSF SUPPORT FOR LOCAL NON-SNA 3270
*
ISTZBFBA CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ISTZBFBA  75.153'                                 0001
         DROP  @15
@PROLOG  DS    0H                                                  0002
*                                                                  0536
*/* TPZSAVE (8,12,14) AC(BCBA)BASE                                   */
*                                                                  0536
*   DO;                                                            0536
*     RFY                                                          0537
*      (GPR01P,                                                    0537
*       GPR12P,                                                    0537
*       GPR13P,                                                    0537
*       GPR14P) RSTD;                                              0537
*     GEN(PRINT OFF);                                              0538
*                                                                  0538
         PRINT OFF
*/* ATBUILD (ISTZSAVE)                                               */
*/* END OF ATBUILD                                                   */
*                                                                  0539
*     GEN(PRINT ON);                                               0539
         PRINT ON
*     RFY                                                          0540
*       ISTZSAVE BASED(GPR13P);                                    0540
*     GEN SETS(ZSAZSVVR)(STM   8,12,ZSAZSVVR+4(13));               0541
         STM   8,12,ZSAZSVVR+4(13)
*     GEN SETS(GPR12P);                                            0542
         BALR  GPR12P,0
@TSTART  DS    0H
         USING @TSTART,GPR12P
*     GEN(PRINT OFF);                                              0543
*                                                                  0543
         PRINT OFF
*/* ATBUILD (ISTZCRR,ISTRPH,ISTCRA) EJECT(NO)                        */
*/* END OF ATBUILD                                                   */
*                                                                  0544
*     GEN(PRINT ON);                                               0544
         PRINT ON
*     GPR01P->RPHCRR->CRACRR->ZCREBCBA='1'B;                       0545
         L     @15,RPHCRR(,GPR01P)                                 0545
         L     @15,CRACRR(,@15)                                    0545
         OI    ZCREBCBA(@15),B'00100000'                           0545
*     ZSAZACTV='1'B;                                               0546
         OI    ZSAZACTV(GPR13P),B'10000000'                        0546
*     ZSAZTRAC='BCBA';                                             0547
         MVC   ZSAZTRAC(4,GPR13P),@CC04296                         0547
*     ZSAZSVRR=GPR14P;                                             0548
         ST    GPR14P,ZSAZSVRR(,GPR13P)                            0548
*     GPR13P=ZSAZSVFC;                                             0549
         L     GPR13P,ZSAZSVFC(,GPR13P)                            0549
*     RFY                                                          0550
*      (GPR01P) UNRSTD;                                            0550
*     RFY                                                          0551
*      (GPR14P) UNRSTD;                                            0551
*   END;                                                           0552
*                                                                  0552
*/* END TPZSAVE                                                      */
*                                                                  0553
*   ZLBLNG2=ZLBLNG1;                /* SET ZLB LENGTH                */
         LH    @09,ZLBLNG1(,PTRZLB)                                0553
         N     @09,@CF04326                                        0553
         STH   @09,ZLBLNG2(,PTRZLB)                                0553
*   FDBDATAA=ADDR(ZLBTEXT1);        /* SET DATA ADDRESS              */
         LA    @09,ZLBTEXT1(,PTRZLB)                               0554
         ST    @09,FDBDATAA(,PTRZLB)                               0554
*   FDBDATCT=0;                     /* SET DATA COUNT TO ZERO        */
         SLR   @09,@09                                             0555
         STH   @09,FDBDATCT(,PTRZLB)                               0555
*   ZLBLSTST=ZCRBFPTR;              /* SET LAST BUFFER POINTER       */
         L     @09,RPHCRR(,PTRRPH)                                 0556
         L     @09,CRACRR(,@09)                                    0556
         L     @09,ZCRBFPTR(,@09)                                  0556
         ST    @09,ZLBLSTST(,PTRZLB)                               0556
*   IF FMCMODE=FMCRCD THEN                                         0557
         CLC   FMCMODE(8,PTRFMC),@CC03533                          0557
         BE    @RT00557                                            0557
*     ;                             /* IF RECORD, IGNORE CHECK     0558
*                                                            #3270S/R*/
*   ELSE                            /* ELSE CHECK DIALOG SEQ #3270S/R*/
*     IF LCCWSI='1'B                /* IF START DIALOG               */
*         &FMCZFA06='1'B THEN       /* & DEVICE IN DIALOG            */
         L     @09,LCPNXLCW(,PTRLCP)                               0559
         TM    LCCWSI(@09),B'10000000'                             0559
         BNO   @RF00559                                            0559
************************************** START OF BLOCK 1 OF 5 ZP60008 **
         TM    LCCWSD(@09),B'01000000' ALSO END DIALOG?               *
         BO    @RF00565                YES, REALLY EWA OR WSF         *
************************************** END OF BLOCK 1 OF 5 ZP60008 ****
         TM    FMCZFA06(PTRFMC),B'00000100'                        0559
         BNO   @RF00559                                            0559
*       DO;                         /* SET CONFLICTING DIALOG ERR    */
*         LCPZRT00='1'B;            /* INDICATE LOGICAL ERROR        */
         OI    LCPZRT00(PTRLCP),B'10000000'                        0561
*         LCPMNRCD=FRMCDITS;        /* INDICATE CONFLICTING DIALOG   */
         MVI   LCPMNRCD(PTRLCP),X'A6'                              0562
*       END;                        /* DIALOG SEQUENCE ERROR         */
*     ELSE                                                         0564
*       ;                           /* NOT DIALOG SEQUENCE ERROR     */
@RF00559 DS    0H                                                  0565
*   IF LCCWSD='1'B THEN             /* IF END DIALOG SPECIFIED       */
@RT00557 L     @09,LCPNXLCW(,PTRLCP)                               0565
         TM    LCCWSD(@09),B'01000000'                             0565
         BNO   @RF00565                                            0565
************************************** START OF BLOCK 2 OF 5 ZP60008 **
         TM    LCCWSI(@09),B'10000000' ALSO START DIALOG?             *
         BO    @RF00565                YES, REALLY EWA OR WSF         *
************************************** END OF BLOCK 2 OF 5 ZP60008 ****
*     IF LCCWMODE=LMM               /* IF MESSAGE MODE               */
*          LCCWRWOP=LWR THEN        /*   WRITE CONVERSATIONAL        */
         TM    LCCWMODE(@09),B'00001000'                           0566
         BNO   @GL00002                                            0566
         TM    LCCWMODE(@09),B'00000100'                           0566
         BZ    @RT00566                                            0566
@GL00002 L     @09,LCPNXLCW(,PTRLCP)                               0566
         TM    LCCWRWOP(@09),B'00000001'                           0566
         BNO   @RF00566                                            0566
         TM    LCCWRWOP(@09),B'00111110'                           0566
         BNZ   @RF00566                                            0566
@RT00566 DS    0H                                                  0567
*       DO;                         /* SET CONFLICTING DIALOG ERR    */
*         LCPZRT00='1'B;            /* INDICATE LOGICAL ERROR        */
         OI    LCPZRT00(PTRLCP),B'10000000'                        0568
*         LCPMNRCD=FRMCDITS;        /* INDICATE CONFLICTING DIALOG   */
         MVI   LCPMNRCD(PTRLCP),X'A6'                              0569
*       END;                        /* DIALOG SEQUENCE ERROR         */
*     ELSE                          /* NOT MSG MODE OR WR CONV.      */
*       DO;                         /* TURN ON THE FLAGS             */
         B     @RC00566                                            0571
@RF00566 DS    0H                                                  0572
*         ZLBRT02='1'B;             /* INDICATE EOB                  */
*         ZLBRT05='1'B;             /* INDICATE DECREMENT COUNT      */
*         ZLBRT06='1'B;             /* INDICATE WRITE REQUEST        */
*         ZLBRT07='1'B;             /* INDICATE SCHEDULE             */
         OI    ZLBRT02(PTRZLB),B'00100111'                         0575
*         ZCRTPDIS='1'B;            /* INDICATE DO DISCONNECT        */
         L     @09,RPHCRR(,PTRRPH)                                 0576
         L     @09,CRACRR(,@09)                                    0576
         OI    ZCRTPDIS(@09),B'00100000'                           0576
*       END;                        /* END FLAG SETTING              */
*   ELSE                            /* END DIALOG NOT SPECIFIED      */
*     DO;                           /* TURN OFF DISCONNECT PENDING   */
         B     @RC00565                                            0578
@RF00565 DS    0H                                                  0579
*       FMCZFD06='0'B;              /* FMCB DISCONNECT NOT PENDING   */
         NI    FMCZFD06(PTRFMC),B'01111111'                        0579
*     END;                          /* DISCONNECT NOT PENDING        */
*   IF LCPZRT00='1'B                /* IF LOGICAL ERROR              */
*        LCPZRT01='1'B THEN                                        0581
@RC00565 TM    LCPZRT00(PTRLCP),B'11000000'                        0581
         BNZ   @RT00581                                            0581
*     ;                             /*   CONTROL BLOCK ERROR THEN NO
*                                      FURTHER WORK REQ'D            */
*   ELSE                            /* ERROR FLAGS NOT SET           */
*     DO;                           /* NO PRELIMINARY ERROR          */
*       IF FMCMODE=FMCRCD THEN                                     0584
         CLC   FMCMODE(8,PTRFMC),@CC03533                          0584
         BNE   @RF00584                                            0584
*         DO;                       /* IF RECORD MODE        #3270S/R*/
*           FMCOSSN=FMCOSSN+1;      /* INCREMENT SEQ NO      #3270S/R*/
         LA    @09,1                                               0586
         LH    @00,FMCOSSN(,PTRFMC)                                0586
         N     @00,@CF04326                                        0586
         ALR   @09,@00                                             0586
         STH   @09,FMCOSSN(,PTRFMC)                                0586
*           LCPSEQ=FMCOSSN;         /* SEQ NO IN LCPB        #3270S/R*/
         STH   @09,LCPSEQ(,PTRLCP)                                 0587
*         END;                      /* END RECORD MODE       #3270S/R*/
*       ELSE                                                       0589
*         ;                         /* IF NOT RECORD MODE    #3270S/R*/
@RF00584 DS    0H                                                  0590
*       IF LCCWRWOP=LEAU THEN       /* IF ERASE ALL UNPROTECTED      */
         L     @09,LCPNXLCW(,PTRLCP)                               0590
         TM    LCCWRWOP(@09),B'00010001'                           0590
         BNO   @RF00590                                            0590
         TM    LCCWRWOP(@09),B'00101110'                           0590
         BNZ   @RF00590                                            0590
*         DO;                       /* PROCESS ERASE ALL UNPROTECT   */
*           PTRCCW=ADDR(ZLBCCW1);   /* ADDRESS CCW                   */
         LA    PTRCCW,ZLBCCW1(,PTRZLB)                             0592
*           CCWCODE=EAU;            /* SET CCW OP CODE               */
         MVI   CCWCODE(PTRCCW),X'0F'                               0593
*           CCWCOUNT=1;             /* SET CCW COUNT                 */
         MVC   CCWCOUNT(2,PTRCCW),@CH00035                         0594
*           ZLBRT02='1'B;           /* INDICATE EOB                  */
*           ZLBRT05='1'B;           /* INDICATE DECREMENT COUNT      */
*           ZLBRT06='1'B;           /* INDICATE WRITE REQUEST        */
*           ZLBRT07='1'B;           /* INDICATE SCHEDULE             */
         OI    ZLBRT02(PTRZLB),B'00100111'                         0598
*           IF LCCWLSI='1'B THEN    /* IF LCCW SYNCH FLAG ON         */
         TM    LCCWLSI(@09),B'00000100'                            0599
         BNO   @RF00599                                            0599
*             CALL ATCZPSVT->ZPSZBFY0;/* CALL LCCW SYNCH ROUTINE     */
         L     @09,ATCZPSVT(,PTRATC)                               0600
         L     @15,ZPSZBFY0(,@09)                                  0600
         BALR  @14,@15                                             0600
*         END;                      /* END ERASE ALL UNPROTECTED     */
*       ELSE                        /* NOT ERASE ALL UNPROTECTED     */
*         IF LCCWMODE=LMB THEN      /* IF BLOCK MODE                 */
         B     @RC00590                                            0602
@RF00590 L     @09,LCPNXLCW(,PTRLCP)                               0602
         TM    LCCWMODE(@09),B'00000100'                           0602
         BNO   @RF00602                                            0602
         TM    LCCWMODE(@09),B'00001000'                           0602
         BNZ   @RF00602                                            0602
*           DO;                     /* SET INVALID OP CODE ERROR     */
*             LCPZRT01='1'B;        /* INDICATE CONTROL BLOCK ERR    */
         OI    LCPZRT01(PTRLCP),B'01000000'                        0604
*             LCPMNRCD=FRMINVL;     /* INDICATE INVALID OP CODE      */
         MVI   LCPMNRCD(PTRLCP),X'A3'                              0605
*           END;                    /* INVALID OPERATION CODE        */
*         ELSE                                                     0607
*           DO;                     /* NOT BLOCK MODE                */
         B     @RC00602                                            0607
@RF00602 DS    0H                                                  0608
*             IF LCCWCNT=0 THEN                                    0608
         L     @09,LCPNXLCW(,PTRLCP)                               0608
         LH    @09,LCCWCNT(,@09)                                   0608
         N     @09,@CF04326                                        0608
         LTR   @09,@09                                             0608
         BNZ   @RF00608                                            0608
*               DO;                 /* IF COUNT IN CURRENT LCCW=0  0609
*                                                            @XL03XFZ*/
*                 ZLBTEXT1(1)='00'X;/* SET ZERO WCC CHARACTER        */
         MVI   ZLBTEXT1(PTRZLB),X'00'                              0610
*                 FDBDATCT=1;       /* SET COUNT TO INCLUDE WCC      */
         MVC   FDBDATCT(2,PTRZLB),@CH00035                         0611
*               END;                /* END CCW COUNT 0       @XL03HFZ*/
*             ELSE                                                 0613
*               ;                   /* NOT CCW COUNT 0       @XL03HFZ*/
*                                                                  0613
@RF00608 DS    0H                                                  0614
*             /*******************************************************/
*             /*                                                     */
*             /* SEGMENT(WRCCW)REQUEST                               */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0614
*             DO;                                                  0614
*               GOTO WRCCW;                                        0615
         B     WRCCW                                               0615
*WRCCW#:                                                           0616
*             END;                  /* MOVE DATA AND FORMAT CCW      */
WRCCW#   DS    0H                                                  0617
*           END;                    /* END NOT BLOCK MODE            */
*       IF LCCWRFI='1'B             /* IF FEEDBACK REQUIRED          */
*           &ZLBRT03='0'B THEN      /* & NOT WRITE CONVERSATIONAL    */
@RC00602 DS    0H                                                  0618
@RC00590 L     @09,LCPNXLCW(,PTRLCP)                               0618
         TM    LCCWRFI(@09),B'00000010'                            0618
         BNO   @RF00618                                            0618
         TM    ZLBRT03(PTRZLB),B'00010000'                         0618
         BNZ   @RF00618                                            0618
*         DO;                       /* SET FLAGS IN REQ TAG          */
*           ZLBRT02='1'B;           /* INDICATE EOB                  */
*           ZLBRT04='1'B;           /* INDICATE FEEDBACK REQUIRED    */
         OI    ZLBRT02(PTRZLB),B'00101000'                         0621
*         END;                      /* FLAGS SET IN REQUEST TAG      */
*       ELSE                                                       0623
*         ;                         /* FEEDBACK NOT REQUIRED         */
@RF00618 DS    0H                                                  0624
*       ZLBECI='1'B;                /* INDICATE ECI                  */
*       ZLBEBI='0'B;                /* CLEAR EBI FLAG                */
*       ZLBEMI='0'B;                /* CLEAR EMI FLAG                */
*       ZLBETI='0'B;                /* CLEAR ETI FLAG                */
*       ZLBFBMI='0'B;               /* CLEAR FBMI FLAG               */
         OI    ZLBECI(PTRZLB),B'01000000'                          0628
         NI    ZLBEBI(PTRZLB),B'11000011'                          0628
*     END;                          /* END NO PRELIMINARY ERROR      */
*/* TPZRETN                                                          */
*                                                                  0630
*   DO;                                                            0630
@RT00581 DS    0H                                                  0631
*     RFY                                                          0631
*      (GPR08P,                                                    0631
*       GPR14P,                                                    0631
*       GPR15P) RSTD;                                              0631
*     GPR13P=ZSAZSVBC;                                             0632
         L     GPR13P,ZSAZSVBC(,GPR13P)                            0632
*     IF GPR13P=0 THEN                                             0633
         LTR   GPR13P,GPR13P                                       0633
         BZ    @RT00633                                            0633
*       ;                           /* TPDVTS ISTZFARR               */
*     ELSE                                                         0635
*       GPR14P=ZSAZSVRR;                                           0635
         L     GPR14P,ZSAZSVRR(,GPR13P)                            0635
*     GEN REFS(ZSAZSVVR)(LM    8,12,ZSAZSVVR+4(13));               0636
@RT00633 DS    0H                                                  0636
         LM    8,12,ZSAZSVVR+4(13)
*     GEN REFS(GPR14P) EXIT NOSEQFLOW(BR    GPR14P);               0637
         BR    GPR14P
*     RFY                                                          0638
*      (GPR08P,                                                    0638
*       GPR14P,                                                    0638
*       GPR15P) UNRSTD;                                            0638
*   END;                                                           0639
*                                                                  0639
*/* END TPZRETN                                                      */
*                                                                  0640
*   GEN NOSETS NOREFS NODEFS(EJECT);                               0640
         EJECT
*                                                                  0641
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT-                                                         */
*/*      WRCCW                                                       */
*/*                                                                  */
*/* FUNCTION-                                                        */
*/*      MOVE DATA AND FORMAT CCW                                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0641
*   /*****************************************************************/
*   /*                                                               */
*   /* SEGMENT(WRCCW)START                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0641
*   DO;                                                            0641
*     GOTO WRCCW@;                                                 0642
         B     WRCCW@                                              0642
*WRCCW:                                                            0643
*   END;                                                           0643
WRCCW    DS    0H                                                  0644
*   RFY                                                            0644
*     PTRG15 RSTD;                  /* FOR RETURN CODE CHECK         */
*   CALL ATCZPSVT->ZPSZDFC0;        /* CALL MOVE DATA ROUTINE        */
         L     @09,ATCZPSVT(,PTRATC)                               0645
         L     @15,ZPSZDFC0(,@09)                                  0645
         BALR  @14,@15                                             0645
*   IF PTRG15=RC00 THEN             /* IF GOOD RETURN CODE           */
         LTR   PTRG15,PTRG15                                       0646
         BNZ   @RF00646                                            0646
*     CALL FORMCCW;                 /* FORMAT THE CCWS               */
         BAL   @14,FORMCCW                                         0647
*   ELSE                            /* DATA MOVE RC ^= 0             */
*                                                                  0648
*     /***************************************************************/
*     /*                                                             */
*     /* IF USER ERROR FOUND                                 @XL03HQV*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0648
*     IF PTRG15=12 THEN             /* USER ERROR -          @XL03HFZ*/
         B     @RC00646                                            0648
@RF00646 C     PTRG15,@CF01716                                     0648
         BNE   @RF00648                                            0648
*       IF FMCMODE=FMCRCD THEN                                     0649
         CLC   FMCMODE(8,PTRFMC),@CC03533                          0649
         BNE   @RF00649                                            0649
*         DO;                       /* IF RECORD MODE        @XL03HFZ*/
*           LCPZRT01='1'B;          /* FLAG CB ERROR         @XL03HFZ*/
         OI    LCPZRT01(PTRLCP),B'01000000'                        0651
*           LCPMNRCD=FRMINDTR;      /* SET FRMINDTR RETURN CODE IN 0652
*                                      LCPB                  @XL03HFZ*/
         MVI   LCPMNRCD(PTRLCP),X'17'                              0652
*         END;                      /* END RECORD MODE       @XL03HFZ*/
*       ELSE                                                       0654
*         DO;                       /* NOT RECORD MODE       @XL03HFZ*/
         B     @RC00649                                            0654
@RF00649 DS    0H                                                  0655
*           LCPZRT00='1'B;          /* LOGIC ERROR           @XL03HQV*/
         OI    LCPZRT00(PTRLCP),B'10000000'                        0655
*           LCPMNRCD=FRMINDAT;      /* INVALID DATA          @XL03HQV*/
         MVI   LCPMNRCD(PTRLCP),X'97'                              0656
*         END;                                                     0657
*     ELSE                                                         0658
*       DO;                         /* NOT USER ERROR -      @XL03HQV*/
         B     @RC00648                                            0658
@RF00648 DS    0H                                                  0659
*         LCPZRT00='1'B;            /* INDICATE LOGIC ERROR          */
         OI    LCPZRT00(PTRLCP),B'10000000'                        0659
*         LCPMNRCD=FRMVTAME;        /* INDICATE VTAM ERROR           */
         MVI   LCPMNRCD(PTRLCP),X'A0'                              0660
*       END;                                                       0661
*   PTRZLB=ZCRZLB;                  /* ADDRESS 1ST CHAINED BUFFER    */
@RC00648 DS    0H                                                  0662
@RC00646 L     @14,RPHCRR(,PTRRPH)                                 0662
         L     @14,CRACRR(,@14)                                    0662
         L     PTRZLB,ZCRZLB(,@14)                                 0662
*   ZLBLCCWA=LCPNXLCW;              /* SET LCCW POINTER IN ZLBUF     */
         L     @09,LCPNXLCW(,PTRLCP)                               0663
         ST    @09,ZLBLCCWA(,PTRZLB)                               0663
*   ZLBLSTST=ZCRBFPTR;              /* ADDRESS LAST BUFFER OF SET    */
*                                                                  0664
         L     @14,ZCRBFPTR(,@14)                                  0664
         ST    @14,ZLBLSTST(,PTRZLB)                               0664
*   /*****************************************************************/
*   /*                                                               */
*   /* SEGMENT(WRCCW)FINISH                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0665
*   DO;                                                            0665
*     GOTO WRCCW#;                                                 0666
         B     WRCCW#                                              0666
*WRCCW@:                                                           0667
*   END;                            /* END OF SUBROUTINE             */
*                                                                  0668
*/********************************************************************/
*/*                                                                  */
*/* SUBROUTINE-                                                      */
*/*      FORMCCW                                                     */
*/*                                                                  */
*/* FUNCTION-                                                        */
*/*      FORMAT A WRITE CCW LIST FOR LOCAL BUFFERS.                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0668
*FORMCCW:                                                          0668
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0668
         B     @PB00002                                            0668
FORMCCW  DS    0H                                                  0669
*   RFY                                                            0669
*     PTRG14 RSTD;                  /* TO SAVE RETURN REG            */
*   ZCRSVWK1=PTRG14;                /* SAVE RETURN REGISTER          */
         L     @09,RPHCRR(,PTRRPH)                                 0670
         L     @09,CRACRR(,@09)                                    0670
         ST    PTRG14,ZCRSVWK1(,@09)                               0670
*   RFY                                                            0671
*     PTRG14 UNRSTD;                /* SAVED                         */
*   PTRCCW=ADDR(ZLBCCW1);           /* ADDRESS CCW                   */
         LA    PTRCCW,ZLBCCW1(,PTRZLB)                             0672
*   PTRG15=FDBDATAA;                /* GET DATA ADDRESS              */
         L     PTRG15,FDBDATAA(,PTRZLB)                            0673
*   GEN;                                                           0674
*                                      /* CONVERT TO REAL ADDRESS    */
         LRA   PTRG15,0(0,PTRG15)      CONVERT TO REAL ADDRESS
*   ZLBCPAD1=PTRG15;                /* SET REAL ADDRESS IN CCW       */
         STCM  PTRG15,7,ZLBCPAD1(PTRZLB)                           0675
*   IF LCCWSOP='1'B THEN            /* IF ERASE WRITE                */
         L     @14,LCPNXLCW(,PTRLCP)                               0676
************************************** START OF BLOCK 3 OF 5 ZP60008 **
         TM    LCCWSOP(@14),B'11000000'                               *
         BO    @ZP68LBL                PROCESS EWA OR WSF             *
************************************** END OF BLOCK 3 OF 5 ZP60008 ****
         TM    LCCWSOP(@14),B'00010000'                            0676
         BNO   @RF00676                                            0676
************************************** START OF BLOCK 4 OF 5 ZP60008 **
@ZP68LBL DS    0H                                                     *
************************************** END OF BLOCK 4 OF 5 ZP60008 ****
*     DO;                           /* PROCESS ERASE WRITE           */
*       LDNZARM=LDNZRM;             /* SET MAX DATA FOR ATTN READ    */
         LH    @14,LDNZRM(,PTRLDN)                                 0678
         N     @14,@CF04326                                        0678
         STH   @14,LDNZARM(,PTRLDN)                                0678
*       CCWCODE=EWRITE;             /* SET CCW OPCODE = ERASE WR     */
         MVI   CCWCODE(PTRCCW),X'05'                               0679
*       CCWCOUNT=FDBDATCT;          /* SET CCW DATA COUNT            */
         LH    @14,FDBDATCT(,PTRZLB)                               0680
         STH   @14,CCWCOUNT(,PTRCCW)                               0680
************************************** START OF BLOCK 5 OF 5 ZP60008 **
         L     @14,LCPNXLCW(,PTRLCP)                                  *
         TM    LCCWSOP(@14),B'11000000'                               *
         BNO   @RC00676                CORRECT CCW OPCODE WAS SET     *
         MVI   CCWCODE(PTRCCW),X'0D'   SET CCW OPCODE = ERASE WR ALT  *
         TM    LCCWSOP(@14),B'00010000'                               *
         BO    @RC00676                CORRECT CCW OPCODE WAS SET     *
         MVI   CCWCODE(PTRCCW),X'11'   SET CCW OPCODE = WR STRUC FLD  *
************************************** END OF BLOCK 5 OF 5 ZP60008 ****
*     END;                          /* END ERASE WRITE               */
*   ELSE                            /* NOT ERASE WRITE               */
*     DO;                           /* PROCESS NON ERASE WRITE       */
         B     @RC00676                                            0682
@RF00676 DS    0H                                                  0683
*       IF ZCRTIC='0'B THEN         /* IF 1ST CCW IN CHAN PGM        */
         L     @14,RPHCRR(,PTRRPH)                                 0683
         L     @14,CRACRR(,@14)                                    0683
         TM    ZCRTIC(@14),B'10000000'                             0683
         BNZ   @RF00683                                            0683
*         DO;                       /* FIRST CCW IN CHANNEL PGM      */
*           ZLBCPAD2=ZLBCPAD1;      /* MOVE ADDRESS TO 2ND CCW       */
         MVC   ZLBCPAD2(3,PTRZLB),ZLBCPAD1(PTRZLB)                 0685
*           ZLBCPTC2=FDBDATCT;      /* MOVE DATA COUNT TO 2ND CCW    */
         LH    @14,FDBDATCT(,PTRZLB)                               0686
         STH   @14,ZLBCPTC2(,PTRZLB)                               0686
*           ZLBCCW1=ZLBSEL;         /* SET 1ST CCW TO SELECT         */
         MVC   ZLBCCW1(8,PTRZLB),@CB04143                          0687
*           PTRCCW=PTRCCW+LENGTH(ISTCCW);/* ADDRESS NEXT CCW         */
         AL    PTRCCW,@CF00072                                     0688
*         END;                      /* END FIRST CCW IN CHAN PGM     */
*       ELSE                        /* NOT FIRST CCW IN CHAN PGM     */
*         CCWCOUNT=FDBDATCT;        /* SET UP DATA COUNT             */
         B     @RC00683                                            0690
@RF00683 LH    @14,FDBDATCT(,PTRZLB)                               0690
         STH   @14,CCWCOUNT(,PTRCCW)                               0690
*       CCWCODE=WRITE;              /* SET CCW OPERATION CODE        */
@RC00683 MVI   CCWCODE(PTRCCW),X'01'                               0691
*     END;                          /* END NON ERASE WRITE           */
*   IF LCCWMODE=LMS THEN            /* IF WRITE CONVERSATIONAL       */
@RC00676 L     @14,LCPNXLCW(,PTRLCP)                               0693
         TM    LCCWMODE(@14),B'00001100'                           0693
         BNZ   @RF00693                                            0693
*     DO;                           /* SET WRITE CONV. FLAGS         */
*       ZLBRT02='1'B;               /* INDICATE EOB                  */
*       ZLBRT03='1'B;               /* INDICATE WRITE/READ           */
*       ZLBRT05='1'B;               /* INDICATE DECREMENT SCHED      */
*       ZLBRT06='1'B;               /* INDICATE WRITE                */
*       ZLBRT07='1'B;               /* INDICATE SCHEDULE             */
         OI    ZLBRT02(PTRZLB),B'00110111'                         0699
*       IF ADDR(PTRDNC->NCBDEVCH)->DEVTCODE=DEV3284 ADDR(PTRDNC->  0700
*           NCBDEVCH)->DEVTCODE=DEV3286 THEN/* IF DEVICE 3284   3286 */
         LA    @14,36                                              0700
         ALR   @14,PTRDNC                                          0700
         CLI   DEVTCODE(@14),X'1A'                                 0700
         BE    @RT00700                                            0700
         CLI   DEVTCODE(@14),X'1B'                                 0700
         BNE   @RF00700                                            0700
@RT00700 DS    0H                                                  0701
*         DO;                       /* PROCESS 3270 PRINTER DEVICE   */
*           LCPZRT00='1'B;          /* FLAG LOGICAL ERROR            */
         OI    LCPZRT00(PTRLCP),B'10000000'                        0702
*           LCPMNRCD=FRMUSELE;      /* FLAG USER ERROR               */
         MVI   LCPMNRCD(PTRLCP),X'A3'                              0703
*         END;                      /* END 3270 PRINTER              */
*       ELSE                                                       0705
*         ;                         /* NOT 3270 PRINTER              */
@RF00700 DS    0H                                                  0706
*     END;                          /* END WRITE CONVERSATIONAL      */
*   ELSE                            /* NOT WRITE CONVERSATIONAL      */
*     IF ZLBWCCSP='1'B THEN         /* IF START PRINT INDICATED      */
         B     @RC00693                                            0707
@RF00693 TM    ZLBWCCSP(PTRZLB),B'00001000'                        0707
         BNO   @RF00707                                            0707
*       DO;                         /* SET START PRINT FLAGS         */
*         ZLBRT02='1'B;             /* INDICATE EOB                  */
*         ZLBRT05='1'B;             /* INDICATE DECREMENT SCHED      */
*         ZLBRT06='1'B;             /* INDICATE WRITE                */
*         ZLBRT07='1'B;             /* INDICATE SCHEDULE             */
         OI    ZLBRT02(PTRZLB),B'00100111'                         0712
*       END;                        /* END START PRINT FLAG SETS     */
*     ELSE                          /* START PRINT BIT OFF           */
*       ZLBRT06='1'B;               /* INDICATE START PRINT          */
         B     @RC00707                                            0714
@RF00707 OI    ZLBRT06(PTRZLB),B'00000010'                         0714
*   DO WHILE(FDBFDBA^=0);           /* CHAIN IN FDB'S TO I/O CHAIN   */
@RC00707 DS    0H                                                  0715
@RC00693 B     @DE00715                                            0715
@DL00715 DS    0H                                                  0716
*     CCWFLAGS=ZLBDC;               /* INDICATE CHAIN DATA           */
         MVI   CCWFLAGS(PTRCCW),X'80'                              0716
*     PTRCCW=PTRCCW+LENGTH(ISTCCW); /* POINT AT NEXT CCW             */
         AL    PTRCCW,@CF00072                                     0717
*     CCWCODE=TIC;                  /* SET COMMAND TO TIC            */
         MVI   CCWCODE(PTRCCW),X'08'                               0718
*     PTRG15=FDBFDBA+ZLBCPOFS;      /* ADDRESS NEXT CCW PACKAGE      */
         LA    PTRG15,4                                            0719
         AL    PTRG15,FDBFDBA(,PTRZLB)                             0719
*     GEN;                                                         0720
*                                      /* CONVERT TO REAL ADDRESS    */
         LRA   PTRG15,0(0,PTRG15)      CONVERT TO REAL ADDRESS
*     CCWADDR=PTRG15;               /* SET REAL ADDRESS IN CCW       */
         STCM  PTRG15,7,CCWADDR(PTRCCW)                            0721
*     PTRZLB=FDBFDBA;               /* ADDRESS NEXT BUFFER           */
         L     PTRZLB,FDBFDBA(,PTRZLB)                             0722
*     PTRCCW=ADDR(ZLBCCW1);         /* ADDRESS CCW IN BUFFER         */
         LA    PTRCCW,ZLBCCW1(,PTRZLB)                             0723
*     PTRG15=FDBDATAA;              /* ADDRESS OF BUFFER DATA        */
         L     PTRG15,FDBDATAA(,PTRZLB)                            0724
*     GEN;                                                         0725
*                                      /* CONVERT TO REAL ADDRESS    */
         LRA   PTRG15,0(0,PTRG15)      CONVERT TO REAL ADDRESS
*     CCWADDR=PTRG15;               /* SET REAL ADDRESS IN CCW       */
         STCM  PTRG15,7,CCWADDR(PTRCCW)                            0726
*     CCWCODE=WRITE;                /* SET CCW OPERATION CODE        */
         MVI   CCWCODE(PTRCCW),X'01'                               0727
*     CCWCOUNT=FDBDATCT;            /* SET DATA COUNT IN CCW         */
         LH    @14,FDBDATCT(,PTRZLB)                               0728
         STH   @14,CCWCOUNT(,PTRCCW)                               0728
*   END;                            /* FDB'S IN CHAIN ARE CHAINED    */
@DE00715 L     @14,FDBFDBA(,PTRZLB)                                0729
         LTR   @14,@14                                             0729
         BNZ   @DL00715                                            0729
*   CCWFLAGS=ZLBSLI;                /* SET SLI FLAG IN LASW CCW      */
         MVI   CCWFLAGS(PTRCCW),X'20'                              0730
*   ZCRBFPTR=PTRZLB;                /* SET BUFFER POINTER IN ZCR     */
         L     @14,RPHCRR(,PTRRPH)                                 0731
         L     @14,CRACRR(,@14)                                    0731
         ST    PTRZLB,ZCRBFPTR(,@14)                               0731
*   ZCRCCWA=PTRCCW;                 /* ADDRESS OF LAST CCW           */
         ST    PTRCCW,ZCRCCWA(,@14)                                0732
*BUG01:                                                            0733
*   ZCRTIC='1'B;                    /* SET ZCR TIC FLAG              */
BUG01    L     @14,RPHCRR(,PTRRPH)                                 0733
         L     @14,CRACRR(,@14)                                    0733
         OI    ZCRTIC(@14),B'10000000'                             0733
*   RFY                                                            0734
*     PTRG14 RSTD;                  /* TO RESTORE RETURN REG         */
*BUG02:                                                            0735
*   PTRG14=ZCRSVWK1;                /* RESTORE RETURN REG            */
BUG02    L     @09,RPHCRR(,PTRRPH)                                 0735
         L     @09,CRACRR(,@09)                                    0735
         L     PTRG14,ZCRSVWK1(,@09)                               0735
*   RFY                                                            0736
*     PTRG14 UNRSTD;                /* RESTORED                      */
*   END FORMCCW;                    /* END OF SUBROUTINE             */
@EL00002 DS    0H                                                  0737
@EF00002 DS    0H                                                  0737
@ER00002 BR    @14                                                 0737
@PB00002 DS    0H                                                  0738
*/* TPEPILOG                                                         */
*                                                                  0738
*   GEN(PRINT OFF);                                                0738
         PRINT OFF
*   GEN(PRINT ON);                                                 0739
*                                                                  0739
         PRINT ON
*/* END OF TPEPILOG                                                  */
*                                                                  0740
*   END ISTZBFBA                    /* END OF COMPILATION            */
*                                                                  0740
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IECDIOSB)                                       */
*/*%INCLUDE SYSLIB  (IHASRB  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*                                                                  0740
*       ;                                                          0740
@EL00001 DS    0H                                                  0740
@EF00001 DS    0H                                                  0740
@ER00001 BR    @14                                                 0740
@DATA    DS    0H
@CH00035 DC    H'1'
@DATD    DSECT
         DS    0F
ISTZBFBA CSECT
         DS    0F
@CF00072 DC    F'8'
@CF01716 DC    F'12'
@CF04326 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
IOSBPTR  DS    A
SRBPTR   DS    A
CVTPTR   DS    A
LCPBPTR  DS    A
LDNCBPTR DS    A
DNCBPTR  DS    A
FMCBPTR  DS    A
FSBPTR   DS    A
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ISTZBFBA CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CC03533 DC    C'RECORD  '
@CC04296 DC    C'BCBA'
@CB04143 DC    X'0B00000060000001'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RPHPTR   EQU   @01
GPR01P   EQU   @01
GPR08P   EQU   @08
GPR12P   EQU   @12
GPR13P   EQU   @13
GPR14P   EQU   @14
GPR15P   EQU   @15
PTRRPH   EQU   @01
PTRATC   EQU   @02
PTRLDN   EQU   @03
PTRDNC   EQU   @04
PTRFMC   EQU   @05
PTRZLB   EQU   @06
PTRLCP   EQU   @07
PTRLSC   EQU   @07
PTRCCW   EQU   @08
PTRG12   EQU   @12
PTRG13   EQU   @13
PTRG14   EQU   @14
PTRG15   EQU   @15
GPR00F   EQU   @00
GPR00P   EQU   @00
GPR01F   EQU   @01
GPR02F   EQU   @02
GPR02P   EQU   @02
GPR03F   EQU   @03
GPR03P   EQU   @03
GPR04F   EQU   @04
GPR04P   EQU   @04
GPR05F   EQU   @05
GPR05P   EQU   @05
GPR06F   EQU   @06
GPR06P   EQU   @06
GPR07F   EQU   @07
GPR07P   EQU   @07
GPR08F   EQU   @08
GPR09F   EQU   @09
GPR09P   EQU   @09
GPR10F   EQU   @10
GPR10P   EQU   @10
GPR11F   EQU   @11
GPR11P   EQU   @11
GPR12F   EQU   @12
GPR13F   EQU   @13
GPR14F   EQU   @14
GPR15F   EQU   @15
PTRG00   EQU   @00
PTRG09   EQU   @09
PTRG10   EQU   @10
PTRG11   EQU   @11
ATCLCPTR EQU   1032
ISTZPSVT EQU   0
ZPSZDFC0 EQU   ISTZPSVT+4
ZPSZBFY0 EQU   ISTZPSVT+24
ISTZFSVT EQU   0
ZFSZEFBB EQU   ISTZFSVT
ZFSZEABB EQU   ZFSZEFBB
ZFSZEFAB EQU   ISTZFSVT+4
ZFSZEAAB EQU   ZFSZEFAB
ISTZLBVT EQU   0
ISTCCW   EQU   0
CCWVADDR EQU   ISTCCW
CCWCODE  EQU   CCWVADDR
CCWADDR  EQU   CCWVADDR+1
CCWFLAGS EQU   ISTCCW+4
CCWSPARE EQU   ISTCCW+5
CCWCOUNT EQU   ISTCCW+6
ISTRPH   EQU   0
RPHFLAGS EQU   ISTRPH+2
RPHAPTYP EQU   RPHFLAGS
RPHFSTLC EQU   RPHFLAGS
RPHFLGB  EQU   ISTRPH+3
RPHRPHA  EQU   ISTRPH+4
RPHTSKID EQU   ISTRPH+8
RPHRESMA EQU   ISTRPH+16
RPHWPFLG EQU   RPHRESMA
RPHWEA   EQU   ISTRPH+24
RPHCSPA  EQU   RPHWEA
RPHSRPRM EQU   ISTRPH+28
RPHCRR   EQU   ISTRPH+32
RPHPABQA EQU   ISTRPH+36
RPHWORK  EQU   ISTRPH+40
RPHSAVE1 EQU   RPHWORK
RPHSBITS EQU   RPHSAVE1+1
ISTZSAVE EQU   0
ZSAZSVBC EQU   ISTZSAVE
ZSAZSVMS EQU   ZSAZSVBC
ZSAZACTV EQU   ZSAZSVMS
ZSAZSVFC EQU   ISTZSAVE+4
ZSAZSVRR EQU   ISTZSAVE+8
ZSAZSVVR EQU   ISTZSAVE+12
ZSAZTRAC EQU   ISTZSAVE+36
ISTLCCW  EQU   0
LCCWOP   EQU   ISTLCCW
LCCWSI   EQU   LCCWOP
LCCWSD   EQU   LCCWOP
LCCWRWOP EQU   LCCWOP
LCCWSOP  EQU   LCCWRWOP
LCCWCTL  EQU   LCCWRWOP
LCCWMODE EQU   LCCWCTL
LCCWFLAG EQU   ISTLCCW+1
LCCWLSI  EQU   LCCWFLAG
LCCWRFI  EQU   LCCWFLAG
LCCWCNT  EQU   ISTLCCW+2
ISTLCPB  EQU   0
LCPREQTG EQU   ISTLCPB+2
LCPFLAGS EQU   LCPREQTG
LCPZRT00 EQU   LCPFLAGS
LCPZRT01 EQU   LCPFLAGS
LCPZF001 EQU   LCPFLAGS
LCPZRT02 EQU   LCPZF001
LCPZF002 EQU   LCPFLAGS
LCPZRT03 EQU   LCPZF002
LCPZF003 EQU   LCPFLAGS
LCPZRT04 EQU   LCPZF003
LCPZF004 EQU   LCPFLAGS
LCPZRT05 EQU   LCPZF004
LCPZRT06 EQU   LCPFLAGS
LCPZRT07 EQU   LCPFLAGS
LCPMNRCD EQU   LCPREQTG+1
LCPZRT08 EQU   LCPMNRCD
LCPZRT09 EQU   LCPMNRCD
LCPCHAIN EQU   ISTLCPB+4
LCPCHAI1 EQU   LCPCHAIN
LCPRUCNT EQU   ISTLCPB+8
LCPFLAG2 EQU   ISTLCPB+9
LCPTLBPI EQU   LCPFLAG2
LCPFID0  EQU   LCPFLAG2
LCPSEQ   EQU   ISTLCPB+10
LCPCID   EQU   ISTLCPB+16
LCPNXLCW EQU   ISTLCPB+20
LCPFDBA  EQU   ISTLCPB+24
LCPFLG1  EQU   ISTLCPB+37
LCPFLCCW EQU   ISTLCPB+40
LCPLCCW  EQU   ISTLCPB+48
LCPPABA  EQU   LCPLCCW+4
LCPRPHA  EQU   LCPPABA
ISTZCRR  EQU   0
ZCRCRR   EQU   ISTZCRR
ZCRFLGS1 EQU   ISTZCRR+12
ZCRFLGS2 EQU   ISTZCRR+13
ZCRSWFLD EQU   ISTZCRR+14
ZCRENDSH EQU   ZCRSWFLD
ZCRNDLCP EQU   ZCRSWFLD
ZCRRESET EQU   ZCRSWFLD
ZCRFLGS3 EQU   ISTZCRR+15
ZCRTIC   EQU   ZCRFLGS3
ZCRTPDIS EQU   ZCRFLGS3
ZCRGENSW EQU   ISTZCRR+16
ZCRPFLGS EQU   ISTZCRR+17
ZCRIBPR  EQU   ISTZCRR+18
ZCRSCPSW EQU   ISTZCRR+19
ZCRPARMS EQU   ISTZCRR+24
ZCRFBPTR EQU   ZCRPARMS
ZCRDFRDA EQU   ZCRPARMS+10
ZCRPCOD1 EQU   ZCRPARMS+12
ZCRPLSBF EQU   ZCRPCOD1
ZCRPCOD2 EQU   ZCRPARMS+13
ZCRCCWA  EQU   ISTZCRR+40
ZCRBFPTR EQU   ISTZCRR+44
ZCRZLB   EQU   ISTZCRR+48
ZCRSVRTN EQU   ISTZCRR+56
ZCRWKARA EQU   ISTZCRR+156
ZCRSVWK1 EQU   ZCRWKARA
ZCRCIDSV EQU   ISTZCRR+192
ZCRAUDIT EQU   ISTZCRR+440
ZCRENTER EQU   ZCRAUDIT+5
ZCREBCBA EQU   ZCRENTER+1
ZCRLCPB  EQU   ISTZCRR+480
ZCRRHRU  EQU   ZCRLCPB
ISTPFCRR EQU   0
PFCCRR   EQU   ISTPFCRR
PFCCRRID EQU   PFCCRR
PFCCRRLN EQU   PFCCRR+2
PFCHDR   EQU   ISTPFCRR+4
PFCCRRO  EQU   PFCHDR
PFCFRRO  EQU   PFCHDR+4
ISTAPCRR EQU   0
APCATFLG EQU   ISTAPCRR+16
APCRFLG  EQU   ISTAPCRR+18
APCSAVE  EQU   ISTAPCRR+44
APCCOMF  EQU   ISTAPCRR+116
APCCOMF1 EQU   APCCOMF
APC31FLG EQU   ISTAPCRR+132
APC52FLG EQU   ISTAPCRR+133
APC53FLG EQU   ISTAPCRR+134
APC54FLG EQU   ISTAPCRR+135
APC57FLG EQU   ISTAPCRR+136
ISTDCCRR EQU   0
CRRSPACE EQU   ISTDCCRR+12
CRRSAREA EQU   0
CRRMAS   EQU   CRRSAREA+148
CRRMAS1  EQU   CRRMAS
CRRMAS2  EQU   CRRMAS+1
CRRMAS3  EQU   CRRMAS+2
CRRMAS4  EQU   CRRMAS+3
CRRRMAS1 EQU   CRRMAS+4
CRRRMAS2 EQU   CRRMAS+5
CRRRMAS3 EQU   CRRMAS+6
CRRSMAS  EQU   CRRRMAS3
CRRATS   EQU   CRRSAREA+156
CRRATS1  EQU   CRRATS
CRRATS2  EQU   CRRATS+1
CRRATS3  EQU   CRRATS+2
CRRATS4  EQU   CRRATS+3
CRRRATS1 EQU   CRRATS+4
CRRRATS2 EQU   CRRATS+5
CRRRATS3 EQU   CRRATS+6
CRRSATS  EQU   CRRRATS3
CRRFLGS1 EQU   CRRSAREA+164
CRRFLGS2 EQU   CRRSAREA+165
CRRFLGS3 EQU   CRRSAREA+166
CRRFLGS4 EQU   CRRSAREA+167
CRRFLGS  EQU   CRRSAREA+168
CRRRFLG1 EQU   CRRSAREA+169
CRRRTYPE EQU   CRRRFLG1
CRRFDBK1 EQU   CRRSAREA+170
CRRFDB2  EQU   CRRFDBK1+1
CRRFDB3  EQU   CRRFDBK1+2
CRRFDBK2 EQU   CRRSAREA+176
CRRDSB   EQU   CRRFDBK2
CRRESR   EQU   CRRFDBK2+2
CRRTRBUF EQU   CRRSAREA+204
CRRBFLGS EQU   CRRSAREA+280
ISTASCRR EQU   0
ASCFLAGS EQU   ISTASCRR+16
ASCFLG1  EQU   ASCFLAGS
ASCFLG2  EQU   ASCFLAGS+2
ASCFLG3  EQU   ASCFLAGS+4
ASCUSRGS EQU   ISTASCRR+28
ISTRIA   EQU   0
RIAABRGS EQU   ISTRIA+16
RIAFLGS  EQU   ISTRIA+80
RIAFLG1  EQU   RIAFLGS
RIAFLG2  EQU   RIAFLGS+1
ISTCFCRR EQU   0
CFCAUDIT EQU   ISTCFCRR
CFCNTRD  EQU   CFCAUDIT
CFCCRT   EQU   CFCAUDIT+1
ISTCRA   EQU   0
CRABASIC EQU   ISTCRA
CRAHDR   EQU   CRABASIC
CRACRR   EQU   CRAHDR
CRALKACT EQU   CRABASIC+8
CRASVC   EQU   ISTCRA+848
CRABUFA  EQU   CRASVC+68
ISTPAB   EQU   0
PABWQCHN EQU   ISTPAB
PABWEQA  EQU   PABWQCHN
PABCHAIN EQU   PABWQCHN+4
PABRPHFG EQU   ISTPAB+12
PABFLAGS EQU   PABRPHFG
PABERLCK EQU   PABFLAGS
PABERRLK EQU   PABERLCK
ISTDYPAB EQU   0
ISTLOK   EQU   0
LOKCHN   EQU   ISTLOK+1
LOKCHNG  EQU   LOKCHN
@NM00037 EQU   LOKCHNG+2
ISTATCVT EQU   0
ATCCOM   EQU   ISTATCVT
ATCSTAT  EQU   ATCCOM
ATCSTAT1 EQU   ATCSTAT
ATCSTFLG EQU   ATCSTAT+1
ATCPOFLG EQU   ATCSTAT+2
ATCSTAT4 EQU   ATCSTAT+3
ATCIOTRC EQU   ATCCOM+140
ATCTHTRC EQU   ATCIOTRC
ATCCSMR  EQU   ISTATCVT+296
ATCSHRFG EQU   ISTATCVT+316
ATCHPGM  EQU   ISTATCVT+384
ATCVLCNT EQU   ISTATCVT+772
ATCSOPD  EQU   ISTATCVT+792
ATCSIPD  EQU   ISTATCVT+800
ATCSECST EQU   ISTATCVT+812
ATCAOSM  EQU   ISTATCVT+912
ATCGSRBQ EQU   ATCAOSM+4
ATCGSRBG EQU   ATCGSRBQ
ATCZPSVT EQU   ATCAOSM+72
ATCICAPP EQU   ATCAOSM+100
ATCLDAPP EQU   ATCAOSM+120
ATCDAPVT EQU   ATCAOSM+140
ATCVTFLG EQU   ATCAOSM+392
ATCZFLAG EQU   ATCAOSM+588
ISTDEVCH EQU   0
DEVSHCH  EQU   ISTDEVCH
DEVCHAR  EQU   DEVSHCH
DEVTCODE EQU   ISTDEVCH+1
DEVFLAGS EQU   ISTDEVCH+3
DEVFCCTL EQU   DEVFLAGS
DEVCHAR3 EQU   DEVFLAGS
ISTNCB   EQU   0
NCBFLAGS EQU   ISTNCB+24
NCBFRAS  EQU   NCBFLAGS+1
NCBFTRIO EQU   NCBFRAS
NCBFLAG1 EQU   NCBFLAGS+2
NCBDEVCH EQU   ISTNCB+36
ISTLDNCB EQU   0
LDNCFLAG EQU   ISTLDNCB+54
LDNZRM   EQU   ISTLDNCB+102
LDNZARM  EQU   ISTLDNCB+104
LDNFLAGS EQU   ISTLDNCB+107
LDNFLAG2 EQU   ISTLDNCB+110
LDNZIOLK EQU   ISTLDNCB+184
LDNZERPF EQU   ISTLDNCB+185
LDNZCPAN EQU   LDNZERPF
LDNZEPIN EQU   LDNZERPF
LDNZLPC  EQU   ISTLDNCB+186
LDNDCDEB EQU   ISTLDNCB+304
LDNZSAV3 EQU   ISTLDNCB+376
LDNZSAV4 EQU   LDNZSAV3+8
LDNZH003 EQU   ISTLDNCB+577
ISTDNCB  EQU   0
DNCOS    EQU   ISTDNCB+56
DNCZFLGS EQU   DNCOS
DNCBSCED EQU   DNCOS+2
ISTPROCD EQU   0
PROPROC  EQU   ISTPROCD
PROPROC1 EQU   PROPROC
PROPROC2 EQU   PROPROC+1
PROPROC3 EQU   PROPROC+2
PROPROC4 EQU   PROPROC+3
PROPROCS EQU   0
PROSETMS EQU   PROPROCS+1
PROSETM2 EQU   PROSETMS
PROSETM3 EQU   PROSETMS+1
PROSETM4 EQU   PROSETMS+2
ISTFMCB  EQU   0
FMCSTAT  EQU   ISTFMCB+28
FMCSTAT1 EQU   ISTFMCB+29
FMCCMDFL EQU   ISTFMCB+31
FMCCMPS1 EQU   ISTFMCB+36
FMCMODE  EQU   ISTFMCB+52
FMCSIPA  EQU   ISTFMCB+148
FMCNXOSQ EQU   ISTFMCB+152
FMCNXCFM EQU   FMCNXOSQ
FMCOSSN  EQU   FMCNXCFM
FMCNXOSC EQU   FMCNXOSQ+2
FMCSSTAT EQU   ISTFMCB+159
FMCPACE  EQU   ISTFMCB+160
FMCPACEN EQU   FMCPACE
FMCPACEM EQU   FMCPACE+1
FMCPACPC EQU   FMCPACE+2
FMCCVAL  EQU   FMCPACE+3
FMCOBCE  EQU   FMCCVAL
FMCCLEXT EQU   ISTFMCB+164
FMCRPLA  EQU   FMCCLEXT
FMCFBA   EQU   FMCCLEXT+4
FMCCMPS2 EQU   FMCCLEXT+16
FMCFLGA  EQU   FMCCMPS2
FMCFLGCL EQU   FMCCMPS2+1
FMCPSCMD EQU   FMCCMPS2+2
FMCPSTAT EQU   FMCCMPS2+3
FMCSTAT2 EQU   ISTFMCB+186
FMCMODEB EQU   ISTFMCB+189
FMCCLSEQ EQU   ISTFMCB+190
FMCRRESP EQU   ISTFMCB+195
FMCSSEGQ EQU   ISTFMCB+200
FMCFBAS  EQU   ISTFMCB+216
FMCZV002 EQU   FMCFBAS
FMCSNCTL EQU   ISTFMCB+224
FMCSCFLG EQU   FMCSNCTL
FMCVS1   EQU   ISTFMCB+232
FMCZFLAG EQU   FMCVS1
FMCZF006 EQU   FMCZFLAG
FMCZFA06 EQU   FMCZF006
FMCZFD06 EQU   FMCZF006+1
FMCLBXM  EQU   FMCVS1+12
FMCSHEAQ EQU   FMCLBXM
FMCLCPBQ EQU   FMCVS1+16
FMCLCPAQ EQU   FMCVS1+20
FMCSEQ1  EQU   FMCVS1+34
FMCZFLG2 EQU   FMCVS1+35
FMCCVFLG EQU   FMCVS1+44
FMCFLAG  EQU   0
FMCFLGB  EQU   FMCFLAG
ISTFDB   EQU   0
FDBFDBA  EQU   ISTFDB
FDBDATAA EQU   ISTFDB+4
FDBDATCT EQU   ISTFDB+8
ISTFSB   EQU   0
FSBFSB   EQU   ISTFSB
FSBMNRCD EQU   FSBFSB+2
FSBSFLGS EQU   FSBFSB+3
FSBFSBA  EQU   FSBFSB+4
FSBBTH   EQU   FSBFSB+8
FSBCID   EQU   FSBBTH
FSBRQTAG EQU   FSBBTH+4
FSBSEQID EQU   FSBRQTAG
FSBFLAGS EQU   FSBSEQID
FSBSEQ   EQU   FSBSEQID+1
FSBCSWST EQU   FSBBTH+6
FSBTHFLD EQU   FSBCSWST
FSBTH1   EQU   FSBTHFLD
FSBSYSRS EQU   FSBTH1
FSBTH2   EQU   FSBTHFLD+1
FSBEXTRS EQU   FSBTH2
FSBXFSTS EQU   FSBEXTRS
FSBXCODE EQU   FSBEXTRS
FSBNETRS EQU   FSBFSB+16
FSBSRCAT EQU   FSBNETRS
FSBERC   EQU   FSBNETRS+1
FSBFBMI  EQU   FSBERC
FSBDMGRS EQU   FSBFSB+18
FSBSS1   EQU   FSBDMGRS
FSBSS2   EQU   FSBDMGRS+1
FSBLCPB  EQU   FSBFSB+20
FSBMSGID EQU   FSBLCPB
FSBLCCWA EQU   FSBFSB+24
FSBRLSTS EQU   FSBLCCWA
ISTZLBUF EQU   0
ZLBFSM   EQU   ISTZLBUF+4
ZLBLNG1  EQU   ZLBFSM
ISTLSCB  EQU   0
LSC1WORD EQU   ISTLSCB
LSCREQTG EQU   LSC1WORD+2
LSCZRT02 EQU   LSCREQTG
LSCZRT03 EQU   LSCREQTG
LSCZRT04 EQU   LSCREQTG
LSCZRT05 EQU   LSCREQTG
LSCZRT06 EQU   LSCREQTG
LSCZRT07 EQU   LSCREQTG
LSCZMNRC EQU   LSCREQTG+1
LSCZRT08 EQU   LSCZMNRC
LSCZRT09 EQU   LSCZMNRC
LSCCHAIN EQU   ISTLSCB+4
LSCCHAI1 EQU   LSCCHAIN
LSCRUCNT EQU   ISTLSCB+8
LSCFLGS  EQU   ISTLSCB+9
LSCSEQ   EQU   ISTLSCB+10
LSCFDBA  EQU   ISTLSCB+24
LCPZTIE  EQU   LCPCID
LCPZSNAM EQU   LCPZTIE+8
FSBCOMBN EQU   FSBNETRS
FSBRHFLD EQU   FSBCOMBN+1
FSBRH3   EQU   FSBRHFLD+2
FSBLDFLG EQU   FSBRH3
@NM00057 EQU   FSBRQTAG
ZLBBTRAN EQU   ISTZLBUF
ZLBFDBZ  EQU   ZLBBTRAN
ZLBLNG2  EQU   ZLBBTRAN+14
ZLBAIO   EQU   ZLBBTRAN+16
ZLBDTIO  EQU   ZLBFSM
ZLBCCW1  EQU   ZLBDTIO
ZLBCPAD1 EQU   ZLBCCW1+1
ZLBCCW2  EQU   ZLBDTIO+8
ZLBCPAD2 EQU   ZLBCCW2+1
ZLBCPTC2 EQU   ZLBCCW2+6
ZLBCCW3  EQU   ZLBDTIO+16
ZLBSNS   EQU   ZLBDTIO+28
ZLBERC   EQU   ZLBDTIO+29
ZLBECI   EQU   ZLBERC
ZLBEBI   EQU   ZLBERC
ZLBEMI   EQU   ZLBERC
ZLBETI   EQU   ZLBERC
ZLBFBMI  EQU   ZLBERC
ZLBLCCWA EQU   ZLBDTIO+36
ZLBSAF   EQU   ZLBDTIO+48
ZLBSTAT  EQU   ZLBSAF
ZLBDEVST EQU   ZLBSTAT
ZLBRQTG  EQU   ZLBDTIO+50
ZLBRQFLG EQU   ZLBRQTG
ZLBRT02  EQU   ZLBRQFLG
ZLBRT03  EQU   ZLBRQFLG
ZLBRT04  EQU   ZLBRQFLG
ZLBRT05  EQU   ZLBRQFLG
ZLBRT06  EQU   ZLBRQFLG
ZLBRT07  EQU   ZLBRQFLG
ZLBLSTST EQU   ZLBDTIO+52
ZLBFLAGS EQU   ZLBDTIO+56
ZLBWCCSP EQU   ZLBFLAGS
ZLBTEXTA EQU   ZLBCCW3
ZLBTEXTB EQU   ZLBFLAGS
ZLBTEXT1 EQU   ZLBTEXTB
ZLBTEXTC EQU   ZLBFLAGS
ZLBPPL   EQU   ZLBTEXTC
ZLBFAIO  EQU   ZLBAIO
ZLBFSB   EQU   ZLBFAIO
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
ZLBFDBS  EQU   ZLBFAIO+32
ZLBPPCSC EQU   ZLBPPL+14
ZLBPPRS1 EQU   ZLBPPL+13
ZLBPPRSV EQU   ZLBPPL+12
ZLBPPCLG EQU   ZLBPPL+12
ZLBPPCC  EQU   ZLBPPL+12
ZLBPPINT EQU   ZLBPPL+12
ZLBPPHIO EQU   ZLBPPL+12
ZLBPP    EQU   ZLBPPL+4
ZLBPPLDB EQU   ZLBPPL+1
ZLBPPLF  EQU   ZLBPPL
ZLBTEXT  EQU   ZLBTEXTA+8
ZLBRSV0A EQU   ZLBTEXTA
ZLBTCP   EQU   ZLBFLAGS+8
ZLBTCSW  EQU   ZLBFLAGS+1
ZLBRSV09 EQU   ZLBFLAGS
ZLBRSV07 EQU   ZLBFLAGS
ZLBRQSEQ EQU   ZLBRQTG+1
ZLBRT0B  EQU   ZLBRQFLG+1
ZLBRT0A  EQU   ZLBRQFLG+1
ZLBRT09  EQU   ZLBRQFLG+1
ZLBRT08  EQU   ZLBRQFLG+1
ZLBRT01  EQU   ZLBRQFLG
ZLBRT00  EQU   ZLBRQFLG
ZLBCHNST EQU   ZLBSTAT+1
ZLBUCST  EQU   ZLBDEVST
ZLBDEST  EQU   ZLBDEVST
ZLBRSV10 EQU   ZLBDEVST
ZLBLSTBF EQU   ZLBDTIO+44
ZLBRSV11 EQU   ZLBDTIO+40
ZLBLCPBA EQU   ZLBDTIO+32
ZLBCOMP  EQU   ZLBDTIO+31
ZLBRSV08 EQU   ZLBDTIO+30
ZLBRSV05 EQU   ZLBERC
ZLBELI   EQU   ZLBERC
ZLBSOC   EQU   ZLBSNS
ZLBSCC   EQU   ZLBSNS
ZLBSUS   EQU   ZLBSNS
ZLBSDC   EQU   ZLBSNS
ZLBSEQCK EQU   ZLBSNS
ZLBSBOL  EQU   ZLBSNS
ZLBSIR   EQU   ZLBSNS
ZLBSCR   EQU   ZLBSNS
ZLBRSV12 EQU   ZLBDTIO+24
ZLBCPTC3 EQU   ZLBCCW3+6
ZLBRSV04 EQU   ZLBCCW3+5
ZLBCPFL3 EQU   ZLBCCW3+4
ZLBCPAD3 EQU   ZLBCCW3+1
ZLBCPCF3 EQU   ZLBCCW3
ZLBRSV03 EQU   ZLBCCW2+5
ZLBCPFL2 EQU   ZLBCCW2+4
ZLBCPCF2 EQU   ZLBCCW2
ZLBCPTC1 EQU   ZLBCCW1+6
ZLBCMOD  EQU   ZLBCCW1+5
ZLBCPFL1 EQU   ZLBCCW1+4
ZLBCPCF1 EQU   ZLBCCW1
ZLBRSV01 EQU   ZLBBTRAN+12
FSBRT0B  EQU   @NM00057+1
FSBRT0A  EQU   @NM00057+1
FSBRT09  EQU   @NM00057+1
FSBRT08  EQU   @NM00057+1
FSBRT07  EQU   @NM00057
FSBRT06  EQU   @NM00057
FSBRT05  EQU   @NM00057
FSBRT04  EQU   @NM00057
FSBRT03  EQU   @NM00057
FSBRT02  EQU   @NM00057
FSBRT01  EQU   @NM00057
FSBRT00  EQU   @NM00057
FSBLDCUF EQU   FSBLDFLG
FSBLDSIF EQU   FSBLDFLG
FSBLDSOF EQU   FSBLDFLG
FSBLDEBF EQU   FSBLDFLG
FSBLDBBF EQU   FSBLDFLG
FSBLDFME EQU   FSBLDFLG
FSBLDSCF EQU   FSBLDFLG
FSBLDRMF EQU   FSBLDFLG
FSBRH2   EQU   FSBRHFLD+1
FSBRH1   EQU   FSBRHFLD
FSBALIGN EQU   FSBCOMBN
LCPZTRV4 EQU   LCPZSNAM+4
LCPZTRV1 EQU   LCPZSNAM
LCPZSNA  EQU   LCPZTIE+4
LCPZFMCA EQU   LCPZTIE
LSCTLBAD EQU   ISTLSCB+28
LSCFDB2  EQU   LSCFDBA+1
LSCFDB1  EQU   LSCFDBA
LSCLCCWA EQU   ISTLSCB+20
LSCLCPBA EQU   ISTLSCB+16
LSCLCCW1 EQU   ISTLSCB+12
LSCRRCNT EQU   LSCSEQ+1
LSCRRCCT EQU   LSCSEQ
LSCATOP  EQU   LSCFLGS
LSCFREE  EQU   LSCFLGS
LSCDSTAT EQU   LSCFLGS
LSCEXRES EQU   LSCFLGS
LSCZRIMM EQU   LSCFLGS
LSCRSV01 EQU   LSCFLGS
LSCSMODE EQU   LSCFLGS
LSCZMIRC EQU   LSCRUCNT
LSCCHAI2 EQU   LSCCHAIN+1
LSCCHNG  EQU   LSCCHAI1
LSCZRTSC EQU   LSCZMNRC
LSCZRT0B EQU   LSCZMNRC
LSCZRT0A EQU   LSCZMNRC
LSCZRTL9 EQU   LSCZRT09
LSCZRTL8 EQU   LSCZRT08
LSCZRTL7 EQU   LSCZRT07
LSCZRTL6 EQU   LSCZRT06
LSCZRTL5 EQU   LSCZRT05
LSCZRTL4 EQU   LSCZRT04
LSCZRTL3 EQU   LSCZRT03
LSCZRTL2 EQU   LSCZRT02
LSCZRT01 EQU   LSCREQTG
LSCZRT00 EQU   LSCREQTG
LSCLNGTH EQU   LSC1WORD+1
LSCTYPE  EQU   LSC1WORD
ZLBCHAIN EQU   ISTZLBUF
FSBFDB   EQU   ISTFSB+32
FSBRSV01 EQU   FSBFSB+30
FSBTHCNT EQU   FSBFSB+28
FSBRLRSV EQU   FSBRLSTS
FSBCFTX  EQU   FSBRLSTS
FSBICNCB EQU   FSBMSGID
FSBSSOC  EQU   FSBSS2
FSBSSCC  EQU   FSBSS2
FSBSSDC  EQU   FSBSS2
FSBSSEC  EQU   FSBSS2
FSBSSIR  EQU   FSBSS2
FSBSSCR  EQU   FSBSS2
@NM00056 EQU   FSBSS2
@NM00055 EQU   FSBSS1
FSBSSDE  EQU   FSBSS1
FSBSSUS  EQU   FSBSS1
@NM00054 EQU   FSBSS1
FSBSOHI  EQU   FSBERC
FSBLGI   EQU   FSBERC
FSBLMRI  EQU   FSBFBMI
FSBETI   EQU   FSBERC
FSBEMI   EQU   FSBERC
FSBEBI   EQU   FSBERC
FSBECI   EQU   FSBERC
FSBELI   EQU   FSBERC
FSBMJRCD EQU   FSBSRCAT
FSBXLCI  EQU   FSBXCODE
FSBXFINS EQU   FSBXCODE
FSBXNORM EQU   FSBXFSTS
FSBSCODE EQU   FSBSYSRS
FSBSPHSE EQU   FSBSYSRS
FSBSERR  EQU   FSBSYSRS
FSBCMD   EQU   FSBSEQ
FSBDTRCE EQU   FSBFLAGS
FSBASBTU EQU   FSBFLAGS
FSBINPET EQU   FSBFLAGS
FSBNONCB EQU   FSBFLAGS
FSBLBIND EQU   FSBFLAGS
FSBFFIND EQU   FSBFLAGS
FSBACIND EQU   FSBFLAGS
FSBRFIND EQU   FSBFLAGS
FSBDAF   EQU   FSBCID+2
FSBSAF   EQU   FSBCID
FSBGATE  EQU   FSBFSBA
FSBRSV02 EQU   FSBSFLGS
FSBPGBUF EQU   FSBSFLGS
FSBMNSDA EQU   FSBMNRCD
FSBMNOA  EQU   FSBMNRCD
FSBMNDIF EQU   FSBMNRCD
FSBMNEOP EQU   FSBMNRCD
FSBMNDNU EQU   FSBMNRCD
FSBMNATN EQU   FSBMNRCD
FSBMNRVI EQU   FSBMNRCD
FSBMNELI EQU   FSBMNRCD
FSBLNGTH EQU   FSBFSB+1
FSBTYPE  EQU   FSBFSB
FDBOFSET EQU   ISTFDB+10
FMCFLRSV EQU   FMCFLGB
FMCFLGA8 EQU   FMCFLGB
FMCCLRPH EQU   FMCVS1+45
FMCRSV0X EQU   FMCCVFLG
FMCVYRPH EQU   FMCCVFLG
FMCZV004 EQU   FMCVS1+40
FMCLOCK2 EQU   FMCVS1+36
@NM00053 EQU   FMCZFLG2
FMCZF027 EQU   FMCZFLG2
FMCZF026 EQU   FMCZFLG2
FMCSEQ1B EQU   FMCSEQ1
FMCSEQ1T EQU   FMCSEQ1
FMCZX006 EQU   FMCVS1+33
FMCZX005 EQU   FMCVS1+32
FMCZX004 EQU   FMCVS1+31
FMCZX003 EQU   FMCVS1+30
FMCZX002 EQU   FMCVS1+29
FMCZX001 EQU   FMCVS1+28
FMCZV001 EQU   FMCVS1+24
FMCAWATQ EQU   FMCLCPAQ+1
@NM00052 EQU   FMCLCPAQ
FMCLCPB2 EQU   FMCLCPBQ+1
FMCLCPB1 EQU   FMCLCPBQ
FMCASCDQ EQU   FMCSHEAQ+1
@NM00051 EQU   FMCSHEAQ
FMCSHEDQ EQU   FMCVS1+8
FMCZFCSQ EQU   FMCVS1+6
FMCZH001 EQU   FMCVS1+4
FMCZF025 EQU   FMCZFLAG+3
FMCZF024 EQU   FMCZFLAG+3
FMCZF023 EQU   FMCZFLAG+3
FMCZF022 EQU   FMCZFLAG+3
FMCZF021 EQU   FMCZFLAG+3
FMCZF020 EQU   FMCZFLAG+3
FMCZF019 EQU   FMCZFLAG+3
FMCZF018 EQU   FMCZFLAG+3
FMCZF017 EQU   FMCZFLAG+2
FMCZF016 EQU   FMCZFLAG+2
FMCZF015 EQU   FMCZFLAG+2
FMCZF014 EQU   FMCZFLAG+2
FMCZF013 EQU   FMCZFLAG+2
FMCZF012 EQU   FMCZFLAG+2
FMCZF011 EQU   FMCZFLAG+2
FMCZF010 EQU   FMCZFLAG+2
FMCZF00F EQU   FMCZFLAG+1
FMCZF00E EQU   FMCZFLAG+1
FMCZF00D EQU   FMCZFLAG+1
FMCZF00C EQU   FMCZFLAG+1
FMCZF00B EQU   FMCZFLAG+1
FMCRSV10 EQU   FMCZFLAG+1
FMCZF009 EQU   FMCZFLAG+1
FMCZFC06 EQU   FMCZF006
FMCZFB06 EQU   FMCZF006
FMCZF005 EQU   FMCZFLAG
FMCZF004 EQU   FMCZFLAG
FMCZF003 EQU   FMCZFLAG
FMCZF002 EQU   FMCZFLAG
FMCZF001 EQU   FMCZFLAG
FMCFRESA EQU   ISTFMCB+228
FMCSCSQN EQU   FMCSNCTL+2
FMCSCCTL EQU   FMCSNCTL+1
FMCSTCTL EQU   FMCSCFLG
FMCSCCLO EQU   FMCSCFLG
FMCAPRO  EQU   FMCSCFLG
FMCLURO  EQU   FMCSCFLG
FMCOBSAC EQU   FMCSCFLG
FMCIBSAC EQU   FMCSCFLG
FMCFBRE  EQU   ISTFMCB+220
FMCFBXM  EQU   FMCZV002
FMCASEGQ EQU   ISTFMCB+212
FMCRDTPT EQU   ISTFMCB+208
FMCLOCK  EQU   ISTFMCB+204
FMCSEGD  EQU   FMCSSEGQ
FMCRSPLM EQU   ISTFMCB+198
FMCPSTRS EQU   ISTFMCB+196
@NM00050 EQU   FMCRRESP
FMCTSLHA EQU   FMCRRESP
FMCFRRN  EQU   FMCRRESP
FMCFME   EQU   FMCRRESP
FMCFEX   EQU   FMCRRESP
FMCFPE   EQU   FMCRRESP
FMCCTLB  EQU   ISTFMCB+194
FMCBSQNO EQU   FMCCLSEQ+2
FMCTSQNO EQU   FMCCLSEQ
FMCOBPRG EQU   FMCMODEB
FMCIBPRG EQU   FMCMODEB
FMCRESOT EQU   FMCMODEB
FMCRSTSR EQU   FMCMODEB
FMCLUQ   EQU   FMCMODEB
FMCAPQ   EQU   FMCMODEB
FMCCLEAR EQU   FMCMODEB
FMCHOLD  EQU   FMCMODEB
FMCIPSEQ EQU   ISTFMCB+188
FMCLUSTR EQU   ISTFMCB+187
FMCRSV87 EQU   FMCSTAT2
FMCSEQI  EQU   FMCSTAT2
FMCCPIP  EQU   FMCSTAT2
FMCALIPR EQU   FMCSTAT2
FMCIAIO  EQU   FMCSTAT2
FMCZF00A EQU   FMCSTAT2
FMCVPIP  EQU   FMCSTAT2
FMCBHSET EQU   ISTFMCB+185
FMCPRMRC EQU   FMCCLEXT+20
FMCRSV89 EQU   FMCPSTAT
FMCPCLSD EQU   FMCPSTAT
FMCDDOCD EQU   FMCPSTAT
FMCIDVFD EQU   FMCPSTAT
FMCELKST EQU   FMCPSTAT
FMCRSV88 EQU   FMCPSCMD
FMCRDBLK EQU   FMCPSCMD
FMCDSEOC EQU   FMCPSCMD
FMCPURGE EQU   FMCPSCMD
FMCRESTI EQU   FMCPSCMD
FMCCNTCT EQU   FMCPSCMD
FMCINVT  EQU   FMCPSCMD
FMCFLGB7 EQU   FMCFLGCL
FMCFLGB6 EQU   FMCFLGCL
FMCFLGB5 EQU   FMCFLGCL
FMCFLGB4 EQU   FMCFLGCL
FMCFLGB3 EQU   FMCFLGCL
FMCFLGB2 EQU   FMCFLGCL
FMCFLGB1 EQU   FMCFLGCL
FMCFLGB0 EQU   FMCFLGCL
FMCFLGA7 EQU   FMCFLGA
FMCFLGA6 EQU   FMCFLGA
FMCFLGA5 EQU   FMCFLGA
FMCFLGA4 EQU   FMCFLGA
FMCFLGA3 EQU   FMCFLGA
FMCFLGA2 EQU   FMCFLGA
FMCFLGA1 EQU   FMCFLGA
FMCFLGA0 EQU   FMCFLGA
FMCDCLOK EQU   FMCCLEXT+12
FMCRAFM  EQU   FMCCLEXT+8
FMCFBPTR EQU   FMCFBA+1
FMCFBRSV EQU   FMCFBA
FMCRPLPT EQU   FMCRPLA+1
FMCRPLRS EQU   FMCRPLA
FMCPRCLS EQU   FMCCVAL
FMCIBCE  EQU   FMCCVAL
FMCONLY  EQU   FMCOBCE
FMCLAST  EQU   FMCOBCE
FMCMIDLE EQU   FMCOBCE
FMCFIRST EQU   FMCOBCE
FMCCPCNT EQU   FMCPACPC
FMCMPCNT EQU   FMCPACEM
FMCNPCNT EQU   FMCPACEN
FMCCONF  EQU   FMCSSTAT
FMCPURCH EQU   FMCSSTAT
FMCNSALU EQU   FMCSSTAT
FMCBIP   EQU   FMCSSTAT
FMCSDTR  EQU   FMCSSTAT
FMCUIPI  EQU   FMCSSTAT
FMCCIPI  EQU   FMCSSTAT
FMCSNBI  EQU   FMCSSTAT
FMCRVD01 EQU   ISTFMCB+158
FMCISSN  EQU   ISTFMCB+156
FMCOASN  EQU   FMCNXOSC
FMCSIP   EQU   FMCSIPA
FMCEXLST EQU   ISTFMCB+144
FMCPAB5  EQU   ISTFMCB+128
FMCPAB4  EQU   ISTFMCB+112
FMCPAB3  EQU   ISTFMCB+96
FMCPAB2  EQU   ISTFMCB+80
FMCPAB1  EQU   ISTFMCB+64
FMCFASYA EQU   ISTFMCB+60
FMCPROCD EQU   ISTFMCB+48
FMCVWT   EQU   ISTFMCB+44
FMCRPLH  EQU   ISTFMCB+40
FMCBUFNB EQU   FMCCMPS1+2
FMCBUFLM EQU   FMCCMPS1
FMCDEBA  EQU   ISTFMCB+32
@NM00049 EQU   FMCCMDFL
FMCSNA   EQU   FMCCMDFL
FMCVSNA  EQU   FMCCMDFL
FMCCMDR  EQU   FMCCMDFL
@NM00048 EQU   ISTFMCB+30
@NM00047 EQU   FMCSTAT1
FMCHPURG EQU   FMCSTAT1
FMCVSP2  EQU   FMCSTAT1
FMCVSP1  EQU   FMCSTAT
FMCLTEAS EQU   FMCSTAT
FMCZF007 EQU   FMCSTAT
FMCDEDSC EQU   FMCSTAT
FMCDEVOF EQU   FMCSTAT
FMCDAPT  EQU   FMCSTAT
FMCPRMTE EQU   FMCSTAT
FMCPRMTR EQU   FMCSTAT
FMCUSFLD EQU   ISTFMCB+24
FMCFMCBA EQU   ISTFMCB+20
FMCDNCBA EQU   ISTFMCB+16
FMCDVTA  EQU   ISTFMCB+12
FMCTSKID EQU   ISTFMCB+8
FMCNXTCB EQU   ISTFMCB+4
FMCSAF   EQU   ISTFMCB+2
FMCLNGTH EQU   ISTFMCB+1
FMCTYPE  EQU   ISTFMCB
PROSRDEF EQU   PROSETM4
PRORSV47 EQU   PROSETM4
PROSCON  EQU   PROSETM4
PRORSV46 EQU   PROSETM3
PROSMONT EQU   PROSETM3
PRORSV45 EQU   PROSETM3
PROSNTO  EQU   PROSETM3
PRORSV44 EQU   PROSETM3
PRORSV43 EQU   PROSETM2
PROSNTFL EQU   PROSETM2
PRORSV42 EQU   PROSETM2
PRORSV41 EQU   PROPROCS
PROMODC  EQU   PROPROC4
PROMODT  EQU   PROPROC4
PROMODM  EQU   PROPROC4
PROMODB  EQU   PROPROC4
PRORSV14 EQU   PROPROC4
PRORSV13 EQU   PROPROC4
PRORSV12 EQU   PROPROC4
PROEIB   EQU   PROPROC4
PRORSV11 EQU   PROPROC3
PROMONT2 EQU   PROPROC3
PROMONIT EQU   PROPROC3
PROSUBLK EQU   PROPROC3
PRONTO   EQU   PROPROC3
PROLGIN  EQU   PROPROC3
PROERPI  EQU   PROPROC3
PRORSV07 EQU   PROPROC3
PROCFTX  EQU   PROPROC2
PROEMLC  EQU   PROPROC2
PRONTFL  EQU   PROPROC2
PRORSV05 EQU   PROPROC2
PRORSV04 EQU   PROPROC2
PROLGOT  EQU   PROPROC2
PROERPO  EQU   PROPROC2
PRORSV03 EQU   PROPROC2
PRORPLC  EQU   PROPROC1
PROCS    EQU   PROPROC1
PROCA    EQU   PROPROC1
PRORESPX EQU   PROPROC1
PRODFASY EQU   PROPROC1
PROXPOPT EQU   PROPROC1
PROTRUNC EQU   PROPROC1
PROASYIP EQU   PROPROC1
DNCZC001 EQU   DNCOS+40
DNCLOCK  EQU   DNCOS+36
DNCZV005 EQU   DNCOS+32
DNCZV004 EQU   DNCOS+28
DNCZV003 EQU   DNCOS+24
DNCZV002 EQU   DNCOS+21
DNCZX001 EQU   DNCOS+20
DNCZV001 EQU   DNCOS+17
DNCZX003 EQU   DNCOS+16
DNCZV000 EQU   DNCOS+12
DNCSESCQ EQU   DNCOS+8
DNCSESIQ EQU   DNCOS+4
DNCACIP  EQU   DNCBSCED+1
DNCLICP  EQU   DNCBSCED
DNCZF008 EQU   DNCZFLGS+1
DNCZPSRD EQU   DNCZFLGS+1
DNCPSOL  EQU   DNCZFLGS+1
DNCZF007 EQU   DNCZFLGS+1
DNCZF006 EQU   DNCZFLGS+1
DNCZF005 EQU   DNCZFLGS+1
DNCZF004 EQU   DNCZFLGS+1
DNCZF003 EQU   DNCZFLGS
DNCZF002 EQU   DNCZFLGS
DNCZRSCH EQU   DNCZFLGS
DNCDISC  EQU   DNCZFLGS
DNCCONT  EQU   DNCZFLGS
DNCINVIT EQU   DNCZFLGS
DNCSESS  EQU   DNCZFLGS
DNCZF001 EQU   DNCZFLGS
DNCMODE  EQU   ISTDNCB+49
DNCBHSET EQU   ISTDNCB+48
DNCNCB   EQU   ISTDNCB
LDNZS00F EQU   LDNZH003+1
LDNZS00E EQU   LDNZH003+1
LDNZS00D EQU   LDNZH003+1
LDNZS00C EQU   LDNZH003+1
LDNZS00B EQU   LDNZH003+1
LDNZS007 EQU   LDNZH003
LDNZS006 EQU   LDNZH003
LDNZS005 EQU   LDNZH003
LDNZS004 EQU   LDNZH003
LDNZS003 EQU   LDNZH003
LDNZS002 EQU   LDNZH003
LDNZS001 EQU   LDNZH003
LDNZS000 EQU   LDNZH003
LDNZX006 EQU   ISTLDNCB+576
LDNZC001 EQU   ISTLDNCB+569
LDNZX005 EQU   ISTLDNCB+568
LDNZV006 EQU   ISTLDNCB+564
LDNSRB   EQU   ISTLDNCB+520
LDNIOSB  EQU   ISTLDNCB+412
@NM00046 EQU   LDNZSAV3+28
LDNRSV06 EQU   LDNZSAV4+16
LDNZSAV6 EQU   LDNZSAV4+12
LDNZSAV5 EQU   LDNZSAV4
LDNZSAVE EQU   LDNZSAV3
LDNZSAV2 EQU   ISTLDNCB+368
LDNZSAV1 EQU   ISTLDNCB+352
LDNZ3RR  EQU   ISTLDNCB+348
LDNZ2RR  EQU   ISTLDNCB+344
LDNZ1RR  EQU   ISTLDNCB+340
LDNRSV0B EQU   ISTLDNCB+336
LDNRSV0A EQU   ISTLDNCB+332
LDNRSV09 EQU   ISTLDNCB+328
LDNRSV08 EQU   ISTLDNCB+324
LDNRSV07 EQU   ISTLDNCB+320
LDNDEAD  EQU   LDNDCDEB+12
LDNUCBAD EQU   LDNDCDEB+8
LDNAPPAD EQU   LDNDCDEB+5
LDNEXSCL EQU   LDNDCDEB+4
LDNDCBAD EQU   LDNDCDEB+1
LDNDEBID EQU   LDNDCDEB
LDNZRIND EQU   ISTLDNCB+300
LDNRPH   EQU   ISTLDNCB+192
LDNZTCP  EQU   ISTLDNCB+188
LDNZCHNC EQU   ISTLDNCB+187
LDNZLPC7 EQU   LDNZLPC
LDNZLPC6 EQU   LDNZLPC
LDNZLPC5 EQU   LDNZLPC
LDNZLPC4 EQU   LDNZLPC
LDNZLPC3 EQU   LDNZLPC
LDNZLPC2 EQU   LDNZLPC
LDNZLPC1 EQU   LDNZLPC
LDNZLPC0 EQU   LDNZLPC
LDNRSV05 EQU   LDNZERPF
LDNZCTOV EQU   LDNZEPIN
LDNZF001 EQU   LDNZEPIN
LDNZFRDW EQU   LDNZCPAN
LDNZFRD  EQU   LDNZCPAN
LDNZNARD EQU   LDNZCPAN
LDNRSV04 EQU   LDNZIOLK
LDNZATBF EQU   LDNZIOLK
LDNZERLK EQU   LDNZIOLK
LDNZDSIC EQU   LDNZIOLK
LDNZPAB1 EQU   ISTLDNCB+168
LDNZV005 EQU   ISTLDNCB+160
LDNZS1VR EQU   ISTLDNCB+136
LDNZS1RR EQU   ISTLDNCB+132
LDNZS1FC EQU   ISTLDNCB+128
LDNZS1BC EQU   ISTLDNCB+124
LDNZLOCK EQU   ISTLDNCB+120
LDNZFBUF EQU   ISTLDNCB+116
LDNZLAST EQU   ISTLDNCB+112
LDNRSV02 EQU   LDNFLAG2
LDNZFF04 EQU   LDNFLAG2
LDNZFF69 EQU   LDNFLAGS+2
LDNTPBIO EQU   LDNFLAGS+2
LDNZFF03 EQU   LDNFLAGS+2
LDNZFF02 EQU   LDNFLAGS+2
LDNZFF01 EQU   LDNFLAGS+2
LDNZFF00 EQU   LDNFLAGS+2
LDNCLOSD EQU   LDNFLAGS+2
LDNZENTR EQU   LDNFLAGS+2
LDNZICCW EQU   LDNFLAGS+1
LDNZREC  EQU   LDNFLAGS+1
LDNZCTXT EQU   LDNFLAGS+1
LDNZATLK EQU   LDNFLAGS+1
LDNZCHNE EQU   LDNFLAGS+1
LDNZATTP EQU   LDNFLAGS+1
LDNZIOBY EQU   LDNFLAGS+1
LDNZF00A EQU   LDNFLAGS+1
LDNZF009 EQU   LDNFLAGS
LDNZF008 EQU   LDNFLAGS
LDNZF007 EQU   LDNFLAGS
LDNZF006 EQU   LDNFLAGS
LDNZF005 EQU   LDNFLAGS
LDNZF004 EQU   LDNFLAGS
LDNZF003 EQU   LDNFLAGS
LDNZF002 EQU   LDNFLAGS
LDNZHDCC EQU   ISTLDNCB+106
LDNZRB   EQU   ISTLDNCB+100
LDNCPQ   EQU   ISTLDNCB+96
LDNSIOQ  EQU   ISTLDNCB+92
LDNZX002 EQU   ISTLDNCB+91
LDNZX001 EQU   ISTLDNCB+90
LDNZH002 EQU   ISTLDNCB+88
LDNZV001 EQU   ISTLDNCB+84
LDNZACSW EQU   ISTLDNCB+76
LDNZC002 EQU   ISTLDNCB+68
LDNCSWSV EQU   ISTLDNCB+60
LDNCHFLD EQU   ISTLDNCB+56
LDNRESRV EQU   ISTLDNCB+55
@NM00045 EQU   LDNCFLAG
LDNRMF   EQU   LDNCFLAG
LDNIBI   EQU   LDNCFLAG
LDNTSAF  EQU   ISTLDNCB+52
LDNCUUA  EQU   ISTLDNCB+48
LDNCB    EQU   ISTLDNCB
NCBRSV01 EQU   ISTNCB+46
NCBSWDAF EQU   ISTNCB+44
NCBFMCBP EQU   ISTNCB+32
NCBLTRC  EQU   ISTNCB+30
NCBRVPT1 EQU   ISTNCB+28
NCBNMLLN EQU   NCBFLAGS+3
@NM00044 EQU   NCBFLAG1
@NM00043 EQU   NCBFLAG1
NCBTTF   EQU   NCBFLAG1
NCBRSYNC EQU   NCBFLAG1
NCBRSTRT EQU   NCBFLAG1
NCBCONF  EQU   NCBFLAG1
NCBSNAI  EQU   NCBFLAG1
NCBFLTIO EQU   NCBFTRIO
NCBCSTAT EQU   NCBFLAGS
NCBNCSL  EQU   ISTNCB+22
NCBNCBA  EQU   ISTNCB+20
NCBFMCBA EQU   ISTNCB+16
NCBNSNA  EQU   ISTNCB+12
NCBTSKID EQU   ISTNCB+8
NCBRDTE  EQU   ISTNCB+4
NCBDAF   EQU   ISTNCB+2
NCBLNGTH EQU   ISTNCB+1
NCBTYPE  EQU   ISTNCB
DEVRSV03 EQU   ISTDEVCH+5
DEVPHYSA EQU   ISTDEVCH+4
DEVCSLPN EQU   DEVCHAR3
DEVCSTCL EQU   DEVCHAR3
DEVCCHEK EQU   DEVCHAR3
DEVCATTN EQU   DEVCHAR3
DEVCSWL  EQU   DEVFCCTL
DEVCRVB  EQU   DEVFCCTL
DEVCSSL  EQU   DEVFCCTL
DEVCBSC  EQU   DEVFCCTL
DEVMCODE EQU   ISTDEVCH+2
DEVCHAR2 EQU   DEVTCODE
DEVRSV01 EQU   DEVCHAR
DEVCCTL  EQU   DEVCHAR
DEVNNSPT EQU   DEVCHAR
DEVSPS   EQU   DEVCHAR
DEVSUBND EQU   DEVCHAR
DEVCONVR EQU   DEVCHAR
DEVOTPUT EQU   DEVCHAR
DEVINPUT EQU   DEVCHAR
ATCAOS   EQU   ISTATCVT+1584
ATCPOPAB EQU   ATCAOSM+640
ATCVIOPM EQU   ATCAOSM+636
ATCTPMMI EQU   ATCAOSM+632
ATCTPMPB EQU   ATCAOSM+600
ATCRPLCT EQU   ATCAOSM+594
ATCCRACT EQU   ATCAOSM+592
ATCSRBCT EQU   ATCAOSM+590
ATCRSV75 EQU   ATCAOSM+589
ATCRSV66 EQU   ATCZFLAG
ATCZF001 EQU   ATCZFLAG
ATCTPCP1 EQU   ATCAOSM+584
ATCTPCP0 EQU   ATCAOSM+580
ATCAICTN EQU   ATCAOSM+576
ATCZR01  EQU   ATCAOSM+572
ATCMPLTA EQU   ATCAOSM+568
ATCASCB  EQU   ATCAOSM+564
ATCAP86  EQU   ATCAOSM+560
ATCAP85  EQU   ATCAOSM+556
ATCAP84  EQU   ATCAOSM+552
ATCAP83  EQU   ATCAOSM+548
ATCAP82  EQU   ATCAOSM+544
ATCAP69  EQU   ATCAOSM+540
ATCAP66  EQU   ATCAOSM+536
ATCAP62  EQU   ATCAOSM+532
ATCAPC59 EQU   ATCAOSM+528
ATCAP56  EQU   ATCAOSM+524
ATCAP55  EQU   ATCAOSM+520
ATCRCFY0 EQU   ATCAOSM+516
ATCAP41  EQU   ATCAOSM+512
ATCAPC25 EQU   ATCAOSM+508
ATCAP23  EQU   ATCAOSM+504
ATCTPSPB EQU   ATCAOSM+472
ATCTRMPB EQU   ATCAOSM+440
ATCPSTA  EQU   ATCAOSM+432
ATCSMABF EQU   ATCAOSM+428
ATCSMAPR EQU   ATCAOSM+424
ATCTPWQA EQU   ATCAOSM+420
ATCSMAID EQU   ATCAOSM+416
ATCSMARA EQU   ATCAOSM+412
ATCCACXA EQU   ATCAOSM+408
ATCZLAAB EQU   ATCAOSM+404
ATCATA10 EQU   ATCAOSM+400
ATCHLTCB EQU   ATCAOSM+396
@NM00042 EQU   ATCVTFLG
ATCVTACT EQU   ATCVTFLG
ATCRPT40 EQU   ATCAOSM+388
ATCRPT39 EQU   ATCAOSM+384
ATCRPT38 EQU   ATCAOSM+380
ATCRPT37 EQU   ATCAOSM+376
ATCRPT36 EQU   ATCAOSM+372
ATCRPT35 EQU   ATCAOSM+368
ATCRPT34 EQU   ATCAOSM+364
ATCRPT33 EQU   ATCAOSM+360
ATCRPT32 EQU   ATCAOSM+356
ATCRPT31 EQU   ATCAOSM+352
ATCRPT30 EQU   ATCAOSM+348
ATCRPT29 EQU   ATCAOSM+344
ATCRPT28 EQU   ATCAOSM+340
ATCRPT27 EQU   ATCAOSM+336
ATCRPT26 EQU   ATCAOSM+332
ATCRPT25 EQU   ATCAOSM+328
ATCRPT24 EQU   ATCAOSM+324
ATCRPT23 EQU   ATCAOSM+320
ATCRPT22 EQU   ATCAOSM+316
ATCRPT21 EQU   ATCAOSM+312
ATCRPT20 EQU   ATCAOSM+308
ATCRPT19 EQU   ATCAOSM+304
ATCRPT18 EQU   ATCAOSM+300
ATCRPT17 EQU   ATCAOSM+296
ATCRPT16 EQU   ATCAOSM+292
ATCRPT15 EQU   ATCAOSM+288
ATCRPT14 EQU   ATCAOSM+284
ATCRPT13 EQU   ATCAOSM+280
ATCRPT12 EQU   ATCAOSM+276
ATCRPT11 EQU   ATCAOSM+272
ATCAP38  EQU   ATCAOSM+268
ATCAP37  EQU   ATCAOSM+264
ATCZDFJ0 EQU   ATCAOSM+260
ATCAP51  EQU   ATCAOSM+256
ATCZPAB2 EQU   ATCAOSM+224
ATCZPAB1 EQU   ATCAOSM+192
ATCZLFVT EQU   ATCAOSM+188
ATCZLPVT EQU   ATCAOSM+184
ATCZDVTX EQU   ATCAOSM+180
ATCZDVTA EQU   ATCAOSM+176
ATCZDVT9 EQU   ATCAOSM+172
ATCZDVT8 EQU   ATCAOSM+168
ATCZDVT7 EQU   ATCAOSM+164
ATCRSV56 EQU   ATCDAPVT+22
ATCDAPDG EQU   ATCDAPVT+20
ATCDXCEA EQU   ATCDAPVT+16
ATCDCEA  EQU   ATCDAPVT+12
ATCDPCIA EQU   ATCDAPVT+8
ATCDSIOA EQU   ATCDAPVT+4
ATCDEOEA EQU   ATCDAPVT
ATCZLAEA EQU   ATCLDAPP+16
ATCZLCEA EQU   ATCLDAPP+12
ATCRSV17 EQU   ATCLDAPP+8
ATCSMFRR EQU   ATCLDAPP+4
ATCCDTID EQU   ATCLDAPP
ATCZAEA  EQU   ATCICAPP+16
ATCZCEA  EQU   ATCICAPP+12
ATCCDTCB EQU   ATCICAPP+8
ATCZSIOA EQU   ATCICAPP+4
ATCCDRPH EQU   ATCICAPP
ATCAP65  EQU   ATCAOSM+96
ATCZDVT6 EQU   ATCAOSM+92
ATCZDVT4 EQU   ATCAOSM+88
ATCZDVT3 EQU   ATCAOSM+84
ATCZDVT1 EQU   ATCAOSM+80
ATCICNCB EQU   ATCAOSM+76
ATCZFSVT EQU   ATCAOSM+68
ATCAP64  EQU   ATCAOSM+64
ATCAP63  EQU   ATCAOSM+60
ATCAP61  EQU   ATCAOSM+56
ATCAP58  EQU   ATCAOSM+52
ATCAP57  EQU   ATCAOSM+48
ATCAP54  EQU   ATCAOSM+44
ATCAP53  EQU   ATCAOSM+40
ATCAP52  EQU   ATCAOSM+36
ATCAP34  EQU   ATCAOSM+32
ATCAP32  EQU   ATCAOSM+28
ATCAP31  EQU   ATCAOSM+24
ATCAP12  EQU   ATCAOSM+20
ATCAP11  EQU   ATCAOSM+16
ATCCMTCB EQU   ATCAOSM+12
ATCPRPH  EQU   ATCAOSM+8
ATCGSRBF EQU   ATCGSRBG
ATCSRBRT EQU   ATCAOSM
ATCRSVBB EQU   ISTATCVT+908
ATCVDLOK EQU   ISTATCVT+904
ATCVFPAB EQU   ISTATCVT+872
ATCVDPAB EQU   ISTATCVT+840
ATCIOECB EQU   ISTATCVT+836
ATCINCW3 EQU   ISTATCVT+832
ATCMODTB EQU   ISTATCVT+828
ATCUSSPT EQU   ISTATCVT+824
ATCSRTAB EQU   ISTATCVT+820
@NM00041 EQU   ISTATCVT+818
ATCNMCTR EQU   ISTATCVT+816
ATCSEC51 EQU   ATCSECST
ATCSEC40 EQU   ATCSIPD+8
ATCSEC30 EQU   ATCSIPD+4
ATCSEC21 EQU   ATCSIPD
ATCSEC10 EQU   ATCSOPD+4
ATCSEC01 EQU   ATCSOPD
ATCPOIA  EQU   ISTATCVT+788
ATCPODVT EQU   ISTATCVT+784
ATCS49XL EQU   ISTATCVT+780
ATCS49XI EQU   ISTATCVT+776
ATCLCLCT EQU   ATCVLCNT+2
ATCRNCNT EQU   ATCVLCNT
ATCCFEAD EQU   ISTATCVT+768
ATCPTR00 EQU   ISTATCVT+736
ATCRSV10 EQU   ISTATCVT+704
ATCTACB  EQU   ISTATCVT+700
ATCVTINM EQU   ISTATCVT+696
ATCTCLIM EQU   ISTATCVT+692
ATCTCLOM EQU   ISTATCVT+688
ATCVTIPB EQU   ISTATCVT+656
ATCTCIPB EQU   ISTATCVT+624
ATCTIPAB EQU   ISTATCVT+592
ATCOCCCB EQU   ISTATCVT+588
ATCOCCOB EQU   ISTATCVT+584
ATCCDLAD EQU   ISTATCVT+580
ATCCCLAD EQU   ISTATCVT+576
ATCDLRPB EQU   ISTATCVT+544
ATCPGPAB EQU   ISTATCVT+512
ATCVPAB1 EQU   ISTATCVT+480
ATCRSV97 EQU   ISTATCVT+476
ATCRDTLK EQU   ISTATCVT+472
ATCVOCLK EQU   ISTATCVT+468
ATCCDFDN EQU   ISTATCVT+464
ATCCDFIN EQU   ISTATCVT+460
ATCDVTLK EQU   ISTATCVT+456
ATCAP36  EQU   ISTATCVT+452
ATCAP35  EQU   ISTATCVT+448
ATCAP33  EQU   ISTATCVT+444
ATCRSV99 EQU   ISTATCVT+412
ATCLDECB EQU   ISTATCVT+408
ATCLDNCS EQU   ISTATCVT+404
ATCCDPTR EQU   ISTATCVT+400
ATCADEL  EQU   ISTATCVT+396
ATCTODVT EQU   ISTATCVT+392
ATCDEBCH EQU   ISTATCVT+388
ATCHBSIZ EQU   ATCHPGM+2
ATCHBFNO EQU   ATCHPGM
ATCCRME  EQU   ISTATCVT+380
ATCRVCHS EQU   ISTATCVT+372
ATCECTLP EQU   ISTATCVT+368
ATCZDVTB EQU   ISTATCVT+364
ATCECPRT EQU   ISTATCVT+360
ATCVTLOD EQU   ISTATCVT+356
ATCTRPAB EQU   ISTATCVT+352
ATCMSGM  EQU   ISTATCVT+348
ATCMSGP  EQU   ISTATCVT+344
ATCEPT   EQU   ISTATCVT+340
ATCDVT   EQU   ISTATCVT+336
ATCTRCPT EQU   ISTATCVT+332
ATCDVLOD EQU   ISTATCVT+328
ATCALERT EQU   ISTATCVT+324
ATCEPA   EQU   ISTATCVT+320
ATCSAF   EQU   ISTATCVT+318
ATCXRANG EQU   ISTATCVT+317
ATCLAST  EQU   ATCSHRFG
ATCSHRTN EQU   ISTATCVT+308
ATCUEP   EQU   ISTATCVT+304
ATCOCRT  EQU   ISTATCVT+300
ATCCSMA  EQU   ATCCSMR
ATCESC02 EQU   ISTATCVT+292
ATCESC01 EQU   ISTATCVT+288
ATCCDFND EQU   ISTATCVT+284
ATCCDDEL EQU   ISTATCVT+280
ATCCDADD EQU   ISTATCVT+276
ATCMNT   EQU   ISTATCVT+272
ATCRSV16 EQU   ISTATCVT+270
ATCMAXID EQU   ISTATCVT+269
ATCMSGSP EQU   ATCCOM+268
ATCCIDM  EQU   ATCCOM+266
ATCACTRM EQU   ATCCOM+264
ATCNERAP EQU   ATCCOM+260
ATCNESAL EQU   ATCCOM+256
ATCRCC65 EQU   ATCCOM+252
ATCRCC26 EQU   ATCCOM+248
ATCRCC63 EQU   ATCCOM+244
ATCRSV11 EQU   ATCCOM+242
ATCVTMID EQU   ATCCOM+240
ATCAPOST EQU   ATCCOM+236
ATCNERFN EQU   ATCCOM+232
ATCNERNE EQU   ATCCOM+228
ATCNERCV EQU   ATCCOM+224
ATCNERST EQU   ATCCOM+220
ATCDCC61 EQU   ATCCOM+216
ATCDCC60 EQU   ATCCOM+212
ATCSRTDF EQU   ATCCOM+208
ATCSRTAD EQU   ATCCOM+204
ATCFIRA  EQU   ATCCOM+200
ATCSMBQ  EQU   ATCCOM+196
ATCSMRC  EQU   ATCCOM+192
ATCSMRS  EQU   ATCCOM+188
ATCSMQU  EQU   ATCCOM+184
ATCSMRQ  EQU   ATCCOM+180
ATCACDA  EQU   ATCCOM+176
ATCSTMA  EQU   ATCCOM+172
ATCFRSTR EQU   ATCCOM+168
ATCGTSTR EQU   ATCCOM+164
ATCREADA EQU   ATCCOM+160
ATCALOAD EQU   ATCCOM+156
ATCBLDLA EQU   ATCCOM+152
ATCFBRPH EQU   ATCCOM+148
ATCBFTRC EQU   ATCCOM+144
ATCTPBUF EQU   ATCTHTRC
ATCREMOV EQU   ATCCOM+136
ATCADD   EQU   ATCCOM+132
ATCBPDA  EQU   ATCCOM+128
ATCDVTPT EQU   ATCCOM+124
ATCFEPT  EQU   ATCCOM+120
ATCFDVT  EQU   ATCCOM+116
ATCCONFT EQU   ATCCOM+112
ATCPTCHA EQU   ATCCOM+108
ATCAUTHA EQU   ATCCOM+104
ATCACCTA EQU   ATCCOM+100
ATCRDTH  EQU   ATCCOM+96
ATCFRSCH EQU   ATCCOM+92
ATCFSB   EQU   ATCCOM+88
ATCHLTMS EQU   ATCCOM+84
ATCECPRM EQU   ATCCOM+80
ATCECNET EQU   ATCCOM+76
ATCECOPC EQU   ATCCOM+72
ATCVPARM EQU   ATCCOM+68
ATCECVRQ EQU   ATCCOM+64
ATCECSES EQU   ATCCOM+60
ATCOCHA  EQU   ATCCOM+56
ATCDSPLQ EQU   ATCCOM+52
ATCECDSP EQU   ATCCOM+48
ATCVARYQ EQU   ATCCOM+44
ATCECVRY EQU   ATCCOM+40
ATCHALTQ EQU   ATCCOM+36
ATCECHLT EQU   ATCCOM+32
ATCMODQ  EQU   ATCCOM+28
ATCECMOD EQU   ATCCOM+24
ATCASCHD EQU   ATCCOM+20
ATCSRT   EQU   ATCCOM+16
ATCRDT   EQU   ATCCOM+12
ATCDCFRR EQU   ATCCOM+8
ATCAPI   EQU   ATCCOM+4
ATCRSV04 EQU   ATCSTAT4
ATCNCSD  EQU   ATCSTAT4
ATCMTST  EQU   ATCSTAT4
ATCTPRT  EQU   ATCSTAT4
ATCPRTAT EQU   ATCSTAT4
@NM00040 EQU   ATCPOFLG
ATCPOUNS EQU   ATCPOFLG
ATCHSDMF EQU   ATCSTFLG
@NM00039 EQU   ATCSTAT1
ATCINHLT EQU   ATCSTAT1
ATCNETSL EQU   ATCSTAT1
ATCQKHLT EQU   ATCSTAT1
ATCSNHLT EQU   ATCSTAT1
ATCACTIV EQU   ATCSTAT1
ATCSTART EQU   ATCSTAT1
LOKXCL   EQU   @NM00037
LOKPRY   EQU   @NM00037
@NM00038 EQU   @NM00037
@NM00036 EQU   LOKCHNG
LOKCT    EQU   ISTLOK
DYPPAB   EQU   ISTDYPAB+16
DYPRSV01 EQU   ISTDYPAB+12
DYPTSKID EQU   ISTDYPAB+8
DYPCHAIN EQU   ISTDYPAB+4
DYPFLGS  EQU   ISTDYPAB+2
DYPLNGTH EQU   ISTDYPAB+1
DYPTYPE  EQU   ISTDYPAB
PABRPHA  EQU   PABRPHFG+1
PABNODQ  EQU   PABFLAGS
PABINHBT EQU   PABFLAGS
PABERLOK EQU   PABERRLK
PABSSN   EQU   PABFLAGS
PABDYNAM EQU   PABFLAGS
PABNORPR EQU   PABFLAGS
PABPRIOR EQU   PABFLAGS
PABAPYP  EQU   PABFLAGS
PABDVTA  EQU   ISTPAB+9
PABOFFST EQU   ISTPAB+8
PABCHNGP EQU   PABCHAIN+1
PABRSV02 EQU   PABCHAIN
PABRUNNG EQU   PABCHAIN
PABRESET EQU   PABCHAIN
PABUNCON EQU   PABCHAIN
PABCDP   EQU   PABCHAIN
PABRESCH EQU   PABCHAIN
PABCHNG  EQU   PABCHAIN
PABWEQP  EQU   PABWEQA+1
PABRSV01 EQU   PABWEQA
PABWEQG  EQU   PABWEQA
CRACHAIN EQU   ISTCRA+928
CRARSV02 EQU   ISTCRA+924
CRARSV01 EQU   ISTCRA+920
CRABFTBA EQU   CRABUFA
CRAMASK  EQU   CRASVC+64
CRAHSIZ  EQU   CRASVC+60
CRAASCRR EQU   CRASVC
CRAPROCR EQU   ISTCRA+312
CRAPSS   EQU   ISTCRA+160
CRARPH   EQU   ISTCRA+52
CRALAPTR EQU   CRABASIC+48
CRAL9PTR EQU   CRABASIC+44
CRAL8PTR EQU   CRABASIC+40
CRAL7PTR EQU   CRABASIC+36
CRAL6PTR EQU   CRABASIC+32
CRAL5PTR EQU   CRABASIC+28
CRAL4PTR EQU   CRABASIC+24
CRAL3PTR EQU   CRABASIC+20
CRAL2PTR EQU   CRABASIC+16
CRAL1PTR EQU   CRABASIC+12
CRALEV01 EQU   CRALKACT+3
CRALEV02 EQU   CRALKACT+3
CRALEV03 EQU   CRALKACT+3
CRALEV04 EQU   CRALKACT+3
CRALEV05 EQU   CRALKACT+3
CRALEV06 EQU   CRALKACT+3
CRALEV07 EQU   CRALKACT+3
CRALEV08 EQU   CRALKACT+3
CRALEV09 EQU   CRALKACT+2
CRALEV10 EQU   CRALKACT+2
CRALEV11 EQU   CRALKACT+2
CRALEV12 EQU   CRALKACT+2
CRALEV13 EQU   CRALKACT+2
CRALEV14 EQU   CRALKACT+2
CRALEV15 EQU   CRALKACT+2
CRALEV16 EQU   CRALKACT+2
CRALEV17 EQU   CRALKACT+1
CRALEV18 EQU   CRALKACT+1
CRALEV19 EQU   CRALKACT+1
CRALEV20 EQU   CRALKACT+1
CRALEV21 EQU   CRALKACT+1
CRALEV22 EQU   CRALKACT+1
CRALEV23 EQU   CRALKACT+1
CRALEV24 EQU   CRALKACT+1
CRALEV25 EQU   CRALKACT
CRALEV26 EQU   CRALKACT
CRALEV27 EQU   CRALKACT
CRALEV28 EQU   CRALKACT
CRALEV29 EQU   CRALKACT
CRALEV30 EQU   CRALKACT
CRALEV31 EQU   CRALKACT
CRALEV32 EQU   CRALKACT
CRAFRR   EQU   CRAHDR+4
CCFRSVD1 EQU   CFCCRT
CCFCR2   EQU   CFCCRT
CCFCRP   EQU   CFCCRT
CCFCR1   EQU   CFCCRT
CCFCS2   EQU   CFCCRT
CCFCS1   EQU   CFCCRT
NCFRSVD  EQU   CFCNTRD
NCFCR2   EQU   CFCNTRD
NCFCRP   EQU   CFCNTRD
NCFCR1   EQU   CFCNTRD
NCFCS2   EQU   CFCNTRD
NCFCS1   EQU   CFCNTRD
RIARSV03 EQU   RIAFLGS+2
RIARSV02 EQU   RIAFLG2
RIABR15  EQU   RIAFLG2
RIARSPCC EQU   RIAFLG2
RIARTPXT EQU   RIAFLG2
RIACONT  EQU   RIAFLG2
RIAFABN  EQU   RIAFLG2
RIARSV01 EQU   RIAFLG1
RIACTIVE EQU   RIAFLG1
RIACTL   EQU   RIAFLG1
RIAABR15 EQU   RIAABRGS+60
RIAABR14 EQU   RIAABRGS+56
RIAABR13 EQU   RIAABRGS+52
RIAABR12 EQU   RIAABRGS+48
RIAABR11 EQU   RIAABRGS+44
RIAABR10 EQU   RIAABRGS+40
RIAABR09 EQU   RIAABRGS+36
RIAABR08 EQU   RIAABRGS+32
RIAABR07 EQU   RIAABRGS+28
RIAABR06 EQU   RIAABRGS+24
RIAABR05 EQU   RIAABRGS+20
RIAABR04 EQU   RIAABRGS+16
RIAABR03 EQU   RIAABRGS+12
RIAABR02 EQU   RIAABRGS+8
RIAABR01 EQU   RIAABRGS+4
RIAABR00 EQU   RIAABRGS
RIARSV04 EQU   ISTRIA+14
RIAABPSW EQU   ISTRIA+4
RIAABCD  EQU   ISTRIA
ASCPSREG EQU   ISTASCRR+44
ASCUSR01 EQU   ASCUSRGS+12
ASCUSR00 EQU   ASCUSRGS+8
ASCUSR15 EQU   ASCUSRGS+4
ASCUSR14 EQU   ASCUSRGS
ASCETRYA EQU   ISTASCRR+24
ASCKEY   EQU   ISTASCRR+23
ASCAUDIT EQU   ASCFLG3
ASCFBDUD EQU   ASCFLG3
ASCLLKF  EQU   ASCFLG3
ASCKEYF  EQU   ASCFLG3
ASCFBDAL EQU   ASCFLG3
ASCFSRGT EQU   ASCFLG3
ASCICR   EQU   ASCFLG2
ASCFSRIC EQU   ASCFLG2
ASCFBDIC EQU   ASCFLG2
ASCFBAIC EQU   ASCFLG2
ASCPASTR EQU   ASCFLG1
ASCFSR   EQU   ASCFLG1
ASCFBD   EQU   ASCFLG1
ASCFBA   EQU   ASCFLG1
ASCPFCRR EQU   ISTASCRR
CRRRVPT5 EQU   CRRSAREA+316
CRRRVPT4 EQU   CRRSAREA+312
CRRRVPT3 EQU   CRRSAREA+308
CRRRVPT2 EQU   CRRSAREA+304
CRRRVPT1 EQU   CRRSAREA+300
CRRRVCR2 EQU   CRRSAREA+292
CRRRVCR1 EQU   CRRSAREA+291
CRRXFNCD EQU   CRRSAREA+290
CRRLDOCT EQU   CRRSAREA+288
CRRBTLEN EQU   CRRSAREA+284
CRRBLEN  EQU   CRRSAREA+282
CRRBRTCD EQU   CRRSAREA+281
@NM00035 EQU   CRRBFLGS
CRRBFLG1 EQU   CRRBFLGS
CRRBLDAD EQU   CRRSAREA+276
CRRBARAD EQU   CRRSAREA+272
CRRRTN12 EQU   CRRSAREA+268
CRRRTN11 EQU   CRRSAREA+264
CRRRTN10 EQU   CRRSAREA+260
CRRRTN9  EQU   CRRSAREA+256
CRRRTN8  EQU   CRRSAREA+252
CRRRTN7  EQU   CRRSAREA+248
CRRRTN6  EQU   CRRSAREA+244
CRRRTN5  EQU   CRRSAREA+240
CRRRTN4  EQU   CRRSAREA+236
CRRRTN3  EQU   CRRSAREA+232
CRRRTN2  EQU   CRRSAREA+228
CRRRTN1  EQU   CRRSAREA+224
CRRRES1  EQU   CRRSAREA+222
CRRLCNT  EQU   CRRSAREA+220
CRRATCVT EQU   CRRSAREA+216
CRRVALCK EQU   CRRSAREA+212
CRRARPL  EQU   CRRTRBUF+4
CRRBIND  EQU   CRRTRBUF+3
CRRTRRES EQU   CRRTRBUF
CRRCLDO  EQU   CRRSAREA+200
CRRUECB  EQU   CRRSAREA+196
CRRLCPB  EQU   CRRSAREA+192
CRRCMDAD EQU   CRRSAREA+188
CRRFMCB  EQU   CRRSAREA+184
CRRCLCCW EQU   CRRSAREA+180
CRRESR2  EQU   CRRESR+1
CRRESR1  EQU   CRRESR
CRRDSB2  EQU   CRRDSB+1
CRRDSB1  EQU   CRRDSB
CRRDTACT EQU   CRRSAREA+174
CRRRSV99 EQU   CRRSAREA+173
CRRRDSOH EQU   CRRFDB3
CRRRLG   EQU   CRRFDB3
CRRLGFRC EQU   CRRFDB3
CRRRDEOT EQU   CRRFDB3
CRRRDEOM EQU   CRRFDB3
CRRRDEOB EQU   CRRFDB3
CRRUNUSD EQU   CRRFDB3
CRRUINPT EQU   CRRFDB3
CRRSTSAV EQU   CRRFDB2
CRRCUERR EQU   CRRFDB2
CRRDLGFL EQU   CRRFDB2
CRRIOERR EQU   CRRFDB2
CRRDVUNS EQU   CRRFDB2
CRRATND  EQU   CRRFDB2
CRRRVID  EQU   CRRFDB2
CRRERLK  EQU   CRRFDB2
CRRRTNCD EQU   CRRFDBK1
CRRNSNA  EQU   CRRRTYPE
CRRDFSYN EQU   CRRRTYPE
CRRRESP  EQU   CRRRTYPE
CRRDFASY EQU   CRRRTYPE
CRRDBLCK EQU   CRRRFLG1
CRRRPSBD EQU   CRRRFLG1
CRRRPLOQ EQU   CRRRFLG1
CRRRPLS  EQU   CRRRFLG1
CRRSW7   EQU   CRRFLGS
CRRSW6   EQU   CRRFLGS
CRRSW5   EQU   CRRFLGS
CRRSW4   EQU   CRRFLGS
CRRSW3   EQU   CRRFLGS
CRRSW2   EQU   CRRFLGS
CRRSW1   EQU   CRRFLGS
CRRSW0   EQU   CRRFLGS
CRRRSV04 EQU   CRRFLGS4
CRRDLCCW EQU   CRRFLGS3
CRRRESET EQU   CRRFLGS3
CRRSUBBK EQU   CRRFLGS3
CRRRSV08 EQU   CRRFLGS3
CRRDEBQ  EQU   CRRFLGS3
CRRSTSPR EQU   CRRFLGS3
CRRDREQ  EQU   CRRFLGS3
CRRDFDBK EQU   CRRFLGS3
CRRDFSB  EQU   CRRFLGS2
CRRDPROC EQU   CRRFLGS2
CRREXTS  EQU   CRRFLGS2
CRRELSRI EQU   CRRFLGS2
CRRPOST  EQU   CRRFLGS2
CRRENDLW EQU   CRRFLGS2
CRRPRGIP EQU   CRRFLGS2
CRRDEXP  EQU   CRRFLGS2
CRRSOLRQ EQU   CRRFLGS1
CRRREQP  EQU   CRRFLGS1
CRRCPROC EQU   CRRFLGS1
CRRFINI  EQU   CRRFLGS1
CRRPREIO EQU   CRRFLGS1
CRRINIO  EQU   CRRFLGS1
CRRFLDOS EQU   CRRFLGS1
CRRDOCUR EQU   CRRFLGS1
CRRRATS4 EQU   CRRATS+7
@NM00034 EQU   CRRSATS
CRRASC51 EQU   CRRSATS
CRRASC40 EQU   CRRSATS
CRRASC30 EQU   CRRSATS
CRRASC21 EQU   CRRSATS
CRRASC10 EQU   CRRSATS
CRRASC01 EQU   CRRSATS
@NM00033 EQU   CRRRATS2
CRRPLIC  EQU   CRRRATS2
CRRRC81  EQU   CRRRATS2
CRRRC80  EQU   CRRRATS2
CRRRC65  EQU   CRRRATS2
CRRRC63  EQU   CRRRATS2
CRRRC55  EQU   CRRRATS2
CRRRC54  EQU   CRRRATS2
CRRRC53  EQU   CRRRATS1
CRRRC52  EQU   CRRRATS1
CRRRC51  EQU   CRRRATS1
CRRRC30  EQU   CRRRATS1
CRRRC26  EQU   CRRRATS1
CRRRC23  EQU   CRRRATS1
CRRRC22  EQU   CRRRATS1
CRRRC21  EQU   CRRRATS1
@NM00032 EQU   CRRATS4
CRRC3X   EQU   CRRATS4
CRRC85   EQU   CRRATS4
CRRC83   EQU   CRRATS4
CRRC82   EQU   CRRATS4
CRRC61   EQU   CRRATS4
CRRC60   EQU   CRRATS4
CRRC81   EQU   CRRATS3
CRRC80   EQU   CRRATS3
CRRC75   EQU   CRRATS3
CRRC51   EQU   CRRATS3
CRRC50   EQU   CRRATS3
CRRC42   EQU   CRRATS3
CRRC41   EQU   CRRATS3
CRRC40   EQU   CRRATS3
CRRC32   EQU   CRRATS2
CRRC31   EQU   CRRATS2
CRRC30   EQU   CRRATS2
CRRC25   EQU   CRRATS2
CRRC24   EQU   CRRATS2
CRRC23   EQU   CRRATS2
CRRC22   EQU   CRRATS2
CRRC21   EQU   CRRATS2
CRRC20   EQU   CRRATS1
CRRC13   EQU   CRRATS1
CRRC12   EQU   CRRATS1
CRRC11   EQU   CRRATS1
CRRC10   EQU   CRRATS1
CRRC02   EQU   CRRATS1
CRRC01   EQU   CRRATS1
CRRC00   EQU   CRRATS1
CRRRMAS4 EQU   CRRMAS+7
@NM00031 EQU   CRRSMAS
CRRMSC51 EQU   CRRSMAS
CRRMSC40 EQU   CRRSMAS
CRRMSC30 EQU   CRRSMAS
CRRMSC21 EQU   CRRSMAS
CRRMSC10 EQU   CRRSMAS
CRRMSC01 EQU   CRRSMAS
@NM00030 EQU   CRRRMAS2
CRRRM81  EQU   CRRRMAS2
CRRRM80  EQU   CRRRMAS2
CRRRM65  EQU   CRRRMAS2
CRRRM63  EQU   CRRRMAS2
CRRRM55  EQU   CRRRMAS2
CRRRM54  EQU   CRRRMAS2
CRRRM53  EQU   CRRRMAS1
CRRRM52  EQU   CRRRMAS1
CRRRM51  EQU   CRRRMAS1
CRRRM30  EQU   CRRRMAS1
CRRRM26  EQU   CRRRMAS1
CRRRM23  EQU   CRRRMAS1
CRRRM22  EQU   CRRRMAS1
CRRRM21  EQU   CRRRMAS1
@NM00029 EQU   CRRMAS4
CRRM3X   EQU   CRRMAS4
CRRM85   EQU   CRRMAS4
CRRM83   EQU   CRRMAS4
CRRM82   EQU   CRRMAS4
CRRM61   EQU   CRRMAS4
CRRM60   EQU   CRRMAS4
CRRM81   EQU   CRRMAS3
CRRM80   EQU   CRRMAS3
CRRM75   EQU   CRRMAS3
CRRM51   EQU   CRRMAS3
CRRM50   EQU   CRRMAS3
CRRM42   EQU   CRRMAS3
CRRM41   EQU   CRRMAS3
CRRM40   EQU   CRRMAS3
CRRM32   EQU   CRRMAS2
CRRM31   EQU   CRRMAS2
CRRM30   EQU   CRRMAS2
CRRM25   EQU   CRRMAS2
CRRM24   EQU   CRRMAS2
CRRM23   EQU   CRRMAS2
CRRM22   EQU   CRRMAS2
CRRM21   EQU   CRRMAS2
CRRM20   EQU   CRRMAS1
CRRM13   EQU   CRRMAS1
CRRM12   EQU   CRRMAS1
CRRM11   EQU   CRRMAS1
CRRM10   EQU   CRRMAS1
CRRM02   EQU   CRRMAS1
CRRM01   EQU   CRRMAS1
CRRM00   EQU   CRRMAS1
CRRFSB   EQU   CRRSAREA+144
CRRSAVE1 EQU   CRRSAREA+72
CRRSAVE  EQU   CRRSAREA
CRRRSV22 EQU   ISTDCCRR+4
CRRCRR   EQU   ISTDCCRR
@NM00028 EQU   ISTAPCRR+137
@NM00027 EQU   APC57FLG
APCNREL  EQU   APC57FLG
APCRECRA EQU   APC57FLG
@NM00026 EQU   APC54FLG
APCRLST  EQU   APC54FLG
APCPR153 EQU   APC53FLG
@NM00025 EQU   APC52FLG
APCWKF   EQU   APC52FLG
APCNWF   EQU   APC52FLG
APCRDQ   EQU   APC52FLG
APCQENQ  EQU   APC52FLG
APCSMSR  EQU   APC52FLG
APCCKRQ  EQU   APC52FLG
@NM00024 EQU   APC31FLG
APCSORT  EQU   APC31FLG
APCRESCH EQU   APC31FLG
APCTPXIT EQU   APC31FLG
APCSWTWD EQU   ISTAPCRR+128
APCSAV2  EQU   ISTAPCRR+124
APCSAV1  EQU   ISTAPCRR+120
APCRETCD EQU   APCCOMF+2
@NM00023 EQU   APCCOMF1+1
APCZLBER EQU   APCCOMF1
APCEXIT  EQU   APCCOMF1
APCRELR  EQU   APCCOMF1
APCIRB2  EQU   APCCOMF1
APCIRB1  EQU   APCCOMF1
APCSMCR  EQU   APCCOMF1
APCUETSK EQU   APCCOMF1
APCSSTSK EQU   APCCOMF1
APCESTAL EQU   APCSAVE
APCFRRPM EQU   ISTAPCRR+40
APCQWFO  EQU   ISTAPCRR+36
APCPABSV EQU   ISTAPCRR+32
APCRTRN  EQU   ISTAPCRR+28
APCTCBA  EQU   ISTAPCRR+24
APCPSTA  EQU   ISTAPCRR+20
@NM00022 EQU   APCRFLG+1
APC31R   EQU   APCRFLG
APC58R   EQU   APCRFLG
APC57R   EQU   APCRFLG
APC56R   EQU   APCRFLG
APC54R   EQU   APCRFLG
APC53R   EQU   APCRFLG
APC52R   EQU   APCRFLG
APC51R   EQU   APCRFLG
@NM00021 EQU   APCATFLG+1
APC31E   EQU   APCATFLG
APC58E   EQU   APCATFLG
APC57E   EQU   APCATFLG
APC56E   EQU   APCATFLG
APC54E   EQU   APCATFLG
APC53E   EQU   APCATFLG
APC52E   EQU   APCATFLG
APC51E   EQU   APCATFLG
APCHDRSV EQU   ISTAPCRR
PFCRSV01 EQU   ISTPFCRR+13
PFCFTA   EQU   ISTPFCRR+12
CRRFRR   EQU   PFCFRRO
CRRCHAIN EQU   PFCCRRO
CRRLEN   EQU   PFCCRRLN
PFCRSV10 EQU   PFCCRR+1
CRRID    EQU   PFCCRRID
ZCRRU    EQU   ZCRRHRU+3
ZCRRH    EQU   ZCRRHRU
ZCRWORDA EQU   ISTZCRR+477
ZCRCMNRC EQU   ISTZCRR+476
ZCRRSV97 EQU   ZCRENTER+18
ZCREIC2B EQU   ZCRENTER+18
ZCREAC2B EQU   ZCRENTER+18
ZCRELCAB EQU   ZCRENTER+18
ZCREDCMF EQU   ZCRENTER+18
ZCREBCIF EQU   ZCRENTER+18
ZCREICSG EQU   ZCRENTER+18
ZCREDCK0 EQU   ZCRENTER+18
ZCRECFY0 EQU   ZCRENTER+17
ZCREKCCB EQU   ZCRENTER+17
ZCREDCNB EQU   ZCRENTER+17
ZCREICOE EQU   ZCRENTER+17
ZCREBCNB EQU   ZCRENTER+17
ZCREBC0L EQU   ZCRENTER+17
ZCREBCAL EQU   ZCRENTER+17
ZCREDCQR EQU   ZCRENTER+17
ZCREDCPR EQU   ZCRENTER+16
ZCREBCSB EQU   ZCRENTER+16
ZCREAC1R EQU   ZCRENTER+16
ZCRECCCI EQU   ZCRENTER+16
ZCRECCAI EQU   ZCRENTER+16
ZCRECCBI EQU   ZCRENTER+16
ZCREBCAR EQU   ZCRENTER+16
ZCREBCDR EQU   ZCRENTER+16
ZCREBCBR EQU   ZCRENTER+15
ZCREDCXR EQU   ZCRENTER+15
ZCREDCWB EQU   ZCRENTER+15
ZCREDCWR EQU   ZCRENTER+15
ZCREKCCN EQU   ZCRENTER+15
ZCREKCBN EQU   ZCRENTER+15
ZCREKCBB EQU   ZCRENTER+15
ZCREJC0B EQU   ZCRENTER+15
ZCREJCDB EQU   ZCRENTER+14
ZCREJCCB EQU   ZCRENTER+14
ZCREJCBB EQU   ZCRENTER+14
ZCREJCAB EQU   ZCRENTER+14
ZCREIC1B EQU   ZCRENTER+14
ZCREIC0B EQU   ZCRENTER+14
ZCREICX0 EQU   ZCRENTER+14
ZCREICWB EQU   ZCRENTER+14
ZCREICVB EQU   ZCRENTER+13
ZCREICUB EQU   ZCRENTER+13
ZCREICTB EQU   ZCRENTER+13
ZCREICSC EQU   ZCRENTER+13
ZCREICSB EQU   ZCRENTER+13
ZCREICRB EQU   ZCRENTER+13
ZCREICQB EQU   ZCRENTER+13
ZCREICQA EQU   ZCRENTER+13
ZCREICOB EQU   ZCRENTER+12
ZCREICOA EQU   ZCRENTER+12
ZCREICNB EQU   ZCRENTER+12
ZCREICNA EQU   ZCRENTER+12
ZCREICMB EQU   ZCRENTER+12
ZCREICLB EQU   ZCRENTER+12
ZCREICKG EQU   ZCRENTER+12
ZCREICKE EQU   ZCRENTER+12
ZCREICKB EQU   ZCRENTER+11
ZCREICJB EQU   ZCRENTER+11
ZCREICID EQU   ZCRENTER+11
ZCREICIB EQU   ZCRENTER+11
ZCREICHB EQU   ZCRENTER+11
ZCREICGB EQU   ZCRENTER+11
ZCREICEB EQU   ZCRENTER+11
ZCREICDB EQU   ZCRENTER+11
ZCREICCI EQU   ZCRENTER+10
ZCREICCB EQU   ZCRENTER+10
ZCREICBI EQU   ZCRENTER+10
ZCREICBB EQU   ZCRENTER+10
ZCREICAB EQU   ZCRENTER+10
ZCREICAA EQU   ZCRENTER+10
ZCREHCAN EQU   ZCRENTER+10
ZCREGC0B EQU   ZCRENTER+10
ZCREGC0A EQU   ZCRENTER+9
ZCREGCLA EQU   ZCRENTER+9
ZCREGCEB EQU   ZCRENTER+9
ZCREGCDB EQU   ZCRENTER+9
@NM00020 EQU   ZCRENTER+9
ZCREGCBB EQU   ZCRENTER+9
ZCREGCAB EQU   ZCRENTER+9
ZCREFCEB EQU   ZCRENTER+9
ZCREFCEA EQU   ZCRENTER+8
ZCREECTA EQU   ZCRENTER+8
ZCREECEA EQU   ZCRENTER+8
ZCREECDA EQU   ZCRENTER+8
ZCREECCB EQU   ZCRENTER+8
ZCREECCA EQU   ZCRENTER+8
ZCREECBB EQU   ZCRENTER+8
ZCREECBA EQU   ZCRENTER+8
ZCREDCMB EQU   ZCRENTER+7
ZCREDCL0 EQU   ZCRENTER+7
ZCREDCKB EQU   ZCRENTER+7
ZCREDCKA EQU   ZCRENTER+7
ZCREDCJ0 EQU   ZCRENTER+7
ZCREDCI0 EQU   ZCRENTER+7
ZCREDCH0 EQU   ZCRENTER+7
ZCREDCF0 EQU   ZCRENTER+7
ZCREDCE0 EQU   ZCRENTER+6
ZCREDCD0 EQU   ZCRENTER+6
ZCREDCC0 EQU   ZCRENTER+6
ZCREDCB0 EQU   ZCRENTER+6
ZCREDCA0 EQU   ZCRENTER+6
ZCRECC2B EQU   ZCRENTER+6
ZCRECC1B EQU   ZCRENTER+6
ZCRECC1A EQU   ZCRENTER+6
ZCRECC0B EQU   ZCRENTER+5
ZCRECC0A EQU   ZCRENTER+5
ZCREBC0B EQU   ZCRENTER+5
ZCREBC0A EQU   ZCRENTER+5
ZCREBCZ0 EQU   ZCRENTER+5
ZCREBCY0 EQU   ZCRENTER+5
ZCREBCX0 EQU   ZCRENTER+5
ZCREBCXA EQU   ZCRENTER+5
ZCREBCSC EQU   ZCRENTER+4
ZCREBCRB EQU   ZCRENTER+4
ZCREBCRA EQU   ZCRENTER+4
ZCREBCQB EQU   ZCRENTER+4
ZCREBCPB EQU   ZCRENTER+4
ZCREBCOB EQU   ZCRENTER+4
ZCREBCNE EQU   ZCRENTER+4
ZCREBCND EQU   ZCRENTER+4
ZCREBCMB EQU   ZCRENTER+3
ZCREBCLB EQU   ZCRENTER+3
ZCREBCLA EQU   ZCRENTER+3
ZCREBCKB EQU   ZCRENTER+3
ZCREBCKA EQU   ZCRENTER+3
ZCREBCJB EQU   ZCRENTER+3
ZCREBCJA EQU   ZCRENTER+3
ZCREBCID EQU   ZCRENTER+3
ZCREBCIB EQU   ZCRENTER+2
ZCREBCIA EQU   ZCRENTER+2
ZCREBCHB EQU   ZCRENTER+2
ZCREBCHA EQU   ZCRENTER+2
ZCREBCGB EQU   ZCRENTER+2
ZCREBCGA EQU   ZCRENTER+2
ZCREBCFB EQU   ZCRENTER+2
ZCREBCFA EQU   ZCRENTER+2
ZCREBCEB EQU   ZCRENTER+1
ZCREBCDI EQU   ZCRENTER+1
ZCREBCCB EQU   ZCRENTER+1
ZCREBCBI EQU   ZCRENTER+1
ZCREBCBB EQU   ZCRENTER+1
ZCREBCAM EQU   ZCRENTER+1
ZCREBCAI EQU   ZCRENTER+1
ZCREBCAG EQU   ZCRENTER
ZCREBCAE EQU   ZCRENTER
ZCREBCAB EQU   ZCRENTER
ZCREBCAA EQU   ZCRENTER
ZCREAC1B EQU   ZCRENTER
ZCREAC0B EQU   ZCRENTER
ZCREAC0A EQU   ZCRENTER
ZCREAC1A EQU   ZCRENTER
ZCRTNAME EQU   ZCRAUDIT+1
ZCRTID   EQU   ZCRAUDIT
ZCRREMIC EQU   ISTZCRR+436
ZCRSAVEZ EQU   ISTZCRR+196
ZCRDAFSV EQU   ZCRCIDSV+2
ZCRSAFSV EQU   ZCRCIDSV
ZCRR13SV EQU   ISTZCRR+188
ZCRR2SV  EQU   ISTZCRR+184
ZCROPCDE EQU   ISTZCRR+183
ZCRPRMTC EQU   ISTZCRR+182
ZCRRCDSV EQU   ISTZCRR+181
ZCRAWQSW EQU   ISTZCRR+180
ZCRTOPQ  EQU   ISTZCRR+180
ZCRLSTFB EQU   ISTZCRR+180
ZCRXSCHD EQU   ISTZCRR+180
ZCRNXTEL EQU   ISTZCRR+180
ZCRSCANQ EQU   ISTZCRR+180
ZCRMOREL EQU   ISTZCRR+180
ZCRFBPRC EQU   ISTZCRR+180
ZCRFSBSV EQU   ISTZCRR+176
ZCRSVWK5 EQU   ZCRWKARA+16
ZCRSVWK4 EQU   ZCRWKARA+12
ZCRSVWK3 EQU   ZCRWKARA+8
ZCRSVWK2 EQU   ZCRWKARA+4
ZCRSVF25 EQU   ZCRSVRTN+96
ZCRSVF24 EQU   ZCRSVRTN+92
ZCRSVF23 EQU   ZCRSVRTN+88
ZCRSVF22 EQU   ZCRSVRTN+84
ZCRSVF21 EQU   ZCRSVRTN+80
ZCRSVF20 EQU   ZCRSVRTN+76
ZCRSVF19 EQU   ZCRSVRTN+72
ZCRSVF18 EQU   ZCRSVRTN+68
ZCRSVF17 EQU   ZCRSVRTN+64
ZCRSVF16 EQU   ZCRSVRTN+60
ZCRSVF15 EQU   ZCRSVRTN+56
ZCRSVF14 EQU   ZCRSVRTN+52
ZCRSVF13 EQU   ZCRSVRTN+48
ZCRSVF12 EQU   ZCRSVRTN+44
ZCRSVF11 EQU   ZCRSVRTN+40
ZCRSVF10 EQU   ZCRSVRTN+36
ZCRSVF9  EQU   ZCRSVRTN+32
ZCRSVF8  EQU   ZCRSVRTN+28
ZCRSVF7  EQU   ZCRSVRTN+24
ZCRSVF6  EQU   ZCRSVRTN+20
ZCRSVF5  EQU   ZCRSVRTN+16
ZCRSVF4  EQU   ZCRSVRTN+12
ZCRSVF3  EQU   ZCRSVRTN+8
ZCRSVF2  EQU   ZCRSVRTN+4
ZCRSVF1  EQU   ZCRSVRTN
ZCRPVZB  EQU   ISTZCRR+52
ZCRPSW   EQU   ZCRPARMS+15
ZCRPCHAR EQU   ZCRPARMS+14
ZCRPRES2 EQU   ZCRPCOD2
ZCRPMFGF EQU   ZCRPCOD2
ZCRPFHDR EQU   ZCRPCOD2
ZCRPPG2  EQU   ZCRPCOD2
ZCRPRES  EQU   ZCRPCOD1
ZCRPCFTX EQU   ZCRPCOD1
ZCRPBUF  EQU   ZCRPCOD1
ZCRPLSCB EQU   ZCRPCOD1
ZCRPLSBQ EQU   ZCRPLSBF
ZCRPFSB  EQU   ZCRPCOD1
ZCRPLNG  EQU   ZCRPCOD1
ZCRPPG   EQU   ZCRPCOD1
ZCRDTODA EQU   ZCRDFRDA
ZCRMLNG  EQU   ZCRPARMS+8
ZCRTBPTR EQU   ZCRPARMS+4
ZCRCBPTR EQU   ZCRFBPTR
ZCRCRLCP EQU   ISTZCRR+20
@NM00019 EQU   ZCRSCPSW
ZCRSKIPT EQU   ZCRSCPSW
ZCRFSBWE EQU   ZCRSCPSW
ZCRPRCMP EQU   ZCRSCPSW
ZCRLREQ  EQU   ZCRSCPSW
ZCRRJLCP EQU   ZCRSCPSW
ZCRTPINV EQU   ZCRSCPSW
ZCRTPEX  EQU   ZCRSCPSW
@NM00018 EQU   ZCRIBPR
ZCR3270R EQU   ZCRIBPR
ZCR3270  EQU   ZCRIBPR
ZCRLCPFD EQU   ZCRIBPR
ZCRLCPFR EQU   ZCRIBPR
ZCRRELK  EQU   ZCRIBPR
ZCRERR   EQU   ZCRIBPR
ZCRNOBUF EQU   ZCRIBPR
@NM00017 EQU   ZCRPFLGS
ZCRQAHED EQU   ZCRPFLGS
ZCRF1RES EQU   ZCRGENSW
ZCRBRIS  EQU   ZCRGENSW
ZCRCLRBD EQU   ZCRGENSW
ZCREXRES EQU   ZCRGENSW
ZCRLCSYN EQU   ZCRGENSW
ZCRRT06  EQU   ZCRGENSW
ZCRTSW2  EQU   ZCRGENSW
ZCRTSW1  EQU   ZCRGENSW
ZCRINLCP EQU   ZCRFLGS3
ZCRWRPTR EQU   ZCRFLGS3
ZCRNOFRE EQU   ZCRFLGS3
ZCREDRIV EQU   ZCRFLGS3
ZCRDISC  EQU   ZCRFLGS3
ZCRTPCON EQU   ZCRFLGS3
ZCRCNLXL EQU   ZCRRESET
ZCRENDAN EQU   ZCRSWFLD
ZCRENDXL EQU   ZCRSWFLD
ZCRENDX  EQU   ZCRSWFLD
ZCROB1   EQU   ZCRNDLCP
ZCRENDPR EQU   ZCRSWFLD
ZCREXTYP EQU   ZCRSWFLD
ZCRSLCP  EQU   ZCRENDSH
ZCRIF0E3 EQU   ZCRFLGS2
ZCRIF0E2 EQU   ZCRFLGS2
ZCRIF0E1 EQU   ZCRFLGS2
ZCROB    EQU   ZCRFLGS2
ZCRFMSED EQU   ZCRFLGS2
ZCRSHEDI EQU   ZCRFLGS2
ZCRLOCAL EQU   ZCRFLGS2
ZCRFEXIT EQU   ZCRFLGS1
ZCRUNSOL EQU   ZCRFLGS1
ZCRENDLP EQU   ZCRFLGS1
ZCRNRMEX EQU   ZCRFLGS1
ZCRWAIT  EQU   ZCRFLGS1
ZCRDEQSW EQU   ZCRFLGS1
ZCRQUESW EQU   ZCRFLGS1
ZCREXSW  EQU   ZCRFLGS1
ZCRFRRA  EQU   ISTZCRR+8
ZCRCHAIN EQU   ISTZCRR+4
ZCRFLAG  EQU   ZCRCRR+3
ZCRLEN   EQU   ZCRCRR+1
ZCRID    EQU   ZCRCRR
LCPFTYPE EQU   LCPRPHA
LCPRSTQH EQU   LCPLCCW
LCPCLREP EQU   ISTLCPB+44
LCPUBFSB EQU   LCPFLCCW
LCPRSV77 EQU   ISTLCPB+39
LCPLCCWC EQU   ISTLCPB+38
LCPRSV78 EQU   LCPFLG1
LCPTRANS EQU   LCPFLG1
LCPSTLB  EQU   LCPFLG1
LCPREDRV EQU   LCPFLG1
LCPDIRPT EQU   LCPFLG1
LCPINTER EQU   LCPFLG1
LCPRESET EQU   LCPFLG1
LCPSTYPE EQU   ISTLCPB+36
LCPFSNCH EQU   ISTLCPB+34
LCPFOSN  EQU   ISTLCPB+32
LCPTLBAD EQU   ISTLCPB+28
LCPFDB2  EQU   LCPFDBA+1
LCPFDB1  EQU   LCPFDBA
LCPDAF   EQU   LCPCID+2
LCPSAF   EQU   LCPCID
LCPLCCW1 EQU   ISTLCPB+12
LCPRRCNT EQU   LCPSEQ+1
LCPRRCCT EQU   LCPSEQ
LCPATOP  EQU   LCPFLAG2
LCPFREE  EQU   LCPFLAG2
LCPDSTAT EQU   LCPFLAG2
LCPEXRES EQU   LCPFID0
LCPZRIMM EQU   LCPTLBPI
LCPRSTRT EQU   LCPFLAG2
LCPASYN  EQU   LCPFLAG2
LCPPRFLG EQU   LCPFLAG2
LCPZMIRC EQU   LCPRUCNT
LCPCHAI2 EQU   LCPCHAIN+1
LCPCHNG  EQU   LCPCHAI1
LCPZRT0B EQU   LCPMNRCD
LCPZRT0A EQU   LCPMNRCD
LCPZRTL9 EQU   LCPZRT09
LCPZRTL8 EQU   LCPZRT08
LCPZRTL7 EQU   LCPZRT07
LCPZRTL6 EQU   LCPZRT06
LCPZRTL5 EQU   LCPZRT05
LCPZRTL4 EQU   LCPZRT04
LCPZRTL3 EQU   LCPZRT03
LCPZRTL2 EQU   LCPZRT02
LCPLNGTH EQU   ISTLCPB+1
LCPTYPE  EQU   ISTLCPB
LCCWDATA EQU   ISTLCCW+4
LCCWACI  EQU   LCCWFLAG
LCCWPER  EQU   LCCWLSI
LCCWIDAT EQU   LCCWFLAG
LCCWNTVC EQU   LCCWFLAG
LCCWCKPT EQU   LCCWFLAG
LCCWCC   EQU   LCCWFLAG
LCCWCD   EQU   LCCWFLAG
LCCWTYPE EQU   LCCWCTL
@NM00016 EQU   LCCWRWOP
RPHNEXPO EQU   ISTRPH+104
RPHSAV16 EQU   RPHWORK+60
RPHSAV15 EQU   RPHWORK+56
RPHSAV14 EQU   RPHWORK+52
RPHSAV13 EQU   RPHWORK+48
RPHSAV12 EQU   RPHWORK+44
RPHSAV11 EQU   RPHWORK+40
RPHSAV10 EQU   RPHWORK+36
RPHSAVE9 EQU   RPHWORK+32
RPHSAVE8 EQU   RPHWORK+28
RPHSAVE7 EQU   RPHWORK+24
RPHSAVE6 EQU   RPHWORK+20
RPHSAVE5 EQU   RPHWORK+16
RPHSAVE4 EQU   RPHWORK+12
RPHSAVE3 EQU   RPHWORK+8
RPHSAVE2 EQU   RPHWORK+4
RPHSHALF EQU   RPHSAVE1+2
RPHSBIT8 EQU   RPHSBITS
RPHSBIT7 EQU   RPHSBITS
RPHSBIT6 EQU   RPHSBITS
RPHSBIT5 EQU   RPHSBITS
RPHSBIT4 EQU   RPHSBITS
RPHSBIT3 EQU   RPHSBITS
RPHSBIT2 EQU   RPHSBITS
RPHSBIT1 EQU   RPHSBITS
RPHSBYTE EQU   RPHSAVE1
RPHPABQP EQU   RPHPABQA+1
RPHPABFG EQU   RPHPABQA
RPHSRP34 EQU   RPHSRPRM+2
RPHSRP12 EQU   RPHSRPRM
RPHWEGT  EQU   RPHCSPA
RPHMAJCB EQU   ISTRPH+21
RPHPABOF EQU   ISTRPH+20
RPHRESUM EQU   RPHRESMA+1
RPHRSV01 EQU   RPHWPFLG
RPHPURGE EQU   RPHWPFLG
RPHPT    EQU   RPHWPFLG
RPHWT    EQU   RPHWPFLG
RPHRSKEY EQU   RPHWPFLG
RPHDVTA  EQU   ISTRPH+12
RPHTIK   EQU   RPHTSKID+3
@NM00015 EQU   RPHTSKID
RPHRPHAP EQU   RPHRPHA+1
@NM00014 EQU   RPHRPHA
RPHGATE  EQU   RPHRPHA
@NM00013 EQU   RPHFLGB
RPHRLCRA EQU   RPHFLGB
RPHNRSAV EQU   RPHFLGB
RPHPGCMP EQU   RPHFLGB
RPHFBAPS EQU   RPHFLGB
RPHBSSP  EQU   RPHFLGB
RPHLOCK  EQU   RPHFLGB
RPHFNFLG EQU   RPHFSTLC
RPHMLTCP EQU   RPHFLAGS
RPHSMCLR EQU   RPHFLAGS
RPHSMTYP EQU   RPHFLAGS
RPHSMQ   EQU   RPHFLAGS
RPHAUTEX EQU   RPHAPTYP
RPHSPGIN EQU   RPHFLAGS
RPHOGIND EQU   RPHFLAGS
RPHLNGTH EQU   ISTRPH+1
RPHTYPE  EQU   ISTRPH
CCWSPRSV EQU   CCWSPARE
CCWCFTX  EQU   CCWSPARE
CCWTRCE  EQU   CCWSPARE
CCWNULL  EQU   CCWFLAGS
CCWPCI   EQU   CCWFLAGS
CCWSKIP  EQU   CCWFLAGS
CCWSLI   EQU   CCWFLAGS
CCWCC    EQU   CCWFLAGS
CCWCD    EQU   CCWFLAGS
ZLBZBFSC EQU   ISTZLBVT+88
ZLBZIFVB EQU   ISTZLBVT+84
ZLBZIFUB EQU   ISTZLBVT+80
ZLBZIFSB EQU   ISTZLBVT+76
ZLBRSV22 EQU   ISTZLBVT+72
ZLBZBFID EQU   ISTZLBVT+68
ZLBZBFX0 EQU   ISTZLBVT+64
ZLBRSV02 EQU   ISTZLBVT+60
ZLBRSV21 EQU   ISTZLBVT+56
ZLBZBFJB EQU   ISTZLBVT+52
ZLBZBFIB EQU   ISTZLBVT+48
ZLBZBFHB EQU   ISTZLBVT+44
ZLBZBFGB EQU   ISTZLBVT+40
ZLBZBFFB EQU   ISTZLBVT+36
ZLBZBFEB EQU   ISTZLBVT+32
ZLBZBFDB EQU   ISTZLBVT+28
ZLBZBFCB EQU   ISTZLBVT+24
ZLBZBFBB EQU   ISTZLBVT+20
ZLBZBFAB EQU   ISTZLBVT+16
ZLBZBFNB EQU   ISTZLBVT+12
ZLBZCFAI EQU   ISTZLBVT+8
ZLBZBF0B EQU   ISTZLBVT+4
ZLBZAF0B EQU   ISTZLBVT
ZFSZWRD4 EQU   ISTZFSVT+36
ZFSZWRD3 EQU   ISTZFSVT+32
ZFSZEFCB EQU   ISTZFSVT+28
ZFSZFFEB EQU   ISTZFSVT+24
ZFSZDFJ0 EQU   ISTZFSVT+20
ZFSZFFFB EQU   ISTZFSVT+16
ZFSZFFDB EQU   ISTZFSVT+12
ZFSZFFCB EQU   ISTZFSVT+8
ZFSZEMAB EQU   ZFSZEAAB
ZFSZEMBB EQU   ZFSZEABB
ZPSZDFQR EQU   ISTZPSVT+80
ZPSZDFPR EQU   ISTZPSVT+76
ZPSZDFXR EQU   ISTZPSVT+72
ZPSZIF2B EQU   ISTZPSVT+68
ZPSZAF2B EQU   ISTZPSVT+64
ZPSZDFMB EQU   ISTZPSVT+60
ZPSZDFMF EQU   ISTZPSVT+56
ZPSZDFNB EQU   ISTZPSVT+52
@NM00012 EQU   ISTZPSVT+48
ZPSZDFF0 EQU   ISTZPSVT+44
ZPSZTRTT EQU   ISTZPSVT+40
ZPSZBFOB EQU   ISTZPSVT+36
ZPSZBFMB EQU   ISTZPSVT+32
ZPSZBFZ0 EQU   ISTZPSVT+28
ZPSZDFI0 EQU   ISTZPSVT+20
ZPSZDFB0 EQU   ISTZPSVT+16
ZPSZDFH0 EQU   ISTZPSVT+12
ZPSZDFD0 EQU   ISTZPSVT+8
ZPSZDFA0 EQU   ISTZPSVT
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00566 EQU   @RC00565
@RF00599 EQU   @RC00590
@RC00649 EQU   @RC00648
WRCCW@   EQU   @PB00002
@ENDDATA EQU   *
         END   ISTZBFBA,(C'PLS1957',0603,75153)
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
/*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
  IDENTIFY ISTZBFBA('ZP60008')
++ZAP(ISTZBF0L) DISTLIB(AOS24).
 NAME ISTZBF0L
 IDRDATA ZP60008
VER 082D 0000,0000,0000,0000   ** START OF TRANSLATE TABLE
VER 089C 11                    ** OLD ENTRY FOR HEX 6F
VER 091E 0D16                  ** OLD ENTRIES FOR HEX F1 AND F2
VER 0922 1D12,2D               ** OLD ENTRIES FOR HEX F5, F6 AND F7
REP 08AB DD                    ** NEW ENTRY FOR HEX 7E REPLACING A NULL
REP 0920 CD                    ** NEW ENTRY FOR HEX F3 REPLACING A NULL
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//RECV16   EXEC SMPREC
//SMPPTFIN DD  DSN=&&SMPMCS,DISP=(OLD,DELETE)
//SMPCNTL  DD  *
  RECEIVE SELECT(ZP60008).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV16
//*
//APPLY16  EXEC SMPAPP
//SMPCNTL  DD  *
  APPLY SELECT(ZP60008) DIS(WRITE).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY16
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//*********************************************************************
//* Install USERMOD ZP60009 (source: Greg Price) - add NOEDIT support *
//* for TPUT and TPG to TSO/VTAM.                                     *
//*********************************************************************
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
++USERMOD(ZP60009)          /* ADD TPUT/TPG NOEDIT SUPPORT */  .
++VER(Z038) FMID(ETV0108)
  PRE(UZ35180,UZ26905,UZ67122,UZ22286,UZ55134,UZ28255,
      UZ71054,UZ54020,UZ68882,UZ57385,UZ28016)
 /*
   PROBLEM DESCRIPTION:
     THE NOEDIT OPERAND OF TPUT AND TPG IS NOT HONOURED BY TSO/VTAM.
       THE TIOC COMMON SVC 93 ROUTINE IGC0009C CORRECTLY DETECTS THE
       REQUEST OF NOEDIT FOR TPUT AND TPG REQUESTS, BUT THIS IS NOT
       HANDLED PROPERLY BY TSO/VTAM.
     THE GTTERM MACRO FUNCTION IS NOT SUPPORTED BY TSO/VTAM.
       WHEN A TSO APPLICATION ISSUES THE GTTERM MACRO RC=4 RESULTS.
       AN APPLICATION CANNOT DETERMINE IF THE READ PARTITION (QUERY)
       FUNCTION IS SUPPORTED.  ALSO, THE ALTERNATE SCREEN SIZE CANNOT
       BE DETERMINED.
     3270 HOUSEKEEPING IS LIMITED TO MODEL-1 AND MODEL-2 SCREEN SIZES.
       TSO WILL ONLY PERFORM LINE MODE 3270 SCREEN HOUSEKEEPING FOR
       MODEL-1 (12 BY 40) AND MODEL-2 (24 BY 80) SCREEN SIZES.  THE
       ALTERNATE SCREEN SIZE OF A TERMINAL CANNOT BE PROPERLY EXPLOITED
       BY TSO LINE MODE, NOR BY TSO FULLSCREEN APPLICATIONS.
     THE NOEDIT OPERAND OF STFSMODE IS NOT SUPPORTED BY TSO/VTAM.
       NOEDIT INPUT MODE IS SET BY SPECIFYING NOEDIT=YES ON A
       'STFSMODE ON' MACRO.  THIS IS NOT SUPPORTED BY TSO.  WITHOUT
       THIS ABILITY ANY X'1E' IN INPUT DATA (INCLUDING A QUERY
       RESPONSE, OR AN SBA ORDER FROM A SCREEN WITH MORE THAN 4096
       LOCATIONS) WILL BE INTERPRETED AS A FIELD MARK CHARACTER AND
       CAUSE THE DATA FOLLOWING IT TO BE HELD OVER UNTIL THE NEXT TGET
       MACRO IS ISSUED.

       THIS USERMOD CHANGES SEVERAL TSO/VTAM MODULES.

       THE TSO/VTAM SVC 93 ROUTER IS CHANGED TO NOT REJECT REQUESTS
       WITH NOEDIT SPECIFIED.

       THE TSO/VTAM TPUT HANDLER IS CHANGED TO NOT TRUNCATE TRAILING
       BLANKS FROM NOEDIT REQUESTS.  A PREVIOUSLY RESERVED BIT IS
       USED TO FLAG NOEDIT REQUESTS, WHICH ARE ALSO FLAGGED AS
       FULLSCREEN REQUESTS BY THE TPUT AND TPG MACROS (AND NOW ALSO
       BY THIS MODULE).

       THE TSO/VTAM TGET HANDLER IS CHANGED TO BACK OUT THE FIX FOR
       APAR OZ60978 SHIPPED IN PTF UZ57385 TO REGRESS FUNCTIONALITY
       TO THE UZ55134 LEVEL SO THAT TPUT MACROS ISSUED AFTER TGET
       MACROS WITH THE NOWAIT OPERAND ARE NOT QUEUED UNTIL THERE IS
       SOME INPUT, BUT SENT TO THE SCREEN ASYNCHRONOUSLY.  THIS HAS
       THE EFFECT OF REINTRODUCING THE PROBLEM WHERE A TGET NOWAIT
       DOES NOT FORCE THE KEYBOARD TO BECOME UNLOCKED, BUT THIS CAN
       BE CIRCUMVENTED BY THE APPLICATION SETTING THE X'02' BIT IN
       THE WCC WHEN APPROPRIATE.

       THE TSO/VTAM TGET HANDLER IS ALSO CHANGED TO ADD THE TGET MACRO
       RETURN CODES 24 AND 28 WHICH MAY BE GIVEN WHEN NOEDIT INPUT
       MODE IS IN EFFECT, THEREBY IMPROVING COMPATIBILITY WITH TSO/E.

       THE TSO/VTAM INITIALIZATION ROUTINE FOR THE TSO INPUT MANAGER
       AND TSO OUTPUT MANAGER HAS BEEN CHANGED TO NOT REGARD TERMINALS
       WITH BUFFER SIZES LARGER THAN 1920 BYTES AS MODEL-1 TERMINALS.
       THIS WILL HELP AVOID LINE MODE SCREEN HANDLING ERRORS AFTER
       LOGON RECONNECT PROCESSING.

       THE TSO/VTAM LOGON RECONNECT ROUTINE HAS BEEN CHANGED TO
       INCLUDE THE PRIMARY AND ALTERNATE SCREEN DIMENSIONS IN THE
       DATA PERTAINING TO THE NEW TERMINAL PROPAGATED TO CONTROL
       BLOCKS WHEN A LOGON RECONNECT IS PERFORMED, THUS ALLOWING TSO
       APPLICATIONS TO DETECT DYNAMIC CHANGES TO THE SCREEN SIZE.

       THE TSO/VTAM 3270 TERMINAL SCREEN MANAGER IS ALTERED TO SKIP
       ANY DATA TRANSLATION FOR NOEDIT TPUTS.  FURTHER, IN KEEPING
       WITH 3270 ARCHITECTURE DATA INTEGRITY FOR DISPLAYABLE CODE
       POINTS (WHERE ALL CODE POINTS IN THE RANGE X'40' TO X'FE'
       ARE CONSIDERED "DISPLAYABLE", AND REGARDLESS OF THE TERMINAL'S
       ABILITY TO DISPLAY THE CHARACTER, WHEN SUCH A CODE POINT IS
       WRITTEN TO THE TERMINAL, IT CAN BE READ BACK UNALTERED) ALL
       TPUTS TO 3270 EBCDIC TERMINALS WILL NO LONGER ALTER ANY DATA
       CODE POINTS IN THE X'40' TO X'FE' RANGE.  (THE X'40' CODE POINT
       IS RESERVED FOR A BLANK IN ALL SINGLE-BYTE CHARACTER SETS.)

       THE TSO/VTAM 3270 TERMINAL SCREEN MANAGER IS ALSO ALTERED TO
       SUPPORT DIFFERENT PRIMARY AND ALTERNATE SCREEN SIZES OF ANY
       SIZE SUBJECT TO THE 3270 ARCHITECTURE LIMITATIONS, AND ALSO
       THAT THE ALTERNATE SCREEN SIZE NEVER HAS FEWER COLUMNS NOR
       FEWER LINES THAN THE PRIMARY SCREEN SIZE.  TSO/VTAM LINE MODE
       HOUSEKEEPING WILL NOW USE 14-BIT ADDRESSING FOR ALL BUFFER
       LOCATIONS GREATER THAN 4095, BUT WILL STILL USE 12-BIT
       ADDRESSING FOR LOCATIONS FROM 0 TO 4095 INCLUSIVE.  THIS
       CHANGE HAS THE EFFECT OF INCREASING THE MAXIMUM TSO/VTAM 3270
       SCREEN SIZE SUPPORTED FROM 4096 LOCATIONS TO 16384 LOCATIONS.

       THE TSO/VTAM 3270 TERMINAL SCREEN MANAGER NOW HANDLES TPUT
       FULLSCR DIFFERENTLY TO THE EXTENT THAT A STANDARD WRITE (X'F1')
       WITH A NO-OP WCC (X'40') WILL NOT FORCE THE INCLUSION OF AN
       INSERT CURSOR ORDER AS THE TPUT MAY BE SENDING AN ASYNCHRONOUS
       PARTIAL SCREEN UPDATE WHICH DOES NOT OVERWRITE AN ACTIVE INPUT
       AREA WHERE SOME TEXT MAY BE BEING TYPED IN.

       THE TSO/VTAM 3270 INPUT DATA HANDLER HAS BEEN ALTERED TO NOT
       PROCESS FIELD MARK CHARACTERS INPUT WHEN NOEDIT MODE IS IN
       EFFECT.  FURTHER, THE ACTUAL NUMBER OF COLUMNS AND LINES ON
       THE SCREEN IS USED IN LINE COUNT CALCULATIONS.

       THE TSO/VTAM SVC 94 ROUTER IS ALTERED TO PASS CONTROL TO A NEW
       CSECT FOR TSO TERMINAL CONTROL FUNCTION 17 (GTTERM).  A TSO
       APPLICATION CAN NOW ISSUE A GTTERM MACRO TO DETERMINE IF THE
       QUERY BIT IS ON, AND CAN GET THE DIMENSIONS OF THE PRIMARY AND
       ALTERNATE SCREEN SIZES.  NOEDIT TPUT/TPG MACROS CAN BE USED
       TO ISSUE WRITE STRUCTURED FIELD COMMANDS TO GAIN ACCESS TO
       VARIOUS 3270 EXTENSIONS INCLUDING GRAPHICS.  QUERY SUPPORT IS
       NOT NEEDED FOR A READ BUFFER COMMAND WHICH CAN NOW ALSO BE
       ISSUED VIA A NOEDIT TPUT/TPG MACRO.  GTTERM RETURN CODES AND
       OUTPUT IS COMPATIBLE WITH TSO/E, EXCEPT THAT THE TERMID OUTPUT
       AREA IS CURRENTLY LIMITED TO 8 BYTES.

       THE TERMINAL CONTROL MACRO ROUTINE FOR THE STFSMODE MACRO HAS
       BEEN CHANGED TO SUPPORT THE NOEDIT OPERAND, AND RESHOW KEY CODES
       CAN NOW BE IN THE RANGE OF FROM 1 TO 24 INCLUSIVE (REPRESENTING
       THE VALID PFK NUMBERS).

       THE TERMINAL CONTROL MACRO ROUTINE FOR THE STLINENO MACRO HAS
       BEEN CHANGED TO SUPPORT THE SPECIFICATION OF ANY VALID LINE
       NUMBER THAT EXISTS ON THE SCREEN.  IT HAS ALSO BEEN CHANGED TO
       SUPPORT NOEDIT INPUT MODE.

       THE TERMINAL CONTROL MACRO ROUTINE FOR THE STSIZE MACRO HAS
       BEEN CHANGED TO INDICATE THAT ANY REQUESTED SCREEN SIZE WHICH
       MATCHES EITHER THE PRIMARY OR ALTERNATE SIZE OF THE SCREEN IS
       CONSIDERED A STANDARD SIZE, EVEN IF IT IS NOT THE SIZE OF A
       MODEL-1 OR MODEL-2 SCREEN.  THIS IS DONE WITH A RETURN CODE
       OF ZERO INSTEAD OF A RETURN CODE OF 12 WHICH INDICATES A
       NON-STANDARD SCREEN SIZE.  (THE FLAGGING OF NON-STANDARD
       SCREEN SIZES IS INTENDED TO WARN OF THE POSSIBILITY OF
       SCREEN CONTROL ERRORS.)

       THE MAPPING MACRO FOR THE TSO/VTAM WORK AREA IKTTVWA IS
       UPDATED TO ADD BIT TVWAALTS WHICH IS SET WHEN THE TSO/VTAM
       SCREEN MANAGER SETS THE SCREEN TO ITS ALTERNATE SIZE.
       (THE MAPPING OF THIS BIT IS INCOMPATIBLE WITH TSO/E.)

       THE STFSMODE TERMINAL CONTROL MACRO FOR TSO FULLSCREEN
       APPLICATIONS HAS BEEN UPDATED TO ADD THE NOEDIT OPERAND,
       WHICH CAN BE ASSIGNED THE VALUE OF YES OR NO.  NO IS THE
       DEFAULT.  NOEDIT=YES IS USED TO ALLOW BYTES WITH A VALUE OF
       X'1E' TO BE RETURNED TO AN APPLICATION AS INPUT DATA
       FROM THE TERMINAL WITHOUT EACH SUCH BYTE BEING PROCESSED AS
       A FIELD MARK.

   SPECIAL CONDITIONS:
     ACTION:
       A "CLPA" MUST BE PERFORMED AT IPL TIME FOR THIS SYSMOD TO
       BECOME ACTIVE.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NUMBER 9.

     REWORK HISTORY:
       2003-03-05: KBD (UN)LOCK ASYNC MSGS DURING NOEDIT TPUTS.
       2003-03-30: DO NOT FORCE IC IF WRT WITH NO-OP WCC.
       2005-08-14: DO NOT FORCE LINE-WRAP AFTER COLUMN 80.
       2009-06-01: USE SCREEN SIZES AND QUERY BIT FROM SNA BIND.
       2009-11-07: CHANGE IKTIIOM AND ADD IKTLOGR ZAPS FOR RECONNECT.
       2012-04-28: IMPROVE THE INTEROPERABILITY OF TPUT NOEDIT (WITH
                   "UNLOCK KEYBOARD" SET IN THE WCC) AND TGET NOWAIT
                   TO MATCH THAT OF TPUT FULLSCR AND TGET NOWAIT.

     TSO/VTAM IS A VTAM APPLICATION.  THIS SYSMOD DOES NOT IMPLY
     THAT VTAM CAN CORRECTLY PROCESS THE DATA THAT CAN NOW BE
     GENERATED BY TSO APPLICATIONS, EVEN IF THE DATA CONSISTS OF
     A PERFECTLY VALID 3270 DATA STREAM.

     EVT0108 LOCAL NON-SNA SUPPORT IS PROVIDED BY USERMOD ZP60008.

     USERMOD ZP60032 UPGRADES THE GTTERM MACRO TO BE ABLE TO EXPLOIT
     NEW FUNCTION DELIVERED IN THIS SYSMOD.

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IKT0009C
       IKTVTPUT
       IKTVTGET
       IKTIIOM
       IKTLOGR
       IKT3270O
       IKT0009D
       IKTXLOG
       IKT3270I
       IKT09412
       IKT09413
       IKT0940A
     MACROS:
       IKTTVWA
       STFSMODE
 */.
++ZAP(IKT0009C) DISTLIB(AOST3).
 NAME IKT0009C
 IDRDATA ZP60009
VER 00C6 4870,5060           LH    R7,XSAPRMTJ
VER 00CA 1277                LTR   R7,R7
VER 00CC 4780,C0C6           BZ
VER 00E4 4870,5060           LH    R7,XSAPRMTJ
VER 00E8 1277                LTR   R7,R7
VER 00EA 4780,C1AE           BZ
REP 00CC 47D0                BNP
REP 00EA 47D0                BNP
++ZAP(IKTVTPUT) DISTLIB(AOST3).
 NAME IKTVTPUT
 IDRDATA ZP60009
VER 0016 05C0                BALR  R12,0
VER 0258 5010,D050           ST    R1,OPFLAGS
VER 02DA 5010,D050           ST    R1,OPFLAGS
VER 043E 50E0,506C  DATAEDIT ST    R14,XSASAVEA
VER 0442 9103,5064           TM    XSAOPTNS,XSAEDITO
VER 0446 4770,C472           BNZ   @RT00307
VER 044A 9640,5068  NEXTINST OI    XSAFLAG,XSADMOVE
VER 0508 0000,0000  *        PATCH AREA
VER 050C 0000,0000  *        PATCH AREA
VER 0510 0000,0000  *        PATCH AREA
VER 0514 0000,0000  *        PATCH AREA
VER 0518 0000,0000  *        PATCH AREA
VER 051C 0000,0000  *        PATCH AREA
VER 0520 0000       *        PATCH AREA
VER 0522 0000,0000  *        PATCH AREA
VER 0526 0000       *        PATCH AREA
REP 0258 45E0,C500           BAL   R14,PATCH2
REP 02DA 45E0,C500           BAL   R14,PATCH2
REP 0446 47F0,C4F0           B     PATCH1
REP 0508 4770,C472  PATCH1   BNZ   @RT00307
REP 050C 9180,5060           TM    XSAPRMTJ,XSANOED
REP 0510 4710,C472           BO    @RT00307
REP 0514 47F0,C432           B     NEXTINST
REP 0518 5010,D050  PATCH2   ST    R1,OPFLAGS
REP 051C 9180,5060           TM    XSAPRMTJ,XSANOED
REP 0520 07EE                BNOR  R14
REP 0522 9634,D051           OI    OPOPTNS,OPEDIT+OPNOED
REP 0526 07FE                BR    R14
++ZAP(IKTVTGET) DISTLIB(AOST3).
 NAME IKTVTGET
 IDRDATA ZP60009
VER 0016 05C0       @PROLOG  BALR  R12,0
VER 009A 9604,8090           OI    TVWAFLG1,TVWAULK
VER 0310 9200,5088           MVI   XSARC,0
VER 037A 920C,5088           MVI   XSARC,TOOSMALL
VER 08AC 0000,0000           DC    F'0'
VER 08B0 0000,0000           DC    F'0'
VER 08B4 0000,0000           DC    F'0'
VER 08B8 0000,0000           DC    F'0'
VER 08BC 0000,0000           DC    F'0'
VER 08C0 0000,0000           DC    F'0'
VER 08C4 0000,0000           DC    F'0'
VER 08C8 0000,0000           DC    F'0'
VER 08CC 0000,0000           DC    F'0'
VER 08D0 0000,0000           DC    F'0'
VER 08D4 0000,0000           DC    F'0'
VER 08D8 0000,0000           DC    F'0'
VER 08DC 0000,0000           DC    F'0'
VER 08E0 0000,0000           DC    F'0'
REP 009A 47F0,C894           B     PATCH1
REP 0310 47F0,C8A4           B     PATCH2
REP 037A 47F0,C8B8           B     PATCH3
REP 08AC 9110,5064  PATCH1   TM    100(R5),X'10'     NOWAIT? (EX GPR1)
REP 08B0 4770,C086           BNZ   PATCH1OK          YES
REP 08B4 9604,8090           OI    TVWAFLG1,TVWAULK  NO, REQUEST UNLOCK
REP 08B8 47F0,C086           B     PATCH1OK
REP 08BC 9200,5088  PATCH2   MVI   XSARC,0
REP 08C0 9104,9019           TM    TSBFLG5,TSBNEDIT
REP 08C4 47E0,C2FC           BNO   PATCH2OK
REP 08C8 9218,5088           MVI   XSARC,24          RC=00 => RC=18
REP 08CC 47F0,C2FC           B     PATCH2OK
REP 08D0 920C,5088  PATCH3   MVI   XSARC,TOOSMALL
REP 08D4 9104,9019           TM    TSBFLG5,TSBNEDIT
REP 08D8 47E0,C366           BNO   PATCH3OK
REP 08DC 921C,5088           MVI   XSARC,28          RC=0C => RC=1C
REP 08E0 47F0,C366           B     PATCH3OK
++ZAP(IKTIIOM) DISTLIB(AOST4).
 NAME IKTIIOM
 IDRDATA ZP60009
VER 03C4 D501,804A,64D4      CLC   TSBXTMBF,=H'1920'
VER 03CA 4770,63BE           BNE   MODEL1
VER 03CE 9250,C008           MVI   TSBLNSZ,80
VER 03D2 9218,C028           MVI   TSBLNNO,24
VER 03D6 47F0,63EA           B     SIZESET
REP 03CA 4740,63BE           BL    MODEL1
++ZAP(IKTLOGR) DISTLIB(AOST4).
 NAME IKTLOGR
 IDRDATA ZP60009
VER 0150 D207,B068,A068      MVC   TSBTRMID(8,TSBBASE),TSBTRMID(@10)
REP 0150 D20B,B064,A064      MVC   TSBPRMR(12,TSBBASE),TSBPRMR(@10)
++MOD(IKT3270O) DISTLIB(AOST3).
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(NEW,PASS),UNIT=SYSDA,SPACE=(CYL,3),
//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=4080)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT)'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE '*** IKT3270O: TSO/VTAM TERMINAL SCREEN MANAGER ***     *
                        '
*
*   MODIFIED BY GREG PRICE JANUARY 2003 FOR USERMOD ZP60009
*
IKT3270O CSECT
         USING IKT3270O,R15
         B     @PROLOG
         DC    AL1(33)
         DC    C'IKT3270O  83.271'
         DC    C' ZP60009 2005.226'
         DROP  R15
@PROLOG  STM   R14,R12,12(R13)             SAVE REGS
         BALR  R5,0                        ADDRESS SET
@PSTART  LA    R6,4095(,R5)
         LA    R7,4095(,R6)
         USING PSA,0
         USING @PSTART,R5
         USING @PSTART+4095,R6
         USING @PSTART+8190,R7
         EJECT
********************************************************************
*                                                                  *
* SET UP ADDRESSING TO COMPILER WORK AREA, SET SCREEN PARMS AND    *
* PROCESS REQUEST CODE.                                            *
*                                                                  *
********************************************************************
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         L     R12,TSBEXTNT-TSB(,R12)
         L     R9,TSBXTVWA-TSBX(,R12)      SET TVWA POINTER
         USING TVWA,R9
         L     R8,TVWATOMW                 SET BASE PTR FOR WORK AREA
         LA    R4,TOMAUTOD(,R8)
         ST    R13,4(,R4)
         ST    R4,8(,R13)                  ADDRESS OF AUTODATA AREA
         LR    R13,R4
         L     R12,160(,R4)
         LTR   R12,R12
         BZ    A000054
         BAL   R14,FREEBUFR                PERFORM
A000054  TM    TVWAFLG1,TVWAXSCD           HAS SCREEN SIZE CHANGED?
         BNO   A000060                     NO
         BAL   R14,SETSCRSZ                PERFORM
A000060  LA    R12,876
         ALR   R12,R8
         ST    R12,TOMGETMN(,R8)
         ST    R12,TOMBFPTR(,R8)           POINT TO START OF RU
         CLI   TOMREQCD(R8),2
         BE    A0000E2
         IC    R12,TVWALNCT
         STC   R12,168(,R4)
         L     R12,TOMCOLMN(,R8)
         ST    R12,164(,R4)
         MVI   169(R4),X'00'
         NI    170(R4),X'1F'
         TM    TVWAFLG6,TVWAFMEW
         BNO   A00009A
         OI    170(R4),X'40'
A00009A  TM    TVWAFLG4,TVWAFMSC
         BNO   A0000A6
         OI    170(R4),X'80'
A0000A6  TM    TVWAFLG3,TVWAAIGN
         BNO   A0000B2
         OI    170(R4),X'20'
A0000B2  CLI   TOMREQCD(R8),0              REQUEST FOR RU BUILD?
         BNE   A0000C2                     NO
         BAL   R14,BLDRU                   PERFORM
         B     A0000E6
A0000C2  CLI   TOMREQCD(R8),1              REQUEST FOR FORMAT WRITE?
         BNE   A0000D2                     NO
         BAL   R14,FORMTWRT                PERFORM
         B     A0000E6
A0000D2  CLI   TOMREQCD(R8),3              REQUEST FOR BREAK-IN?
         BNE   A0000DE                     NO
         BAL   R14,BKMDSEND                PERFORM
A0000DE  B     A0000E6
A0000E2  BAL   R14,A00026A                 PERFORM
A0000E6  L     R12,TOMBFCNT(,R8)
         LTR   R12,R12                     IS RU EMPTY?
         BNP   A000110                     YES
         TM    TVWAFLG3,TVWATRAN           USER TRANSLATION NEEDED?
         BO    A00010C                     YES
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         L     R12,TSBEXTNT-TSB(,R12)
         TM    TSBXFLG1-TSBX(R12),TSBXASCI ASCII TRANSLATION NEEDED?
         BNO   A000110                     NO
A00010C  BAL   R14,TRANPROC                PERFORM
A000110  B     A0002EE
         EJECT
A000114  ST    R14,88(,R4)
         MVI   OPREQ(R8),X'07'
         LA    R13,520(,R8)
         LA    R12,OPARMS(,R8)
         ST    R12,152(,R4)
         L     R12,CVTPTR                  CVT ADDRESS
         L     R12,CVTTCASP-CVT(,R12)
         L     R15,TCASOQM-TCAST(,R12)
         LA    R1,152(,R4)
         BALR  R14,R15                     STD LINKAGE
         LA    R13,TOMAUTOD(,R8)
         L     R14,88(,R4)
         BR    R14                         EXIT
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, SETSCRSZ, WILL BE CALL TO INITIALIZE PARAMETERS  */
*/* USED FOR SCREEN MANAGEMENT. SETSCRSZ WILL ALSO BE CALL TO ADJUST */
*/* THESE PARAMETERS AS NEEDED DURING THE SESSION.                   */
*/*                                                                  */
*/********************************************************************/
SETSCRSZ ST    R14,12(,R13)
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         CLC   TSBALTR-TSB(2,R12),TSBPRMR-TSB(R12)              ZP60009
         BE    MOD1OR2                     PRMSZE=ALTSZE        ZP60009
         CLC   TSBLNNO-TSB(1,R12),TSBPRMR-TSB(R12)              ZP60009
         BH    USEALTSZ                    MORE LINES THAN PRIM ZP60009
         CLC   TSBLNSZ-TSB(1,R12),TSBPRMC-TSB(R12)              ZP60009
         BNH   USEPRMSZ                    NOT BIGGER THAN PRIM ZP60009
USEALTSZ LA    R1,TSBALTR-TSB(,R12)        POINT TO ALT SIZE    ZP60009
         TM    TVWAFLG6,X'01'              TVWAALTS ALREADY ON? ZP60009
         BO    GOTSCRSZ                    YES, NO NEED TO SET  ZP60009
         OI    TVWAFLG6,X'01'              NO, SET TVWAALTS     ZP60009
         B     CHGSCRSZ                    SIZE IS CHANGING     ZP60009
USEPRMSZ LA    R1,TSBPRMR-TSB(,R12)        POINT TO PRIM SIZE   ZP60009
         TM    TVWAFLG6,X'01'              TVWAALTS OFF?        ZP60009
         BZ    GOTSCRSZ                    YES, NO NEED TO CLR  ZP60009
         NI    TVWAFLG6,X'FE'              NO, RESET TVWAALTS   ZP60009
CHGSCRSZ TM    TVWAFLG5,TVWAFSM            IN FULLSCREEN MODE?  ZP60009
         BO    GOTSCRSZ                    YES, LEAVE FOR APP   ZP60009
         OI    TVWAFLG4,TVWAFMSC           NO, FORMAT SCREEN    ZP60009
         LA    R0,1                        RESTART FROM TOP     ZP60009
         STC   R0,TVWALNCT                 SET EXTERNALLY       ZP60009
         ST    R0,TOMLNCNT(,R8)            SET INTERNALLY       ZP60009
GOTSCRSZ SLR   R0,R0                       CLEAR FOR INSERT     ZP60009
         ICM   R0,3,0(R1)                  LOAD ROWS + COLS     ZP60009
         SRDL  R0,8                        GET ROWS IN R0       ZP60009
         SRL   R1,24                       GET COLS IN R1       ZP60009
         ST    R1,TOMPLSZ(,R8)             SET PHYS LINE SIZE   ZP60006
         STC   R0,TOMPLNNO(,R8)            SET PHYS LINE COUNT  ZP60009
         MR    R0,R0                       GET BUFFER SIZE      ZP60009
         L     R12,TSBEXTNT-TSB(,R12)      POINT TO TSBX        ZP60009
         STH   R1,TSBXTMBF-TSBX(,R12)      SET NEW BUFFER SIZE  ZP60009
         BCTR  R1,0                        GET LAST LOCATION    ZP60009
         STCM  R1,3,TOMFMTAD(R8)           SBA FOR LAST BYTE    ZP60009
         CH    R1,HW4095                   NEED 14-BIT ADDRESS? ZP60009
         BH    A000182                     YES                  ZP60009
         SLL   R1,2                        NO                   ZP60009
         STCM  R1,2,TOMFMTAD(R8)           USE 12-BIT ADDRESS   ZP60009
         NI    TOMFMTAD+1(R8),X'3F'                             ZP60009
         TR    TOMFMTAD(2,R8),BFADRTAB                          ZP60009
         B     A000182                                          ZP60009
MOD1OR2  EQU   *                                                ZP60009
         NI    TVWAFLG6,X'FE'              RESET TVWAALTS       ZP60009
         L     R12,TSBEXTNT-TSB(,R12)
         CLC   TSBXTMBF-TSBX(2,R12),HW1920 MODEL-2 DISPLAY?
*ZP60009 BNE   A000172
         BL    A000172                     NO, MODEK-1          ZP60009
         MVC   TOMPLSZ(4,R8),FW80          PHYSICAL LINE SIZE
         MVI   TOMPLNNO(R8),X'18'          LINES PER SCREEN
         MVC   TOMFMTAD(2,R8),A002103      LAST SCREEN POSITION
         B     A000182
A000172  MVC   TOMPLSZ(4,R8),FW40          PHYSICAL LINE SIZE
         MVI   TOMPLNNO(R8),X'0C'          LINES PER SCREEN
         MVC   TOMFMTAD(2,R8),A002105      LAST SCREEN POSITION
A000182  MVI   TOMSBACD(R8),X'11'
         MVC   TOMFMATT(2,R8),SFRDATT
         LA    R12,2
         L     R1,PSAAOLD                  PSA REFERENCE
         L     R15,ASCBTSB-ASCB(,R1)
         SLR   R14,R14
         IC    R14,TSBLNSZ-TSB(,R15)
         L     R11,TOMPLSZ(,R8)
         CR    R14,R11
         BNH   A0001AA
         LR    R14,R11
A0001AA  CR    R14,R12
         BNL   A0001B2
         LR    R14,R12
A0001B2  STC   R14,TOMLNSZ(,R8)            SET WORKING LINE SIZE
         SLR   R14,R14
         IC    R14,TSBLNNO-TSB(,R15)
         SLR   R15,R15
         IC    R15,TOMPLNNO(,R8)
         CR    R14,R15
         BNH   A0001CA
         LR    R14,R15
A0001CA  CR    R14,R12
         BNL   A0001D2
         LR    R14,R12
A0001D2  ST    R14,TOMLNNO(,R8)            SET WORKING LINES/SCREEN
         NI    TVWAFLG1,255-TVWAXSCD       RESET SCREEN SIZE REQUEST
         L     R14,12(,R13)
         BR    R14                         END OF SETSCRSZ
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, FORMTWRT, WILL BUILD AN RU CONSISTING OF A.....  */
*/*                                                                  */
*/********************************************************************/
FORMTWRT ST    R14,76(,R4)                 SAVE RETURN ADDRESS
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)           TOMCOLMN=0
         LA    R12,9                       MESSAGE INDEX NUMBER
         ST    R12,TOMWRKVI(,R8)
*TOMWRKSZ=MIN(MSGSIZE,62)+18;        /* SET SIZE OF ERROR MS @G58AK2Q*/
         SLA   R12,2
         L     R1,CVTPTR                   CVT ADDRESS
         L     R1,CVTTCASP-CVT(,R1)
         L     R1,TCASMSGS-TCAST(,R1)
         AL    R1,FWMINUS4
         L     R12,0(R12,R1)
         LH    R15,0(,R12)
         LA    R14,62
         CR    R15,R14
         BNH   *+6
         LR    R15,R14
         AL    R15,FW18
         STC   R15,TOMWRKSZ(,R8)           SET SIZE OF ERROR MESSAGE
         MVI   TOMWRKBF(R8),X'F5'          SET COMMAND
         TM    TVWAFLG6,X'01'              IS TVWAALTS ON?      ZP60009
         BNO   *+8                         NO, PRIMARY SIZE     ZP60009
         MVI   TOMWRKBF(R8),X'7E'          YES, ALTERNATE SIZE  ZP60009
         MVC   TOMWRKBF+1(6,R8),A0020E9    BELL+UNLK,SBA(0),SF(UNPHI)
         LR    R14,R15
         SL    R14,FW19
         EX    R14,A00201E                 LOAD MSG TO TOMWRKBF+7
         ALR   R15,R8
         MVC   TOMWRKBF-11(11,R15),A0020D0
         L     R12,TOMPLSZ(,R8)            PHYSICAL LINE SIZE   ZP60009
         CL    R12,FW80                    WIDER THAN 80 COLS?  ZP60009
         BNH   ASTERSOK                    NO, HAVE RIGHT SBA   ZP60009
         STC   R12,TOMWRKBF-9(,R15)        SET SBA LOW ADDR     ZP60009
         NI    TOMWRKBF-9(R15),X'3F'       FIX SBA LOW ADDR     ZP60009
         SRL   R12,6                       GET SBA HIGH ADDR    ZP60009
         STC   R12,TOMWRKBF-10(,R15)       SET SBA HIGH ADDR    ZP60009
         TR    TOMWRKBF-10(2,R15),BFADRTAB FIX 12-BIT SBA ADDR  ZP60009
ASTERSOK EQU   *                           HAVE RIGHT *** ADDR  ZP60009
         OI    TVWAFLG2,TVWAPGN
         NI    TVWAFLG4,255-TVWAKBDL       KEYBOARD NOT LOCKED
         OI    TOMWFLG1(R8),TOMCURST       CURSOR ADDRESS SET
         OI    TOMWFLG2(R8),TOMERMG9       SPECIAL ERROR MESSAGE RU
         SLR   R12,R12
         IC    R12,TOMWRKSZ(,R8)
         ST    R12,TOMBFCNT(,R8)           SET RU DATA LENGTH
         TM    TVWAFLG5,TVWAFSM            IN FULLSCREEN MODE?
         BNO   *+8                         NO
         OI    TVWAFLG5,TVWAFSW            YES, FULLSCREEN TPUT WAITING
         L     R14,76(,R4)                 RESTORE RETURN ADDRESS
         BR    R14                         END OF FORMTWRT
         EJECT
A00026A  ST    R14,84(,R4)
         NI    TVWAFLG2,255-TVWAPGN
         NI    TVWAFLG4,255-TVWANOFB
         TM    170(R4),X'40'
         BNO   A000282
         OI    TVWAFLG6,TVWAFMEW
A000282  TM    170(R4),X'20'
         BNO   A00028E
         OI    TVWAFLG3,TVWAAIGN
A00028E  TM    170(R4),X'80'
         BNO   A00029A
         OI    TVWAFLG4,TVWAFMSC
A00029A  IC    R12,168(,R4)
         STC   R12,TVWALNCT
         L     R12,164(,R4)
         ST    R12,TOMCOLMN(,R8)
         SLR   R12,R12
         IC    R12,TVWAATTN
         SLR   R15,R15
         IC    R15,169(,R4)
         ALR   R12,R15
         STC   R12,TVWAATTN
         MVI   169(R4),X'00'
         BAL   R14,A000114                 PERFORM
         L     R14,84(,R4)
         BR    R14                         EXIT
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, BKMDSEND, WILL BUILD AN RU....                   */
*/*                                                                  */
*/********************************************************************/
BKMDSEND ST    R14,80(,R4)
         L     R12,TOMBFCNT(,R8)
         LTR   R12,R12                     IS OUTPUT RU EMPTY?
         BNZ   A0002DC                     NO
         BAL   R14,SCRFORMT                PUT IN CMD AND WCC
A0002DC  TM    TVWAFLG5,TVWAFSM            IN FULLSCREEN MODE?
         BNZ   A0002E8                     YES
         BAL   R14,NEWCURS                 NO, FORMAT SCREEN FOR IT
A0002E8  L     R14,80(,R4)
         BR    R14                         END OF BKMDSEND
A0002EE  B     A002012
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, BLDRU, WILL CONTROL THE BUILDING OF THE OUTPUT.  */
*/* APPROPRIATE ROUTINES WILL BE CALLED TO PUT DATA IN THE OUTPUT    */
*/* RU.                                                              */
*/*                                                                  */
*/********************************************************************/
BLDRU    ST    R14,72(,R4)
         NI    OPOPTNS(R8),255-OPASID      SET CROSS-MEMORY FLAG OFF
         NI    TOMWFLG2(R8),255-TOMSCHED   SEND RU POST=RESP
         NI    TOMWFLG1(R8),255-TOMCURST-TOMEXBRU
         NI    TOMWFLG2(R8),255-TOMKBULK   KEYBD UNLOCK NOT REQ'D YET
         SLR   R12,R12
         ST    R12,TOMBFCNT(,R8)           SET COUNT OF DATA IN RU TO 0
         NI    TOMWFLG2(R8),255-TOMALARM-TOMERASE-TOMTRSBA
         TM    TVWAFLG2,TVWABKMG           IS FLASHBACK DATA PENDING?
         BNO   A00031C                     NO
*  /******************************************************************/
*  /*                                                                */
*  /*      PUT LAST INPUT LINE(S) AT TOP OF 3270 SCREEN IF YES.      */
*  /*                                                                */
*  /******************************************************************/
         BAL   R14,FLSHBACK                PUT FLASHBACK IN OUTPUT RU
A00031C  TM    TVWAFLG2,TVWAERMG           TIM'S ERROR MESSAGE PENDING?
         BNO   A000330                     NO
         TM    TOMWFLG1(R8),TOMEXBRU       CAN RU BUILD CONTINUE?
         BNZ   A000330                     NO
*  /******************************************************************/
*  /*                                                                */
*  /*            PUT TIM'S ERROR MESSAGE IN OUTPUT RU                */
*  /*                                                                */
*  /******************************************************************/
         BAL   R14,BLDERR                  GO TO ERROR MESSAGE ROUTINE
A000330  CLI   TVWAATTN,0                  REQ FOR ATTENTION ACCEPTED?
         BNE   A000340                     YES
         TM    TVWAFLG3,TVWAAIGN           REQ FOR ATTENTION IGNORED?
         BNO   A00034C                     NO
A000340  TM    TOMWFLG1(R8),TOMEXBRU       CAN RU BUILD CONTINUE?
         BNZ   A00034C                     NO
*  /******************************************************************/
*  /*                                                                */
*  /*    PUT ATTENTION ACCEPTED AND/OR IGNORED MESSAGE(S) IN RU.     */
*  /*                                                                */
*  /******************************************************************/
         BAL   R14,BLDATTN                 PUT ATTENTION MESSAGES IN RU
*/********************************************************************/
*/*                                                                  */
*/*            BUILD AND EDIT USER DATA IN OUTPUT RU.                */
*/*                                                                  */
*/********************************************************************/
A00034C  TM    TOMWFLG1(R8),TOMEXBRU       CAN RU BUILD CONTINUE?
         BNZ   A000358                     NO
         BAL   R14,BLDDTA                  YES, CALL DATA BUILD ROUTINE
         TM    OPOPTNS(R8),OPNOED          NOEDIT?              ZP60009
         BNO   A000358                     NO, CONTINUE EDIT    ZP60009
         TM    OPOPTNS(R8),OPASID          CROSS-MEMORY TPUT?   ZP60009
         BO    NOEDASID                    YES, DO NOT ALLOW    ZP60009
         TM    TVWAFLG5,TVWAFSW            NOEDIT TPUT WAITING? ZP60009
         BO    A000358                     YES, CONTINUE EDIT   ZP60009
         CLC   FW1,TOMBFCNT(R8)            LONG ENOUGH FOR WCC? ZP60003
         BNL   A00055A                     NO, NO WCC TO CHECK  ZP60009
         L     R12,TOMGETMN(,R8)           POINT TO DATA STREAM ZP60009
         CLI   0(R12),X'F1'                WRITE?               ZP60009
         BE    CHECKWCC                    YES, WCC PRESENT     ZP60009
         CLI   0(R12),X'F5'                ERASE/WRITE?         ZP60009
         BE    CHECKWCC                    YES, WCC PRESENT     ZP60009
         CLI   0(R12),X'7E'                ERASE/WRITE ALT?     ZP60009
         BNE   A00055A                     NO, NO WCC TO CHECK  ZP60009
CHECKWCC TM    1(R12),X'02'                UNLOCKING KEYBOARD?  ZP60009
         BNO   A00055A                     NO, BUT NO WCC EDIT  ZP60009
         B     A00045A                     YES, SET FLAGS       ZP60009
NOEDASID NI    OPOPTNS(R8),255-OPNOED      RESET NOEDIT FLAG    ZP60009
A000358  L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         TM    TSBFLG3-TSB(R12),TSBSPIT    TCLEARQ OR STBREAK ISSUED?
         BNZ   A000394                     YES
         TM    TSBFLG2-TSB(R12),TSBAUTON+TSBSTAUT
         BNO   A000394                     NO AUTO PROMPTING
         TM    TVWAFLG3,TVWABRIN
         BNZ   A000394                     NO BREAK-IN REQUEST
         TM    TOMWFLG1(R8),TOMEXBRU       CAN RU BUILD CONTINUE?
         BNZ   A000394                     NO
         TM    TSBFLG4-TSB(R12),TSBIWAIT   INPUT WAIT IN PROGRESS?
         BO    A000390                     YES
         TM    TVWAFLG8,TVWATGNO           TGET NOWAIT ISSUED?
         BNO   A000394                     NO
*  /******************************************************************/
*  /*                                                                */
*  /*       BUILD LINE OR CHARACTER PROMPT DATA IN OUTPUT RU.        */
*  /*                                                                */
*  /******************************************************************/
A000390  BAL   R14,BLDPRMPT                GO TO PROMPT ROUTINE
A000394  L     R12,TOMBFCNT(,R8)           DATA IN RU & NOT FIRST LINE?
         LTR   R12,R12
         BNP   A0003C6                     LEAVE IF NO DATA IN RU
         L     R12,TOMLNCNT(,R8)
         C     R12,FW1
         BNH   A0003C6                     LEAVE IF FIRST LINE
         TM    TOMWFLG2(R8),TOMTRSBA       IS LINE COUNT > 1?
         BZ    A0003BA                     YES
         TM    TOMWFLG1(R8),TOMEDSAV       LAST TPUT AN EDIT?
         BNZ   A0003C2                     NO
A0003BA  OI    TVWAFLG5,TVWASCAN           YES
         B     A0003C6
A0003C2  NI    TVWAFLG5,255-TVWASCAN       RU SIZE EMPTY OR FIRST LINE
A0003C6  L     R12,TOMBFCNT(,R8)
         C     R12,FW2                     DATA IN RU (AFTER WCC)?
         BNH   A0003D6                     NO
         NI    TVWAFLG4,255-TVWADARC       RESET DATA FOUND BIT
A0003D6  TM    TOMWFLG1(R8),TOMENDBF       ENOUGH BUFFER SPACE?
         BNZ   A000432                     NO
         TM    TOMWFLG1(R8),TOMCURST       IS CURSOR ALREADY SET IN RU?
         BNZ   A000432                     YES
         L     R12,TOMBFCNT(,R8)
         LTR   R12,R12                     IS THERE DATA IN OUTPUT RU?
         BNP   A000432                     NO
*     /***************************************************************/
*     /*                                                             */
*     /* THIS DO GROUP WILL SET CURSOR FOR ALL NON-EMPTY RU'S FOR    */
*     /* WHICH CURSOR HAS NOT ALREADY BEEN SET.                      */
*     /*                                                             */
*     /***************************************************************/
*                                          BEGIN DEFAULT CURSOR PROCESS
         BAL   R14,NEWLINE                 PUT LINE ADDR IN OUTPUT RU
         L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)            LINE-COUNT AT LAST LINE?
         BL    A000410                     NO
         TM    TVWAFLG4,TVWANOFB           IS IT OK TO DO FLASHBACK?
         BNZ   A000410                     NO
         BAL   R14,SCRNPAGE                YES, PUT PAGE PROMPT IN RU
         B     A000432
*                                          SET CURSOR ON CURRENT LINE
A000410  LA    R12,1
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)           UPDATE COUNT OF DATA IN RU
         L     R1,TOMBFPTR(,R8)
         XC    1(255,R1),1(R1)
         MVI   0(R1),X'13'                 PUT INSERT CURSOR IN RU
         AL    R12,TOMGETMN(,R8)
         ST    R12,TOMBFPTR(,R8)           UPDATE RU BUFFER POINTER
A000432  L     R2,TOMGETMN(,R8)            SET ADDR OF OUTPUT RU IN R2
         TM    TOMWFLG2(R8),TOMALARM       SOUND AUDIBLE ALARM REQUEST?
         BNO   A000442                     NO
         OI    1(R2),X'84'                 YES, MODIFY WCC FOR ALARM
A000442  TM    TVWAFLG4,TVWANOFB
         BNO   A00045A
         OI    TOMWFLG2(R8),TOMKBULK
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         NI    TSBFLG1-TSB(R12),255-TSBIFLSH
A00045A  TM    TOMWFLG1(R8),TOMEXBRU       CONTINUE BLDRU?
         BZ    A00046A                     YES
         TM    OPOPTNS(R8),OPNOED @@       NOEDIT?              ZP60009
         BNO   *+8                @@       NO                   ZP60009
         OI    PUTFLGS,X'80'      @@       YES                  ZP60009
         TM    TVWAFLG4,TVWANOFB           NO FLASHBACK?
         BNO   A000472                     NO
         TM    OPOPTNS(R8),OPNOED @@       NOEDIT?              ZP60009
         BNO   *+8                @@       NO                   ZP60009
         OI    PUTFLGS,X'40'      @@       YES                  ZP60009
A00046A  TM    TVWAFLG1,TVWAULK            GLOBAL UNLOCK REQUESTED?
         BO    A00047A                     YES
         TM    OPOPTNS(R8),OPNOED @@       NOEDIT?              ZP60009
         BNO   *+8                @@       NO                   ZP60009
         OI    PUTFLGS,X'20'      @@       YES                  ZP60009
A000472  TM    TOMWFLG2(R8),TOMKBULK       LOCAL REQ FOR KEYBD UNLOCK?
         BNO   A00055A                     NO
         TM    OPOPTNS(R8),OPNOED @@       NOEDIT?              ZP60009
         BNO   *+8                @@       NO                   ZP60009
         OI    PUTFLGS,X'10'      @@       YES                  ZP60009
*  /******************************************************************/
*  /*                                                                */
*  /* MODIFY WCC IN RU TO RESTORE KEYBOARD OPERATION IF KEYBOARD UN- */
*  /* LOCK REQUEST IS OUTSTANDING.                                   */
*  /*                                                                */
*  /******************************************************************/
A00047A  L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BNZ   A00048C
         TM    OPOPTNS(R8),OPNOED @@       NOEDIT?              ZP60009
         BNO   *+8                @@       NO                   ZP60009
         OI    PUTFLGS,X'08'      @@       YES                  ZP60009
         TM    TOMWFLG4(R8),TOMEB
         BNZ   A00053E
         TM    OPOPTNS(R8),OPNOED @@       NOEDIT?              ZP60009
         BNO   *+8                @@       NO                   ZP60009
         OI    PUTFLGS,X'04'      @@       YES                  ZP60009
*                                          BEGIN UNLOCK KEYBD PROCESS
A00048C  L     R12,TOMBFCNT(,R8)
         LTR   R12,R12                     RU FOR UNLOCK KEYBOARD ONLY?
         BNZ   A000518                     NO
         TM    OPOPTNS(R8),OPNOED @@       NOEDIT?              ZP60009
         BNO   *+8                @@       NO                   ZP60009
         OI    PUTFLGS,X'02'      @@       YES                  ZP60009
         TM    TVWAFLG5,TVWAFSM
         BNZ   A0004BE
         TM    OPOPTNS(R8),OPNOED @@       NOEDIT?              ZP60009
         BNO   *+8                @@       NO                   ZP60009
         OI    PUTFLGS,X'01'      @@       YES                  ZP60009
         L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)
         BL    A0004BE
         TM    OPOPTNS(R8),OPNOED @@       NOEDIT?              ZP60009
         BNO   *+8                @@       NO                   ZP60009
         OI    PUTFLGS+1,X'80'    @@       YES                  ZP60009
         BAL   R14,SCRFORMT                PERFORM
         BAL   R14,NEWLINE                 PERFORM
         BAL   R14,SCRNPAGE                PERFORM
         OI    TVWAFLG5,TVWASCAN
         B     A00051C
         DC    C'>>'
PUTFLGS  DC    H'0'
         DC    C'<<'
A0004BE  TM    TVWAFLG4,TVWAFMSC           FORMAT SCREEN?
         BO    A0004DA                     YES
         TM    OPOPTNS(R8),OPNOED @@       NOEDIT?              ZP60009
         BNO   *+8                @@       NO                   ZP60009
         OI    PUTFLGS+1,X'40'    @@       YES                  ZP60009
         TM    TVWAFLG4,TVWADARC           HAS TIM RECEIVED DATA?
         BNO   A0004F2                     NO
         TM    OPOPTNS(R8),OPNOED @@       NOEDIT?              ZP60009
         BNO   *+8                @@       NO                   ZP60009
         OI    PUTFLGS+1,X'20'    @@       YES                  ZP60009
         L     R12,TOMLNCNT(,R8)
         C     R12,FW1                     IS LINE-COUNT > 1?
         BNH   A0004F2                     NO
         TM    OPOPTNS(R8),OPNOED @@       NOEDIT?              ZP60009
         BNO   *+8                @@       NO                   ZP60009
         OI    PUTFLGS+1,X'10'    @@       YES                  ZP60009
*                                          SET SPECIAL CURSOR FOR INPUT
A0004DA  BAL   R14,SCRFORMT                    CMD,WCC, & FORMAT
         TM    OPOPTNS(R8),OPNOED @@       NOEDIT?              ZP60009
         BNO   *+8                @@       NO                   ZP60009
         OI    PUTFLGS+1,X'08'    @@       YES                  ZP60009
         L     R12,TOMLNCNT(,R8)
         C     R12,FW1
         BNH   A0004EE
         TM    OPOPTNS(R8),OPNOED @@       NOEDIT?              ZP60009
         BNO   *+8                @@       NO                   ZP60009
         OI    PUTFLGS+1,X'04'    @@       YES                  ZP60009
         BAL   R14,NEWCURS                 PUT CURSOR IN RU
A0004EE  B     A000510                     END SET SPECIAL CURSOR
*                                          BLD HEADER FOR UNLOCK RU
*                                          BLD HEADER FOR UNLOCK REQ
A0004F2  L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),WRTWCC             PUT CMD AND WCC
         LA    R12,2
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)           UPDATE COUNT OF DATA IN RU
         AL    R12,TOMGETMN(,R8)
         ST    R12,TOMBFPTR(,R8)           UPDATE RU BUFFER POINTER
A000510  NI    TVWAFLG4,255-TVWADARC
         TM    OPOPTNS(R8),OPNOED @@       NOEDIT?              ZP60009
         BNO   *+8                @@       NO                   ZP60009
         OI    PUTFLGS+1,X'02'    @@       YES                  ZP60009
         B     A00051C
A000518  NI    TVWAFLG4,255-TVWADARC
         TM    OPOPTNS(R8),OPNOED @@       NOEDIT?              ZP60009
         BNO   *+8                @@       NO                   ZP60009
         OI    PUTFLGS+1,X'01'    @@       YES                  ZP60009
A00051C  L     R2,TOMGETMN(,R8)
         OI    1(R2),X'82'                 MODIFY WCC TO RESTORE KEYBD
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         TM    TSBFLG3-TSB(R12),TSBNOBRK
         BNO   A000538
         OI    TVWAFLG1,TVWATAS
A000538  SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
A00053E  NI    TVWAFLG4,255-TVWAKBDL       RESET KEYBOARD LOCKED FLAG
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         NI    TSBFLG1-TSB(R12),255-TSBIFLSH
         TM    TVWAFLG2,TVWAPGN
         BNZ   A00055A
         NI    TVWAFLG1,255-TVWAULK        CLEAR UNLOCK REQUEST FLAG
A00055A  L     R12,TOMLNCNT(,R8)
         STC   R12,TVWALNCT
         L     R14,72(,R4)
         BR    R14                         EXIT BLDRU
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, NEWLINE, WILL BE CALLED BY INTERNAL PROCEDURES   */
*/* TO BUILD LINE ADDRESSES WHILE BUILDING THE OUTPUT RU.            */
*/*                                                                  */
*/********************************************************************/
NEWLINE  ST    R14,120(,R4)
         LA    R2,1                        SET R2 FOR BUFFER ADDRESS
         BAL   R14,BUFFADDR                PUT LINE ADDRESS IN RU
         LA    R12,3
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)           SET CNT FOR LINE ADDR IN RU
         L     R3,TOMBFPTR(,R8)
         MVI   0(R3),X'11'                 PUT SBA ORDER IN RU
         MVC   1(2,R3),TOMLNADR(R8)        PUT LINE ADDR IN OUTPUT RU
         AL    R12,TOMGETMN(,R8)
         ST    R12,TOMBFPTR(,R8)           POINT TO NEXT UNUSED RU BYTE
         L     R14,120(,R4)
         BR    R14                         EXIT NEWLINE
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, BUFFADDR, WILL COMPUTE BUFFER ADDRESSES FOR TOM  */
*/*                                                                  */
*/********************************************************************/
BUFFADDR ST    R14,12(,R13)
*TOMLNCNT=MIN(TOMLNCNT,TOMLNNO);           NOT BEYOND LAST SCREEN LINE
         L     R12,TOMLNCNT(,R8)
         L     R15,TOMLNNO(,R8)
         CR    R12,R15
         BNH   A0005B0
         LR    R12,R15
A0005B0  ST    R12,TOMLNCNT(,R8)
*J=(TOMLNCNT-REG2)*TOMPLSZ+TOMCOLMN;       OFFSET
         LR    R1,R12
         SLR   R1,R2
         M     R0,TOMPLSZ(,R8)
         AL    R1,TOMCOLMN(,R8)
         ST    R1,TOMWRKVJ(,R8)
*J=MAX(0,J);                               J IS NONZERO
         SLR   R12,R12
         CR    R1,R12
         BNL   A0005CE
         LR    R1,R12
A0005CE  ST    R1,TOMWRKVJ(,R8)
         STCM  R1,3,TOMLNADR(R8)           SET 14-BIT ADDRESS   ZP60009
         CH    R1,HW4095                   NEED 14-BIT ADDRESS? ZP60009
         BH    BUFADROK                    YES                  ZP60009
*TOMROWAD=J/64;                            SET ROW INDEX FOR TRANSLATE
         LR    R10,R1
         SRDA  R10,32
         D     R10,FW64
         STC   R11,TOMROWAD(,R8)
*TOMCOLAD=J//64;                           SET COL INDEX FOR TRANSLATE
         LR    R10,R1
         SRDA  R10,32
         D     R10,FW64
         STC   R10,TOMCOLAD(,R8)
*TR(TOMLNADR,BFADRTAB);                    SAVE BUFFER ADDRESS
         TR    TOMLNADR(2,R8),BFADRTAB
BUFADROK EQU   *                                                ZP60009
         L     R14,12(,R13)
         BR    R14                         END OF BUFFADDR
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, NEWCURS, WILL SET CURSOR AFTER SUCCESSIVE TGETS. */
*/*                                                                  */
*/********************************************************************/
NEWCURS  ST    R14,96(,R4)
         LA    R2,2                        SET R2 FOR BUFFER ADDRESS
*IF TOMCOLMN=TOMLNSZ                       NO SPACE ON LINE?
         L     R12,TOMCOLMN(,R8)
         SLR   R3,R3
         IC    R3,TOMLNSZ(,R8)
         CR    R12,R3
         BNE   A000628
*THEN                                      NO SPACE ON LINE
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)           RESET COLUMN COUNT
         LA    R12,1
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)           MOVE TO NEXT LINE
         B     A000634
*ELSE                                      SPACE LEFT ON LINE
A000628  SLR   R12,R12
         IC    R12,TOMLNSZ(,R8)
         BCTR  R12,0
         ST    R12,TOMCOLMN(,R8)           TOMCOLMN=TOMLNSZ-1
A000634  BAL   R14,BUFFADDR                COMPUTE BUFFER ADDRESS
         LA    R12,6
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)           UPDATE RU DATA COUNT
         L     R3,TOMBFPTR(,R8)
         MVI   0(R3),X'11'                 PUT SBA ORDER IN RU
         MVC   1(2,R3),TOMLNADR(R8)        PUT BUFFER ADDRESS IN RU
         MVC   3(3,R3),SFRDATIC            READ ATTRIBUTE AND CURSOR
         AL    R12,TOMGETMN(,R8)
         ST    R12,TOMBFPTR(,R8)           UPDATE RU BUFFER POINTER
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)           RESET COLUMN COUNT
         OI    TVWAFLG5,TVWASCAN           REQ ATTRIBUTE TRACKING
         L     R14,96(,R4)
         BR    R14                         END OF NEWCURS
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, SCRFORMT, FORMATS THE 3270 SCREEN (IF NEEDED)    */
*/* AND PUTS THE PROPER WRITE CMD IN THE OUTPUT RU. THE SCREEN IS    */
*/* FORMATTED BY PUTTING AN ATTRIBUTE CHARACTER IN THE LAST          */
*/* BUFFER LOCATION.                                                 */
*/*                                                                  */
*/********************************************************************/
SCRFORMT ST    R14,92(,R4)
         CLC   TOMLNCNT(4,R8),FW1          IS THIS THE TOP SCRN LINE?
         BE    A000686                     YES
         TM    TVWAFLG4,TVWAFMSC           IS FORMAT OF SCRN REQUESTED?
         BNO   A0006B0                     NO
*  /******************************************************************/
*  /*                                                                */
*  /* THIS DO GROUP FORMATS THE 3270 BUFFER AFTER DETERMINING THE    */
*  /* LAST BUFFER LOCATION.                                          */
*  /*                                                                */
*  /******************************************************************/
A000686  TM    TVWAFLG4,TVWAFMSC           FORMAT SCREEN BIT ON?
         BNO   A000694                     NO
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)           RESET COLUMN COUNT
A000694  BAL   R14,SETSCRSZ                PERFORM
         MVC   TOMBFCNT(4,R8),FW7          COUNT FOR CMD,WCC, & FORMAT
         L     R12,TOMBFPTR(,R8)
         MVC   2(5,R12),TOMFMTDA(R8)       PUT FORMATTING DATA IN RU
         NI    TVWAFLG4,255-TVWAFMSC       TURN OFF REQUEST FOR FORMAT
         B     A0006B6
A0006B0  MVC   TOMBFCNT(4,R8),FW2          SET COUNT FOR CMD AND WCC
A0006B6  TM    TVWAFLG5,TVWAFSM            IS FULLSCR MODE IS EFFECT?
         BNO   A0006C6                     NO
         TM    TOMWFLG2(R8),TOMERASE       SCREEN ERASE?
         BO    A0006D6                     YES
A0006C6  TM    OPOPTNS(R8),OPBRK           BREAK TPUT?
         BNO   A0006E4                     NO
         TM    TVWAFLG3,TVWABRIN           BREAK-IN PROCESSING?
         BNO   A0006E4                     NO
A0006D6  L     R12,TOMBFPTR(,R8)           YES
         MVC   0(2,R12),EWRTWCCD           USE ERASE/WRITE
         TM    TVWAFLG6,X'01'              IS TVWAALTS ON?      ZP60009
         BNO   A000744                     NO, PRIMARY SIZE     ZP60009
         MVI   0(R12),X'7E'                YES, ALTERNATE SIZE  ZP60009
         B     A000744
A0006E4  CLC   TOMLNCNT(4,R8),FW1          IS THIS THE TOP SCREEN LINE?
         BNE   A00073A                     NO
         TM    TOMWFLG1(R8),TOMEDSAV       WAS LAST TPUT FULLSCRN MODE?
         BNO   A00070C                     NO
         TM    OPOPTNS(R8),OPASID          CURRENT TPUT A CROSS-MEMORY?
         BNO   A00070C                     NO
         L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),WRTWCCDF           USE WRT-ASID FOLLOWS FULSCRN
         B     A000744
A00070C  L     R12,TOMCOLMN(,R8)
         LTR   R12,R12                     FIRST POSITION?
         BNZ   A00072C                     NO
         TM    170(R4),X'80'
         BNO   A00072C
         L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),EWRTWCCD           PUT EWRT CMD AND WCC IN RU
         TM    TVWAFLG6,X'01'              IS TVWAALTS ON?      ZP60009
         BNO   A000744                     NO, PRIMARY SIZE     ZP60009
         MVI   0(R12),X'7E'                YES, ALTERNATE SIZE  ZP60009
         B     A000744
A00072C  L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),WRTWCCDF           WRITE CMD AND WCC
         B     A000744
A00073A  L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),WRTWCCDF           PUT WRITE CMD AND WCC IN RU
A000744  L     R12,TOMGETMN(,R8)
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFPTR(,R8)           UPDATE RU BUFFER POINTER
         L     R14,92(,R4)
         BR    R14                         END OF SCRFORMT
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, FLSHBACK, WILL BE CALLED TO PUT THE LAST LOGICAL */
*/* INPUT SCREEN LINE(S) INTO THE OUTPUT RU FOR DISPLAY AT THE TOP   */
*/* OF THE SCREEN.                                                   */
*/*                                                                  */
*/********************************************************************/
*DCL 1 TOPQ BASED(TVWATOPQ),         /* STRUCTURE FOR FLASHBACK DATA */
*     2 TQL1 CHAR(80),               /* FIRST FLASHBACK BUFFER       */
*     2 TQL2 CHAR(80);               /* SECOND FLASHBACK BUFFER      */
FLSHBACK ST    R14,100(,R4)
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)           RESET COLUMN COUNT
         BAL   R14,SCRFORMT                PUT IN CMD,WCC, AND FORMAT
         L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)            IS THIS THE LAST LINE?
         BL    A00077C                     NO
         BAL   R14,NEWLINE                 LINE ADDRESS IN RU
         BAL   R14,SCRNPAGE                PUT PAGE PROMPT IN RU
         B     A0008CA
*  /******************************************************************/
*  /*                                                                */
*  /* SCREEN LINE(S) IS AVAILABLE SO PUT FLASHBACK DATA IN RU.       */
*  /*                                                                */
*  /******************************************************************/
A00077C  MVC   TOMLNCNT(4,R8),FW1          TOP OF SCREEN
         BAL   R14,NEWLINE                 LINE ADDRESS IN RU
         CLI   TVWATQL1,0                  LEN OF 1ST FLSHBACK QUE > 0?
         BE    A00081A                     NO
*      /**************************************************************/
*      /*                                                            */
*      /* TAKE DATA FROM FIRST FLASHBACK QUEUE BUFFER.               */
*      /*                                                            */
*      /**************************************************************/
*        TOMBFCNT=TOMBFCNT+          /* UPDATE COUNT OF DATA IN RU BY*/
*          MIN(TVWATQL1,TOMLNSZ)+2;  /* SMALLER OR LINE-SZ & QUE LENG*/
         LA    R12,2
         SLR   R15,R15
         IC    R15,TVWATQL1
         SLR   R14,R14
         IC    R14,TOMLNSZ(,R8)
         LR    R11,R14
         CR    R11,R15
         BNH   A0007A8
         LR    R11,R15
A0007A8  AL    R11,TOMBFCNT(,R8)
         ALR   R11,R12
         ST    R11,TOMBFCNT(,R8)
         L     R10,TOMBFPTR(,R8)
         MVC   0(2,R10),SFWRTATT           PUT WRITE ATTRIBUTE INTO RU
*                                    /* MOVE FIRST FLSHBACK BUFFER   */
*        IKTOBUF(3:(MIN(TVWATQL1,TOMLNSZ-1)+2))=TQL1; /* MOVE DATA   */
         BCTR  R14,0
         CR    R15,R14
         BNH   A0007C6
         LR    R15,R14
A0007C6  BCTR  R15,0
         L     R1,TVWATOPQ
         EX    R15,A002024
*        TR(IKTOBUF(3:(MIN(TVWATQL1,TOMLNSZ-1)+2)),EDITTAB);
         SLR   R15,R15
         IC    R15,TOMLNSZ(,R8)
         BCTR  R15,0
         SLR   R14,R14
         IC    R14,TVWATQL1
         CR    R14,R15
         BNH   A0007E6
         LR    R14,R15
A0007E6  BCTR  R14,0
         EX    R14,A00202A
         L     R10,TOMGETMN(,R8)
         LR    R15,R10
         ALR   R15,R11
         ST    R15,TOMBFPTR(,R8)           UPDATE RU BUFFER POINTER
         ALR   R11,R12
         ST    R11,TOMBFCNT(,R8)           UPDATE DATA CNT FOR RD ATTRI
         MVC   0(2,R15),SFRDATT            PUT READ ATTRIBUTE INTO RU
         ALR   R10,R11
         ST    R10,TOMBFPTR(,R8)           UPDATE RU BUFFER POINTER
         MVI   TVWATQL1,0                  ZERO LENGTH OF FIRST QUEUE
         LA    R12,1
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)           INCREMENT LINE-COUNT BY ONE
A00081A  L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)            IS THIS THE LAST SCRN LINE?
         BL    A000832                     NO
         BAL   R14,NEWLINE                 YES, PUT LINE ADDRESS IN RU
         BAL   R14,SCRNPAGE                YES, PUT PAGE PROMPT IN RU
         B     A0008CA
*        /************************************************************/
*        /*                                                          */
*        /*      TAKE DATA FROM SECOND FLASHBACK QUEUE BUFFER.       */
*        /*                                                          */
*        /************************************************************/
A000832  CLI   TVWATQL2,0                  LENG OF 2ND FLSHBACK BUFF>0?
         BE    A0008CA                     NO
         BAL   R14,NEWLINE                 PUT LINE ADDRESS IN RU
*          TOMBFCNT=TOMBFCNT +       /* UPDATA COUNT OF DATA IN RU BY*/
*            MIN(TVWATQL2,TOMLNSZ)+2;/* SMALLER OF LINE-SZ & QUE LENG*/
         LA    R12,2
         SLR   R15,R15
         IC    R15,TVWATQL2
         SLR   R14,R14
         IC    R14,TOMLNSZ(,R8)
         LR    R11,R14
         CR    R11,R15
         BNH   A000858
         LR    R11,R15
A000858  AL    R11,TOMBFCNT(,R8)
         ALR   R11,R12
         ST    R11,TOMBFCNT(,R8)
         L     R10,TOMBFPTR(,R8)
         MVC   0(2,R10),SFWRTATT           PUT WRITE ATTRIBUTE INTO RU
*          IKTOBUF(3:(MIN(TVWATQL2,TOMLNSZ-1)+2))=TQL2; /* MOVE DATA */
         BCTR  R14,0
         CR    R15,R14
         BNH   A000876
         LR    R15,R14
A000876  BCTR  R15,0
         L     R1,TVWATOPQ
         EX    R15,A002030
*          TR(IKTOBUF(3:(MIN(TVWATQL2,TOMLNSZ-1)+2)),EDITTAB);
         SLR   R15,R15
         IC    R15,TOMLNSZ(,R8)
         BCTR  R15,0
         SLR   R14,R14
         IC    R14,TVWATQL2
         CR    R14,R15
         BNH   A000896
         LR    R14,R15
A000896  BCTR  R14,0
         EX    R14,A00202A
         L     R10,TOMGETMN(,R8)
         LR    R15,R10
         ALR   R15,R11
         ST    R15,TOMBFPTR(,R8)           UPDATE RU BUFFER POINTER
         ALR   R11,R12
         ST    R11,TOMBFCNT(,R8)           UPDATE DATA CNT FOR RD ATTRI
         MVC   0(2,R15),SFRDATT            PUT READ ATTRIBUTE INTO RU
         ALR   R10,R11
         ST    R10,TOMBFPTR(,R8)           UPDATE RU BUFFER POINTER
         MVI   TVWATQL2,0                  ZERO LENGTH OF 2ND BUFFER
         LA    R12,1
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)           INCREMENT LINE-COUNT BY ONE
A0008CA  CLI   TVWATQL1,0                  IS ALL FLASHBACK PROCESSED?
         BNE   A0008DE                     NO
         CLI   TVWATQL2,0
         BNE   A0008DE                     NO
         NI    TVWAFLG2,255-TVWABKMG       YES, TURN OFF REQUEST BIT
A0008DE  L     R14,100(,R4)
         BR    R14                         END OF FLSHBACK
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, BLDATTN, BUILDS ATTENTIONS MESSAGES IN THE OUT-  */
*/* PUT RU. THE CHARACTER   IS PUT ON THE NEXT AVAILABLE SCREEN LINE */
*/* FOR EACH ACCEPTED ATTENTION. THE CHARACTER SEQUENCE  I IS PUT ON */
*/* NEXT SCREEN LINE WHEN IGNORED ATTENTION(S) ARE DETECTED          */
*/*                                                                  */
*/********************************************************************/
BLDATTN  ST    R14,108(,R4)
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)           RESET COLUMN COUNT
         C     R12,TOMBFCNT(,R8)           IS OUTPUT RU EMPTY?
         BNE   A0008FA                     NO
         BAL   R14,SCRFORMT                YES, PUT IN CMD,WCC & FORMAT
A0008FA  B     A000990
*/********************************************************************/
*/*                                                                  */
*/* THIS DO GROUP BUILDS ATTENTION MESSAGES UNTIL THE ATTENTION      */
*/* ACCEPTED COUNT GOES TO ZERO, THE ATTENTION IGNORED INDICATOR IS  */
*/* TURNED OFF, OR SCREEN PAGING IS NEEDED.                          */
*/*                                                                  */
*/********************************************************************/
A0008FE  BAL   R14,NEWLINE                 PUT LINE ADDR INTO OUTPUT RU
         L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)            IS THIS THE LAST SCRN LINE?
         BL    A000916                     NO
         BAL   R14,SCRNPAGE                YES, PUT PAGE PROMPT INTO RU
         B     A000990
A000916  CLC   TOMLNCNT(4,R8),FW1
         BNE   A000924
         BAL   R14,SCRFORMT                PERFORM
A000924  CLI   TVWAATTN,0                  IS ACCEPTED ATTN COUNT>0?
         BNH   A00095E                     NO
*        /************************************************************/
*        /*                                                          */
*        /* THIS DO GROUP PUTS THE MSG,  , ON THE CURRENT LINE AND   */
*        /* DECREMENTS THE ACCEPTED ATTENTION COUNT BY ONE           */
*        /*                                                          */
*        /************************************************************/
         LA    R12,5
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)           SET COUNT FOR ATTENTION MSG
         L     R12,TOMBFPTR(,R8)
         MVC   0(5,R12),A0020EF            PUT ATTENTION MESSAGE IN RU
         SLR   R12,R12
         IC    R12,TVWAATTN
         BCTR  R12,0
         STC   R12,TVWAATTN                DECREMENT ACCEPTED ATTN CNT
         IC    R12,169(,R4)
         LA    R12,1(,R12)
         STC   R12,169(,R4)
         B     A000978
*        /************************************************************/
*        /*                                                          */
*        /* THIS DO GROUP PUTS THE MSG,  I, ON THE CURRENT LINE AND  */
*        /* ATTENTION IGNORED INDICATOR IS ON AND THE ATTENTION AC-  */
*        /* CEPTED COUNT IS ZERO.                                    */
*        /*                                                          */
*        /************************************************************/
A00095E  LA    R12,6
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)           SET COUNT FOR ATTN MESSAGE
         L     R12,TOMBFPTR(,R8)
         MVC   0(6,R12),A0020E3            PUT ATTN IGNORED MSG IN RU
         NI    TVWAFLG3,255-TVWAAIGN       TURN OFF ATTN INDICATOR
A000978  L     R12,TOMGETMN(,R8)
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFPTR(,R8)           UPDATE RU BUFFER POINTER
         LA    R12,1
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)           INCREMENT LINE-COUNT BY ONE
A000990  CLI   TVWAATTN,0
         BH    A0009A0
         TM    TVWAFLG3,TVWAAIGN
         BNO   A0009A8
A0009A0  TM    TOMWFLG1(R8),TOMEXBRU
         BZ    A0008FE
A0009A8  L     R14,108(,R4)
         BR    R14                         END OF BLDATTN
         EJECT
GETBUFR  ST    R14,668(,R8)
         ST    R4,672(,R8)
         ST    R7,676(,R8)
         LA    R0,8
         AH    R0,OPBFSZ(,R8)
         ST    R0,680(,R8)
         L     R4,TVWATCB
         L     R7,PSAAOLD                  PSA REFERENCE
         B     A0009D8
         CNOP  0,4
A0009D4  EQU   *
         DC    H'0'
         DC    X'E502'                     SUBPOOL 229
A0009D8  L     R3,A0009D4
         SR    R1,R1
         L     R15,CVTPTR                  CVT ADDRESS
         L     R15,CVTCRMN-CVT(,R15)
         BALR  R14,R15                     BRANCH ENTRY GETMAIN
         L     R15,680(,R8)
         ST    R15,0(,R1)
         L     R7,676(,R8)
         L     R4,672(,R8)
         ST    R1,160(,R4)
         L     R15,160(,R4)
         AL    R15,FW4
         ST    R15,TOMGETMN(,R8)
         ST    R15,TOMBFPTR(,R8)
         L     R14,668(,R8)
         BR    R14                         END OF GETBUFR
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, BLDDTA, CONTROLS BUILDING OF USER DATA IN THE    */
*/* OUTPUT RU                                                        */
*/*                                                                  */
*/********************************************************************/
BLDDTA   ST    R14,112(,R4)
         NI    TOMWFLG1(R8),255-TOMENDBF-TOMENDSC-TOMEXDTA-TOMOWAIT
A000A1A  SLR   R12,R12
         ST    R12,TOMMVCNT(,R8)
         ST    R12,TOMQDATA(,R8)
         NI    OPOPTNS(R8),255-OPBRK
         MVI   OPREQ(R8),X'02'
         LA    R13,520(,R8)
         LA    R12,OPARMS(,R8)
         ST    R12,152(,R4)
         L     R12,CVTPTR                  CVT ADDRESS
         L     R12,CVTTCASP-CVT(,R12)
         L     R15,TCASOQM-TCAST(,R12)
         LA    R1,152(,R4)
         BALR  R14,R15                     STD LINKAGE
         LA    R13,TOMAUTOD(,R8)
         CLI   OPRC(R8),3
         BE    A000A66
         TM    TVWAFLG3,TVWABRIN
         BNO   A000AC0
         TM    OPOPTNS(R8),OPBRK
         BNZ   A000AC0
A000A66  CLI   OPRC(R8),3                  WAS OUTPUT QUEUE EMPTY?
         BNE   A000A7A
*    /****************************************************************/
*    /*                                                              */
*    /*  YES, NO MORE DATA IS AVAILABLE FROM OUTPUT MESSAGE QUEUE.   */
*    /*                                                              */
*    /****************************************************************/
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         NI    TSBFLG1-TSB(R12),255-TSBIFLSH
A000A7A  OI    TOMWFLG1(R8),TOMEXDTA
         TM    TVWAFLG3,TVWABRIN
         BNO   A000DB0
         TM    TVWAFLG2,TVWAPGN
         BNZ   A000AA4
         L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BNZ   A000A9C
         BAL   R14,SCRFORMT                PERFORM
A000A9C  BAL   R14,NEWLINE                 PERFORM
         BAL   R14,SCRNPAGE                PERFORM
A000AA4  BAL   R14,A000114                 PERFORM
         NI    TVWAFLG2,255-TVWABIR
         NI    TVWAFLG3,255-TVWABRIN
         TM    TVWAFLG5,TVWAFSM
         BNO   A000ABC
         OI    TVWAFLG7,TVWABKPG
A000ABC  B     A000DB0
A000AC0  TM    TVWAFLG4,TVWANOFB
         BNO   A000AFA
         OI    TOMWFLG1(R8),TOMEXDTA
         MVI   OPREQ(R8),X'04'
         LA    R13,520(,R8)
         LA    R12,OPARMS(,R8)
         ST    R12,152(,R4)
         L     R12,CVTPTR                  CVT ADDRESS
         L     R12,CVTTCASP-CVT(,R12)
         L     R15,TCASOQM-TCAST(,R12)
         LA    R1,152(,R4)
         BALR  R14,R15                     STD LINKAGE
         LA    R13,TOMAUTOD(,R8)
         NI    OPOPTNS(R8),255-OPASID
         B     A000DB0
*    /****************************************************************/
*    /*                                                              */
*    /* OUTPUT QUEUE IS NOT EMPTY SO CONTINUE PROCESSING USER DATA   */
*    /*                                                              */
*    /****************************************************************/
A000AFA  TM    TOMWFLG1(R8),TOMEDSAV
         BNZ   A000B08
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
A000B08  TM    OPOPTNS(R8),OPBRK
         BNO   A000B18
         OI    TOMWFLG4(R8),TOMBRKMG
         NI    TVWAFLG2,255-TVWABIR
A000B18  TM    OPOPTNS(R8),OPEDIT          FULLSCR?
         BNO   A000B2A                     NO
         L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BP    A000D1A
A000B2A  TM    TOMWFLG1(R8),TOMCURST       CURSOR ALREADY SET IN RU?
         BO    A000D1A                     YES
*      /**************************************************************/
*      /*                                                            */
*      /* THIS DO GROUP IS EXECUTED EITHER IF THE CURRENT TPUT IS A  */
*      /* FULLSRCN AND THE RU IS EMPTY OR IF CURSOR IS NOT SET IN A  */
*      /* NON-EMPTY RU . ALSO ENOUGH RU SPACE EXIST FOR AT LEAST ONE */
*      /* LINE OF DATA AND PAGING MESSAGE.                           */
*      /*                                                            */
*      /**************************************************************/
         SLR   R15,R15
         L     R14,OPBUFADR(,R8)
         ST    R14,TOMQBPTR(,R8)
         L     R14,IKTIDSX1
         LTR   R14,R14
         BZ    A000BAA
         L     R14,TOMLNCNT(,R8)
         STC   R14,TVWALNCT
         LA    R14,OPARMS(,R8)
         ST    R14,668(,R8)
         LA    R14,TOMWFLG1(,R8)
         ST    R14,672(,R8)
         LA    R14,TOMBUFSZ(,R8)
         ST    R14,676(,R8)
         LA    R14,TOMBFPTR(,R8)
         ST    R14,680(,R8)
         LA    R14,TOMBFCNT(,R8)
         ST    R14,684(,R8)
         LA    R14,TOMQBPTR(,R8)
         ST    R14,688(,R8)
         LA    R14,TOMMVCNT(,R8)
         ST    R14,692(,R8)
         LA    R14,TOMQDATA(,R8)
         ST    R14,696(,R8)
         LA    R0,668(,R8)
         LA    R13,520(,R8)
         L     R15,IKTIDSX1
         BALR  R14,R15                     STD LINKAGE
         LA    R13,TOMAUTOD(,R8)
         SLR   R14,R14
         IC    R14,TVWALNCT
         ST    R14,TOMLNCNT(,R8)
A000BAA  LTR   R15,R15
         BNZ   A000D1A
*        /************************************************************/
*        /*                                                          */
*        /* USER EXIT NOT CALLED OR NORMAL PROCESSING WAS SPECIFIED  */
*        /*                                                          */
*        /************************************************************/
         TM    TVWAFLG5,TVWAFSM
         BNO   A000C2E
         TM    TOMWFLG1(R8),TOMEDSAV
         BO    A000C2E
         TM    OPOPTNS(R8),OPEDIT          FULLSCR?
         BNO   A000C2E                     NO
         TM    TVWAFLG5,TVWANFSP
         BZ    A000BD8
         TM    TVWAFLG6,TVWAIOTR
         BNZ   A000C2E
*          /**********************************************************/
*          /*                                                        */
*          /* A FULLSCRN TPUT FOLLOWS A NON-FULLSCRN TPUT WHILE IN   */
*          /* FULLSCRN MODE AND PAGING IS ALLOWED.                   */
*          /*                                                        */
*          /**********************************************************/
A000BD8  L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BNZ   A000BE6
         BAL   R14,SCRFORMT                PERFORM
A000BE6  OI    TOMWFLG1(R8),TOMEDSAV
         SLR   R12,R12
         IC    R12,TOMLNSZ(,R8)
         SL    R12,FW7
         L     R15,TOMCOLMN(,R8)
         CR    R15,R12
         BNH   A000C00
         LR    R15,R12
A000C00  SLR   R12,R12
         CR    R15,R12
         BNL   A000C0A
         LR    R15,R12
A000C0A  ST    R15,TOMCOLMN(,R8)
         BAL   R14,NEWLINE                 PERFORM
         BAL   R14,SCRNPAGE                PERFORM
         OI    TVWAFLG5,TVWAFSW
         TM    OPOPTNS(R8),OPHOLD
         BNZ   A000C2A
         LH    R12,OPBFSZ(,R8)
         ST    R12,TOMMVCNT(,R8)
A000C2A  B     A000D1A
A000C2E  TM    TVWAFLG5,TVWAFSM
         BNO   A000C64
         NI    TVWAFLG5,255-TVWANFSP
         TM    TOMWFLG1(R8),TOMEDSAV
         BNO   A000C64
         TM    OPOPTNS(R8),OPEDIT          FULLSCR?
         BO    A000C64                     YES
*                  /**************************************************/
*                  /*                                                */
*                  /* A NON-FULLSCRN TPUT FOLLOWS A FULLSCRN TPUT    */
*                  /* WHILE IN FULLSCRN MODE.                        */
*                  /*                                                */
*                  /**************************************************/
         MVC   TOMLNCNT(4,R8),FW1
         OI    TOMWFLG2(R8),TOMALARM+TOMERASE
         OI    TVWAFLG5,TVWAWO
         BAL   R14,SCRFORMT                PERFORM
         NI    TOMWFLG1(R8),255-TOMEDSAV
         OI    TOMWFLG1(R8),TOMEXBRU
A000C64  TM    OPOPTNS(R8),OPEDIT          EDIT?
         BNZ   A000C92                     NO
         CLC   OPBFSZ(2,R8),HW1
         BNE   A000C8A
         L     R12,TOMQBPTR(,R8)
         CLI   0(R12),X'15'
         BNE   A000C8A
         BAL   R14,A001FD4                 PERFORM
         B     A000D06
A000C8A  BAL   R14,EDIT                    PERFORM
         B     A000D06
A000C92  TM    OPOPTNS(R8),OPEDIT          FULLSCR?
         BNO   A000CA2                     NO
         BAL   R14,FULSCRN                 PERFORM
         B     A000D06
A000CA2  L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BZ    A000CCC
         L     R12,TOMQBPTR(,R8)
         CLI   0(R12),X'27'
         BE    A000D06
         LH    R15,OPBFSZ(,R8)
         C     R15,FW3
         BL    A000CCC
         CLI   1(R12),X'11'
         BE    A000D06
*                  /**************************************************/
*                  /*                                                */
*                  /* ASIS & CNTL TPUTS WILL BE COMBINED FOR OUTPUT  */
*                  /* WITH OTHER NON-FULLSCRN TPUTS ONLY IF NONE OF  */
*                  /* USER-SPECIFIED HEADER (CMD,WCC,SBA) IS PRESENT.*/
*                  /*                                                */
*                  /**************************************************/
A000CCC  TM    OPOPTNS(R8),X'10'
         BNO   A000D02
         TM    OPOPTNS(R8),X'20'
         BNZ   A000D02
         CLC   OPBFSZ(2,R8),HW1
         BNE   A000CFA
         L     R12,TOMQBPTR(,R8)
         CLI   0(R12),X'15'
         BNE   A000CFA
         BAL   R14,A001FD4                 PERFORM
         B     A000D06
A000CFA  BAL   R14,ASIS                    PERFORM
         B     A000D06
A000D02  BAL   R14,CNTL                    PERFORM
A000D06  TM    OPOPTNS(R8),OPEDIT          FULLSCR?
         BO    A000D1A                     YES
         TM    OPOPTNS(R8),OPASID
         BNZ   A000D1A
         NI    TVWAFLG4,255-TVWAFLSC
A000D1A  L     R12,TOMMVCNT(,R8)
         CH    R12,OPBFSZ(,R8)
         BNL   A000D5C
*        /************************************************************/
*        /*                                                          */
*        /* IF ALL USER DATA NOT PROCESS THIS ENTRY, UPDATE OUTPUT   */
*        /* QUEUE FOR NEXT ENTRY.                                    */
*        /*                                                          */
*        /************************************************************/
         AL    R12,OPBUFADR(,R8)
         ST    R12,OPBUFADR(,R8)
         MVI   OPREQ(R8),X'04'
         LA    R13,520(,R8)
         LA    R12,OPARMS(,R8)
         ST    R12,152(,R4)
         L     R12,CVTPTR                  CVT ADDRESS
         L     R12,CVTTCASP-CVT(,R12)
         L     R15,TCASOQM-TCAST(,R12)
         LA    R1,152(,R4)
         BALR  R14,R15                     STD LINKAGE
         LA    R13,TOMAUTOD(,R8)
         OI    TOMWFLG1(R8),TOMEXDTA+TOMEXBRU
         B     A000DB0
A000D5C  TM    OPOPTNS(R8),OPHOLD
         BNO   A000D68
         OI    TOMWFLG1(R8),TOMOWAIT
A000D68  CLI   OPRC(R8),2                  IS MORE DATA ON OUTPUT QUE?
         BNE   A000D84
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         NI    TSBFLG1-TSB(R12),255-TSBIFLSH
         OI    TOMWFLG1(R8),TOMEXDTA
         B     A000DB0
A000D84  TM    OPOPTNS(R8),OPEDIT          FULLSCR?
         BO    A000DAC                     YES
         CLI   OPRC(R8),1
         BNE   A000DB0
         TM    TVWAFLG4,TVWANOFB
         BNO   A000DA4
         TM    741(R8),X'08'
         BO    A000DAC
A000DA4  TM    741(R8),X'30'
         BNO   A000DB0
A000DAC  OI    TOMWFLG1(R8),TOMEXDTA+TOMEXBRU
A000DB0  TM    TOMWFLG1(R8),TOMEXDTA
         BNO   A000A1A
         L     R14,112(,R4)
         BR    R14                         END OF BLDDTA
         EJECT
FREEBUFR ST    R14,668(,R8)
         ST    R4,672(,R8)
         ST    R7,676(,R8)
         L     R15,160(,R4)
         L     R0,0(,R15)
         LR    R1,R15
         L     R4,TVWATCB
         L     R7,PSAAOLD                  PSA REFERENCE
         B     A000DE4
         CNOP  0,4
A000DE0  EQU   *
         DC    H'0'
         DC    X'E501'                     SUBPOOL 229
A000DE4  L     R3,A000DE0
         L     R15,CVTPTR                  CVT ADDRESS
         L     R15,CVTCRMN-CVT(,R15)
         BALR  R14,R15                     BRANCH ENTRY FREEMAIN
         L     R7,676(,R8)
         L     R4,672(,R8)
         SLR   R15,R15
         ST    R15,160(,R4)
         L     R14,668(,R8)
         BR    R14                         END OF FREEBUFR
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, CNTL,  BUILDS CONTROL DATA IN THE OUTPU RU.      */
*/* VALID CONTROL CHARATERS ARE PT, IC, BYP, RES. INVALID DATA IS    */
*/* REMOVE FROM THE OUTPUT DATA                                      */
*/*                                                                  */
*/********************************************************************/
CNTL     ST    R14,140(,R4)
         L     R12,TOMBUFSZ(,R8)
         SL    R12,TOMBFCNT(,R8)
         LH    R15,OPBFSZ(,R8)
         SL    R15,TOMMVCNT(,R8)
         SLR   R14,R14
         IC    R14,TOMLNSZ(,R8)
         CR    R15,R14
         BNH   A000E28
         LR    R15,R14
A000E28  AL    R15,FW15
         CR    R12,R15
         BNL   A000E3A
         OI    TOMWFLG1(R8),TOMENDBF
         B     A000FE8
A000E3A  L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)
         BL    A000E84
         L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BNZ   A000E54
         BAL   R14,SCRFORMT                PERFORM
A000E54  SLR   R12,R12
         IC    R12,TOMLNSZ(,R8)
         SL    R12,FW7
         L     R15,TOMCOLMN(,R8)
         CR    R15,R12
         BNH   A000E6A
         LR    R15,R12
A000E6A  SLR   R12,R12
         CR    R15,R12
         BNL   A000E74
         LR    R15,R12
A000E74  ST    R15,TOMCOLMN(,R8)
         BAL   R14,NEWLINE                 PERFORM
         BAL   R14,SCRNPAGE                PERFORM
         B     A000FE8
A000E84  TM    TOMWFLG1(R8),X'40'
         BNO   A000E94
         TM    TOMWFLG1(R8),X'80'
         BZ    A000E9A
A000E94  SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
A000E9A  BAL   R14,CNTLHDRS                PERFORM
         B     A000FCC
A000EA2  LH    R12,OPBFSZ(,R8)
         SL    R12,TOMQDATA(,R8)
         LA    R15,80
         C     R15,TOMPLSZ(,R8)                                 ZP60009
         BNL   *+8                                              ZP60009
         L     R15,TOMPLSZ(,R8)                                 ZP60009
         CR    R12,R15
         BNH   A000EB6
         LR    R12,R15
A000EB6  STC   R12,TOMWRKSZ(,R8)
         BCTR  R12,0
         L     R1,TOMQBPTR(,R8)
         EX    R12,A002036
         NI    TOMWFLG1(R8),X'BF'
         OI    TOMWFLG1(R8),X'80'
         LA    R12,1
         B     A000FA2
A000ED4  L     R12,TOMBFCNT(,R8)
         LA    R15,2
         L     R14,TOMBUFSZ(,R8)
         SLR   R14,R15
         CR    R12,R14
         BNL   A000FB2
         L     R1,TOMWRKVI(,R8)
         ALR   R1,R8
         CLI   439(R1),X'14'
         BNE   A000F0E
         ALR   R12,R15
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),SFWRTATT
         NI    TVWAFLG4,255-TVWANOFB
         B     A000F8E
A000F0E  L     R12,TOMWRKVI(,R8)
         ALR   R12,R8
         CLI   439(R12),X'24'
         BNE   A000F42
*        /************************************************************/
*        /*                                                          */
*        /* THIS DO GROUP PUTS BYPASS ATTRIBUTE IN OUTPUT RU         */
*        /*                                                          */
*        /************************************************************/
         LA    R12,3
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),SFBYPATT
         MVI   2(R12),X'13'
         OI    TOMWFLG1(R8),TOMCURST
         OI    TVWAFLG4,TVWANOFB
         B     A000F8E
A000F42  L     R12,TOMWRKVI(,R8)
         ALR   R12,R8
         CLI   439(R12),X'13'
         BNE   A000F6C
*          /**********************************************************/
*          /*                                                        */
*          /* THIS DO GROUP PUTS INSERT CURSOR ORDER IN OUTPUT  RU   */
*          /*                                                        */
*          /**********************************************************/
         LA    R12,1
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         MVI   0(R12),X'13'
         OI    TOMWFLG1(R8),TOMCURST
         B     A000F8E
A000F6C  L     R12,TOMWRKVI(,R8)
         ALR   R12,R8
         CLI   439(R12),X'05'
         BNE   A000F8E
*            /********************************************************/
*            /*                                                      */
*            /* THIS DO GROUP PUTS PROGRAM TAB ORDER IN OUTPUT RU    */
*            /*                                                      */
*            /********************************************************/
         LA    R12,1
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         MVI   0(R12),X'05'
A000F8E  L     R12,TOMGETMN(,R8)
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFPTR(,R8)
         LA    R12,1
         AL    R12,TOMWRKVI(,R8)
A000FA2  ST    R12,TOMWRKVI(,R8)
         SLR   R15,R15
         IC    R15,TOMWRKSZ(,R8)
         CR    R12,R15
         BNH   A000ED4
A000FB2  L     R12,TOMMVCNT(,R8)
         AL    R12,TOMWRKVI(,R8)
         BCTR  R12,0
         ST    R12,TOMMVCNT(,R8)
         ST    R12,TOMQDATA(,R8)
         AL    R12,OPBUFADR(,R8)
         ST    R12,TOMQBPTR(,R8)
A000FCC  L     R12,TOMMVCNT(,R8)
         CH    R12,OPBFSZ(,R8)
         BNL   A000FE8
         L     R12,TOMBUFSZ(,R8)
         BCTR  R12,0
         BCTR  R12,0
         C     R12,TOMBFCNT(,R8)
         BH    A000EA2
A000FE8  L     R14,140(,R4)
         BR    R14                         END OF CNTL
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, FULSCRN, WILL EDIT USER FULLSCREEN MODE DATA AND */
*/* MOVE THE DATA TO THE OUTPUT RU.                                  */
*/*                                                                  */
*/********************************************************************/
FULSCRN  ST    R14,132(,R4)
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
         TM    TVWAFLG7,TVWASND1
         BNZ   A001012
         MVI   168(R4),X'02'
         MVC   TOMLNCNT(4,R8),FW2
         NI    170(R4),X'7F'
         NI    TVWAFLG4,255-TVWAFMSC
A001012  L     R12,TOMQBPTR(,R8)
         CLI   0(R12),X'27'
         BNE   A001032
         L     R12,TOMBUFSZ(,R8)
         CH    R12,OPBFSZ(,R8)
         BNL   A001032
         BAL   R14,GETBUFR                 PERFORM
         B     A001052
A001032  L     R12,TOMQBPTR(,R8)
         CLI   0(R12),X'27'
         BE    A001052
         LA    R12,1
         AH    R12,OPBFSZ(,R8)
         C     R12,TOMBUFSZ(,R8)
         BNH   A001052
         BAL   R14,GETBUFR                 PERFORM
A001052  L     R12,TOMQBPTR(,R8)
         TM    OPOPTNS(R8),OPNOED          NOEDIT?              ZP60009
         BO    A001094                     YES, COPY CMD + DATA ZP60009
         CLI   0(R12),X'27'
         BNE   A00107C
*  /******************************************************************/
*  /*                                                                */
*  /* INCLUDE ESCAPE CHARACTER IN COUNT OF DATA MOVED BUT DO NOT MOVE*/
*  /* ESCAPE CHARACTER TO OUTPUT RU.                                 */
*  /*                                                                */
*  /******************************************************************/
         LA    R12,1
         ST    R12,TOMMVCNT(,R8)
         AL    R12,OPBUFADR(,R8)
         ST    R12,TOMQBPTR(,R8)
         LH    R12,OPBFSZ(,R8)
         BCTR  R12,0
         STH   R12,OPBFSZ(,R8)
         B     A001094
*  /******************************************************************/
*  /*                                                                */
*  /* ESC NOT PRESENT. PUT DEFAULT WRITE COMMAND IN OUTPUT RU.       */
*  /*                                                                */
*  /******************************************************************/
A00107C  LA    R12,1
         ST    R12,TOMBFCNT(,R8)
         L     R1,TOMBFPTR(,R8)
         MVI   0(R1),X'F1'
         AL    R12,TOMGETMN(,R8)
         ST    R12,TOMBFPTR(,R8)
*/********************************************************************/
*/*                                                                  */
*/*           MOVE AND EDIT FULLSCREEN MODE DATA                     */
*/*                                                                  */
*/********************************************************************/
A001094  SLR   R2,R2
         B     A001118
A00109A  L     R12,TOMQDATA(,R8)
         LA    R3,256
         ALR   R3,R12
         LH    R0,OPBFSZ(,R8)
         CR    R0,R3
         BNH   A0010B0
         LR    R0,R3
A0010B0  ST    R0,TOMMVCNT(,R8)
         SLR   R0,R12
         L     R12,TOMBFCNT(,R8)
         ALR   R12,R0
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         BCTR  R0,0
         L     R3,TOMQBPTR(,R8)
         LR    R15,R0
         EX    R15,A00203C                 MOVE DATA INTO RU
         TM    OPOPTNS(R8),OPNOED          NOEDIT?              ZP60009
         BO    A0010F6                     YES, SKIP EDIT       ZP60009
         L     R3,TOMMVCNT(,R8)
         SL    R3,TOMQDATA(,R8)
         BCTR  R3,0
         EX    R3,A002042                  EDIT RU DATA WITH FLSCRTAB
         LTR   R2,R2                       CURSOR FOUND?
         BNZ   A0010F6                     YES, SKIP SEARCH
         L     R3,TOMBFPTR(,R8)
         L     R12,TOMMVCNT(,R8)
         SL    R12,TOMQDATA(,R8)
         BCTR  R12,0
         EX    R12,A002048                 SEARCH FOR CURSOR
A0010F6  L     R12,TOMGETMN(,R8)
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFPTR(,R8)
         L     R12,TOMMVCNT(,R8)
         L     R3,TOMQBPTR(,R8)
         ALR   R3,R12
         SL    R3,TOMQDATA(,R8)
         ST    R3,TOMQBPTR(,R8)
         ST    R12,TOMQDATA(,R8)
A001118  L     R12,TOMMVCNT(,R8)
         CH    R12,OPBFSZ(,R8)
         BL    A00109A
         LTR   R2,R2                       CURSOR FOUND?
         BNZ   A001152                     YES
         TM    OPOPTNS(R8),OPNOED          NOEDIT?              ZP60009
         BO    A001152                     YES, DON'T ADD IC    ZP60009
         L     R12,TOMGETMN(,R8)
         CLI   0(R12),X'6F'                ERASE ALL UNPROTECTED?
         BE    A001152                     YES, DON'T ADD IC
         CLC   0(2,R12),WRTWCC             PARTIAL SCREEN?      ZP60009
         BE    A001152                     MAYBE, DON'T ADD IC  ZP60009
         LA    R12,1
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)
         L     R3,TOMBFPTR(,R8)
         MVI   0(R3),X'13'
         AL    R12,TOMGETMN(,R8)
         ST    R12,TOMBFPTR(,R8)
A001152  OI    TOMWFLG1(R8),TOMCURST
         OI    TVWAFLG4,TVWAFLSC
         OI    TOMWFLG2(R8),TOMTRSBA
         OI    TOMWFLG1(R8),TOMEDSAV
         TM    TVWAFLG5,TVWAFSM
         BNZ   A001174
         MVC   TOMLNCNT(4,R8),FW1
         B     A001178
A001174  NI    TVWAFLG4,255-TVWAFMSC
A001178  L     R14,132(,R4)
         BR    R14                         END OF FULSCRN
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, ASIS, WILL EDIT ASIS MODE  USER DATA. CONTROL    */
*/* HEADER INFORMATION (CMD,WCCSBA@@,SFATTRIB) WILL BE WILL BE VALID */
*/* IN ANY COMBINATION(NO REORDERING). MISSING CONTROL INFO  WILL BE */
*/* DEFAULTED. LINE COUNTING WILL BE IN EFFECT.                      */
*/*                                                                  */
*/********************************************************************/
ASIS     ST    R14,136(,R4)
         L     R12,TOMBUFSZ(,R8)
         SL    R12,TOMBFCNT(,R8)
         LH    R15,OPBFSZ(,R8)
         SL    R15,TOMMVCNT(,R8)
         SLR   R14,R14
         IC    R14,TOMLNSZ(,R8)
         CR    R15,R14
         BNH   A0011A0
         LR    R15,R14
A0011A0  AL    R15,FW15
         CR    R12,R15
         BNL   A0011B2
         OI    TOMWFLG1(R8),TOMENDBF
         B     A001512
A0011B2  L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)
         BL    A0011FC
*  /******************************************************************/
*  /*                                                                */
*  /*    BOTTOM OF SCREEN HAS BEEN REACHED SO PAGE AND CONTINUE      */
*  /*                                                                */
*  /******************************************************************/
         L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BNZ   A0011CC
         BAL   R14,SCRFORMT                PERFORM
A0011CC  SLR   R12,R12
         IC    R12,TOMLNSZ(,R8)
         SL    R12,FW7
         L     R15,TOMCOLMN(,R8)
         CR    R15,R12
         BNH   A0011E2
         LR    R15,R12
A0011E2  SLR   R12,R12
         CR    R15,R12
         BNL   A0011EC
         LR    R15,R12
A0011EC  ST    R15,TOMCOLMN(,R8)
         BAL   R14,NEWLINE                 PERFORM
         BAL   R14,SCRNPAGE                PERFORM
         B     A001512
A0011FC  NI    TOMWFLG1(R8),X'7F'
         OI    TOMWFLG1(R8),X'40'
         BAL   R14,CNTLHDRS                PERFORM
         LA    R12,1
         L     R15,TOMCOLMN(,R8)
         ALR   R15,R12
         ST    R15,TOMCOLMN(,R8)
         ST    R12,TOMWRKVI(,R8)
         B     A0014FE
*  /******************************************************************/
*  /*                                                                */
*  /* THIS DO GROUP WILL BUILD LINES OF ASIS MODE DATA UNTIL THE DATA*/
*  /* COUNT IS ZERO,SCREEN PAGING IS NEEDED, OR RU BUFFER IS USED UP.*/
*  /*                                                                */
*  /******************************************************************/
A00121E  L     R12,TOMQDATA(,R8)
         SLR   R15,R15
         IC    R15,TOMLNSZ(,R8)
         LR    R14,R15
         SL    R14,TOMCOLMN(,R8)
         LH    R11,OPBFSZ(,R8)
         SLR   R11,R12
         CR    R14,R11
         BNH   A00123C
         LR    R14,R11
A00123C  L     R11,TOMBUFSZ(,R8)
         SL    R11,TOMBFCNT(,R8)
         CR    R14,R11
         BNH   A00124C
         LR    R14,R11
A00124C  ALR   R12,R14
         ST    R12,TOMNWLSZ(,R8)
         LA    R14,1
         C     R14,TOMWRKVI(,R8)
         BNE   A001272
         CR    R12,R15
         BNE   A001272
         BCTR  R12,0
         CR    R12,R14
         BNL   A00126E
         LR    R12,R14
A00126E  ST    R12,TOMNWLSZ(,R8)
A001272  MVC   TOMWRKVI(4,R8),FW1
         SLR   R12,R12
         ST    R12,TOMXCNT(,R8)
         B     A0013A8
A001282  L     R12,TOMWRKVI(,R8)
         L     R15,TOMQBPTR(,R8)
         ALR   R12,R15
         BCTR  R12,0
         CLI   0(R12),X'1D'
         BE    A0012A6
         L     R12,TOMWRKVI(,R8)
         ALR   R15,R12
         BCTR  R15,0
         CLI   0(R15),X'08'
         BNE   A0012F2
A0012A6  L     R12,TOMWRKVI(,R8)
         L     R15,TOMQBPTR(,R8)
         ALR   R12,R15
         BCTR  R12,0
         CLI   0(R12),X'1D'
         BNE   A0012CE
         TM    OPOPTNS(R8),OPASID
         BNO   A0012CE
         L     R12,TOMWRKVI(,R8)
         ALR   R15,R12
         BCTR  R15,0
         NI    1(R15),X'FE'
A0012CE  LA    R12,1
         L     R15,TOMWRKVI(,R8)
         ALR   R15,R12
         ST    R15,TOMWRKVI(,R8)
         L     R15,TOMXCNT(,R8)
         ALR   R15,R12
         ST    R15,TOMXCNT(,R8)
         AL    R12,TOMNWLSZ(,R8)
         ST    R12,TOMNWLSZ(,R8)
         B     A00139C
A0012F2  L     R12,TOMWRKVI(,R8)
         L     R15,TOMQBPTR(,R8)
         ALR   R12,R15
         BCTR  R12,0
         CLI   0(R12),X'11'
         BE    A001316
         L     R12,TOMWRKVI(,R8)
         ALR   R15,R12
         BCTR  R15,0
         CLI   0(R15),X'12'
         BNE   A00133C
A001316  LA    R12,3
         L     R15,TOMNWLSZ(,R8)
         ALR   R15,R12
         ST    R15,TOMNWLSZ(,R8)
         LA    R15,2
         AL    R15,TOMWRKVI(,R8)
         ST    R15,TOMWRKVI(,R8)
         AL    R12,TOMXCNT(,R8)
         ST    R12,TOMXCNT(,R8)
         B     A00139C
A00133C  L     R12,TOMWRKVI(,R8)
         L     R1,TOMQBPTR(,R8)
         ALR   R1,R12
         BCTR  R1,0
         CLI   0(R1),X'3C'
         BNE   A001372
         LA    R15,4
         L     R14,TOMXCNT(,R8)
         ALR   R14,R15
         ST    R14,TOMXCNT(,R8)
         AL    R15,TOMNWLSZ(,R8)
         ST    R15,TOMNWLSZ(,R8)
         AL    R12,FW3
         ST    R12,TOMWRKVI(,R8)
         B     A00139C
A001372  L     R12,TOMWRKVI(,R8)
         L     R1,TOMQBPTR(,R8)
         ALR   R1,R12
         BCTR  R1,0
         CLI   0(R1),X'05'
         BNE   A00139C
         LA    R12,1
         L     R15,TOMXCNT(,R8)
         ALR   R15,R12
         ST    R15,TOMXCNT(,R8)
         AL    R12,TOMNWLSZ(,R8)
         ST    R12,TOMNWLSZ(,R8)
A00139C  LA    R12,1
         AL    R12,TOMWRKVI(,R8)
         ST    R12,TOMWRKVI(,R8)
A0013A8  L     R12,TOMNWLSZ(,R8)
         LR    R15,R12
         SL    R15,TOMQDATA(,R8)
         C     R15,TOMWRKVI(,R8)
         BL    A0013D2
         CH    R12,OPBFSZ(,R8)
         BH    A0013D2
         AL    R12,TOMBFCNT(,R8)
         LCR   R12,R12
         AL    R12,TOMBUFSZ(,R8)
         LTR   R12,R12
         BP    A001282
A0013D2  L     R12,TOMNWLSZ(,R8)
         LH    R15,OPBFSZ(,R8)
         CR    R12,R15
         BNH   A0013E2
         LR    R12,R15
A0013E2  ST    R12,TOMNWLSZ(,R8)
         B     A001474
A0013EA  L     R12,TOMQDATA(,R8)
         LA    R15,80
         C     R15,TOMPLSZ(,R8)                                 ZP60009
         BNL   *+8                                              ZP60009
         L     R15,TOMPLSZ(,R8)                                 ZP60009
         ALR   R15,R12
         L     R14,TOMNWLSZ(,R8)
         CR    R14,R15
         BNH   A001400
         LR    R14,R15
A001400  ST    R14,TOMWRKVJ(,R8)
         SLR   R14,R12
         L     R12,TOMBUFSZ(,R8)
         BCTR  R12,0
         L     R15,TOMBFCNT(,R8)
         SLR   R12,R15
         CR    R14,R12
         BNH   A00141A
         LR    R14,R12
A00141A  STC   R14,TOMWRKSZ(,R8)
         L     R12,TOMMVCNT(,R8)
         ALR   R12,R14
         ST    R12,TOMMVCNT(,R8)
         LR    R11,R14
         BCTR  R11,0
         L     R1,TOMQBPTR(,R8)
         EX    R11,A002036
         SLR   R10,R10
         IC    R10,TOMWRKSZ(,R8)
         BCTR  R10,0
         EX    R10,A00204E
         ALR   R15,R14
         ST    R15,TOMBFCNT(,R8)
         L     R1,TOMBFPTR(,R8)
         EX    R11,A002054
         ST    R12,TOMQDATA(,R8)
         AL    R15,TOMGETMN(,R8)
         ST    R15,TOMBFPTR(,R8)
         AL    R12,OPBUFADR(,R8)
         ST    R12,TOMQBPTR(,R8)
         AL    R14,TOMCOLMN(,R8)
         SL    R14,TOMXCNT(,R8)
         ST    R14,TOMCOLMN(,R8)
         SLR   R12,R12
         ST    R12,TOMXCNT(,R8)
A001474  SLR   R12,R12
         L     R15,TOMNWLSZ(,R8)
         SL    R15,TOMQDATA(,R8)
         CR    R15,R12
         BNH   A001494
         L     R15,TOMBUFSZ(,R8)
         BCTR  R15,0
         SL    R15,TOMBFCNT(,R8)
         CR    R15,R12
         BH    A0013EA
A001494  L     R12,TOMMVCNT(,R8)
         CH    R12,OPBFSZ(,R8)
         BNE   A0014A8
         BAL   R14,ENDDATA                 PERFORM
         B     A0014FE
A0014A8  SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
         LA    R12,1
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)
         L     R12,TOMBUFSZ(,R8)
         SL    R12,TOMBFCNT(,R8)
         LH    R15,OPBFSZ(,R8)
         SL    R15,TOMMVCNT(,R8)
         SLR   R14,R14
         IC    R14,TOMLNSZ(,R8)
         CR    R15,R14
         BNH   A0014D8
         LR    R15,R14
A0014D8  AL    R15,FW15
         CR    R12,R15
         BNL   A0014EA
         OI    TOMWFLG1(R8),TOMENDBF
         B     A0014FE
A0014EA  BAL   R14,NEWLINE                 PERFORM
         L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)
         BL    A0014FE
         BAL   R14,SCRNPAGE                PERFORM
A0014FE  L     R12,TOMMVCNT(,R8)
         CH    R12,OPBFSZ(,R8)
         BNL   A001512
         TM    TOMWFLG1(R8),TOMENDBF+TOMENDSC
         BZ    A00121E
A001512  L     R14,136(,R4)
         BR    R14                         END OF ASIS
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, ENDDATA  , WILL BE CALLED TO PROCESS LAST TWO    */
*/* BYTES OF USER DATA IF EDIT OR ASIS IS SPECIFIED.                 */
*/*                                                                  */
*/********************************************************************/
ENDDATA  ST    R14,148(,R4)
         LA    R12,2
         L     R15,TOMBFCNT(,R8)
         L     R14,TOMGETMN(,R8)
         ALR   R14,R15
         SLR   R14,R12
         ST    R14,TOMBFPTR(,R8)
         L     R11,OPBUFADR(,R8)
         AL    R11,TOMMVCNT(,R8)
         SLR   R11,R12
         ST    R11,TOMQBPTR(,R8)
         CLI   1(R11),X'24'
         BNE   A001562
*  /******************************************************************/
*  /*                                                                */
*  /*       LAST IS BYPASS. REPLACE WITH START FIELD & BYPASS ATTRIB */
*  /*                                                                */
*  /******************************************************************/
         AL    R15,FW1
         ST    R15,TOMBFCNT(,R8)
         MVC   1(2,R14),SFBYPATT
         OI    TVWAFLG4,TVWANOFB
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
         B     A001720
A001562  LH    R12,OPBFSZ(,R8)
         C     R12,FW1
         BNH   A00159E
         L     R12,TOMQBPTR(,R8)
         CLC   0(2,R12),BYPNL
         BE    A001586
         CLC   0(2,R12),BYPCR
         BNE   A00159E
A001586  L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),SFBYPATT
         OI    TVWAFLG4,TVWANOFB
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
         B     A001720
A00159E  L     R12,TOMQBPTR(,R8)
         CLI   1(R12),X'13'
         BNE   A0015D4
         TM    OPOPTNS(R8),X'10'
         BNO   A0015D4
         TM    OPOPTNS(R8),X'20'
         BNZ   A0015D4
*      /**************************************************************/
*      /*                                                            */
*      /* INSERT CURSOR IS VALID AS LAST CHARACTER FOR ASIS MODE DATA*/
*      /*                                                            */
*      /**************************************************************/
         L     R12,TOMBFPTR(,R8)
         MVI   1(R12),X'13'
         OI    TOMWFLG1(R8),TOMCURST
         L     R12,TOMCOLMN(,R8)
         BCTR  R12,0
         ST    R12,TOMCOLMN(,R8)
         B     A001720
*      /**************************************************************/
*      /*                                                            */
*      /* IF VALID BYPASS IS NOT FOUND AND CURSOR IS NOT SET         */
*      /* DO GROUP WILL PUT DEFAULT ATTRIBUTE AT END OF DATA         */
*      /*                                                            */
*      /**************************************************************/
A0015D4  L     R12,TOMQBPTR(,R8)
         CLI   1(R12),X'15'
         BNE   A0015EA
         L     R12,TOMBFCNT(,R8)
         BCTR  R12,0
         ST    R12,TOMBFCNT(,R8)
A0015EA  L     R12,TOMBFCNT(,R8)
         L     R15,TOMGETMN(,R8)
         ALR   R15,R12
         ST    R15,TOMBFPTR(,R8)
         L     R14,TOMCOLMN(,R8)
         SLR   R11,R11
         IC    R11,TOMLNSZ(,R8)
         CR    R14,R11
         BNL   A0016B0
         AL    R12,FW2
         ST    R12,TOMBFCNT(,R8)
         LA    R10,1
         ALR   R14,R10
         ST    R14,TOMCOLMN(,R8)
         MVC   0(2,R15),SFRDATT
         TM    OPOPTNS(R8),X'10'
         BNO   A0016A6
         TM    OPOPTNS(R8),X'20'
         BNZ   A0016A6
         L     R1,TOMQBPTR(,R8)
         CLI   1(R1),X'15'
         BE    A0016A6
         CR    R14,R11
         BNL   A00165A
         ALR   R12,R10
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMLNCNT(,R8)
         BCTR  R12,0
         ST    R12,TOMLNCNT(,R8)
         MVI   2(R15),X'13'
         B     A001720
*          /**********************************************************/
*          /*                                                        */
*          /*  NO SPACE ON THIS LINE PUT ATTRIBUTE ON NEXT LINE      */
*          /*                                                        */
*          /**********************************************************/
A00165A  LA    R12,1
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)
         SLR   R15,R15
         ST    R15,TOMCOLMN(,R8)
         C     R12,TOMLNNO(,R8)
         BNL   A0016A2
         L     R12,TOMGETMN(,R8)
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFPTR(,R8)
*              /******************************************************/
*              /*                                                    */
*              /*THIS IS NOT THE LAST LINE. PUT IN ATTRIB AND CURSOR */
*              /*                                                    */
*              /******************************************************/
         BAL   R14,NEWLINE                 PERFORM
         LA    R12,1
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMLNCNT(,R8)
         BCTR  R12,0
         ST    R12,TOMLNCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         MVI   0(R12),X'13'
A0016A2  B     A001720
A0016A6  SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
         B     A001720
A0016B0  LA    R12,1
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)
         SLR   R15,R15
         ST    R15,TOMCOLMN(,R8)
         C     R12,TOMLNNO(,R8)
         BNL   A001720
         CLI   OPRC(R8),2
         BE    A0016E2
         TM    OPOPTNS(R8),X'10'
         BNO   A001716
         TM    OPOPTNS(R8),X'20'
         BNZ   A001716
A0016E2  BAL   R14,NEWLINE                 PERFORM
         LA    R12,2
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),SFRDATT
         L     R12,TOMLNCNT(,R8)
         BCTR  R12,0
         ST    R12,TOMLNCNT(,R8)
         LA    R12,1
         AL    R12,TOMCOLMN(,R8)
         ST    R12,TOMCOLMN(,R8)
         B     A001720
A001716  L     R12,TOMLNCNT(,R8)
         BCTR  R12,0
         ST    R12,TOMLNCNT(,R8)
A001720  L     R12,TOMGETMN(,R8)
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFPTR(,R8)
         L     R12,OPBUFADR(,R8)
         AL    R12,TOMMVCNT(,R8)
         ST    R12,TOMQBPTR(,R8)
         L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)
         BNL   A001758
         TM    TOMWFLG1(R8),TOMCURST
         BO    A001758
         LA    R12,1
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)
A001758  L     R14,148(,R4)
         BR    R14                         END OF ENDDATA
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, CNTLHDRS, WILL BUILD THE OUTPUT HEADER FOR CON-  */
*/* TROL OR ASIS MODE USER DATA.                                     */
*/*                                                                  */
*/********************************************************************/
CNTLHDRS ST    R14,144(,R4)
         L     R12,TOMBUFSZ(,R8)
         SL    R12,TOMBFCNT(,R8)
         LH    R15,OPBFSZ(,R8)
         SL    R15,TOMMVCNT(,R8)
         SLR   R14,R14
         IC    R14,TOMLNSZ(,R8)
         CR    R15,R14
         BNH   A001780
         LR    R15,R14
A001780  AL    R15,FW15
         CR    R12,R15
         BNL   A001792
         OI    TOMWFLG1(R8),TOMENDBF
         B     A0019C2
A001792  L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BNZ   A0018BA
*      /**************************************************************/
*      /*                                                            */
*      /* BUILD CONTROL HEADER (CMD,WCC,SBA ORDER) ONLY IF RU IS     */
*      /* EMPTY.                                                     */
*      /*                                                            */
*      /**************************************************************/
         LA    R15,2
         CH    R15,OPBFSZ(,R8)
         BNL   A0017E4
         L     R14,TOMQBPTR(,R8)
         CLI   0(R14),X'27'
         BNE   A0017E4
*          /**********************************************************/
*          /*                                                        */
*          /* ESC PRESENT, TAKE USER'S COMMAND.                      */
*          /*                                                        */
*          /**********************************************************/
         AL    R12,FW1
         ST    R12,TOMBFCNT(,R8)
         ST    R15,TOMMVCNT(,R8)
         L     R1,TOMBFPTR(,R8)
         MVC   0(2,R1),1(R14)
         AL    R12,TOMGETMN(,R8)
         ST    R12,TOMBFPTR(,R8)
         L     R12,OPBUFADR(,R8)
         ALR   R12,R15
         ST    R12,TOMQBPTR(,R8)
         ST    R15,TOMQDATA(,R8)
         B     A0017FC
*          /**********************************************************/
*          /*                                                        */
*          /* ESCAPE CHAR IS NOT PRESENT SO PUT IN DEFAULT WRITE     */
*          /* COMMAND.                                               */
*          /*                                                        */
*          /**********************************************************/
A0017E4  BAL   R14,SCRFORMT                PERFORM
         L     R12,TOMBFCNT(,R8)
         BCTR  R12,0
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         BCTR  R12,0
         ST    R12,TOMBFPTR(,R8)
A0017FC  LA    R12,4
         CH    R12,OPBFSZ(,R8)
         BNL   A00184E
         L     R15,TOMQBPTR(,R8)
         CLI   1(R15),X'11'
         BNE   A00184E
*          /**********************************************************/
*          /*                                                        */
*          /* MOVE USER WRITE CONTROL CHAR AND SBA ORDER INTO        */
*          /* OUTPUT RU.                                             */
*          /*                                                        */
*          /**********************************************************/
         L     R14,TOMBFCNT(,R8)
         ALR   R14,R12
         ST    R14,TOMBFCNT(,R8)
         AL    R12,TOMMVCNT(,R8)
         ST    R12,TOMMVCNT(,R8)
         L     R1,TOMBFPTR(,R8)
         MVC   0(4,R1),0(R15)
         AL    R14,TOMGETMN(,R8)
         ST    R14,TOMBFPTR(,R8)
         L     R15,OPBUFADR(,R8)
         ALR   R15,R12
         ST    R15,TOMQBPTR(,R8)
         ST    R12,TOMQDATA(,R8)
         OI    TOMWFLG2(R8),TOMTRSBA
         B     A0018BE
A00184E  LA    R12,3
         CH    R12,OPBFSZ(,R8)
         BNL   A00189C
         L     R15,TOMQBPTR(,R8)
         CLI   1(R15),X'1D'
         BNE   A00189C
*      /**************************************************************/
*      /*                                                            */
*      /* IF START FIELD IS PRESENT, TAKE USER'S ATTRIBUTE CHARACTER.*/
*      /*                                                            */
*      /**************************************************************/
         L     R14,TOMBFCNT(,R8)
         ALR   R14,R12
         ST    R14,TOMBFCNT(,R8)
         AL    R12,TOMMVCNT(,R8)
         ST    R12,TOMMVCNT(,R8)
         L     R1,TOMBFPTR(,R8)
         MVC   0(3,R1),0(R15)
         AL    R14,TOMGETMN(,R8)
         ST    R14,TOMBFPTR(,R8)
         L     R15,OPBUFADR(,R8)
         ALR   R15,R12
         ST    R15,TOMQBPTR(,R8)
         ST    R12,TOMQDATA(,R8)
         B     A0018BE
*          /**********************************************************/
*          /*                                                        */
*          /* USER SBA NOT IN HEADER SO USER DEFAULT WCC AND LINE    */
*          /* ADDRESS                                                */
*          /*                                                        */
*          /**********************************************************/
A00189C  LA    R12,1
         L     R15,TOMBFCNT(,R8)
         ALR   R15,R12
         ST    R15,TOMBFCNT(,R8)
         AL    R12,TOMBFPTR(,R8)
         ST    R12,TOMBFPTR(,R8)
         BAL   R14,NEWLINE                 PERFORM
         B     A0018BE
A0018BA  BAL   R14,NEWLINE                 PERFORM
A0018BE  LH    R12,OPBFSZ(,R8)
         SL    R12,TOMMVCNT(,R8)
         C     R12,FW1
         BNH   A00192A
         L     R12,TOMQBPTR(,R8)
         CLI   0(R12),X'1D'
         BNE   A00192A
         TM    OPOPTNS(R8),X'10'
         BNO   A0018F6
         TM    OPOPTNS(R8),X'20'
         BNZ   A0018F6
         TM    OPOPTNS(R8),OPASID
         BNO   A0018F6
         NI    1(R12),X'FE'
A0018F6  LA    R12,2
         L     R15,TOMBFCNT(,R8)
         ALR   R15,R12
         ST    R15,TOMBFCNT(,R8)
         AL    R12,TOMMVCNT(,R8)
         ST    R12,TOMMVCNT(,R8)
         L     R1,TOMBFPTR(,R8)
         L     R15,TOMQBPTR(,R8)
         MVC   0(2,R1),0(R15)
         ST    R12,TOMQDATA(,R8)
         AL    R12,OPBUFADR(,R8)
         ST    R12,TOMQBPTR(,R8)
         B     A0019B6
A00192A  TM    OPOPTNS(R8),X'10'
         BNO   A0019B6
         TM    OPOPTNS(R8),X'20'
         BNZ   A0019B6
         LH    R12,OPBFSZ(,R8)
         SL    R12,TOMMVCNT(,R8)
         C     R12,FW1
         BNE   A001978
         L     R12,TOMQBPTR(,R8)
         CLI   0(R12),X'24'
         BE    A0019B6
         CLI   0(R12),X'13'
         BE    A0019B6
         LA    R12,2
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),SFWRTATT
         B     A0019B6
A001978  LH    R12,OPBFSZ(,R8)
         SL    R12,TOMMVCNT(,R8)
         C     R12,FW2
         BNE   A0019A0
         L     R12,TOMQBPTR(,R8)
         CLC   0(2,R12),BYPNL
         BE    A0019B6
         CLC   0(2,R12),BYPCR
         BE    A0019B6
A0019A0  LA    R12,2
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),SFWRTATT
A0019B6  L     R12,TOMGETMN(,R8)
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFPTR(,R8)
A0019C2  L     R14,144(,R4)
         BR    R14                         END OF CNTLHDRS
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, EDIT, DOES THE EDITING FOR EDIT MODE DATA. IN-   */
*/* VALID CHARACTERS ARE REPLACED WITH COLONS. BYPASS ('24'X) IS     */
*/* VALID ONLY AS LAST OR (CONDITIONALLY) NEXT TO LAST CHARACTER.    */
*/*                                                                  */
*/********************************************************************/
EDIT     ST    R14,128(,R4)
         L     R12,TOMBUFSZ(,R8)
         SL    R12,TOMBFCNT(,R8)
         LH    R15,OPBFSZ(,R8)
         SL    R15,TOMQDATA(,R8)
         SLR   R14,R14
         IC    R14,TOMLNSZ(,R8)
         CR    R15,R14
         BNH   A0019EA
         LR    R15,R14
A0019EA  AL    R15,FW15
         CR    R12,R15
         BNL   A0019FC
         OI    TOMWFLG1(R8),TOMENDBF
         B     A001C14
A0019FC  L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BNZ   A001A0A
         BAL   R14,SCRFORMT                PERFORM
A001A0A  B     A001C00
*/********************************************************************/
*/*                                                                  */
*/* BUILD LINES OF DATA UNTIL DATA,SCREEN, OR RU BUFFER RUNS OUT     */
*/*                                                                  */
*/********************************************************************/
A001A0E  L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)
         BL    A001A4A
         SLR   R12,R12
         IC    R12,TOMLNSZ(,R8)
         SL    R12,FW7
         L     R15,TOMCOLMN(,R8)
         CR    R15,R12
         BNH   A001A30
         LR    R15,R12
A001A30  SLR   R12,R12
         CR    R15,R12
         BNL   A001A3A
         LR    R15,R12
A001A3A  ST    R15,TOMCOLMN(,R8)
         BAL   R14,NEWLINE                 PERFORM
         BAL   R14,SCRNPAGE                PERFORM
         B     A001C00
A001A4A  NI    TOMWFLG1(R8),255-TOMEDSAV
         BAL   R14,NEWLINE                 PERFORM
         L     R12,TOMQDATA(,R8)
         LTR   R12,R12
         BNZ   A001AC6
         SLR   R15,R15
         IC    R15,TOMLNSZ(,R8)
         LR    R14,R15
         BCTR  R14,0
         C     R14,TOMCOLMN(,R8)
         BNE   A001AC6
*        /************************************************************/
*        /*                                                          */
*        /* ON FIRST PASS FOR EACH TPUT, PUT ATTRIB IN FRONT OF DATA */
*        /*                                                          */
*        /************************************************************/
         LA    R14,2
         AL    R14,TOMBFCNT(,R8)
         ST    R14,TOMBFCNT(,R8)
         L     R1,TOMBFPTR(,R8)
         MVC   0(2,R1),SFWRTATT
         L     R11,TOMGETMN(,R8)
         ALR   R11,R14
         ST    R11,TOMBFPTR(,R8)
         LA    R11,1
         AL    R11,TOMLNCNT(,R8)
         ST    R11,TOMLNCNT(,R8)
         LCR   R14,R14
         AL    R14,TOMBUFSZ(,R8)
         LCR   R12,R12
         AH    R12,OPBFSZ(,R8)
         CR    R12,R15
         BNH   A001AAE
         LR    R12,R15
A001AAE  AL    R12,FW15
         CR    R14,R12
         BNL   A001ABC
         OI    TOMWFLG1(R8),TOMENDBF
A001ABC  SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
         B     A001C00
A001AC6  L     R12,TOMQDATA(,R8)
         LTR   R12,R12
         BNZ   A001B32
         LA    R12,2
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)
         L     R1,TOMBFPTR(,R8)
         MVC   0(2,R1),SFWRTATT
         AL    R12,TOMGETMN(,R8)
         ST    R12,TOMBFPTR(,R8)
         LA    R12,1
         L     R15,TOMCOLMN(,R8)
         ALR   R15,R12
         ST    R15,TOMCOLMN(,R8)
         LCR   R15,R15
         SLR   R14,R14
         IC    R14,TOMLNSZ(,R8)
         ALR   R15,R14
         LH    R14,OPBFSZ(,R8)
         CR    R14,R15
         BNH   A001B12
         LR    R14,R15
A001B12  LA    R15,80
         C     R15,TOMPLSZ(,R8)                                 ZP60009
         BNL   *+8                                              ZP60009
         L     R15,TOMPLSZ(,R8)                                 ZP60009
         CR    R14,R15
         BNH   A001B1E
         LR    R14,R15
A001B1E  ST    R14,TOMWRKVJ(,R8)
         CR    R14,R12
         BNL   A001B2A
         LR    R14,R12
A001B2A  STC   R14,TOMWRKSZ(,R8)
         B     A001B5C
A001B32  LH    R12,OPBFSZ(,R8)
         SL    R12,TOMQDATA(,R8)
         SLR   R15,R15
         IC    R15,TOMLNSZ(,R8)
         SL    R15,TOMCOLMN(,R8)
         CR    R12,R15
         BNH   A001B4C
         LR    R12,R15
A001B4C  LA    R15,80
         C     R15,TOMPLSZ(,R8)                                 ZP60009
         BNL   *+8                                              ZP60009
         L     R15,TOMPLSZ(,R8)                                 ZP60009
         CR    R12,R15
         BNH   A001B58
         LR    R12,R15
A001B58  STC   R12,TOMWRKSZ(,R8)
A001B5C  SLR   R12,R12
         IC    R12,TOMWRKSZ(,R8)
         L     R15,TOMCOLMN(,R8)
         ALR   R15,R12
         ST    R15,TOMCOLMN(,R8)
         LR    R15,R12
         BCTR  R15,0
         L     R14,TOMQBPTR(,R8)
         EX    R15,A00205A
         SLR   R11,R11
         IC    R11,TOMWRKSZ(,R8)
         BCTR  R11,0
         EX    R11,A002060
         L     R11,TOMBFCNT(,R8)
         ALR   R11,R12
         ST    R11,TOMBFCNT(,R8)
         L     R1,TOMBFPTR(,R8)
         EX    R15,A002054
         L     R15,TOMQDATA(,R8)
         ALR   R15,R12
         ST    R15,TOMQDATA(,R8)
         AL    R11,TOMGETMN(,R8)
         ST    R11,TOMBFPTR(,R8)
         ALR   R14,R12
         ST    R14,TOMQBPTR(,R8)
         ST    R15,TOMMVCNT(,R8)
         CH    R15,OPBFSZ(,R8)
         BL    A001BC2
*        /************************************************************/
*        /*                                                          */
*        /* THIS DO GROUP PROCESSES BYPASS('24'X) WHEN FOUND IN NEXT */
*        /* LAST OR LAST DATA BYTE. A DEFAULT ATTRIBUTE IS PLACED IN */
*        /* RU WHEN A VALID BYPASS IS NOT FOUND                      */
*        /*                                                          */
*        /************************************************************/
         BAL   R14,ENDDATA                 PERFORM
         B     A001C00
*        /************************************************************/
*        /*                                                          */
*        /* MORE USER DATA LEFT SO DO NEW-LINE PROCESSING & CONTINUE */
*        /*                                                          */
*        /************************************************************/
A001BC2  LA    R12,1
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
         L     R12,TOMBUFSZ(,R8)
         SL    R12,TOMBFCNT(,R8)
         LH    R15,OPBFSZ(,R8)
         SL    R15,TOMQDATA(,R8)
         SLR   R14,R14
         IC    R14,TOMLNSZ(,R8)
         CR    R15,R14
         BNH   A001BF2
         LR    R15,R14
A001BF2  AL    R15,FW15
         CR    R12,R15
         BNL   A001C00
*            /********************************************************/
*            /*                                                      */
*            /* NOT ENOUGH RU BUFFER FOR LINESZ OF DATA AND PAGING   */
*            /* PROMPT SO SEND CURRENT RU AND CONTINUE               */
*            /*                                                      */
*            /********************************************************/
         OI    TOMWFLG1(R8),TOMENDBF
A001C00  L     R12,TOMQDATA(,R8)
         CH    R12,OPBFSZ(,R8)
         BNL   A001C14
         TM    TOMWFLG1(R8),TOMENDBF+TOMENDSC
         BZ    A001A0E
A001C14  L     R14,128(,R4)
         BR    R14                         END OF EDIT
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THE PROCEDURE, BLDPRMPT, WILL BUILD AUTOPROMPT DATA IN THE OUT-  */
*/* PUT RU. FOR AUTO LINE NUMBERING, THIS ROUTINE WILL BUILD A VARI- */
*/* BLE LENGTH LINE NUMBER OF 5 TO 8 DIGITS WITH LEADING ZEROS TRUN- */
*/* CATED UP TO THE FIRST 3. AUTO CHARACTER PROMPTING WILL CONSIST   */
*/* OF POSITIONING THE CURSOR. THE KEYBOARD WILL BE UNLOCKED ON      */
*/* EITHER TYPE AUTO PROMPT.                                         */
*/*                                                                  */
*/********************************************************************/
BLDPRMPT ST    R14,116(,R4)
         L     R12,TOMBUFSZ(,R8)
         SL    R12,TOMBFCNT(,R8)
         LH    R15,OPBFSZ(,R8)
         SL    R15,TOMMVCNT(,R8)
         SLR   R14,R14
         IC    R14,TOMLNSZ(,R8)
         CR    R15,R14
         BNH   A001C3C
         LR    R15,R14
A001C3C  AL    R15,FW15
         CR    R12,R15
         BNL   A001C4E
         OI    TOMWFLG1(R8),TOMENDBF
         B     A001D72
A001C4E  L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)
         BL    A001C98
         L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BNZ   A001C68
         BAL   R14,SCRFORMT                PERFORM
A001C68  SLR   R12,R12
         IC    R12,TOMLNSZ(,R8)
         SL    R12,FW7
         L     R15,TOMCOLMN(,R8)
         CR    R15,R12
         BNH   A001C7E
         LR    R15,R12
A001C7E  SLR   R12,R12
         CR    R15,R12
         BNL   A001C88
         LR    R15,R12
A001C88  ST    R15,TOMCOLMN(,R8)
         BAL   R14,NEWLINE                 PERFORM
         BAL   R14,SCRNPAGE                PERFORM
         B     A001D72
A001C98  L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BNZ   A001CAA
         OI    TOMWFLG2(R8),TOMSCHED
         BAL   R14,SCRFORMT                PERFORM
A001CAA  L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         TM    TSBFLG2-TSB(R12),TSBAULST
         BNO   A001D5E
*      /**************************************************************/
*      /*                                                            */
*      /* THIS DO GROUP BUILDS A VARIABLE LENGTH LINE NUMBER         */
*      /*                                                            */
*      /**************************************************************/
         BAL   R14,NEWLINE                 PERFORM
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         L     R12,TSBAUTOS-TSB(,R12)
         CVD   R12,176(,R4)
         OI    183(R4),X'0F'
         UNPK  184(8,R4),176(8,R4)
         LA    R12,1
         ST    R12,TOMWRKVI(,R8)
A001CE0  L     R12,TOMWRKVI(,R8)
         LA    R1,183(R12,R4)
         CLI   0(R1),C'0'
         BNE   A001D04
         LA    R12,1
         AL    R12,TOMWRKVI(,R8)
         ST    R12,TOMWRKVI(,R8)
         C     R12,FW3
         BNH   A001CE0
A001D04  L     R12,TOMWRKVI(,R8)
         LA    R15,8
         SLR   R15,R12
         AL    R15,FW1
         STH   R15,TVWANCNT
         LA    R14,5
         AL    R14,TOMBFCNT(,R8)
         ALR   R14,R15
         ST    R14,TOMBFCNT(,R8)
         AL    R15,FW2
         STH   R15,TVWANCNT
         L     R15,TOMBFPTR(,R8)
         MVC   0(2,R15),SFWRTATT
         LA    R14,11
         SLR   R14,R12
         SL    R14,FW3
         LA    R1,183(R12,R4)
         EX    R14,A002066
         LA    R14,12
         SLR   R14,R12
         ALR   R15,R14
         BCTR  R15,0
         LCR   R12,R12
         AL    R12,FW14
         SLR   R12,R14
         EX    R12,A00206C
A001D5E  L     R12,TOMGETMN(,R8)
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFPTR(,R8)
         OI    TOMWFLG1(R8),TOMCURST
         OI    TOMWFLG2(R8),TOMKBULK
A001D72  L     R14,116(,R4)
         BR    R14                         END OF BLDPRMPT
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, SCRNPAGE, WILL BE CALLED TO BUILD THE PAGING     */
*/* PROMPT MESSAGE AND TO SET APPROPRIATE INDICATORS.                */
*/*                                                                  */
*/********************************************************************/
SCRNPAGE ST    R14,12(,R13)
         NI    OPOPTNS(R8),255-OPNOED      ENSURE NOT NOEDIT    ZP60009
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         L     R12,TSBEXTNT-TSB(,R12)
         TM    TSBXFLG1-TSBX(R12),TSBXDOWN SESSION SHUTTING DOWN?
         BNO   A001DAA                     NO
         MVI   TVWALNCT,1                  YES, SET CURRENT LINE TO 1
         MVC   TOMLNCNT(4,R8),FW1
         OI    TVWAFLG4,TVWAFMSC           FORMAT SCREEN REQUIRED
         NI    TVWAFLG2,255-TVWAPGN        NOT DOING PAGING
         OI    TOMWFLG1(R8),TOMENDBF       END OF RU BUFFER
         B     A001DD0
A001DAA  LA    R12,8                       SET COUNT FOR PAGING MESSAGE
         AL    R12,TOMBFCNT(,R8)
         ST    R12,TOMBFCNT(,R8)
         L     R1,TOMBFPTR(,R8)            PUT PAGE PROMPT IN OUTPUT RU
         MVC   0(8,R1),A0020DB
         AL    R12,TOMGETMN(,R8)           UPDATE RU BUFFER POINTER
         ST    R12,TOMBFPTR(,R8)
         OI    TVWAFLG2,TVWAPGN            PAGING RESPONSE OUTSTANDING
         OI    TOMWFLG2(R8),TOMKBULK       SET KEYBOARD UNLOCK NEEDED
*                                          INDICATE CURSOR SET IN RU
*                                          END OF SCRN HAS BEEN REACHED
*        (LEAVE MAIN LOOP OF BLDDTA)       DATA BLD COMPLETE THIS ENTRY
*        (LEAVE MAIN LOOP OF BLDRU)        RU BUILD COMPLETE THIS ENTRY
A001DD0  OI    TOMWFLG1(R8),TOMCURST+TOMENDSC+TOMEXDTA+TOMEXBRU
         L     R14,12(,R13)
         BR    R14                         END OF SCRNPAGE
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, BLDERR, WILL BE CALLED TO PUT ERROR MESSAGES IN  */
*/* THE OUTPUT RU                                                    */
*/*                                                                  */
*/********************************************************************/
BLDERR   ST    R14,104(,R4)
         SLR   R12,R12
         ST    R12,TOMCOLMN(,R8)
         C     R12,TOMBFCNT(,R8)
         BNE   A001DF0
         BAL   R14,SCRFORMT                PERFORM
A001DF0  BAL   R14,NEWLINE                 PERFORM
         L     R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)
         BL    A001E08
         BAL   R14,SCRNPAGE                PERFORM
         B     A001E70
A001E08  LA    R12,4
         ST    R12,TOMWRKVI(,R8)
         LR    R15,R12
         SLA   R15,2
         L     R1,CVTPTR                   CVT ADDRESS
         L     R1,CVTTCASP-CVT(,R1)
         L     R1,TCASMSGS-TCAST(,R1)
         AL    R1,FWMINUS4
         L     R15,0(R15,R1)
         LH    R14,0(,R15)
         L     R11,TOMBFCNT(,R8)
         ALR   R11,R14
         ALR   R11,R12
         ST    R11,TOMBFCNT(,R8)
         L     R12,TOMBFPTR(,R8)
         MVC   0(2,R12),SFWRTATT
         LR    R10,R14
         BCTR  R10,0
         EX    R10,A002072
         ALR   R12,R14
         MVC   2(2,R12),SFRDATT
         AL    R11,TOMGETMN(,R8)
         ST    R11,TOMBFPTR(,R8)
         NI    TVWAFLG2,255-TVWAERMG
         OI    TVWAFLG1,TVWAULK
         LA    R12,1
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)
A001E70  L     R14,104(,R4)
         BR    R14                         END OF BLDERR
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, TRANPROC, WILL PERFORM USER AND/OR ASCII TRANS-  */
*/* LATION ON THE OUTBOUND RU.                                       */
*/*                                                                  */
*/********************************************************************/
TRANPROC ST    R14,12(,R13)
         TM    TVWAFLG3,TVWATRAN
         BNO   A001F6C
         SLR   R12,R12
         ST    R12,TOMWRKVJ(,R8)
         LA    R3,3
         B     A001F60
A001E90  SLR   R1,R1
         L     R12,TOMWRKVJ(,R8)
         L     R0,TOMGETMN(,R8)
         ALR   R0,R12
         ST    R0,TOMBFPTR(,R8)
         LCR   R12,R12
         AL    R12,TOMBFCNT(,R8)
         LA    R0,253
         CR    R12,R0
         BNH   A001EB2
         LR    R12,R0
A001EB2  ST    R12,TOMWRKVI(,R8)
         L     R12,TOMBFPTR(,R8)
         L     R15,TOMWRKVI(,R8)
         BCTR  R15,0
         EX    R15,A002078
         BC    8,NONFLG
         LR    R12,R1
         SL    R12,TOMBFPTR(,R8)
         ST    R12,TOMWRKVI(,R8)
         CLI   0(R1),X'11'
         BE    A001EE2
         CLI   0(R1),X'12'
         BNE   A001EEA
A001EE2  LA    R1,3
         B     A001F1E
A001EEA  CLI   0(R1),X'3C'
         BNE   A001EFA
         LA    R1,4
         B     A001F1E
A001EFA  CLI   0(R1),X'1D'
         BNE   A001F0A
         LA    R1,2
         B     A001F1E
A001F0A  CLI   0(R1),X'13'
         BE    A001F1A
         CLI   0(R1),X'05'
         BNE   A001F1E
A001F1A  LA    R1,1
A001F1E  L     R12,TOMWRKVI(,R8)
         CR    R3,R12
         BH    A001F4E
         C     R3,FW1
         BE    NONFLG
         C     R12,FW3
         BL    A001F4E
NONFLG   L     R12,TOMBFPTR(,R8)
         ALR   R12,R3
         BCTR  R12,0
         L     R15,TOMWRKVI(,R8)
         SLR   R15,R3
         L     R14,TVWATABO
         EX    R15,A00207E
A001F4E  LA    R3,1
         L     R12,TOMWRKVJ(,R8)
         AL    R12,TOMWRKVI(,R8)
         ALR   R12,R1
         ST    R12,TOMWRKVJ(,R8)
A001F60  L     R12,TOMWRKVJ(,R8)
         C     R12,TOMBFCNT(,R8)
         BL    A001E90
A001F6C  L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         L     R12,TSBEXTNT-TSB(,R12)
         TM    TSBXFLG1-TSBX(R12),TSBXASCI
         BNO   A001FCE
         SLR   R12,R12
         ST    R12,TOMWRKVJ(,R8)
         B     A001FC2
A001F8A  L     R12,TOMWRKVJ(,R8)
         L     R15,TOMGETMN(,R8)
         ALR   R15,R12
         ST    R15,TOMBFPTR(,R8)
         L     R14,TOMBFCNT(,R8)
         SLR   R14,R12
         LA    R11,256
         CR    R14,R11
         BNH   A001FAA
         LR    R14,R11
A001FAA  ST    R14,TOMWRKVI(,R8)
         L     R11,TOMWRKVI(,R8)
         BCTR  R11,0
         L     R1,TVWAATBO
         EX    R11,A002084
         ALR   R12,R14
         ST    R12,TOMWRKVJ(,R8)
A001FC2  L     R12,TOMWRKVJ(,R8)
         C     R12,TOMBFCNT(,R8)
         BL    A001F8A
A001FCE  L     R14,12(,R13)
         BR    R14                         END OF TRANPROC
         EJECT
A001FD4  ST    R14,124(,R4)
         L     R12,TOMBFCNT(,R8)
         LTR   R12,R12
         BNZ   A001FE6
         BAL   R14,SCRFORMT                PERFORM
A001FE6  LA    R12,1
         ST    R12,TOMMVCNT(,R8)
         SLR   R15,R15
         ST    R15,TOMCOLMN(,R8)
         AL    R12,TOMLNCNT(,R8)
         ST    R12,TOMLNCNT(,R8)
         C     R12,TOMLNNO(,R8)
         BL    A00200C
         BAL   R14,NEWLINE                 PERFORM
         BAL   R14,SCRNPAGE                PERFORM
A00200C  L     R14,124(,R4)
         BR    R14                         EXIT
         EJECT
A002012  L     R13,4(,R13)
         LM    R14,R12,12(R13)             RESTORE REGS
         BR    R14                         EXIT
HW1920   DC    H'1920'
HW4095   DC    H'4095'                                          ZP60009
A00201E  MVC   TOMWRKBF+7(0,R8),2(R12)
A002024  MVC   2(0,R10),0(R1)
A00202A  TR    2(0,R10),ASISTAB
A002030  MVC   2(0,R10),80(R1)
A002036  MVC   TOMWRKBF(0,R8),0(R1)
A00203C  MVC   0(0,R12),0(R3)
A002042  TR    0(0,R12),FLSCRTAB
A002048  TRT   0(0,R3),ICTAB
A00204E  TR    TOMWRKBF(0,R8),ASISTAB
A002054  MVC   0(0,R1),TOMWRKBF(R8)
A00205A  MVC   TOMWRKBF(0,R8),0(R14)
A002060  TR    TOMWRKBF(0,R8),EDITTAB
A002066  MVC   2(0,R15),0(R1)
A00206C  MVC   0(0,R15),SFRDATIC
A002072  MVC   2(0,R12),2(R15)
A002078  TRT   0(0,R12),SBATAB
A00207E  TR    0(0,R12),0(R14)
A002084  TR    0(0,R15),0(R1)
FW1      DC    0F'1'
         DC    H'0'
HW1      DC    H'1'
FW2      DC    F'2'
FW3      DC    F'3'
FW4      DC    F'4'
FW7      DC    F'7'
FW14     DC    F'14'
FW15     DC    F'15'
FW18     DC    F'18'
FW19     DC    F'19'
FW40     DC    F'40'
FW64     DC    F'64'
FW80     DC    F'80'
FWMINUS4 DC    F'-4'
         DC    X'07002011'
         DC    F'192'
IKTIDSX1 DC    V(IKTIDSX1)
         DS    0D
A0020D0  EQU   *,11                        SAVE 8 BYTES OF      ZP60009
         DC    X'11C150'                    DUPLICATE DATA      ZP60008
SFWRTATT EQU   *,2
A0020DB  DC    X'1DC85C5C5C1D4013'
A0020E3  DC    X'1DC84FC91D40'
A0020E9  DC    X'C61140401DC8'
A0020EF  DC    X'1DC84F1D40'
SFRDATT  EQU   *,2
SFRDATIC DC    X'1D4013'
BYPCR    DC    X'240D'
BYPNL    DC    X'2415'
EWRTWCCD DC    X'F5C1'
SFBYPATT DC    X'1D4C'
WRTWCC   DC    X'F140'
WRTWCCDF DC    X'F1C1'
A002103  DC    X'5D7F'
A002105  DC    X'C75F'
         DS    0D                                               ZP60009
EDITTAB  DS    CL256
         ORG   EDITTAB
         DC    X'007A7A7A7A7A7A7A7A7A7A7A0C7A7A7A'
         DC    X'7A7A7A7A7A7A7A7A7A197A7A1C7A1E7A'
         DC    X'7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A'              ZP60009
         DC    X'7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A3F'              ZP60009
         DC    X'404142434445464748494A4B4C4D4E4F'              ZP60009
         DC    X'505152535455565758595A5B5C5D5E5F'              ZP60009
         DC    X'606162636465666768696A6B6C6D6E6F'              ZP60009
         DC    X'707172737475767778797A7B7C7D7E7F'              ZP60009
         DC    X'808182838485868788898A8B8C8D8E8F'              ZP60009
         DC    X'909192939495969798999A9B9C9D9E9F'              ZP60009
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'              ZP60009
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'              ZP60009
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'              ZP60009
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'              ZP60009
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'              ZP60009
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFE7A'              ZP60009
         ORG   EDITTAB+256
ASISTAB  DS    CL256
         ORG   ASISTAB
         DC    X'007A7A7A7A057A0708090A0B0C7A0E0F'
         DC    X'7A11127A7A7A7A7A18191A1B1C1D1E1F'
         DC    X'202122237A257A7A28292A2B2C7A2E2F'
         DC    X'303132333435363738393A3B3C7A3E3F'
         DC    X'404142434445464748494A4B4C4D4E4F'
         DC    X'505152535455565758595A5B5C5D5E5F'
         DC    X'606162636465666768696A6B6C6D6E6F'
         DC    X'707172737475767778797A7B7C7D7E7F'
         DC    X'808182838485868788898A8B8C8D8E8F'
         DC    X'909192939495969798999A9B9C9D9E9F'
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'
         ORG   ASISTAB+256
FLSCRTAB DS    CL256
         ORG   FLSCRTAB
         DC    X'007A7A7A7A057A0708090A0B0C7A0E0F'
         DC    X'7A1112137A7A7A7A18191A1B1C1D1E1F'
         DC    X'2021222324257A7A28292A2B2C7A2E2F'
         DC    X'303132333435367A38393A3B3C7A3E3F'
         DC    X'404142434445464748494A4B4C4D4E4F'
         DC    X'505152535455565758595A5B5C5D5E5F'
         DC    X'606162636465666768696A6B6C6D6E6F'
         DC    X'707172737475767778797A7B7C7D7E7F'
         DC    X'808182838485868788898A8B8C8D8E8F'
         DC    X'909192939495969798999A9B9C9D9E9F'
         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'
         ORG   FLSCRTAB+256
SBATAB   DS    CL256
         ORG   SBATAB
         DC    X'00000000000500000000000000000000'
         DC    X'001112130000000000000000001D0000'
         DC    X'00000000000000000000000000000000'
         DC    X'0000000000000000000000003C000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         ORG   SBATAB+256
BFADRTAB DS    CL64
         ORG   BFADRTAB
         DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'
         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'
         DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'
         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'
         ORG   BFADRTAB+64
ICTAB    DS    CL256
         ORG   ICTAB
         DC    X'00000000000000000000000000000000'
         DC    X'00000013000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         DC    X'00000000000000000000000000000000'
         ORG   ICTAB+256
PATCH    DC    76F'0'
         DS    0D                          END OF CSECT
         EJECT
R0       EQU   0                           EQUATES FOR REGISTERS 0-15
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
TOMWA    EQU   240
TOMAUTOD EQU   TOMWA
TOMWRKBF EQU   TOMWA+200
SAVEREGS EQU   TOMWA+280
TOMBFCNT EQU   TOMWA+352
TOMMVCNT EQU   TOMWA+356
TOMQDATA EQU   TOMWA+360
TOMWRKVI EQU   TOMWA+364
TOMWRKVJ EQU   TOMWA+368
TOMNWLSZ EQU   TOMWA+372
TOMQBPTR EQU   TOMWA+376
TOMGETMN EQU   TOMWA+380
TOMBUFSZ EQU   TOMWA+384
TOMBFPTR EQU   TOMWA+388
TOMWRKSZ EQU   TOMWA+392
TOMSCPRM EQU   TOMWA+396
TOMREQCD EQU   TOMSCPRM
TOMPLNNO EQU   TOMSCPRM+1
TOMLNSZ  EQU   TOMSCPRM+2
TOMLNNO  EQU   TOMSCPRM+4
TOMPLSZ  EQU   TOMSCPRM+8
TOMLNCNT EQU   TOMSCPRM+12
TOMFMTDA EQU   TOMSCPRM+16
TOMSBACD EQU   TOMFMTDA
TOMFMTAD EQU   TOMFMTDA+1
TOMFMATT EQU   TOMFMTDA+3
TOMLNADR EQU   TOMSCPRM+21
TOMROWAD EQU   TOMLNADR
TOMCOLAD EQU   TOMLNADR+1
TOMWFLGS EQU   TOMWA+421
TOMWFLG1 EQU   TOMWFLGS
TOMEDSAV EQU   X'C0'
TOMENDBF EQU   X'20'
TOMCURST EQU   X'10'
TOMENDSC EQU   X'08'
TOMEXDTA EQU   X'04'
TOMEXBRU EQU   X'02'
TOMOWAIT EQU   X'01'
TOMWFLG2 EQU   TOMWFLGS+1
TOMKBULK EQU   X'80'
TOMALARM EQU   X'40'
TOMERMG9 EQU   X'20'
TOMERASE EQU   X'10'
TOMSCHED EQU   X'08'
TOMSTCUR EQU   X'04'
TOMERLCT EQU   X'02'
TOMTRSBA EQU   X'01'
TOMWFLG3 EQU   TOMWFLGS+2
TOMBPREQ EQU   TOMWFLG3
TOMBPRSP EQU   TOMWFLG3
TOMBRKPG EQU   TOMWFLG3
TOMWFLG4 EQU   TOMWFLGS+3
TOMBRKMG EQU   X'80'
TOMEB    EQU   X'40'
TOMPGNSV EQU   X'10'
TOMUPARM EQU   TOMWA+428
TOMUPRM1 EQU   TOMUPARM
TOMUPRM2 EQU   TOMUPARM+4
TOMUPRM3 EQU   TOMUPARM+8
TOMUPRM4 EQU   TOMUPARM+12
TOMUPRM5 EQU   TOMUPARM+16
TOMUPRM6 EQU   TOMUPARM+20
TOMUPRM7 EQU   TOMUPARM+24
TOMUPRM8 EQU   TOMUPARM+28
TOMCOLMN EQU   TOMWA+464
TOMXCNT  EQU   TOMWA+468
OPARMS   EQU   TOMWA+484
OPBUFADR EQU   OPARMS
OPREQ    EQU   OPARMS+4
OPRC     EQU   OPARMS+5
OPBFSZ   EQU   OPARMS+6
OPFLAGS  EQU   OPARMS+8
OPOPTNS  EQU   OPFLAGS+1         BITS 0-3 FROM TPUT SVC GPR1 BITS 4-7
OPHOLD   EQU   X'80'
OPBRK    EQU   X'40'
OPEDIT   EQU   X'30'
OPASID   EQU   X'08'
OPNOED   EQU   X'04'                                            ZP60009
OPNXFLGS EQU   OPARMS+16
OPNXBRK  EQU   OPNXFLGS+1
OPNXEDIT EQU   OPNXFLGS+1
OPNXASID EQU   OPNXFLGS+1
         SPACE
         PRINT NOGEN
         IHAPSA
         CVT   DSECT=YES
         IHAASCB
         IKJTSB EXT=YES
         IKTTVWA
         IKTTCAST
         END   IKT3270O,(C'PLS1952',0701,83271)
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
  IDENTIFY IKT3270O('ZP60009')
++MOD(IKT0009D) DISTLIB(AOST3).
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
IKT0009D TITLE 'IKT0009D:  TSO/VTAM SVC 94 ROUTER                      *
                        '
*
*   MODIFIED BY GREG PRICE JANUARY 2003 FOR USERMOD ZP60009
*            TO SUPPORT ENTRY CODE 17 (GTTERM)
*
IKT0009D CSECT
         BALR  R15,0                       ADDRESS SET
         USING *,R15
         B     @PROLOG
         DC    AL1(16)
         DC    CL16'IKT0009D  78.290'
         DROP  R15
@PROLOG  BALR  R12,0                       ADDRESS SET
@PSTART  DS    0H
         USING @PSTART,R12
*   /*****************************************************************/
*   /*                                                               */
*   /* PARAMETER REGISTER 0 WILL HAVE THE ENTRY CODE FOR THE SVC IN  */
*   /* THE HIGH ORDER POSITION OF REGISTER 0, IF THE ENTRY CODE IS   */
*   /* INVALID A RETURN CODE OF 4 IS RETURNED IN REG 15              */
*   /*                                                               */
*   /*****************************************************************/
         LR    R15,R0
         SRL   R15,24
         CH    R15,HW20
         BH    INVALID
         LTR   R15,R15
         BNP   INVALID
         LR    R5,R8                       COPY TSB POINTER
         LA    R10,A000058
         SLL   R15,2
         L     R15,MODTAB-4(15)
         DROP  R12
         LR    R12,R15
         BR    R15
INVALID  LA    R15,4
         BR    R14                         EXIT
INVALID8 LA    R15,8
         BR    R14                         EXIT
INVALIDC LA    R15,12
         BR    R14                         EXIT
HW20     DC    H'20'
         DC    F'8'
A000058  EQU   *
         DC    F'0'
         DC    F'99999999'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'0'
         DC    F'8288'
MODTAB   EQU   *
TCLEARQ  DC   V(IKT09401)           ENTRY CODE  1
TSEND    DC   A(INVALID)            ENTRY CODE  2,INVALID
MSGS     DC   A(INVALID)            ENTRY CODE  3,INVALID
STBREAK  DC   V(IKT09404)           ENTRY CODE  4
STCOM    DC   V(IKT09405)           ENTRY CODE  5
STTIMEO  DC   A(INVALID8)           ENTRY CODE  6,INVALID
STCC     DC   A(INVALIDC)           ENTRY CODE  7,INVALID
STATTN   DC   A(INVALID8)           ENTRY CODE  8,INVALID
STAUTOL  DC   V(IKT09409)           ENTRY CODE  9
STSIZE   DC   V(IKT0940A)           ENTRY CODE 10
GTSIZE   DC   V(IGG0940B)           ENTRY CODE 11
STAUTOC  DC   V(IKT0940C)           ENTRY CODE 12
SPAUTOP  DC   V(IKT0940D)           ENTRY CODE 13
RTAUTOP  DC   V(IKT0940E)           ENTRY CODE 14
STTRAN   DC   V(IKT0940F)           ENTRY CODE 15
STCLEAR  DC   A(INVALID8)           ENTRY CODE 16,INVALID
GTTERM   DC   V(IKT09411)           ENTRY CODE 17               ZP60009
STFSMODE DC   V(IKT09412)           ENTRY CODE 18
STLINENO DC   V(IKT09413)           ENTRY CODE 19
STTMPMD  DC   V(IKT09414)           ENTRY CODE 20
         SPACE
         DS   0D                    END OF CSECT
         EJECT
R0       EQU   0                    EQUATES FOR REGISTERS 0-15
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         TITLE '******** IKT09411:    GTTERM  - TERMINAL CONTROL MACRO *
                 *******'
IKT09411 CSECT
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS CSECT WAS WRITTEN BY GREG PRICE IN JANUARY 2003 FOR THE  */
*   /* ZP60009 USERMOD TO ADD THE GTTERM MACRO FUNCTION TO TSO/VTAM  */
*   /* ETV0108 WHICH IS SHIPPED WITH MVS 3.8J.                       */
*   /*                                                               */
*   /*****************************************************************/
         USING IKT09411,R12
         USING TSB,R5
         USING PSA,0
         B     @GTTERM
         DC    AL1(16)
         DC    CL16'IKT09411 ZP60009'
*   /*****************************************************************/
*   /*                                                               */
*   /* PARAMETER REGISTER 1 POINTS TO A PARAMETER LIST OF FROM 1 TO  */
*   /* 4 WORDS, EACH CONTAINING A POINTER TO AN OUTPUT AREA.  THE    */
*   /* PARAMETER LIST AND EACH OUTPUT AREA IS ACCESSED IN THE USER   */
*   /* KEY TO VERIFY USER AUTHORITY TO ACCESS THE AREAS.  THE LAST   */
*   /* PARAMETER LIST WORD SHOULD HAVE THE HIGH-ORDER BIT ON.        */
*   /*                                                               */
*   /*****************************************************************/
@GTTERM  LTR   R1,R1                       ANY PARAMETER PASSED?
         BNZ   HAVEPARM                    YES
MISSPARM LA    R15,12                      NO, MISSING PARAMETER
         BR    R14                         RETURN TO ISSUER
*   /*****************************************************************/
*   /*                                                               */
*   /* THE GTTERM MACRO IS ONLY VALID FOR DISPLAY STATION TERMINALS. */
*   /*                                                               */
*   /*****************************************************************/
HAVEPARM TM    TSBSTAT,TSBDSPLY            TERMINAL A DISPLAY STATION?
         BO    ISADSPLY                    YES
         LA    R15,8                       NO, WRONG TERMINAL TYPE
         BR    R14                         RETURN TO ISSUER
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PARAMETERS ARE OUTPUT AREAS FOR:                          */
*   /* (1) PRMSZE - PRIMARY SCREEN SIZE DIMENSIONS - 2 BYTES         */
*   /* (2) ALTSZE - ALTERNATE SCREEN SIZE DIMENSIONS - 2 BYTES       */
*   /* (3) ATTRIB - TERMINAL ATTRIBUTES - 4 BYTES                    */
*   /* (4) TERMID - TERMINAL LU NAME - 8 BYTES                       */
*   /*                                                               */
*   /*****************************************************************/
ISADSPLY L     R8,PSATOLD
         IC    R15,TCBPKF-TCB(,R8)
         SPKA  0(R15)                      GET INTO USER KEY
         SLR   R8,R8
         SLR   R9,R9
         SLR   R10,R10
         SLR   R11,R11
         L     R8,0(,R1)                   LOAD FIRST ADDRESS
         LTR   R8,R8
         BM    GOTPARMS                    ONLY ONE PARAMETER
         L     R9,4(,R1)                   LOAD SECOND ADDRESS
         LTR   R9,R9
         BM    GOTPARMS                    ONLY TWO PARAMETERS
         L     R10,8(,R1)                  LOAD THIRD ADDRESS
         LTR   R10,R10
         BM    GOTPARMS                    ONLY THREE PARAMETERS
         L     R11,12(,R1)                 LOAD FOURTH ADDRESS
GOTPARMS LA    R8,0(,R8)                   ENSURE ADDRESS FORMAT
         LA    R9,0(,R9)
         LA    R10,0(,R10)
         LA    R11,0(,R11)
         LTR   R8,R8                       FIRST ADDRESS PRESENT?
         BNP   *+10                        NO
         XC    0(2,R8),0(R2)               YES, CLEAR 2 BYTES
         LTR   R9,R9                       SECOND ADDRESS PRESENT?
         BNP   *+10                        NO
         XC    0(2,R9),0(R9)               YES, CLEAR 2 BYTES
         LTR   R10,R10                     THIRD ADDRESS PRESENT?
         BNP   *+10                        NO
         XC    0(4,R10),0(R10)             YES, CLEAR 4 BYTES
         LTR   R11,R11                     FOURTH ADDRESS PRESENT?
         BNP   *+10                        NO
         XC    0(8,R11),0(R11)             YES, CLEAR 8 BYTES
         SPKA  0                           REVERT TO KEY ZERO
*   /*****************************************************************/
*   /*                                                               */
*   /* TSO/VTAM REQUIRES THE FIRST PARAMETER (PRMSZE) BE PRESENT.    */
*   /*                                                               */
*   /*****************************************************************/
         LTR   R8,R8                       IS PRMSZE SPECIFIED?
         BNP   MISSPARM                    NO, RETURN CODE 12
         L     R15,TSBEXTNT                YES, POINT TO TSBX
         USING TSBX,R15
         ICM   R2,3,TSBPRMR                COPY PRIMARY ROWS+COLS
         BNZ   PRIMOKAY
         ICM   R2,3,MOD1DIMS               USE MODEL-1 DIMENSIONS
         CLC   TSBXTMBF,MOD1SIZE           REALLY A MODEL-1?
         BE    PRIMOKAY                    YES
         ICM   R2,3,MOD2DIMS               USE MODEL-2 DIMENSIONS
PRIMOKAY STCM  R2,3,0(R8)                  SET PRIMARY ROWS+COLS
         LTR   R9,R9                       IS ALTSZE SPECIFIED?
         BNP   ALTDONE                     NO
         ICM   R2,3,TSBALTR                COPY ALTERNATE ROWS+COLS
         BNZ   ALTOKAY
         ICM   R2,3,MOD1DIMS               USE MODEL-1 DIMENSIONS
         CLC   TSBXTMBF,MOD1SIZE           REALLY A MODEL-1?
         BE    ALTOKAY                     YES
         ICM   R2,3,MOD2DIMS               USE MODEL-2 DIMENSIONS
ALTOKAY  STCM  R2,3,0(R9)                  AET ALTERNATE ROWS+COLS
ALTDONE  LTR   R10,R10                     IS ATTRIB SPECIFIED?
         BNP   ATTRDONE                    NO
         SLR   R8,R8
         IC    R8,TSBTERM2
         LA    R9,TSBASCI7
         NR    R8,R9                       GET ASCII-7/ASCII-8 FLAGS
         SLL   R8,8                        SHIFT TO CORRECT BYTE
         TM    TSBFLG5,TSBVTAM             VTAM TERMINAL?
         BNO   *+8                         NO, HOW DID WE GET HERE?
         LA    R8,X'80'(,R8)               YES, SET FLAG BIT ON
         TM    TSBFLG5,TSBQRY              QUERY BIT ON?
         BNO   *+8                         NO
         LA    R8,X'01'(,R8)               YES, SET FLAG BIT ON
         TM    TSBFLG3,TSBNOBRK            BREAK NOT ALLOWED NOW?
         BNO   *+8                         NO
         LA    R8,X'40'(,R8)               YES, SET FLAG BIT ON
         TM    TSBXFLG1,TSBXASCI           ASCII TERMINAL?
         BNO   *+8                         NO
         LA    R8,X'02'(,R8)               YES, SET FLAG BIT ON
         L     R9,TSBXTVWA
         USING TVWA,R9
         TM    TVWAFLG3,TVWATRAN           TRANSLATE TABLE IN USE?
         BNO   *+8                         NO
         LA    R8,X'20'(,R8)               YES, SET FLAG BIT ON
         TM    TVWAFLG3,TVWATRDF           DEFAULT TRANSLATION?
         BNO   *+8                         NO
         LA    R8,X'10'(,R8)               YES, SET FLAG BIT ON
         TM    TVWAFLG5,TVWAFSM            IN FULLSCREEN MODE?
         BNO   *+8                         NO
         LA    R8,X'08'(,R8)               YES, SET FLAG BIT ON
         STCM  R8,15,0(R10)                SET ATTRIBUTES WORD
         DROP  R9                          TVWA
ATTRDONE LTR   R11,R11                     IS TERMID SPECIFIED?
         BNP   TERMDONE                    NO
         MVC   0(8,R11),TSBTRMID           YES, SHOW TERMINAL NAME
         DROP  R15                         TSBX
TERMDONE SLR   R15,R15                     ZERO RETURN CODE
         BR    R14                         RETURN TO ISSUER
         SPACE
MOD1SIZE DC    AL2(12*40)
MOD1DIMS DC    AL1(12,40)
MOD2DIMS DC    AL1(24,80)
@PATCH11 DC    6D'0'                       PATCH AREA
         SPACE
         PRINT NOGEN
         IHAPSA
         IKJTCB
         IKJTSB EXT=YES
         IKTTVWA
         SPACE
         END   IKT0009D,(C'PLS1425',0701,78290)
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
/*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  *
  IDENTIFY IKT0009D('ZP60009')
  IDENTIFY IKT09411('ZP60009')
++MOD(IKTXLOG) DISTLIB(AOST4).
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE 'EXTENDED LOGON ROUTINE'
*
*   MODIFIED BY GREG PRICE JANUARY 2003 FOR USERMOD ZP60009
*
*   /*****************************************************************/
*   /*                                                               */
*   /*   FIRSTLY PERFORM THE IBM SUPPLIED LOGIC                      */
*   /*                                                               */
*   /*****************************************************************/
IKTXLOG  CSECT
         USING IKTXLOG,R15
         B     @PROLOG
         DC    AL1(32)
         DC    CL16'IKTXLOG  ZP60009'
         DC    CL16' REWORK 20090601'
         DROP  R15
@PROLOG  STM   R14,R12,12(R13)
         LR    R12,R15
         USING IKTXLOG,R12
*
*   INBUF=TVWAVST                  INSERT ADDRESS OF LOGON BUFFER
*                                      IN PARAMETER
         USING PSA,0
         L     R15,0(,R1)          POINT TO PARAMETER
         L     R14,PSAAOLD
         USING ASCB,R14
         L     R3,ASCBTSB
         DROP  R14
         USING TSB,R3
         L     R4,TSBEXTNT
         USING TSBX,R4
         L     R5,TSBXTVWA
         USING TVWA,R5
         L     R0,TVWAVST
         ST    R0,0(,R15)          STORE ADDRESS INTO INBUF
*   /*****************************************************************/
*   /*                                                               */
*   /*   SECONDLY PERFORM THE LOGIC ADDED BY USERMOD ZP60009         */
*   /*                                                               */
*   /*   THIS EXTRA LOGIC IS ONLY FOR 3270 TERMINALS AND HAS         */
*   /*   BEEN ADDED TO FACILITATE ACCESS TO 3270 EXTENSIONS BY       */
*   /*   TSO APPLICATIONS.  THE PURPOSE OF THIS EXTRA LOGIC IS       */
*   /*   TO ASCERTAIN (A) THE PRIMARY AND ALTERNATE SCREEN SIZES     */
*   /*   AND (B) IF THE TERMINAL IS QUERYABLE.                       */
*   /*                                                               */
*   /*   THE RESULTS ARE STORED IN THE TSB, AND MADE AVAILABLE       */
*   /*   TO ISSUERS OF THE GTTERM MACRO.                             */
*   /*                                                               */
*   /*   FOR SNA 3270 SESSIONS THE SCREEN DIMENSIONS ARE INITIALLY   */
*   /*   COPIED FROM THE BIND, AND IF THE QUERY BIT IN THE BIND      */
*   /*   IS NOT SET, NO FURTHER ACTION IS TAKEN.                     */
*   /*                                                               */
*   /*   FOR NON-SNA SESSIONS, AND SNA SESSIONS WITH THE QUERY       */
*   /*   BIT SET IN THE BIND, THE FOLLOWING PROCESSING OCCURS.       */
*   /*                                                               */
*   /*   THE FIRST TPUT OF THE TSO SESSION IS ISSUED HERE.           */
*   /*   A FULLSCREEN TPUT IS USED TO CLEAR THE TERMINAL AID AND     */
*   /*   ENSURE THAT NO INPUT DATA IS PENDING FROM THE TERMINAL      */
*   /*   BUFFER.  FULLSCREEN MODE IS NOT TURNED ON TO AVOID THE      */
*   /*   REQUIREMENT OF AN ADDITIONAL INPUT FROM THE TERMINAL        */
*   /*   OPERATOR CAUSED BY VTAM PAGE PROTECTION ('***').  AS        */
*   /*   A RESULT, NOEDIT INPUT MODE IS ACTIVATED BY DIRECTLY        */
*   /*   SETTING THE FLAG, AND NOT BY AN STFSMODE MACRO.             */
*   /*                                                               */
*   /*   A NOEDIT TPUT IS THEN USED TO ISSUE THE QUERY TO THE        */
*   /*   TERMINAL.  A TGET MACRO IS USED TO GET THE RESPONSE.        */
*   /*   ABNORMAL TGET RETURN CODES TERMINATE THE QUERY PROCESS.     */
*   /*   IF THE RETURN CODE IS NORMAL NON-QUERY RESPONSES ARE        */
*   /*   DISCARDED AND THE TGET REISSUED.  ONLY THE IMPLICIT         */
*   /*   PARTITION SUB-FIELD OF THE QUERY RESPONSE IS EXAMINED,      */
*   /*   FROM WHICH THE PRIMARY AND ALTERNATE SCREEN SIZES ARE       */
*   /*   DISCOVERED.                                                 */
*   /*                                                               */
*   /*   UPON SUCCESSFULLY PROCESSING THE QUERY RESPONSE, THIS       */
*   /*   ROUTINE:                                                    */
*   /*   (1) REGISTERS THE PRIMARY AND ALTERNATE SCREEN SIZES        */
*   /*       IN THE TERMINAL STATUS BLOCK.                           */
*   /*   (2) SETS THE CURRENT SCREEN SIZE TO THE ALTERNATE SCREEN    */
*   /*       SIZE IF THE ALTERNATE SCREEN SIZE HAS AT LEAST 24       */
*   /*       LINES AND 80 COLUMNS.                                   */
*   /*   (3) SETS THE FLAG TO INSTRUCT THE TSO/VTAM 3270 SCREEN      */
*   /*       MANAGER TO RECHECK THE SCREEN DIMENSIONS IF THE         */
*   /*       SCREEN SIZE WAS SET.                                    */
*   /*   (4) SETS THE QUERY BIT ON.                                  */
*   /*   (5) ISSUES THE STLINENO LINE=1,MODE=OFF MACRO WHICH WILL    */
*   /*   (5.1) SET THE NEXT OUTPUT LINE FOR THE FIRST SCREEN LINE.   */
*   /*   (5.2) SET THE FLAG TO INSTRUCT THE TSO/VTAM 3270 SCREEN     */
*   /*         MANAGER TO FORMAT THE SCREEN FOR LINE MODE.           */
*   /*   (5.3) KEEP FULLSCREEN MODE OFF AND TURN OFF NOEDIT INPUT    */
*   /*         MODE.                                                 */
*   /*   (6) SETS THE KEYBOARD LOCKED FLAG SO A SUBSEQUENT UNLOCK    */
*   /*       REQUEST WILL NOT BE GENERATED.                          */
*   /*   (7) RESETS THE UNLOCK REQUESTED FLAG SO LOGON MESSAGES      */
*   /*       CAN BE OUTPUT WITHOUT BEING QUEUED BEHIND AN EXTRA      */
*   /*       TERMINAL INPUT REQUEST.                                 */
*   /*                                                               */
*   /*****************************************************************/
*
*   DETERMINE IF USING A 3270 DISPLAY
*
         TM    TSBSTAT,TSBINUSE+TSBDSPLY+TSB3270
         BNO   FASTEXIT            NOT EXPECTED TERMINAL TYPE
         TM    TSBSTAT,TSBDISC     TERMINAL DISCONNECTED?
         BO    FASTEXIT            YES, CANNOT TALK TO TERMINAL
         CLI   TSBLNNO,0           WOULD GTSIZE SAY ZERO LINES?
         BE    FASTEXIT            YES, TERMINAL IS NOT A SCREEN
*
*   DETERMINE IF SNA SESSION
*
         ICM   R0,15,TSBXBIND+8    SNA BIND PRESENT?
         BZ    QUERYTRM            NO, ALWAYS QUERY IF NON-SNA
*
*   SET SCREEN DIMENSIONS FROM SNA BIND
*
         MVC   TSBPRMR(4),TSBXBIND+19
*
*   DETERMINE IF SNA TERMINAL IS QUERYABLE
*
         TM    TSBXBIND+14,X'80'   QUERY BIT SET?
         BNO   FASTEXIT            NO, DO NOT QUERY TERMINAL
*
*   ACQUIRE WORKING STORAGE
*
QUERYTRM L     R0,@SIZDATD
         GETMAIN R,LV=(0)
         ST    R13,4(,R1)          CHAIN SAVE AREAS
         ST    R1,8(,R13)
         LR    R13,R1
         USING @DATD,R13
*
*   ISSUE QUERY
*
         MVC   TPGPL,TPG           INITIALISE TPG PLIST
         OI    TSBFLG5,TSBNEDIT    ENSURE INPUT NOT EDITED
         LA    R1,RESETAID         RESET THE TERMINAL AID
         LA    R0,L'RESETAID             BEFORE ISSUING THE
         ICM   R1,8,=X'0B'               READ PARTITION
         TPUT  (1),(0),R           TPUT FULLSCR,WAIT,HOLD
         TCLEARQ INPUT             FLUSH ANY TYPE-AHEAD TEXT
         TPG   MF=(E,TPGPL)        ISSUE QUERY TO TSO TERMINAL
         LTR   R15,R15             WAS TPG ISSUED SUCCESSFULLY?
         BNZ   QUERYX              NO, DO NOT EXPECT A RESPONSE
*
*   READ QUERY RESPONSE
*
QUERYGET LA    R1,REPLY            POINT TO TGET BUFFER FOR RESPONSE
         LA    R0,REPLYLEN                  FROM READ PARTITION
         ICM   R1,8,=X'81'         FLAGS FOR TGET ASIS,WAIT
         TGET  (1),(0),R           TGET ASIS,WAIT
         CH    R15,=H'8'           ATTENTION INTERRUPT?
         BE    QUERYX              YES, ASSUME QUERY NOT FUNCTIONAL
         CH    R15,=H'16'          TGET PARAMETER ERROR?
         BE    QUERYX              YES, ASSUME QUERY NOT FUNCTIONAL
         CH    R15,=H'20'          TERMINAL DISCONNECTED?
         BE    QUERYX              YES, ASSUME QUERY NOT FUNCTIONAL
         CLI   REPLY,X'88'         QUERY RESPONSE AID?
         BE    QUERYGOT            YES
         CLI   REPLY,X'F3'         PF3?
         BE    QUERYX              YES, EXIT
         CLI   REPLY,X'C3'         PF15?
         BE    QUERYX              YES, EXIT
*
*   DISPLAY INFORMATION ABOUT (NON-QUERY) INPUT DATA
*
         MVC   TPGPL,REPLY         PRESERVE INPUT DATA HEADER
         MVC   REPLY(RCMSGLEN),RCMSG
         STC   R15,@DATD           SHOW RETURN CODE
         UNPK  REPLY+RCMSGRC(3),@DATD(2)
         TR    REPLY+RCMSGRC(2),HEX-240
         MVI   REPLY+RCMSGRC+2,X'7D'
         STH   R1,@DATD            SHOW TGET INPUT DATA LENGTH
         UNPK  REPLY+RCMSGLN(5),@DATD(3)
         TR    REPLY+RCMSGLN(4),HEX-240
         MVI   REPLY+RCMSGLN+4,X'7D'
         LA    R15,REPLY+RCMSGLEN  POINT TO MESSAGE AREA
         LA    R14,TPGPL           POINT TO PRESERVED DATA
         LA    R0,TPGL             GET PRESERVED DATA LENGTH
         CR    R1,R0               SAVED DATA TRUNCATED?
         BNH   UNPKLOOP            NO
         LR    R1,R0               YES, REDUCE LENGTH
UNPKLOOP UNPK  0(3,R15),0(2,R14)   UNPACK DATA
         TR    0(2,R15),HEX-240    TRANSLATE DATA
         LA    R15,2(,R15)         ADJUST MESSAGE POINTER
         LA    R14,1(,R14)         ADJUST DATA POINTER
         BCT   R1,UNPKLOOP         SHUFFLE THROUGH DATA BYTES
         LA    R1,REPLY            POINT TO MESSAGE
         MVI   0(R15),X'7D'
         LA    R0,1(,R15)
         SR    R0,R1               GET MESSAGE LENGTH
         TPUT  (1),(0),R           DISPLAY DATA ABOUT INPUT DATA
         LA    R1,LPMSG            DISPLAY TRAPDOOR EXIT PLAN
         LA    R0,LPMSGLEN
         TPUT  (1),(0),R
         B     QUERYGET            SEE IF NEXT I/O IS THE GO
*
*   PARSE QUERY RESPONSE
*
QUERYGOT LA    R15,REPLY+1         POINT PAST AID
         SLR   R0,R0               CLEAR FOR INSERT
         BCT   R1,QUERYPRS         DECREMENT FOR AID
         B     QUERYX              ONLY AID WAS RETURNED
QUERYPRS CLI   2(R15),X'81'        QUERY REPLY ID?
         BNE   QUERYX              NO, GIVE UP
         CLI   3(R15),X'A6'        QUERY IMPLICIT PARTITION ID?
         BE    SETSIZES            YES
         ICM   R0,3,0(R15)         NO, GET SUB-FIELD LENGTH
         BZ    QUERYX              AVOID INFINITE LOOP
         ALR   R15,R0              POINT TO NEXT SUB-FIELD
         SR    R1,R0               ADJUST REMAINING LENGTH
         BP    QUERYPRS            CONTINUE PARSING OF REPLY
         B     QUERYX              REQUIRED SUB-FIELD NOT FOUND
*
*   ASCERTAIN PRIMARY AND ALTERNATE SCREEN SIZE DIMENSIONS
*
SETSIZES CLI   6(R15),11           EXPECTED PARAMETER LENGTH?
         BNE   QUERYX              NO, GIVE UP
         CLI   7(R15),1            IMPLICIT PARTITION SIZES?
         BNE   QUERYX              NO, GIVE UP
         ICM   R0,4,10(R15)        GET WIDTH OF PRIMARY SIZE
         ICM   R0,8,12(R15)        GET DEPTH OF PRIMARY SIZE
         ICM   R0,1,14(R15)        GET WIDTH OF ALTERNATE SIZE
         ICM   R0,2,16(R15)        GET DEPTH OF ALTERNATE SIZE
         ST    R0,TSBPRMR          SET INTO TSB
         CLI   TSBALTR,24          AT LEAST 24 ROWS?
         BL    QUERYOK             NO, MAKE NO MORE CHANGES
         CLI   TSBALTC,80          AT LEAST 80 COLUMNS?
         BL    QUERYOK             NO, MAKE NO MORE CHANGES
         STCM  R0,1,TSBLNSZ        SET NEW SCREEN COLUMN COUNT
         STCM  R0,2,TSBLNNO        SET NEW SCREEN LINE COUNT
         OI    TVWAFLG1,TVWAXSCD   EXAMINE SCREEN DIMENSIONS
QUERYOK  OI    TSBFLG5,TSBQRY      SET THE QUERY BIT ON
*
*   CLEAR THE TERMINAL READY FOR LINE MODE USAGE
*
QUERYX   STLINENO LINE=1,MODE=OFF  CLEAR AND FORMAT THE SCREEN
*                                        AND RESET NOEDIT MODE
         OI    TVWAFLG4,TVWAKBDL   REMEMBER KEYBOARD IS LOCKED
         NI    TVWAFLG1,255-TVWAULK  AND NO UNLOCK REQUEST YET
*
*   RELEASE WORKING STORAGE AND EXIT
*
         LR    R1,R13              POINT TO WORKING STORAGE
         L     R0,@SIZDATD         GET WORKING STORAGE SIZE
         L     R13,4(,R13)         POINT TO CALLER'S SAVE AREA
         FREEMAIN R,LV=(0),A=(1)   FREE WORKING STORAGE
FASTEXIT LM    R14,R12,12(R13)     RESTORE REGISTERS
         BR    R14                 RETURN TO CALLER
         EJECT
@DATA    DS    0H
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
TPG      TPG   QUERY,L'QUERY,NOEDIT,WAIT,HOLD,MF=L
TPGL     EQU   *-TPG
*              ESCAPE+ERASE/WRITE+WCC+SBA(LAST)+SF(INLO)+SBA(HOME)+IC
RESETAID DC    X'27F5C3115D7F1D4011404013'
QUERY    DC    X'F3000501FF02'    WRITE STRUCTURED FIELD + QUERY
LPMSG    DC    C'IF LOOPING USE PF3/15 TO END'
LPMSGLEN EQU   *-LPMSG
RCMSG    DC    C'IKTXLOG TGET RC=X'''
RCMSGRC  EQU   *-RCMSG
         DC    C'XX'',LEN=X'''
RCMSGLN  EQU   *-RCMSG
         DC    C'XXXX'',DATA=X'''
RCMSGLEN EQU   *-RCMSG
         LTORG
         DS    0D
HEX      DC    CL16'0123456789ABCDEF'
@PATCH   DC    10D'0'
@ENDDATA DS    0D                 END OF CSECT
@DATD    DSECT
         DS    18F
TPGPL    DS    XL(TPGL)
REPLY    DS    0F
         ORG   @DATD+4096
         DS    0D
REPLYLEN EQU   *-REPLY
@ENDDATD EQU   *
         SPACE
R0       EQU   0                   EQUATES FOR REGISTERS 0-15
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
         PRINT NOGEN
         IHAPSA
         IHAASCB
         IKJTSB EXT=YES
         IKTTVWA
         SPACE
         END   IKTXLOG
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
  IDENTIFY IKTXLOG('ZP60009')
++MOD(IKT3270I) DISTLIB(AOST3).
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE '*** IKT3270I: INPUT DATA HANDLING ROUTINE ***          *
                        '
*
*   MODIFIED BY GREG PRICE JANUARY 2003 FOR USERMOD ZP60009
*
IKT3270I CSECT
         USING IKT3270I,R15
         B     @PROLOG
         DC    AL1(16)
         DC    CL16'IKT3270I  84.045'
         DROP  R15                         IKT3270I
@PROLOG  STM   R14,R12,12(R13)             SAVE REGS
         BALR  R5,0                        ADDRESS SET
         USING *,R5
         USING PSA,0
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         L     R7,TSBEXTNT-TSB(,R12)
         L     R9,TSBXTVWA-TSBX(,R7)
         USING TVWA,R9
         L     R6,TVWATIMW                 TIM WORK AREA ADDRESS
         CLI   TSBPRMR-TSB(R12),0          FIELD POPULATED?     ZP60009
         BE    ROWSOKAY                    NO, PHYSLNNO OKAY    ZP60009
         MVC   2319(1,R6),TSBPRMR-TSB(R12) YES, USE REAL DEPTH  ZP60009
         TM    TVWAFLG6,X'01'              CHECK TVWAALTS       ZP60009
         BNO   ROWSOKAY                    USE PRIMARY DEPTH    ZP60009
         MVC   2319(1,R6),TSBALTR-TSB(R12) USE ALTERNATE DEPTH  ZP60009
ROWSOKAY EQU   *                           PHYSLNNO NOW SET     ZP60009
*  TIMLNNO = MAX(2,MIN(TSBLNNO,PHYSLNNO));                 /*@ZA13627*/
         SLR   R8,R8
         IC    R8,TSBLNNO-TSB(,R12)
         L     R7,2316(,R6)                PHYSLNNO
         CR    R8,R7
         BNH   A000042
         LR    R8,R7
A000042  LA    R7,2
         CR    R8,R7
         BNL   A00004E
         LR    R8,R7
A00004E  ST    R8,2312(,R6)                TIMLNNO
         TM    4(R12),X'08'
         BNO   A000096
         LA    R12,2348
         LR    R8,R6
         ALR   R8,R12
         CLC   48(4,R8),FW1500
         BH    A000076
         ALR   R12,R6
         TM    18(R12),X'C0'
         BZ    A00007E
A000076  OI    448(R6),X'02'
         B     A000096
A00007E  OI    448(R6),X'40'
         NI    448(R6),X'FD'
         NI    TVWAFLG4,255-TVWANOFB
         NI    TVWAFLG2,255-TVWABKMG
         MVI   TVWATQL1,0
         MVI   TVWATQL2,0
A000096  TM    TVWAFLG2,TVWAPGN
         BNZ   A0002D4
         LA    R12,2348
         ALR   R12,R6
         TM    16(R12),X'08'
         BNO   A0000B0
         BAL   R14,ASCITRAN                PERFORM
*        /************************************************************/
*        /*  THE FOLLOWING CODE CHECKS THE AVAILIBILITY OF A USER    */
*        /*  EXIT. IF THE ADDRESS OF IKTIDSX2 IS NOT ZERO, THEN THE  */
*        /*  USER IS GIVEN CONTROL WITH REG0 CONTAINING THE ADDRESS  */
*        /*  OF THE DATA TO BE SCANNED AND REG1 CONTAINING THE       */
*        /*  LENGTH OF THAT DATA.                                    */
*        /************************************************************/
A0000B0  L     R12,IKTIDSX2
         LTR   R12,R12
         BZ    A0000F2
         LA    R12,2348
         LR    R8,R6
         ALR   R8,R12
         L     R0,32(,R8)
         LA    R8,1500
         ALR   R12,R6
         C     R8,48(,R12)
         BNL   A0000DA
         LR    R1,R8
         B     A0000E4
A0000DA  LA    R12,2348
         ALR   R12,R6
         L     R1,48(,R12)
A0000E4  LR    R2,R13
         LA    R13,2216(,R6)
         L     R15,IKTIDSX2
         BALR  R14,R15                     STD LINKAGE
         LR    R13,R2
*/********************************************************************/
*/*    AT THIS POINT THE INPUT DATA HAS BEEN TRANSLATED IF NECESSARY */
*/*    NOW THE DATA WILL BE SCANNED FOR INPUT LINE DELIMITERS.       */
*/*            THE DATA WILL BE BROKEN INTO LINE SEGMENTS AND        */
*/*    PLACED ON THE INPUT QUEUE.                                    */
*/********************************************************************/
*
*        /************************************************************/
*        /* THIS CODE WILL HELP TOM IN THE PLACEMENT OF THE NEXT     */
*        /* ATTRIBUTE BYTE WHEN VTIOC IS DOING THE SCREEN MANAGEMENT */
*        /************************************************************/
A0000F2  TM    448(R6),X'02'
         BNZ   A000106
         TM    TVWAFLG5,TVWASCAN
         BNO   A000106
         OI    TVWAFLG4,TVWADARC
A000106  LA    R12,2348
         LR    R8,R6
         ALR   R8,R12
         L     R4,32(,R8)
         SLR   R8,R8
         ST    R8,2136(,R6)
         ST    R8,2144(,R6)
         LA    R8,1500
         ALR   R12,R6
         C     R8,48(,R12)
         BNL   A000132
         ST    R8,2120(,R6)
         B     A000140
A000132  LA    R12,2348
         ALR   R12,R6
         L     R12,48(,R12)
         ST    R12,2120(,R6)
A000140  TM    448(R6),X'02'
         BNZ   A00014C
         BAL   R14,HEADPROC                PERFORM
         EJECT
*      /**************************************************************/
*      /*  NOW THE DATA WILL BE SCANNED FOR THE LINE LENGTH          */
*      /*  WHEN THE LINE LENGTH IS FOUND, THE DATA WILL BE PUT ON    */
*      /*  THE INPUT QUEUE PRECEDED BY THE HEADER INFORMATION.       */
*      /*  SINCE DATA CAN ONLY BE SCANNED IN 256 BYTE LENGTHS,       */
*      /*  THIS VALUE WILL BE USED WHEN THE REMAINING DATA EXCEEDS   */
*      /*  THE 256 BYTE MAXIMUM.                                     */
*      /**************************************************************/
A00014C  NI    448(R6),X'7F'
         SLR   R1,R1
         ST    R4,2140(,R6)
A000156  LA    R12,256
         L     R8,2120(,R6)
         SL    R8,2136(,R6)
         CR    R8,R12
         BNH   A000170
         ST    R12,2148(,R6)
         B     A00017C
A000170  L     R12,2120(,R6)
         SL    R12,2136(,R6)
         ST    R12,2148(,R6)
A00017C  L     R12,2148(,R6)
         LTR   R12,R12
         BNP   NODELIM
         L     R12,PSAAOLD                 PSA REFERENCE        ZP60009
         L     R12,ASCBTSB-ASCB(,R12)                           ZP60009
         TM    TSBFLG5-TSB(R12),TSBNEDIT   IN NOEDIT MODE?      ZP60009
         BO    NODELIM                     YES, FIELD MARK OKAY ZP60009
         L     R3,2148(,R6)
         BCTR  R3,0
         EX    R3,A00098A
         BC    8,NODELIM
         OI    448(R6),X'80'
         LR    R12,R1
         SLR   R12,R4
         LR    R8,R12
         AL    R8,2144(,R6)
         ST    R8,2144(,R6)
         ST    R12,2148(,R6)
         B     DELIM
NODELIM  L     R12,2148(,R6)
         AL    R12,2144(,R6)
         ST    R12,2144(,R6)
DELIM    L     R12,2148(,R6)
         ALR   R4,R12
         AL    R12,2136(,R6)
         ST    R12,2136(,R6)
         TM    448(R6),X'80'
         BO    A0001DA
         CLC   2136(4,R6),2120(R6)
         BNE   A000156
*         /***********************************************************/
*         /* THIS MARKS THE END OF THE DO WHILE TO SCAN FOR DELIMITER*/
*         /* EITHER A DELIMITER WAS FOUND OR ALL THE DATA IN THE     */
*         /* BUFFER WAS PROCESSED.                                   */
*         /***********************************************************/
A0001DA  TM    448(R6),X'80'
         BNO   A00023C
         TM    437(R6),X'20'
         BNO   A0001EE
         OI    448(R6),X'01'
A0001EE  OI    437(R6),X'80'
         NI    437(R6),X'DF'
         TM    448(R6),X'01'
         BNZ   A000214
         LH    R12,450(,R6)
         LR    R8,R12
         AL    R8,2144(,R6)
         STH   R8,434(,R6)
         STC   R12,438(,R6)
         B     A000220
A000214  L     R12,2144(,R6)
         STH   R12,434(,R6)
         MVI   438(R6),X'00'
A000220  CLI   0(R4),X'1E'
         BNE   A000234
         L     R12,PSAAOLD                 PSA REFERENCE        ZP60009
         L     R12,ASCBTSB-ASCB(,R12)                           ZP60009
         TM    TSBFLG5-TSB(R12),TSBNEDIT   IN NOEDIT MODE?      ZP60009
         BO    A000234                     YES, FIELD MARK OKAY ZP60009
         LA    R12,1
         AL    R12,2136(,R6)
         ST    R12,2136(,R6)
A000234  BAL   R14,ADDEL                   PERFORM
         B     A0002B0
A00023C  TM    437(R6),X'20'
         BNO   A000248
         OI    448(R6),X'01'
A000248  TM    448(R6),X'01'
         BNZ   A000266
         LH    R12,450(,R6)
         LR    R8,R12
         AL    R8,2144(,R6)
         STH   R8,434(,R6)
         STC   R12,438(,R6)
         B     A000272
A000266  MVI   438(R6),X'00'
         L     R12,2144(,R6)
         STH   R12,434(,R6)
A000272  LA    R12,2348
         LR    R8,R6
         ALR   R8,R12
         L     R8,48(,R8)
         C     R8,2120(,R6)
         BH    A000290
         ALR   R12,R6
         TM    18(R12),X'C0'
         BZ    A0002A4
A000290  L     R12,2120(,R6)
         ST    R12,2136(,R6)
         OI    437(R6),X'20'
         NI    437(R6),X'7F'
         B     A0002AC
A0002A4  OI    437(R6),X'80'
         NI    437(R6),X'DF'
A0002AC  BAL   R14,ADDEL                   PERFORM
A0002B0  LA    R12,2348
         ALR   R12,R6
         L     R4,32(,R12)
         AL    R4,2136(,R6)
         CLC   2136(4,R6),2120(R6)
         BE    A0002D0
         TM    448(R6),X'10'
         BNO   A00014C
A0002D0  B     A00033C
A0002D4  OI    448(R6),X'10'
         LA    R12,2348
         ALR   R12,R6
         L     R12,48(,R12)
         LA    R8,1500
         CR    R12,R8
         BNH   A0002EE
         LR    R12,R8
A0002EE  ST    R12,2120(,R6)
         MVI   432(R6),X'01'
         MVI   438(R6),X'00'
         OI    437(R6),X'80'
         NI    437(R6),X'DF'
         MVC   434(2,R6),HW1
         LR    R2,R13
         LA    R12,428(,R6)
         ST    R12,404(,R6)
         LA    R1,404(,R6)
         LA    R13,2216(,R6)
         L     R12,CVTPTR                  CVT ADDRESS
         L     R12,CVTTCASP-CVT(,R12)
         L     R15,TCASIQM-TCAST(,R12)
         BALR  R14,R15                     STD LINKAGE
         LR    R13,R2
         CLI   433(R6),X'01'
         BNE   A00033C
         L     R12,428(,R6)
         MVC   0(1,R12),TVWARSHW
*      /**************************************************************/
*      /*  AT THIS POINT THE INPUT DATA STREAM HAS BEEN SCANNED AND  */
*      /*  EITHER ALL THE AVAILABLE DATA HAS BEEN PUT ON THE INPUT Q */
*      /*  OR WE HAVE FALLEN THROUGH THE PROCESS LOOP DUE TO AN ERROR*/
*      /*  THE FIRST CHECK MADE IS TO DETERMINE IF ALL THE PROCESSING*/
*      /*  WAS SUCCESSFUL.                                           */
*      /**************************************************************/
A00033C  TM    448(R6),X'10'
         BNZ   A00038C
         LA    R12,2348
         LR    R8,R6
         ALR   R8,R12
         L     R8,48(,R8)
         C     R8,2120(,R6)
         BH    A000362
         ALR   R12,R6
         TM    18(R12),X'C0'
         BZ    A00036A
A000362  OI    448(R6),X'02'
         B     A0003CA
A00036A  NI    448(R6),X'FD'
         NI    TVWAFLG4,255-TVWANOFB
*               IF TVWALNCT > TIMLNNO THEN                 /*@ZA13627*/
         SLR   R12,R12
         IC    R12,TVWALNCT
         C     R12,2312(,R6)
         BNH   A000388
         MVI   TVWALNCT,1                  TVWALNCT=1
         OI    TVWAFLG4,TVWAFMSC
A000388  B     A0003CA
A00038C  LA    R12,2348
         LR    R8,R6
         ALR   R8,R12
         L     R8,48(,R8)
         C     R8,2120(,R6)
         BH    A0003AA
         ALR   R12,R6
         TM    18(R12),X'C0'
         BZ    A0003B2
A0003AA  OI    448(R6),X'02'
         B     A0003B6
A0003B2  NI    448(R6),X'FD'
A0003B6  NI    TVWAFLG4,255-TVWANOFB
         NI    TVWAFLG2,255-TVWABKMG
         MVI   TVWATQL1,0
         MVI   TVWATQL2,0
         OI    448(R6),X'40'
A0003CA  TM    448(R6),X'10'
         BNZ   A0003DA
         TM    448(R6),X'02'
         BO    A000414
A0003DA  L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         TM    41(R12),X'40'
         BNO   A000414
         LR    R2,R13
         LA    R0,8
         L     R1,A0009CC
         LA    R13,2048
         L     R12,CVTPTR                  CVT ADDRESS
         L     R12,CVTABEND-CVT(,R12)
         L     R15,SCVTSTAT-SCVTSECT(,R12)
         BALR  R14,R15                     STD LINKAGE
         LR    R13,R2
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         NI    41(R12),X'BF'
A000414  LM    R14,R12,12(R13)             RESTORE REGS
         BR    R14                         EXIT
         EJECT
*         /***********************************************************/
*         /* THE FOLLOWING CODE WILL CONVERT THE DATA IN THE INPUT   */
*         /* BUFFER FROM ASCII TO EBCDIC. THE LENGTH OF THE DATA     */
*         /* TO BE CONVERTED CAN NOT EXCEED THE BUFFER SIZE, EVEN    */
*         /* THOUGH RPLBUFL MAY INDICATE THAT ADDITIONAL DATA IS     */
*         /* WAITING TO BE RECEIVED. THE DATA WILL BE CONVERTED IN   */
*         /* 256 BYTE INCREMENTS UNTIL REMAINING DATA IS LESS THAN   */
*         /* 256 BYTES.                                              */
*         /* COUNT WILL CONTAIN THE LENGTH TO  BE TRANSLATED         */
*         /* VALUE WILL BE USED TO SUBSTRING THE TRANSLATE INSTRUCT  */
*         /***********************************************************/
ASCITRAN LA    R15,2348
         ALR   R15,R6
         L     R15,48(,R15)
         C     R15,FW1500
         BH    A000434
         ST    R15,2120(,R6)
         B     A00043A
A000434  MVC   2120(4,R6),FW1500
A00043A  NI    448(R6),X'FB'
         LA    R15,2348
         ALR   R15,R6
         L     R4,32(,R15)
         B     A000486
A00044C  LA    R15,256
         L     R12,2120(,R6)
         CR    R12,R15
         BNH   A000468
         ST    R15,2148(,R6)
         SLR   R12,R15
         ST    R12,2120(,R6)
         B     A000474
A000468  L     R15,2120(,R6)
         ST    R15,2148(,R6)
         OI    448(R6),X'04'
A000474  L     R15,2148(,R6)
         BCTR  R15,0
         L     R12,TVWAATBI
         EX    R15,A000990
         AL    R4,2148(,R6)
A000486  TM    448(R6),X'04'
         BZ    A00044C
         BR    R14                         EXIT ASCITRAN
         EJECT
*         /***********************************************************/
*         /* THE SAME PROCESS THAT WAS FOLLOWED FOR ASCII TRANSLATION*/
*         /* WILL BE FOLLOWED FOR USER TABLE TRANSLATION             */
*         /***********************************************************/
USERTRAN L     R15,2320(,R6)
         L     R3,2140(,R6)
         ALR   R3,R15
         LCR   R15,R15
         AL    R15,2144(,R6)
         ST    R15,2124(,R6)
         NI    448(R6),X'FB'
         LTR   R15,R15
         BP    A0004B2
         OI    448(R6),X'04'
A0004B2  B     A000556
A0004B6  SLR   R1,R1
         SLR   R2,R2
         LA    R15,256
         L     R12,2124(,R6)
         CR    R12,R15
         BNH   A0004D6
         ST    R15,2148(,R6)
         SLR   R12,R15
         ST    R12,2124(,R6)
         B     A0004E4
A0004D6  L     R15,2124(,R6)
         ST    R15,2148(,R6)
         SLR   R15,R15
         ST    R15,2124(,R6)
A0004E4  L     R15,2148(,R6)
         BCTR  R15,0
         EX    R15,A000996
         LTR   R2,R2
         BZ    A00050C
         SLR   R1,R3
         LR    R15,R1
         ALR   R15,R2
         LCR   R15,R15
         AL    R15,2148(,R6)
         AL    R15,2124(,R6)
         ST    R15,2124(,R6)
         ST    R1,2148(,R6)
A00050C  SLR   R15,R15
         L     R12,2124(,R6)
         CR    R12,R15
         BH    A000526
         LPR   R12,R12
         ST    R12,2320(,R6)
         ST    R15,2124(,R6)
         OI    448(R6),X'04'
A000526  L     R15,2148(,R6)
         LTR   R15,R15
         BZ    A00053E
         L     R15,2148(,R6)
         BCTR  R15,0
         L     R12,TVWATABI
         EX    R15,A00099C
A00053E  LTR   R2,R2
         BNZ   A00054C
         AL    R3,2148(,R6)
         B     A000556
A00054C  LR    R15,R3
         AL    R15,2148(,R6)
         ALR   R15,R2
         LR    R3,R15
A000556  TM    448(R6),X'04'
         BZ    A0004B6
         BR    R14                         EXIT USERTRAN
         EJECT
*        /************************************************************/
*        /*  CHECK THAT THIS WAS THE PRIMARY RECEIVE TO GET THE DATA */
*        /*  IF REC2FLG=1 THEN A SUBSEQUENT RECEIVE WAS NEEDED       */
*        /*  TO RECEIVE ALL THE DATA FROM THE TERMINAL.              */
*        /************************************************************/
HEADPROC SLR   R15,R15
         STH   R15,450(,R6)
         L     R15,2120(,R6)
         C     R15,FW3
         BNL   A00058C
         LR    R12,R15
         BCTR  R12,0
         EX    R12,A0009A2
         STH   R15,450(,R6)
         ALR   R4,R15
         AL    R15,2136(,R6)
         ST    R15,2136(,R6)
         B     A0005AA
A00058C  MVC   452(3,R6),0(R4)
         LA    R15,3
         LH    R12,450(,R6)
         ALR   R12,R15
         STH   R12,450(,R6)
         ALR   R4,R15
         AL    R15,2136(,R6)
         ST    R15,2136(,R6)
A0005AA  L     R15,2136(,R6)
         C     R15,2120(,R6)
         BNL   A0005DA
         CLI   0(R4),X'11'
         BNE   A0005DA
         MVC   455(3,R6),0(R4)
         LA    R12,3
         LH    R8,450(,R6)
         ALR   R8,R12
         STH   R8,450(,R6)
         ALR   R4,R12
         ALR   R15,R12
         ST    R15,2136(,R6)
A0005DA  BR    R14                         EXIT HEADPROC
         EJECT
*/********************************************************************/
*/*    THE ADDEL ROUTINE IS CALLED TO PLACE INCOMING DATA FROM THE   */
*/*    TERMINAL ON THE INPUT QUEUE, ONE LINE AT A TIME.              */
*/*    NOADDEL IS CHECKED TO SEE IF THE DATA SHOULD BE ADDED TO THE  */
*/*    QUEUE, LINE PROMPTING IS HANDLED, AND THE RETURN CODE FROM    */
*/*    THE QUEUE MANAGER IS CHECKED TO ASSURE A SUCCESSFUL ADD.      */
*/********************************************************************/
ADDEL    ST    R14,2288(,R6)
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         TM    TSBFLG2-TSB(R12),TSBAUTON
         BNO   A000640
         LH    R8,434(,R6)
         CH    R8,450(,R6)
         BH    A00061C
         TM    437(R6),X'20'
         BNZ   A00061C
         TM    448(R6),X'01'
         BNZ   A00061C
         NI    437(R6),X'BF'
         NI    16(R12),X'BF'
         NI    TVWAFLG1,255-TVWAULK
         B     A000640
A00061C  L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         TM    16(R12),X'10'
         BNO   A00063C
         TM    437(R6),X'20'
         BNZ   A00063C
         OI    437(R6),X'40'
         B     A000640
A00063C  NI    437(R6),X'BF'
A000640  MVI   432(R6),X'01'
         LR    R2,R13
         LA    R12,428(,R6)
         ST    R12,404(,R6)
         LA    R1,404(,R6)
         LA    R13,2216(,R6)
         L     R12,CVTPTR                  CVT ADDRESS
         L     R12,CVTTCASP-CVT(,R12)
         L     R15,TCASIQM-TCAST(,R12)
         BALR  R14,R15                     STD LINKAGE
         LR    R13,R2
         NI    448(R6),X'FE'
         CLI   433(R6),X'01'
         BNE   A00071C
         CLI   438(R6),X'00'
         BNH   A00068A
         L     R12,428(,R6)
         SLR   R8,R8
         IC    R8,438(,R6)
         BCTR  R8,0
         EX    R8,A0009A8
A00068A  L     R12,2144(,R6)
         LTR   R12,R12
         BNP   A0006B6
         TM    TVWAFLG3,TVWATRAN
         BNO   A0006A0
         BAL   R14,USERTRAN                PERFORM
A0006A0  SLR   R0,R0
         IC    R0,438(,R6)
         AL    R0,428(,R6)
         L     R1,2144(,R6)
         L     R2,2140(,R6)
         LR    R3,R1
         MVCL  R0,R2
A0006B6  NI    448(R6),X'EF'
         L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         TM    16(R12),X'40'
         BNO   A0006FA
         TM    16(R12),X'10'
         BNO   A0006EE
         TM    437(R6),X'20'
         BNZ   A0006EA
         L     R8,48(,R12)
         AL    R8,52(,R12)
         ST    R8,48(,R12)
         OI    16(R12),X'04'
A0006EA  B     A0006FA
A0006EE  L     R12,PSAAOLD                 PSA REFERENCE
         L     R12,ASCBTSB-ASCB(,R12)
         OI    16(R12),X'04'
A0006FA  TM    TVWAFLG5,TVWAFSM
         BNO   A000714
         TM    TVWAFLG5,TVWAWO
         BNZ   A000714
         SLR   R12,R12
         ST    R12,2144(,R6)
         B     A000724
A000714  BAL   R14,LINECNT                 PERFORM
         B     A000724
A00071C  OI    448(R6),X'10'
         OI    TVWAFLG2,TVWAERMG
A000724  L     R14,2288(,R6)
         BR    R14                         EXIT ADDEL
         EJECT
* /*******************************************************************/
* /*  LINECNT IS THE ROUTINE THAT WILL RECEIVE CONTROL WHEN FULL     */
* /*  SCREEN MODE IS NOT IN EFFECT. THE INPUT LINES WILL BE INCRE-   */
* /*  MENTED AS DATA IS RECEIVED. IF THE BYPASS FLAG IS NOT ON, THE  */
* /*  LINE COUNT IS CHECKED AND WHEN WE HAVE REACHED THE LAST TWO    */
* /*  LINES OF DATA ON THE SCREEN, THE DATA WILL BE SAVED AND FLASHED*/
* /*  BACK TO THE TERMINAL USER, EXCEPT IN FULLSCREEN  PROCESSING    */
* /*******************************************************************/
LINECNT  L     R15,PSAAOLD                 PSA REFERENCE
         L     R15,ASCBTSB-ASCB(,R15)
         L     R15,TSBEXTNT-TSB(,R15)
         CLC   74(2,R15),HW480
         BNE   A00074A
         MVC   2128(4,R6),FW40
         B     A000750
A00074A  MVC   2128(4,R6),FW80
         CLI   TSBPRMC-TSB(R15),0          FIELD POPULATED?     ZP60009
         BE    A000750                     NO                   ZP60009
         MVC   2131(1,R6),TSBPRMC-TSB(R15) YES, USE REAL WIDTH  ZP60009
         TM    TVWAFLG6,X'01'              CHECK TVWAALTS       ZP60009
         BNO   A000750                     USE PRIMARY WIDTH    ZP60009
         MVC   2131(1,R6),TSBALTC-TSB(R15) USE ALTERNATE WIDTH  ZP60009
*  /******************************************************************/
*  /*  THE FOLLOWING CODE WILL PROCESS THE DATA IF THE LINE NUMBER   */
*  /*  IS LESS THAN THE NEXT TO LAST LINE ON THE SCREEN OR IF THE    */
*  /*  BYPASS FLAG IS ON.                                            */
*  /******************************************************************/
*
*    IF TVWALNCT < (TIMLNNO-1)   TVWANOFB='1'B   DATALINE=0
*       TVWAFLSC='1'B THEN                                 /*@ZA13627*/
A000750  L     R15,2312(,R6)
         BCTR  R15,0
         SLR   R12,R12
         IC    R12,TVWALNCT
         CR    R15,R12
         BH    A00077C
         TM    TVWAFLG4,TVWANOFB
         BO    A00077C
         L     R15,2144(,R6)
         LTR   R15,R15
         BZ    A00077C
         TM    TVWAFLG4,TVWAFLSC
         BNO   A000812
A00077C  L     R15,PSAAOLD                 PSA REFERENCE
         L     R15,ASCBTSB-ASCB(,R15)
         TM    16(R15),X'04'
         BNZ   A000792
         SLR   R15,R15
         STH   R15,TVWANCNT
A000792  L     R15,2144(,R6)
         L     R12,2132(,R6)
         LR    R8,R15
         ALR   R8,R12
         LH    R7,TVWANCNT
         ALR   R8,R7
         L     R11,2128(,R6)
         CR    R8,R11
         BNH   A0007DE
         ALR   R15,R7
         SLR   R11,R12
         SLR   R15,R11
         ST    R15,2144(,R6)
         AL    R11,2140(,R6)
         ST    R11,2140(,R6)
         LA    R15,1
         SLR   R12,R12
         IC    R12,TVWALNCT
         ALR   R15,R12
         STC   R15,TVWALNCT
         SLR   R15,R15
         ST    R15,2132(,R6)
         STH   R15,TVWANCNT
         B     A000812
A0007DE  TM    437(R6),X'20'
         BNZ   A000800
         SLR   R15,R15
         ST    R15,2132(,R6)
         LA    R15,1
         SLR   R12,R12
         IC    R12,TVWALNCT
         ALR   R15,R12
         STC   R15,TVWALNCT
         B     A00080C
A000800  L     R15,2132(,R6)
         AL    R15,2144(,R6)
         ST    R15,2132(,R6)
A00080C  SLR   R15,R15
         ST    R15,2144(,R6)
*        /************************************************************/
*        /*  AT THIS POINT A CHECK IS MADE TO SEE IF WE ARE PROCESS- */
*        /*  ING THE NEXT TO LAST LINE OF THE SCREEN AND FLASHBACK   */
*        /*  IS PERMITTED. THE INPUT DATA WILL BE SAVED IN THE FIRST */
*        /*  FLASHBACK BUFFER TO BE RETURNED TO THE TERMINAL USER.   */
*        /************************************************************/
*
*        IF TVWALNCT=TIMLNNO-1 & TVWANOFB='0'B & DATALINE>0 THEN
A000812  L     R15,2312(,R6)
         BCTR  R15,0
         SLR   R12,R12
         IC    R12,TVWALNCT
         CR    R15,R12
         BNE   A000896
         TM    TVWAFLG4,TVWANOFB
         BNZ   A000896
         L     R15,2144(,R6)
         LTR   R15,R15
         BNP   A000896
         L     R12,2128(,R6)
         CR    R15,R12
         BNH   A000848
         ST    R12,2148(,R6)
         B     A000850
A000848  L     R15,2144(,R6)
         ST    R15,2148(,R6)
A000850  L     R15,2148(,R6)
         LR    R12,R15
         BCTR  R12,0
         L     R8,2140(,R6)
         EX    R12,A0009AE
         ALR   R8,R15
         ST    R8,2140(,R6)
         L     R12,2144(,R6)
         SLR   R12,R15
         ST    R12,2144(,R6)
         STC   R15,TVWATQL1
         TM    437(R6),X'20'
         BZ    A000882
         LTR   R12,R12
         BNP   A000896
A000882  LA    R15,1
         SLR   R12,R12
         IC    R12,TVWALNCT
         ALR   R15,R12
         STC   R15,TVWALNCT
         OI    TVWAFLG2,TVWABKMG
*        /************************************************************/
*        /*  THE NEXT BLOCK OF CODE WILL BUILD THE DATA FLASHBACK    */
*        /*  WHEN THE LINECOUNT EQUALS OR EXCEEDS THE LAST SCREEN    */
*        /*  LINE AND THE BYPASS FLAG IS NOT SET ON.                 */
*        /************************************************************/
A000896  SLR   R15,R15
         IC    R15,TVWALNCT
         C     R15,2312(,R6)
         BL    A00096E
         TM    TVWAFLG4,TVWANOFB
         BNZ   A00096E
         L     R15,2144(,R6)
         LTR   R15,R15
         BNP   A00096E
*            /********************************************************/
*            /* ALL FOLLOWING CONDITIONS INDICATE MORE THAN 1 LINE   */
*            /* WILL BE FLASHED BACK TO THE USER.                    */
*            /********************************************************/
         C     R15,2128(,R6)
         BH    A0008D2
         L     R15,2136(,R6)
         C     R15,2120(,R6)
         BL    A0008D2
         TM    437(R6),X'20'
         BNO   A000940
A0008D2  L     R15,2128(,R6)
         C     R15,2144(,R6)
         BNL   A0008E6
         ST    R15,2148(,R6)
         B     A0008EE
A0008E6  L     R15,2144(,R6)
         ST    R15,2148(,R6)
A0008EE  L     R15,2148(,R6)
         LR    R12,R15
         BCTR  R12,0
         L     R8,2140(,R6)
         EX    R12,A0009AE
         L     R12,2144(,R6)
         SLR   R12,R15
         ST    R12,2144(,R6)
         STC   R15,TVWATQL1
         ALR   R8,R15
         ST    R8,2140(,R6)
         TM    437(R6),X'20'
         BZ    A000920
         LTR   R12,R12
         BNP   A000938
A000920  LA    R15,1
         SLR   R12,R12
         IC    R12,TVWALNCT
         ALR   R15,R12
         STC   R15,TVWALNCT
         OI    TVWAFLG2,TVWABKMG
         B     A00096E
A000938  NI    TVWAFLG2,255-TVWABKMG
         B     A00096E
A000940  L     R15,2144(,R6)
         LR    R12,R15
         BCTR  R12,0
         L     R8,2140(,R6)
         EX    R12,A0009B4
         STC   R15,TVWATQL2
         OI    TVWAFLG2,TVWABKMG
         SLR   R15,R15
         ST    R15,2144(,R6)
         LA    R15,1
         SLR   R12,R12
         IC    R12,TVWALNCT
         ALR   R15,R12
         STC   R15,TVWALNCT
A00096E  L     R15,2144(,R6)
         LTR   R15,R15
         BP    A000750
         TM    TVWAFLG2,TVWABKMG
         BNO   A000984
         OI    448(R6),X'40'
A000984  BR    R14                         EXIT LINECNT
HW1      DC    H'1'
HW480    DC    H'480'
A00098A  TRT   0(0,R4),NEWLINE
A000990  TR    0(0,R4),0(R12)
A000996  TRT   0(0,R3),SBATAB
A00099C  TR    0(0,R3),0(R12)
A0009A2  MVC   452(0,R6),0(R4)
A0009A8  MVC   0(0,R12),452(R6)
A0009AE  MVC   458(0,R6),0(R8)
A0009B4  MVC   538(0,R6),0(R8)
FW3      DC    F'3'
FW40     DC    F'40'
FW80     DC    F'80'
FW1500   DC    F'1500'
A0009CC  EQU   *
         DC    X'80000000'
         DC    X'07004190'
         DC    F'0'
IKTIDSX2 DC    V(IKTIDSX2)
         DC    X'00509509'
         DS    0D
NEWLINE  DC    30X'00'
         DC    X'1E'
         DC    225X'00'
SBATAB   DC    17AL1(0)
         DC    AL1(3)
         DC    12AL1(0)
         DC    AL1(1)
         DC    225AL1(0)
PATCH    DC    20F'0'
         EJECT
R0       EQU   0                           EQUATES FOR REGISTERS 0-15
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
         PRINT NOGEN
         IHAPSA
         CVT   DSECT=YES
         IHASCVT
         IHAASCB
         IKJTSB EXT=YES
         IKTTVWA
         IKTTCAST
         END   IKT3270I,(C'PLS1824',0702,84045)
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
  IDENTIFY IKT3270I('ZP60009')
++MOD(IKT09412) DISTLIB(AOST3).
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE '********  IKT09412:  STFSMODE - TERMINAL CONTROL MACRO *
                 *******'
*
*   MODIFIED BY GREG PRICE JANUARY 2003 FOR USERMOD ZP60009
*            TO HANDLE NOEDIT INPUT MODE AND RESHOW CODES UP TO 24
*
IKT09412 CSECT ,                                                   0001
@MAINENT BALR  R15,0                                               0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKT09412  82.015'                                 0001
         DROP  R15
@PROLOG  BALR  R12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,R12                                         0001
         USING TSB,R5
*        /************************************************************/
*        /* SAVE REGISTER 1.  CLEAR RESHOW KEY VALUE IN      @G58AK3B*/
*        /* RIGHT-MOST BYTE OF REGISTER 1.                   @G58AK3B*/
*        /************************************************************/
*        R6 = R1;                      /*SAVE REGISTER 1     @G58AK3B*/
         LR    R6,R1                                               0024
*        SRL(R1,SHIFT8);               /*SHIFT OUT RSHWKEY   @G58AK3B*/
         SLR   R7,R7                                               0025
         IC    R7,SHIFT8                                           0025
         SRL   R1,0(R7)                                            0025
*        SLL(R1,SHIFT8);               /*REALIGN REGISTER 1  @G58AK3B*/
*                                                                  0026
         SLL   R1,0(R7)                                            0026
*        /************************************************************/
*        /*                                                          */
*        /* SHIFT OUT PARAMETER BIT. IF REMAINING BITS ARE NOT ZERO  */
*        /* RETURN CODE 4 IS ISSUED.                                 */
*        /*                                                          */
*        /************************************************************/
*        SLDL(R0,SHIFT3);              /*SHIFT OUT PARM BITS  OZ11997*/
         SLR   R7,R7                                               0027
         IC    R7,SHIFT3                                           0027
         SLDL  R0,0(R7)                                            0027
*        IF R1 ^= 0 THEN               /*INVALID - RETURN CODE 4     */
         LTR   R1,R1                                               0028
         BZ    @RF00028                                            0028
*          R15 = CODE04;                                           0029
         LA    R15,4                                               0029
*        ELSE                                                      0030
*          /**********************************************************/
*          /*                                                        */
*          /* IF THE TERMINAL IS NOT A DISPLAY TERMINAL, THE INVALID */
*          /* TERMINAL IS NOTED WITH RETURN CODE 8                   */
*          /*                                                        */
*          /**********************************************************/
*          IF TSBDSPLY = '0'B THEN                                 0030
         B     @RC00028                                            0030
@RF00028 TM    TSBSTAT,TSBDSPLY                                    0030
         BNZ   @RF00030                                            0030
*            R15 = CODE08;                                         0031
         LA    R15,8                                               0031
*          ELSE                                                    0032
*            /********************************************************/
*            /*                                                      */
*            /* THE PARAMETER BIT IS RESTORED. FULLSCREEN MODE WILL  */
*            /* BE SET OFF OR ON BASED ON THE PARAMETER BIT.         */
*            /*                                                      */
*            /********************************************************/
*            DO;                                                   0032
         B     @RC00030                                            0032
@RF00030 DS    0H                                                  0033
*              SRDL(R0,SHIFT3);        /*RESTORE PARM BITS    OZ11997*/
         SLR   R7,R7                                               0033
         IC    R7,SHIFT3                                           0033
         SRDL  R0,0(R7)                                            0033
*              R15 = CODE00;           /*SET GOOD RETURN CODE        */
         SLR   R15,R15                                             0034
*              IF R1 >=0 THEN          /*LOOK FOR MODE OFF    OZ11997*/
         LTR   R1,R1                                               0035
         BM    @RF00035                                            0035
*                /****************************************************/
*                /*                                                  */
*                /* TURN OFF FULL SCREEN MODE INDICATORS             */
*                /*                                                  */
*                /****************************************************/
*                DO;                                               0036
         L     R7,TSBEXTNT                                         0037
         L     R7,TSBXTVWA-TSBX(,R7)                               0037
         USING TVWA,R7
         TM    TVWAFLG5,TVWAFSM            ALREADY IN LINE MODE?
         BNO   LINECTOK                    YES
         TM    TVWAFLG5,TVWAWO+TVWAFSW     LINE MODE MSG ON SHOW?
         BNZ   LINECTOK                    YES
*                  TVWALNCT = 1;       /*SET LINE COUNTER    @YM03603*/
         MVI   TVWALNCT,1                                          0037
*                  TVWAFSM = '0'B;     /*FULL SCREEN MODE BIT        */
*                  TVWAWO  = '0'B;     /*FULL SCREEN WRITTEN OVER    */
*                  TVWAFSW = '0'B;     /*FULL SCREEN WAITING         */
LINECTOK NI    TVWAFLG5,255-TVWAFSM-TVWAWO-TVWAFSW                 0040
         OI    TVWAFLG4,TVWAFMSC           FORMAT THE SCREEN
         NI    TSBFLG5,255-TSBNEDIT        RESET NOEDIT INPUT ZP60009
*                  /**************************************************/
*                  /* WHENEVER STFSMODE IS OFF, THE RESHOW   @G58AK3B*/
*                  /* KEY DEFAULTS TO THE PA2 KEY.           @G58AK3B*/
*                  /**************************************************/
*                  TVWARSHW = PA2;     /*RESET RESHOW KEY    @G58AK3B*/
         MVI   TVWARSHW,X'6E'                                      0041
*                END;                                              0042
*              ELSE                                                0043
*                /****************************************************/
*                /*                                                  */
*                /* TURN ON FULL SCREEN MODE INDICATOR               */
*                /*                                                  */
*                /****************************************************/
*                DO;                                               0043
         B     @RC00035                                            0043
@RF00035 DS    0H                                                  0044
*                  TVWAFSM = '1'B;     /*FULL SCREEN MODE BIT        */
         L     R7,TSBEXTNT                                         0044
         L     R7,TSBXTVWA-TSBX(,R7)                               0044
         OI    TVWAFLG5,TVWAFSM                                    0044
*                  SLL(R1,SHIFT1);     /*SHIFT OUT MODE BIT   OZ11997*/
         SLR   R4,R4                                               0045
         IC    R4,SHIFT1                                           0045
         SLL   R1,0(R4)                                            0045
*                  IF R1 < 0 THEN      /*LOOK FOR INITIAL CALLOZ11997*/
         LTR   R1,R1                                               0046
         BNM   @RF00046                                    ZP60009 0046
*                    TVWANFSP = '1'B;  /*SET NO FULL SCR PAGE OZ11997*/
         OI    TVWAFLG5,TVWANFSP                                   0047
*                  ELSE                                            0048
*                    TVWANFSP = '0'B;  /*ALLOW FULL SCR PAGE  OZ11997*/
         B     NOEDCHEK                                    ZP60009 0048
@RF00046 L     R7,TSBEXTNT                                         0048
         L     R7,TSBXTVWA-TSBX(,R7)                               0048
         NI    TVWAFLG5,255-TVWANFSP                               0048
*                  SLL(R1,SHIFT1);     /*SHIFT OUT INITIAL BIT       */
NOEDCHEK SLR   R4,R4                                       ZP60009
         IC    R4,SHIFT1                                   ZP60009
         SLL   R1,0(R4)                                    ZP60009
*                  IF R1 ^= 0 THEN     /*LOOK FOR NOEDIT CALL ZP60009*/
         LTR   R1,R1                                       ZP60009
         BZ    @RC00046                                    ZP60009
*                    TSBNEDIT = '1'B;  /*SET NOEDIT INPUT MODEZP60009*/
         OI    TSBFLG5,TSBNEDIT                            ZP60009
*                  /**************************************************/
*                  /* THE RSHWKEY VALUE IS FOUND IN THE      @G58AK3B*/
*                  /* RIGHT-MOST BYTE OF THE REGISTER.       @G58AK3B*/
*                  /**************************************************/
*                  SLL(R6,SHIFT24); /*ISOLATE RESHOW         @G58AK3B*/
@RC00046 SLR   R7,R7                                               0049
         IC    R7,SHIFT24                                          0049
         SLL   R6,0(R7)                                            0049
*                  SRL(R6,SHIFT24);    /*IN RIGHT-MOST BYTE  @G58AK3B*/
         SRL   R6,0(R7)                                            0050
*                  /**************************************************/
*                  /* WHEN STFSMODE IS ON AND A RSHWKEY HAS  @G58AK3B*/
*                  /* BEEN SPECIFIED, THE SPECIFIED RSHWKEY  @G58AK3B*/
*                  /* BECOMES THE RESHOW KEY.                @G58AK3B*/
*                  /* WHEN STFSMODE IS ON BUT RSHWKEY HAS    @G58AK3B*/
*                  /* NOT BEEN SPECIFIED, THE RESHOW KEY IS  @G58AK3B*/
*                  /* NOT CHANGED.                           @G58AK3B*/
*                  /**************************************************/
*                  IF RSHWKEY ^= ZERO  /*RSHWKEY SPECIFIED?  @ZM20757*/
*                  THEN                /*RSHWKEY SPECIFIED   @G58AK3B*/
         LTR   R6,R6                                               0051
         BZ    @RF00051                                            0051
         LA    R7,25                                       ZP60009
         CR    R6,R7
         BNL   @RF00051
*                    TVWARSHW = KEYS(RSHWKEY); /* SET RSHWKEY@G58AK3B*/
         L     R7,TSBEXTNT                                         0052
         L     R7,TSBXTVWA-TSBX(,R7)                               0052
         LA    R4,KEYS-1(R6)                                       0052
         MVC   TVWARSHW,0(R4)                                      0052
*                  ELSE;               /*RSHWKEY NOT SPECIFD @G58AK3B*/
@RF00051 DS    0H                                                  0054
*                END;                                              0054
*            END;                      /*END OF MODE PROCESSING      */
*        END IKT09412                                              0056
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJTSB  )                                        *
*/*%INCLUDE SYSLIB  (IKTTSBX )                                        *
*/*%INCLUDE SYSLIB  (IKTTVWA )                                        *
*;                                                                 0056
@EL00001 DS    0H                                                  0056
@EF00001 DS    0H                                                  0056
@ER00001 BR    R14                                                 0056
@DATA    DS    0H
@DATD    DSECT
         DS    0F
IKT09412 CSECT
         DS    0F
@DATD    DSECT
         DS    0D
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKT09412 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
SHIFT1   DC    AL1(1)
SHIFT3   DC    AL1(3)
SHIFT8   DC    AL1(8)
SHIFT24  DC    AL1(24)
PATCH    DS    CL50
KEYS     DC    CL1'1'
         DC    CL1'2'
         DC    CL1'3'
         DC    CL1'4'
         DC    CL1'5'
         DC    CL1'6'
         DC    CL1'7'
         DC    CL1'8'
         DC    CL1'9'
         DC    CL1':'
         DC    CL1'#'
         DC    CL1'@'
         DC    CL1'A'                                           ZP60009
         DC    CL1'B'                                           ZP60009
         DC    CL1'C'                                           ZP60009
         DC    CL1'D'                                           ZP60009
         DC    CL1'E'                                           ZP60009
         DC    CL1'F'                                           ZP60009
         DC    CL1'G'                                           ZP60009
         DC    CL1'H'                                           ZP60009
         DC    CL1'I'                                           ZP60009
         DC    XL1'4A'                 CENT SIGN                ZP60009
         DC    CL1'.'                                           ZP60009
         DC    CL1'<'                                           ZP60009
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
@RC00030 EQU   @EL00001
@RC00028 EQU   @EL00001
@RC00035 EQU   @EL00001
@ENDDATA EQU   *
         PRINT NOGEN                                            ZP60009
         IKJTSB EXT=YES                                         ZP60009
         IKTTVWA                                                ZP60009
         PRINT GEN                                              ZP60009
         END   IKT09412,(C'PLS2204',0702,82015)
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
  IDENTIFY IKT09412('ZP60009')
++MOD(IKT09413) DISTLIB(AOST3).
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE '******** IKT09413:  STLINENO - TERMINAL CONTROL MACRO  *
                ********'
*
*   MODIFIED BY GREG PRICE JANUARY 2003 FOR USERMOD ZP60009
*
IKT09413 CSECT ,                                                   0001
@MAINENT BALR  R15,0                                               0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKT09413  83.318'                                 0001
         DROP  R15
@PROLOG  BALR  R12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,R12                                         0001
         USING TSB,R5
*        /************************************************************/
*        /*                                                          */
*        /* SHIFT OUT PARAMETERS FROM INPUT REG.  IF ANY REMAINING   */
*        /* BITS ARE NOT ZERO, ERROR RETURN CODE 4 IS ISSUED.        */
*        /*                                                          */
*        /************************************************************/
*        R2 = R1;                      /*MOVE PARM REG TO WORK REG   */
         LR    R2,R1                                               0025
*        SLL(R2,SHIFT1);               /*SHIFT OUT MODE BIT          */
         SLR   R10,R10                                             0026
         IC    R10,SHIFT1                                          0026
         SLL   R2,0(R10)                                           0026
*        SRL(R2,SHIFT9);               /*SHIFT OUT LINE NUMBER       */
         SLR   R10,R10                                             0027
         IC    R10,SHIFT9                                          0027
         SRL   R2,0(R10)                                           0027
*        IF R2 ^= 0 THEN                                           0028
         LTR   R2,R2                                               0028
         BZ    @RF00028                                            0028
*          R15 = CODE04;                                           0029
         LA    R15,4                                               0029
*        ELSE                                                      0030
*          /**********************************************************/
*          /*                                                        */
*          /* IF THE TERMINAL IN USE IS NOT A DISPLAY TERMINAL, THE  */
*          /* RETURN CODE IS SET TO 8.                               */
*          /*                                                        */
*          /**********************************************************/
*          IF TSBDSPLY = '0'B THEN                                 0030
         B     @RC00028                                            0030
@RF00028 TM    TSBSTAT,TSBDSPLY                                    0030
         BNZ   @RF00030                                            0030
*            R15 = CODE08;                                         0031
         LA    R15,8                                               0031
*          ELSE                                                    0032
*            /********************************************************/
*            /*                                                      */
*            /* THE LINE NUMBER SPECIFIED MUST BE GREATER THAN ZERO  */
*            /* AND NO LARGER THAN THE MAX ALLOWED NUMBER OF LINES   */
*            /* FOR THE TERMINAL IN USE. INVALID LINE NUMBER IS NOTED*/
*            /* WITH RETURN CODE 12.                                 */
*            /*                                                      */
*            /********************************************************/
*            DO;                                                   0032
         B     @RC00030                                            0032
@RF00030 DS    0H                                                  0033
*              R2 = R1;                /*SAVE PARM WITH MODE BIT   0033
*                                        INTACT.                     */
         LR    R2,R1                                               0033
*              SLL(R1,SHIFT1);         /*SHIFT OUT MODE BIT          */
         SLR   R10,R10                                             0034
         IC    R10,SHIFT1                                          0034
         SLL   R1,0(R10)                                           0034
*              SRL(R1,SHIFT1);         /*RESTORE LINE NUMBER         */
         SRL   R1,0(R10)                                           0035
*              IF R1 = 0 THEN          /*ZERO LINE NUMBER IS INVALID */
         LTR   R1,R1                                               0036
         BNZ   @RF00036                                            0036
*                R15 = CODE12;                                     0037
         LA    R15,12                                              0037
*              ELSE                                                0038
*                /****************************************************/
*                /*                                                  */
*                /* IF LINE NUMBER IS NOT TOO LARGE, LINNOPROC IS    */
*                /* CALLED TO SET THE LINE NUMBER AND PERFORM MODE   */
*                /* PROCESSING.                                      */
*                /*                                                  */
*                /****************************************************/
*                                                                  0038
*                IF TSBXTMBF = LGSCREEN THEN /*LOOK FOR LARGE SCREEN */
         B     @RC00036                                            0038
@RF00036 L     R10,TSBEXTNT                                        0038
         CLC   TSBXTMBF-TSBX(2,R10),HW1920                         0038
*ZP60009 BNE   @RF00038                                            0038
         BL    @RF00038                    ASSUME <MOD2 => MOD1 ZP60009
*                  IF R1 > MAXLNLG THEN /*TOO LARGE, SET R15 */
         LA    R11,24                      DEFAULT LINE COUNT   ZP60009
         CLI   TSBPRMR,0                   FIELD POPULATED?     ZP60009
         BE    ROWSOKAY                    NO, TREAT AS MODEL-2 ZP60009
         IC    R11,TSBPRMR                 YES, USE IT INSTEAD  ZP60009
         L     R3,TSBXTVWA-TSBX(,R10)      POINT TO TVWA        ZP60009
         USING TVWA,R3                                          ZP60009
         TM    TVWAFLG6,X'01'              IS TVWAALTS ON?      ZP60009
         BNO   ROWSOKAY                    NO, USE PRIMARY SIZE ZP60009
         IC    R11,TSBALTR                 USE ALTERNATE SIZE   ZP60009
ROWSOKAY CLR   R1,R11                      LARGER THAN MAXIMUM? ZP60009
*ZP60009 CL    R1,FW24                                             0039
         BNH   @RF00039                                            0039
*                    R15 = CODE12;                                 0040
         LA    R15,12                                              0040
*                  ELSE                     /*OK, CALL LNNOPROC      */
*                    GEN (BAL R11,LNNOPROC)                        0041
*                       SETS (R11) REFS (LNNOPROC);                0041
         B     @RC00039                                            0041
@RF00039 DS    0H                                                  0041
         BAL   R11,LNNOPROC
*                ELSE                       /*MUST BE SMALL SCREEN   */
*                  IF R1 > MAXLNSM THEN /*TOO LARGE, SET R15 */
         B     @RC00038                                            0042
@RF00038 LA    R10,12                                              0042
         CLR   R1,R10                                              0042
         BNH   @RF00042                                            0042
*                    R15 = CODE12;                                 0043
         LR    R15,R10                                             0043
*                  ELSE                     /*OK, CALL LNNOPROC      */
*                    GEN (BAL R11,LNNOPROC)                        0044
*                       SETS (R11) REFS (LNNOPROC);                0044
         B     @RC00042                                            0044
@RF00042 DS    0H                                                  0044
         BAL   R11,LNNOPROC
*            END;                                                  0045
*        RETURN;                                           /*@ZM20487*/
@EL00001 DS    0H                                                  0046
@EF00001 DS    0H                                                  0046
@ER00001 BR    R14                                                 0046
*        /************************************************************/
*        /*                                                          */
*        /* LNNOPROC: STORES LINE NUMBER IN TVWALNCT.  SETS FULL     */
*        /*           SCREEN MODE ON OR OFF BASED ON THE MODE BIT    */
*        /*           IN PARAMETER REGISTER 1.                       */
*        /*                                                          */
*        /************************************************************/
*LNNOPROC:                                                         0047
*        R3 = TSBXTVWA;                /*GET ADDRES OF TVWA          */
LNNOPROC L     R10,TSBEXTNT                                        0047
         L     R3,TSBXTVWA-TSBX(,R10)                              0047
*        RFY TVWA BASED(R3);           /*REBASE TVWA                 */
*        GEN (STCM R1,1,TVWALNCT(R3))                              0049
*           REFS (R1) SETS (TVWALNCT); /*STORE LINE NUM IN TVWA      */
         STCM  R1,1,TVWALNCT
*        IF R2 < 0 THEN                /*HIGH ORDER BIT ON?          */
         LTR   R2,R2                                               0050
         BNM   @RF00050                                            0050
*          DO;                                                     0051
*            TVWAFSM = '1'B;           /*YES-SET FULL SCREEN MODE ON */
         OI    TVWAFLG5,TVWAFSM                                    0052
*          END;                                                    0053
*        ELSE                          /*HIGH ORDER BIT OFF          */
*          DO;                         /*TURN OFF FULL SCR MODE INDIC*/
         B     @RC00050                                            0054
@RF00050 DS    0H                                                  0055
*            TVWAFSM = '0'B;           /*FULL SCREEN MODE            */
*            TVWAWO  = '0'B;           /*FULL SCREEN WRITTEN OVER    */
*            TVWAFSW = '0'B;           /*FULL SCREEN TPUT WAITING    */
         NI    TVWAFLG5,255-TVWAFSM-TVWAWO-TVWAFSW                 0057
         NI    TSBFLG5,255-TSBNEDIT    /*EDIT INPUT          ZP60009 */
*          IF TVWALNCT = 1 THEN        /*IS LINENO 1?        AZ74745 */
         CLI   TVWALNCT,1
         BNE   @RC00050
*            TVWAFMSC = '1'B;          /*YES-FORMAT SCREEN   AZ74745 */
         OI    TVWAFLG4,TVWAFMSC                                   0057
*          END;                                                    0058
*        /************************************************************/
*        /*                                                          */
*        /* RETURN TO MAINLINE WITH RETURN CODE 0                    */
*        /*                                                          */
*        /************************************************************/
*        R15 = CODE00;                 /*SET GOOD RETURN CODE        */
@RC00050 SLR   R15,R15                                             0059
*        GEN (BR R11)                                              0060
*           REFS (R11);                /*RETURN TO MAINLINE          */
         BR    R11
*        END   IKT09413                                            0061
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJTSB  )                                        *
*/*%INCLUDE SYSLIB  (IKTTSBX )                                        *
*/*%INCLUDE SYSLIB  (IKTTVWA )                                        *
*;                                                                 0061
         B     @EL00001                                            0061
@DATA    DS    0H
HW1920   DC    H'1920'
*ZP60009 @DATD    DSECT
*ZP60009          DS    0F
*ZP60009 IKT09413 CSECT
*ZP60009          DS    0F
*ZP60009 FW24     DC    F'24'
@DATD    DSECT
         DS    0D
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKT09413 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
SHIFT1   DC    AL1(1)
SHIFT9   DC    AL1(9)
         DS    CL2
PATCH    DC    15F'0'
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
@RC00030 EQU   @EL00001
@RC00028 EQU   @EL00001
@RC00042 EQU   @EL00001
@RC00038 EQU   @EL00001
@RC00036 EQU   @EL00001
@RC00039 EQU   @RC00038
@ENDDATA EQU   *
         PRINT NOGEN                                            ZP60009
         IKJTSB EXT=YES                                         ZP60009
         IKTTVWA                                                ZP60009
         PRINT GEN                                              ZP60009
         END   IKT09413,(C'PLS1932',0702,83318)
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
  IDENTIFY IKT09413('ZP60009')
++MOD(IKT0940A) DISTLIB(AOST3).
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE '******** IKT0940A:    STSIZE  - TERMINAL CONTROL MACRO *
                 *******'
*
*   MODIFIED BY GREG PRICE JANUARY 2003 FOR USERMOD ZP60009
*
IKT0940A CSECT ,                                                   0001
@MAINENT BALR  R15,0                                               0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKT0940A  77.319'                                 0001
         DROP  R15
@PROLOG  BALR  R12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,R12                                         0001
         USING TSB,R5
*        R2 = R0;                      /*COPY REGISTERS              */
         LR    R2,R0                                               0027
*        R3 = R1;                                                  0028
         LR    R3,R1                                               0028
*        SLL(R2,SHIFT8);               /*SHIFT OUT ENTRY CODE        */
         SLR   R10,R10                                             0029
         IC    R10,SHIFT8                                          0029
         SLL   R2,0(R10)                                           0029
*        SRL(R2,SHIFT16);              /*SHIFT OUT LINE PARM         */
         SLR   R4,R4                                               0030
         IC    R4,SHIFT16                                          0030
         SRL   R2,0(R4)                                            0030
*        SRL(R3,SHIFT8);               /*SHIFT OUT SIZE PARM         */
*                                                                  0031
         SRL   R3,0(R10)                                           0031
*        IF R2 ^= 0       R3 ^= 0                                  0032
*        THEN                                                      0032
         SLR   R10,R10                                             0032
         CLR   R2,R10                                              0032
         BNE   @RT00032                                            0032
         CLR   R3,R10                                              0032
         BE    @RF00032                                            0032
@RT00032 DS    0H                                                  0033
*          R15 = CODE04;                                           0033
         LA    R15,4                                               0033
*        ELSE                                                      0034
*                                                                  0034
*          /**********************************************************/
*          /*                                                        */
*          /* THE SIZE PARAMETER IN R1 IS REQUIRED WHENEVER          */
*          /* STSIZE IS INVOKED. IF R1 IS ZERO, THE RETURN CODE      */
*          /* IS SET TO 8.                                           */
*          /*                                                        */
*          /**********************************************************/
*                                                                  0034
*          IF R1 = 0                                               0034
*          THEN                                                    0034
         B     @RC00032                                            0034
@RF00032 LTR   R1,R1                                               0034
         BNZ   @RF00034                                            0034
*            R15 = CODE08;                                         0035
         LA    R15,8                                               0035
*          ELSE                                                    0036
*                                                                  0036
*            /********************************************************/
*            /*                                                      */
*            /* SHIFT OUT ENTRY CODE FROM R0 AND ACQUIRE THE         */
*            /* KEY OF THE TSB CREATOR (TCAS).                       */
*            /*                                                      */
*            /********************************************************/
*                                                                  0036
*STSZPROC:   DO;                                                   0036
         B     @RC00034                                            0036
@RF00034 DS    0H                                                  0036
STSZPROC DS    0H                                                  0037
*              GEN(MODESET KEYADDR=TCASKEY,WORKREG=2)              0037
*                  REFS(TCASKEY) SETS(R2);/*GET TCAS KEY             */
         MODESET KEYADDR=TCASKEY,WORKREG=2
*              SLL(R0,SHIFT8);         /*SHIFT OUT ENTRY CODE        */
         SLR   R10,R10                                             0038
         IC    R10,SHIFT8                                          0038
         SLL   R0,0(R10)                                           0038
*              SRL(R0,SHIFT8);                                     0039
*                                                                  0039
         SRL   R0,0(R10)                                           0039
*              /******************************************************/
*              /*                                                    */
*              /* IF THE TERMINAL IN USE IS A DISPLAY AND THE LINE   */
*               /* PARAMETER WAS NOT SPECIFIED, THE RETURN CODE IS   */
*              /* SET TO 8.                                          */
*              /*                                                    */
*              /******************************************************/
*                                                                  0040
*              IF TSBDSPLY = '1'B                                  0040
*              THEN                                                0040
*                                                                  0040
         TM    TSBSTAT,TSBDSPLY                                    0040
         BNO   @RF00040                                            0040
*                IF R0 = 0                                         0041
*                THEN                                              0041
         LTR   R0,R0                                               0041
         BNZ   @RF00041                                            0041
*                  R15 = CODE08;                                   0042
         LA    R15,8                                               0042
*                ELSE                                              0043
*                                                                  0043
*                  /**************************************************/
*                  /*                                                */
*                  /* THE DISPROC ROUTINE IS INVOKED TO UPDATE THE   */
*                  /* TSB AND VERIFY THE SCREEN DIMENSIONS AS        */
*                  /* STANDARD.                                      */
*                  /*                                                */
*                  /**************************************************/
*                                                                  0043
*                  GEN(BAL R11,DISPROC)                            0043
*                      REFS(DISPROC) SETS(R11);                    0043
*                                                                  0043
         B     @RC00041                                            0043
@RF00041 DS    0H                                                  0043
         BAL   R11,DISPROC
*              ELSE                                                0044
*                                                                  0044
*                /****************************************************/
*                /*                                                  */
*                /* IF THE TERMINAL IN USE IS NOT A DISPLAY AND THE  */
*                /* LINE PARAMETER WAS SPECIFIED, THE RETURN CODE IS */
*                /* SET TO 8.                                        */
*                /*                                                  */
*                /****************************************************/
*                                                                  0044
*                IF R0 ^= 0                                        0044
*                THEN                                              0044
         B     @RC00040                                            0044
@RF00040 LTR   R0,R0                                               0044
         BZ    @RF00044                                            0044
*                  R15 = CODE08;                                   0045
         LA    R15,8                                               0045
*                ELSE                                              0046
*                                                                  0046
*                  /**************************************************/
*                  /*                                                */
*                  /* SET VALUE OF SIZE IN TSB AND SET GOOD          */
*                  /* RETURN CODE                                    */
*                  /*                                                */
*                  /**************************************************/
*                                                                  0046
*                  DO;                                             0046
         B     @RC00044                                            0046
@RF00044 DS    0H                                                  0047
*                    TSBLNSZ = R1;                                 0047
         STC   R1,TSBLNSZ                                          0047
*                    R15 = CODE00;                                 0048
         SLR   R15,R15                                             0048
*                  END;                                            0049
*                                                                  0049
*            GEN(MODESET EXTKEY=SUPR); /*RETURN TO SUPR KEY          */
*                                                                  0050
@RC00044 DS    0H                                                  0050
@RC00040 DS    0H                                                  0050
         MODESET EXTKEY=SUPR
*            END STSZPROC;                                         0051
*        RETURN;                                           /*@ZM20487*/
@EL00001 DS    0H                                                  0052
@EF00001 DS    0H                                                  0052
@ER00001 BR    R14                                                 0052
*        /************************************************************/
*        /*                                                          */
*        /* DISPROC IS INVOKED VIA A 'BAL' FROM THE MAINLINE. THIS   */
*        /* ROUTINE SETS THE FIELDS IN THE TSB TO INDICATE THE       */
*        /* SPECIFIED SCREEN DIMENSIONS, AND CHECKS THE DIMENSION    */
*        /* AGAINST KNOWN STANDARDS. NON-STANDARD DIMENSIONS ARE     */
*        /* ALLOWED, BUT CAUSE THE RETURN CODE TO BE SET TO 12.      */
*        /*                                                          */
*        /************************************************************/
*                                                                  0053
*DISPROC:                                                          0053
*                                                                  0053
*        TSBLNSZ = R1;                 /*MOVE IN LINE SIZE           */
DISPROC  STC   R1,TSBLNSZ                                          0053
*        TSBLNNO = R0;                 /*MOVE IN NUMBER OF LINES     */
         STC   R0,TSBLNNO                                          0054
*        TVWAXSCD = '1'B;              /*EXAM SCR DIMEN SW   @G58AK3A*/
*                                                                  0055
         L     R10,TSBEXTNT                                        0055
         L     R10,TSBXTVWA-TSBX(,R10)                             0055
         USING TVWA,R10
         OI    TVWAFLG1,TVWAXSCD                                   0055
*        /***********************************************************/
*        /*                                                         */
*        /* NEW LOGIC FOR USERMOD ZP60009 IS TO CHECK THE NEW       */
*        /* DIMENSIONS AGAINST THE PRIMARY AND ALTERNATE SCREEN     */
*        /* SIZES.  A MATCH TO EITHER IS CONSIDERED TO MEAN THAT    */
*        /* A STANDARD SIZE WAS SPECIFIED NO MATTER WHAT THE        */
*        /* VALUES HAPPEN TO BE.                                    */
*        /*                                                         */
*        /* NO MATCH CAUSES THE ORIGINAL LOGIC TO BE USED.          */
*        /*                                                         */
*        /***********************************************************/
         CLM   R0,1,TSBPRMR                PRIMARY LINES?       ZP60009
         BNE   ALTCHECK                    NO                   ZP60009
         CLM   R1,1,TSBPRMC                PRIMARY COLUMNS?     ZP60009
         BE    @RT00056                    YES, IT IS STANDARD  ZP60009
ALTCHECK CLM   R0,1,TSBALTR                ALTERNATE LINES?     ZP60009
         BNE   STDCHECK                    NO                   ZP60009
         CLM   R1,1,TSBALTC                ALTERNATE COLUMNS?   ZP60009
         BE    @RT00056                    YES, IT IS STANDARD  ZP60009
STDCHECK EQU   *                                                ZP60009
*        /***********************************************************/
*        /*                                                         */
*        /* STANDARD SIZES FOR 3270 DISPLAYS ARE 24X80 AND 12X40.   */
*        /* IF A STANDARD SIZE WAS SPECIFIED, RETURN CODE IS 0. IF  */
*        /* NON-STANDARD SIZE WAS SPECIFIED, RETURN CODE IS 12. NO  */
*        /* OTHER DISPLAYS ARE SUPPORTED BY TSO/VTAM.               */
*        /*                                                         */
*        /***********************************************************/
*                                                                  0056
*        IF (TSBLNNO = LENGTH1 & TSBLNSZ = WIDTH1)                 0056
*           (TSBLNNO = LENGTH2 & TSBLNSZ = WIDTH2)       /*        0056
*                                      WAS STANDARD SIZE GIVEN      */
*        THEN                                                      0056
         CLI   TSBLNNO,24                                          0056
         BNE   @GL00002                                            0056
         CLI   TSBLNSZ,80                                          0056
         BE    @RT00056                                            0056
@GL00002 CLI   TSBLNNO,12                                          0056
         BNE   @RF00056                                            0056
         CLI   TSBLNSZ,40                                          0056
         BNE   @RF00056                                            0056
@RT00056 DS    0H                                                  0057
*          R15 = CODE00;               /*YES - STANDARD SIZE        */
         SLR   R15,R15                                             0057
*        ELSE                                                      0058
*          R15 = CODE12;               /*NO - NON STANDARD SIZE     */
*                                                                  0058
         B     @RC00056                                            0058
@RF00056 LA    R15,12                                              0058
*        /***********************************************************/
*        /*                                                         */
*        /* RETURN TO MAINLINE                                      */
*        /*                                                         */
*        /***********************************************************/
*                                                                  0059
*        GEN(BR R11)                                               0059
*            REFS(R11);                                            0059
@RC00056 DS    0H                                                  0059
         BR    R11
*        END IKT0940A                                              0060
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJTSB  )                                        *
*/*%INCLUDE SYSLIB  (IKTTSBX )                                        *
*/*%INCLUDE SYSLIB  (IKTTVWA )                                        *
*;                                                                 0060
         B     @EL00001                                            0060
@DATA    DS    0H
@DATD    DSECT
         DS    0F
@ZTEMPS  DS    C
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
IKT0940A CSECT
         DS    0F
@DATD    DSECT
         DS    0D
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKT0940A CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
SHIFT8   DC    AL1(8)
SHIFT16  DC    AL1(16)
TCASKEY  DC    BL1'01100000'
         DS    CL1
PATCH    DC    15F'0'
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
@RC00041 EQU   @RC00040
@RC00034 EQU   @EL00001
@RC00032 EQU   @EL00001
@ENDDATA EQU   *
         PRINT NOGEN                                            ZP60009
         IKJTSB EXT=YES                                         ZP60009
         IKTTVWA                                                ZP60009
         PRINT GEN                                              ZP60009
         END   IKT0940A,(C'PLS2016',0701,77319)
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
  IDENTIFY IKT0940A('ZP60009')
++MACUPD(IKTTVWA) DISTLIB(ATSOMAC).
./ CHANGE NAME=IKTTVWA
*/*            ZP60009 - ADDING BIT TVWAALTS.                        */ 00147900
TVWAALTS EQU   X'01'             ALTERNATE SCREEN SIZE IN USE   ZP60009 01268400
*     3 TVWAALTS     BIT(1),     /*ALT SCREEN SIZE IN USE     ZP60009*/ 03110400
++MACUPD(STFSMODE) DISTLIB(ATSOMAC).
./ CHANGE NAME=STFSMODE
&NAME    STFSMODE &A,&INITIAL=NO,&RSHWKEY=64,&NOEDIT=NO         ZP60009 00100000
         LCLA  &SYSNEDT                                         ZP60009 01111000
&SYSNEDT SETA  0                                                ZP60009 01121000
         AIF   ('&NOEDIT' NE 'YES' AND '&NOEDIT' NE 'NO').ERROR5  ZP6-9 01125200
         AIF   ('&NOEDIT' EQ 'YES' AND '&A' EQ 'OFF').ERROR4    ZP60009 01125400
         AIF   (&RSHWKEY GT 0 AND &RSHWKEY LT 25).TESTFS        ZP60009 01125700
         AIF   ('&INITIAL' EQ 'NO').TESTNE                      ZP60009 01130000
.TESTNE  ANOP                                                   ZP60009 01135100
         AIF   ('&NOEDIT' EQ 'NO').TESTA                        ZP60009 01135200
&SYSNEDT SETA  32                                               ZP60009 01135300
.ERROR1  IHBERMAC 54,,INITIAL                                   ZP60009 01310000
.ERROR4  IHBERMAC 1020,NOEDIT,&A                                ZP60009 01345000
         MEXIT                                                  ZP60009 01346000
.ERROR5  IHBERMAC 54,,NOEDIT                                    ZP60009 01347000
         MEXIT                                                  ZP60009 01348000
&NAME    LA    1,&SYSFS+&SYSINIT+&SYSNEDT  MODE/INITIAL/NOEDIT  ZP60009 01400000
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//RECV17   EXEC SMPREC
//SMPPTFIN DD  DSN=&&SMPMCS,DISP=(OLD,DELETE)
//SMPCNTL  DD  *
  RECEIVE SELECT(ZP60009).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV17
//*
//APPLY17  EXEC SMPAPP
//SMPCNTL  DD  *
  APPLY S(UZ67122 UZ71054 UZ68882 UZ57385 ZP60009) DIS(WRITE).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY17
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//*********************************************************************
//* Install USERMOD ZP60012 (source: Greg Price) - report interrupt   *
//* code of abend in a TSO session.                                   *
//*********************************************************************
//*
//RECV18   EXEC SMPREC
//SMPPTFIN DD  *
++USERMOD(ZP60012)      /* REPORT PIC FOR S0CX OR SODX ABEND */  .
++VER(Z038) FMID(EBB1102) PRE(UZ83396,UY02947)
 /*
   PROBLEM DESCRIPTION:
     THE CONTENTS OF GPR15 IS REPORTED AS THE REASON CODE.
       IN THE ABSENCE OF A "REASON" PARAMETER OF THE ABEND MACRO
       THE VALUE STORED IN GENERAL PURPOSE REGISTER 15 IS INSPECTED
       AND IF (LOGICALLY) LESS THAN 4096 IS THEN ARBITRARILY
       REPORTED AS THE REASON CODE OF THE ABEND.  THIS IS NOT
       APPROPRIATE FOR PROGRAM CHECK ABENDS WHERE IT CAN BE MORE
       USEFUL TO REPORT THE PROGRAM INTERRUPT CODE (PIC).

       THIS USERMOD CHANGES THE TSO TMP ESTAI EXIT ROUTINE IKJEFT04
       AND THE TSO TMP ESTAE EXIT ROUTINE IKJEFT05 SO THAT THE PIC
       IS REPORTED AS THE REASON CODE IN MESSAGE IKJ56641I.  AS A
       RESULT, THE DETERMINATION OF WHETHER THE PSW POINTS TO THE
       FAILING INSTRUCTION (AS FOR PIC10, PIC11 AND PIC12) OR THE
       NEXT INSTRUCTION WILL BE EASIER TO MAKE.

   SPECIAL CONDITIONS:
     ACTION:
       A "CLPA" MUST BE PERFORMED AT IPL TIME FOR THIS SYSMOD TO
       BECOME ACTIVE.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NO. 12.

     A TYPICAL USAGE SCENARIO MIGHT CONSIST OF THE FOLLOWING STEPS:
     1) A PROGRAM OR COMMAND ABENDS RESULTING IN:
           IKJ56641I PGM-NAME ENDED DUE TO ERROR+
           READY
     2) THE USER ENTERS A QUESTION MARK RESULTING IN:
           IKJ56641I SYSTEM ABEND CODE 0C4   REASON CODE 011
           READY
     3) THE USER INITIATES THE TEST COMMAND TO COMMENCE DEBUGGING
        KNOWING THAT THE CURRENT LOCATION CONTAINS THE INSTRUCTION
        CAUSING THE PROGRAM CHECK.

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IKJEFT04
       IKJEFT05
 */.
++ZAP(IKJEFT04) DISTLIB(AOST4).
 NAME IKJEFT04
 IDRDATA ZP60012
VER 0190 58E0,D004           L     R14,SAVRBAK
VER 0194 D503,E014,B94C      CLC   REG0,=F'12'    SDWA PROVIDED?
VER 019A 4780,B1EC           BE    L1             NO
VER 019E 58E0,E018           L     R14,REG1       SDWA ADDRESS
VER 01A2 D503,E054,B980 L5   CLC   SDWAGR15,=F'4095'
VER 01A8 47D0,B1B6           BNH   L2
VER 01AC 1FEE           L4   SLR   R14,R14        NO REASON CODE
VER 01AE 50E0,A01C      L6   ST    R14,SUBCDRS
VER 01B2 47F0,B1F2           B     L3
VER 01B6 58E0,D004      L2   L     R14,SAVRBAK
VER 01BA 58E0,E018           L     R14,REG1       SDWA ADDRESS
VER 01BE 58E0,E054           L     R14,SDWAGR15
VER 01C2 50E0,A01C           ST    R14,SUBCDRS
VER 08C4 B8C4,B8C6      PA   DC    2S(*)
VER 08C8 B8C8,B8CA           DC    2S(*)
VER 08CC B8CC,B8CE           DC    2S(*)
VER 08D0 B8D0,B8D2           DC    2S(*)
VER 08D4 B8D4,B8D6           DC    2S(*)
VER 08D8 B8D8,B8DA           DC    2S(*)
VER 08DC B8DC,B8DE           DC    2S(*)
REP 019E 47F0,B8C4           B     PA
REP 08C4 58E0,E018           L     R14,REG1       SDWA ADDRESS
REP 08C8 950C,E005           CLI   SDWACMPC,X'0C'
REP 08CC 4740,B1A2           BL    L5             NOT PROGRAM CHECK
REP 08D0 950D,E005           CLI   SDWACMPC,X'0D'
REP 08D4 4720,B1A2           BH    L5             NOT PROGRAM CHECK
REP 08D8 48E0,E00A           LH    R14,SDWAINTA   GET INTERRUPT CODE
REP 08DC 47F0,B1AE           B     L6             GO USE IT AS REASON
++ZAP(IKJEFT05) DISTLIB(AOST4).
 NAME IKJEFT05
 IDRDATA ZP60012
VER 0032 05B0                BALR  R11,0          BASE REGISTERS 1
VER 0034 4140,BFFF           LA    R4,4095(,R11)             AND 2
VER 00F2 D503,3054,42ED      CLC   SDWAGR15,=F'4095'
VER 00F8 47D0,B0D2           BNH   LBL1
VER 00FC 1F77                SLR   R7,R7          NO REASON CODE
VER 00FE 5070,A01C           ST    R7,SUBCDRS
VER 0102 47F0,B0E6           B     LBL2
VER 0106 5830,8008   LBL1    L     R3,8(,R8)
VER 010A 5870,304C           L     R7,76(,R3)
VER 010E 5830,7018           L     R3,24(,R7)
VER 0112 5830,3054           L     R3,SDWAGR15
VER 0116 5030,A01C           ST    R3,SUBCDRS
VER 011A 5060,A00C   LBL2    ST    R6,ABNDCD
VER 011E 8960,0008           SLL   R6,8
VER 0122 8C60,0014   LBL3    SRDL  R6,20
VER 11F6 41C3,41C5   PATCH   DC    2S(*)
VER 11FA 41C7,41C9           DC    2S(*)
VER 11FE 41CB,41CD           DC    2S(*)
VER 1202 41CF,41D1           DC    2S(*)
VER 1206 41D3,41D5           DC    2S(*)
VER 120A 41D7,41D9           DC    2S(*)
VER 120E 41DB,41DD           DC    2S(*)
VER 1212 41DF,41E1           DC    2S(*)
REP 0112 5870,3054           L     R7,SDWAGR15    KEEP R3 AS
REP 0116 5070,A01C           ST    R7,SUBCDRS          SDWA ADDRESS
REP 011E 47F0,41C3           B     PATCH          OVERLAYS SLL
REP 11F6 8960,0008   PATCH   SLL   R6,8           DISPLACED BY BRANCH
REP 11FA 950C,3005           CLI   SDWACMPC,X'0C'
REP 11FE 4740,B0EE           BL    LBL3           NOT PROGRAM CHECK
REP 1202 950D,3005           CLI   SDWACMPC,X'0D'
REP 1206 4720,B0EE           BH    LBL3           NOT PROGRAM CHECK
REP 120A BF73,300A           ICM   R7,3,SDWAINTA  TOP HALF OF R7 IS 0
REP 120E 5070,A01C           ST    R7,SUBCDRS
REP 1212 47F0,B0EE           B     LBL3
//SMPCNTL  DD  *
  RECEIVE SELECT(ZP60012).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV18
//*
//APPLY18  EXEC SMPAPP
//SMPCNTL  DD  *
  APPLY S(UY02947 UZ44177 UZ47575 UZ47871 UZ48384
          UZ82014 UZ82941 UZ83396 ZP60012) DIS(WRITE).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY18
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//*********************************************************************
//* Install USERMOD ZP60014 (source: Greg Price) - add CLIST control  *
//* variable and built-in function extensions.                        *
//*********************************************************************
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
++USERMOD(ZP60014)                 /* ADD CLIST EXTENSIONS */  .
++VER(Z038) FMID(EBB1102)
  PRE(UY16532,UY17021)
 /*
   PROBLEM DESCRIPTION:
     VARIOUS CLIST FACILITIES PRESENT IN TSO/E ARE NOT AVAILABLE.
       MANY USEFUL CLIST FACILITIES SUCH AS VARIOUS DATE AND TIME
       FORMATS, ADDITIONAL ENVIRONMENTAL SYMBOLS, AND THE ABILITY
       TO CAPTURE TERMINAL OUTPUT ARE NOT SUPPLIED AS PART OF TSO.

       THIS USERMOD CHANGES SEVERAL TSO MODULES.

       THE EXEC COMMAND HAS BEEN CHANGED TO DEFINE AND RESOLVE AN
       ADDITIONAL 20 CONTROL VARIABLES AND BUILT-IN FUNCTIONS AS
       WELL AS THE ORIGINAL 19.

       PUTLINE HAS BEEN ALTERED TO SUPPORT THE CAPTURE OF LINE-MODE
       TERMINAL OUTPUT INTO CLIST VARIABLES.

   SPECIAL CONDITIONS:
     ACTION:
       A "CLPA" MUST BE PERFORMED AT IPL TIME FOR THIS SYSMOD TO
       BECOME ACTIVE.

     DOC:
       TSO PROVIDES THE FOLLOWING CLIST BUILT-IN FUNCTIONS:

         DATATYPE   - DETERMINE DATA TYPE: 'CHAR' OR 'NUM'
         EVAL       - FORCE ARITHMETIC EVALUATION
         LENGTH     - DETERMINE LENGTH OF EXPRESSION IN BYTES
         STR        - DEFINE CHARACTER STRING
         SUBSTR     - DEFINE SUBSTRING

       THIS SYSMOD ADDS THE FOLLOWING CLIST BUILT-IN FUNCTIONS:

         NRSTR      - SCAN DATA ONCE AND RETAIN DOUBLE AMPERSANDS
           EXAMINE THE FOLLOWING SAMPLE CLIST AND ITS OUTPUT TO
           DETERMINE THE APPROPRIATE USES OF NRSTR:
               PROC 0
               SET A = &&B
               SET B = FRED
               SET C = &NRSTR(&A)
               WRITE C IS &C
               WRITE C IS &NRSTR(&C)
               SET DDSTMT = &NRSTR(//SYSUT1 DD DSN=&&UT1,SPACE=(TRK,3),)
               WRITE &DDSTMT
               WRITE &NRSTR(&DDSTMT)

         SYSDSN     - DETERMINE DATA SET AVAILABILITY
           EG. SET ANS = &SYSDSN(&DSNAME)
             &ANS WILL EVALUATE TO ONE OF THE FOLLOWING:
               'OK'
               'UNAVAILABLE DATASET'
               'DATASET NOT FOUND'
               'MEMBER NOT FOUND'
               'MEMBER SPECIFIED, BUT DATASET IS NOT PARTITIONED'
               'VOLUME NOT ON SYSTEM'
               'MISSING DATASET NAME'
               'ERROR PROCESSING REQUESTED DATASET'
               'INVALID DATASET NAME, INPUTDSNAME'

       TSO PROVIDES THE FOLLOWING CLIST CONTROL VARIABLES:

         LASTCC     - LATEST TSO COMMAND RETURN CODE
         MAXCC      - HIGHEST TSO COMMAND RETURN CODE

         SYSDLM     - TERMIN DELIMITER
         SYSDVAL    - DEFAULT INPUT VALUE

         SYSNEST    - DETERMINE CLIST NESTING: 'NO' OR 'YES'
         SYSSCAN    - SYMBOLIC SUBSTITUTION SCAN LIMIT
         SYSICMD    - IMPLICIT COMMAND NAME
         SYSPCMD    - MOST RECENT TSO PRIMARY COMMAND
         SYSSCMD    - MOST RECENT TSO SUBCOMMAND

         SYSUID     - TSO USERID
         SYSPREF    - CURRENT DATA SET NAME PREFIX
         SYSPROC    - NAME OF THE TSO LOGON PROCEDURE

         SYSDATE    - CURRENT DATE:     'MM/DD/YY'
         SYSTIME    - CURRENT TIME:     'HH:MM:SS'

       THIS SYSMOD ADDS THE FOLLOWING CLIST CONTROL VARIABLES:

         SYSSTIME   - SHORTENED TIME:   'HH:MM'
         SYS4DATE   - CURRENT DATE:     'MM/DD/YYYY'
         SYSSDATE   - SORTABLE DATE:    'YY/MM/DD'
         SYS4SDATE  - SORTABLE DATE:    'YYYY/MM/DD'
         SYSJDATE   - JULIAN DATE:      'YY.DDD'
         SYS4JDATE  - JULIAN DATE:      'YYYY.DDD'
         SYS4IDATE  - ISO-FORMAT DATE:  'YYYY-MM-DD'

         SYSENV     - CLIST ENVIRONMENT: 'FORE' OR 'BACK'
         SYSSMFID   - SYSTEM SMF IDENTIFIER
         SYSOPSYS   - OPERATING SYSTEM NAME: 'OS/VS2 3.8 EBB1102'
         SYSJES     - NAME OF SUBSYSTEM PROVIDING JOB ID
         SYSTERMID  - NAME OF TSO TERMINAL WHERE CLIST STARTED

         SYSLTERM   - CURRENT LINE COUNT OF TSO TERMINAL
         SYSWTERM   - CURRENT LINE WIDTH OF TSO TERMINAL

         SYSCPU     - CURRENT TCB TIME ACCUMULATED BY TSO SESSION
         SYSSRV     - CURRENT SERVICE ACCUMULATED BY TSO SESSION

         SYSOUTLINE - NUMBER OF DISPLAY LINES HELD IN VARIABLES
         SYSOUTTRAP - MAXIMUM NUMBER OF DISPLAY LINES TO CAPTURE

           CAPTURED LINES ARE HELD IN VARIABLES CALLED
           SYSOUTLINE1, SYSOUTLINE2, SYSOUTLINE3, ETC.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NUMBER 14.

     REWORK HISTORY:
       2005-09-18: SKIP OUTTRAP CHECK FOR MESSAGES FROM EXEC (S0C4).
       2005-11-11: SKIP OUTTRAP CHECK FOR MESSAGES FROM COMMAND
                   SCAN/PARSE AND PUTLINE/GETLINE/PUTGET SERVICES.
       2006-07-18: REMOVE MSGID TESTING OF PREVIOUS REWORKS, AND
                   SKIP OUTTRAP CHECK IF CLIST ACTIVE FLAG NOT SET.
       2009-06-13: CORRECT RESUME SCAN DATA ADDRESS AFTER SYSDSN.
       2009-08-23: ADD NRSTR "NO RESCAN STRING".

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IKJCT431
       IKJCT433
       IKJEFT56
 */.
++MOD(IKJCT431) DISTLIB(AOST4).
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(NEW,PASS),UNIT=SYSDA,SPACE=(CYL,3),
//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=4080)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE 'IKJCT431 EXEC COMMAND SYMBOLIC PARAMETER DEFINITION'
*
*   MODIFIED BY GREG PRICE SEPTEMBER 2005 FOR USERMOD ZP60014
*
*   2009-08-23 - ADD &NRSTR "NO RESCAN STRING"
*
IKJCT431 CSECT ,                                                   0001
         USING PSA,0
@MAINENT DS    0H                                                  0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(33)                                             0001
         DC    C'IKJCT431  87.344'                                 0001
         DC    C' ZP60014 20090823'
         DROP  R15
@PROLOG  STM   R14,R12,12(R13)                                     0001
         BALR  R11,0                                               0001
@PSTART  LA    R12,4095(,R11)                                      0001
         USING @PSTART,R11                                         0001
         USING @PSTART+4095,R12                                    0001
         L     R0,@SIZDATD                                         0001
         GETMAIN  R,LV=(0)
         LR    R10,R1                                              0001
         USING @DATD,R10                                           0001
         ST    R13,@SA00001+4                                      0001
         LM    R0,R1,20(R13)                                       0001
         ST    R10,8(,R13)                                         0001
         LR    R13,R10                                             0001
         MVC   @PC00001(4),0(R1)                                   0001
*   ECDAPTR=R1;                     /* SAVE ADDRESS OF COMMON DATA   */
         LR    ECDAPTR,R1                                          0093
*   RFY                                                            0094
*     R1 UNRSTD;                                                   0094
*   LINELNG=RECLNG-CON4;            /* LINE LENGTH FOR FIRST RECORD  */
         L     R6,ECDAIREC(,ECDAPTR)                               0095
         LH    R6,RECLNG(,R6)                                      0095
         SL    R6,FW04                                             0095
         ST    R6,LINELNG                                          0095
*   ECB=CON0;                       /* INIT AN ECB FOR SERVICE RTNS  */
         SLR   R6,R6                                               0096
         ST    R6,ECB                                              0096
*   FLGCT431='';                    /* INITIALIZE FLAG AREA          */
         MVI   FLGCT431,X'00'                                      0097
*   ERRPTR=ADDR(ERRPARMS);          /* SERVICE RTN PARMLIST AREA     */
*                                                                  0098
         LA    R6,ERRPARMS                                         0098
         ST    R6,ERRPTR                                           0098
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE GETMAIN FOR: LSD, EXECDATA, SNTAB, SVTAB AND THE FIRST  */
*   /* COMMAND PROCEDURE BLOCK                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0099
*   RFY                                                            0099
*     R15 RSTD;                     /* ISSUE GETMAIN FOR STANDARD    */
*   DO;                             /* GETMAIN (EC) LV(GETSIZE)    0100
*                                      A(ECDAGADD) SP(78) RTCD(R15)  */
*     RESPECIFY                                                    0101
*      (R1,                                                        0101
*       R15) RESTRICTED;                                           0101
*     I004=I004&&I004;              /* INIT LIST                     */
         XC    I004(10),I004                                       0102
*     I00404='20'X;                 /* TYPE                          */
         MVI   I00404,X'20'                                        0103
*     I00401=GETSIZE;               /* LENGTH                        */
         MVC   I00401(4),FW8192     WAS 4096             ZP60014   0104
*     I00403=ADDR(ECDAGADD);        /* ADDR OF ADDR LIST             */
         LA    R14,ECDAGADD(,ECDAPTR)                              0105
         STCM  R14,7,I00403                                        0105
*     I00405=78;                    /* SUBPOOL VALUE                 */
         MVI   I00405,X'4E'                                        0106
*     R1=ADDR(I004);                /* REG1 POINTS TO LIST           */
         LA    R1,I004                                             0107
*     SVC(4);                       /* STANDARD-FORM OF GETMAIN      */
         SVC   4                                                   0108
*     R15=R15;                      /* SET RETURN CODE               */
*     RESPECIFY                                                    0110
*      (R1,                                                        0110
*       R15) UNRESTRICTED;                                         0110
*   END;                            /* GETMAIN (EC) LV(GETSIZE)    0111
*                                      A(ECDAGADD) SP(78) RTCD(R15)
*                                      EXEC                          */
*                                                                  0112
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK GETMAIN RETURN CODE                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0112
*   IF R15^=CON0 THEN               /* CONTROL BLOCKS                */
         LTR   R15,R15                                             0112
         BZ    @RF00112                                            0112
*     DO;                           /* IF STORAGE COULD NOT BE       */
*       RFY                                                        0114
*         R15 UNRSTD;               /* OBTAINED THEN NOTIFY USER AND */
*       EXMSGID=M511;               /* RETURN RC=16                  */
         MVC   EXMSGID(4),$MSGM511                                 0115
*       CALL MSGRTN;                /* ISSUE MESSAGE                 */
         BAL   R14,MSGRTN                                          0116
*       NOTEXEC=YES;                /* COMMAND PROCEDURE NOT       0117
*                                      EXECUTABLE                    */
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0117
*       CT431RET=CON16;                                            0118
         MVC   CT431RET(4),FW16                                    0118
*     END;                          /* CONTROL RETURNS TO EXIT POINT */
*                                                                  0119
*   /*****************************************************************/
*   /*                                                               */
*   /* IF ERRORS HAVE OCCURRED THEN CONTROL RETURNS TO IKJCT431 EXIT */
*   /* POINT                                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0120
*                                                                  0120
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE THE EXEC CONTROL BLOCKS - FIRST THE LSD            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0120
*   ELSE                            /* GETMAIN SUCCESSFUL - CONTINUE */
*     DO;                                                          0120
         B     @RC00112                                            0120
@RF00112 DS    0H                                                  0121
         L     R2,PSAAOLD
         L     R6,ASCBCSCB-ASCB(,R2)
         ST    R6,TIOTPTR
*       SP78BLK=YES;                /* INDICATE CORE HAS BEEN GOTTEN */
*       SP78CORE=YES;                                              0122
         OI    SP78BLK(ECDAPTR),B'00100100'                        0122
*       ECDALSD=ECDAGADD;           /* LSD IS FIRST BLOCK IN INITIAL */
         L     R6,ECDAGADD(,ECDAPTR)                               0123
         ST    R6,ECDALSD(,ECDAPTR)                                0123
*       LSDRCLEN=CON0;              /* GETMAIN AREA - RECLEN IS      */
         SLR   R8,R8                                               0124
         L     R9,LSDPTR(,ECDAPTR)                                 0124
         STH   R8,LSDRCLEN-LSD(,R9)                                0124
*       LSDADATA=ECDAGADD+HALF;     /* VARIABLE                      */
         L     R14,FW4096           WAS LA R14,2048      ZP60014   0125
         LR    R15,R6                                              0125
         ALR   R15,R14                                             0125
         ST    R15,LSDADATA-LSD(,R9)                               0125
*       LSDANEXT=LSDADATA+CON12;    /* UPDATE PAST BLOCK HEADER      */
         LA    R0,12                                               0126
         ALR   R15,R0                                              0126
         ST    R15,LSDANEXT-LSD(,R9)                               0126
*       LSDBLKID=CON1;              /* INIT TO ID OF FIRST BLOCK     */
         MVI   LSDBLKID-LSD(R9),X'01'                              0127
*       LSDADAID=CON1;                                             0128
         MVI   LSDADAID-LSD(R9),X'01'                              0128
*       LSDEXEC=ECDALSD+((LENGTH(LSD)+CON7)/CON8*CON8);/* PLACE    0129
*                                      EXECDATA ON DOUBLE WORD     0129
*                                      BOUNDRY                       */
*                                                                  0129
         AL    R6,FW16                                             0129
         ST    R6,LSDEXEC-LSD(,R9)                                 0129
*       /*************************************************************/
*       /*                                                           */
*       /* INITIALIZE THE COMMAND PROCEDURE BLOCK HEADER INFORMATION */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0130
*       ECDACBLK=LSDADATA;          /* INITIALIZE COMMAND PROCEDURE  */
         L     R1,LSDADATA-LSD(,R9)                                0130
         ST    R1,ECDACBLK(,ECDAPTR)                               0130
*       ECDACNXT=LSDANEXT;                                         0131
         L     R9,LSDANEXT-LSD(,R9)                                0131
         ST    R9,ECDACNXT(,ECDAPTR)                               0131
*       ECDACPRE=ECDACNXT;          /* SAME AS NEXT PTR INITIALLY    */
         ST    R9,ECDACPRE(,ECDAPTR)                               0132
*       COMPRNXT=CON0;              /* INDICATE NO MORE BLOCKS       */
         STCM  R8,7,COMPRNXT(R1)                                   0133
*       COMPRID=CON1;               /* THIS IS FIRST BLOCK           */
         MVI   COMPRID(R1),X'01'                                   0134
*       COMPRLNG=HALF;              /* ORIGIONAL SIZE IS HALF OF PAGE*/
         ST    R14,COMPRLNG(,R1)                                   0135
*       COMPRUSE=CON12;                                            0136
         ST    R0,COMPRUSE(,R1)                                    0136
*                                                                  0137
*       /*************************************************************/
*       /*                                                           */
*       /* INITIALIZE THE EXEC DATA CONTROL BLOCK                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0137
*       EXECDATA=EXECDATA&&EXECDATA;/* CLEAR CORE                    */
         XC    EXECDATA(64,R6),EXECDATA(R6)                        0137
*       IF NESTED=YES THEN          /* IF THIS IS A NESTED EXEC THEN */
         TM    NESTED(ECDAPTR),B'00000010'                         0138
         BNO   @RF00138                                            0138
*         GEXECDAT=ECDAGDAT->GEXECDAT;/* PICK UP ADDRESS OF NEXT   0139
*                                      LOWER EXECDATA OTHERWISE      */
         L     R1,ECDAGDAT(,ECDAPTR)                               0139
         L     R1,GEXECDAT(,R1)                                    0139
         ST    R1,GEXECDAT(,R6)                                    0139
*       ELSE                        /* SAVE THE ADDRESS OF FIRST     */
*         GEXECDAT=ADDR(EXECDATA);  /* LEVEL EXECDATA                */
         B     @RC00138                                            0140
@RF00138 L     R6,LSDPTR(,ECDAPTR)                                 0140
         L     R6,LSDEXEC-LSD(,R6)                                 0140
         ST    R6,GEXECDAT(,R6)                                    0140
*       SNTABFST=LSDEXEC+(LENGTH(EXECDATA)+CON7)/CON8*CON8;/* SPLIT  */
@RC00138 L     R6,LSDPTR(,ECDAPTR)                                 0141
         L     R6,LSDEXEC-LSD(,R6)                                 0141
         LA    R14,64                                              0141
         ALR   R14,R6                                              0141
         ST    R14,SNTABFST(,R6)                                   0141
*       SNTABPTR=SNTABFST;          /* REMAINING CORE BETWEEN SNTAB
*                                      AND SVTAB                     */
         ST    R14,SNTABPTR                                        0142
*       SVTABFST=SNTABPTR+((((CPBLKPTR-SNTABBLK)/CON2)+CON7)/CON8*CON8)
*           ;                                                      0143
         SLR   R15,R15                                             0143
         ICM   R15,7,SNTABBLK                                      0143
         SLR   R0,R0                                               0143
         ICM   R0,7,CPBLKPTR(ECDAPTR)                              0143
         LR    R2,R0                                               0143
         SLR   R2,R15                                              0143
         SRDA  R2,32                                               0143
         D     R2,FW02                                             0143
         LR    R4,R3                                               0143
         AL    R4,FW07                                             0143
         SRDA  R4,32                                               0143
         D     R4,FW08                                             0143
         SLA   R5,3                                                0143
         ALR   R5,R14                                              0143
         ST    R5,SVTABFST(,R6)                                    0143
*       SVTABPTR=SVTABFST;                                         0144
*                                                                  0144
         ST    R5,SVTABPTR                                         0144
*       /*************************************************************/
*       /*                                                           */
*       /* INITIALIZE FIRST SNTAB                                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0145
*       SNTABNXT=CON0;              /* ONLY ONE BLOCK                */
         SLR   R6,R6                                               0145
         ST    R6,SNTABNXT(,R14)                                   0145
*       SNTABLNG=SVTABBLK-SNTABBLK; /* TOTAL LENGTH                  */
         SLR   R1,R1                                               0146
         ICM   R1,7,SVTABBLK                                       0146
         LCR   R15,R15                                             0146
         ALR   R15,R1                                              0146
         ST    R15,SNTABLNG(,R14)                                  0146
*       SNTABUSE=LENGTH(SNTAB);     /* 12 BYTES OCCUPIED BY HEADER   */
         MVC   SNTABUSE(4,R14),FW12                                0147
*       SNTELPTR=ADDR(SNTELFST);    /* FIRST AVAILABLE SLOT          */
*                                                                  0148
         LA    SNTELPTR,SNTELFST(,R14)                             0148
*       /*************************************************************/
*       /*                                                           */
*       /* INITIALIZE FIRST SVTAB                                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0149
*       SVTABNXT=CON0;              /* ONLY ONE BLOCK                */
         ST    R6,SVTABNXT(,R5)                                    0149
*       SVTABLNG=CPBLKPTR-SVTABBLK; /* TOTAL LENGTH                  */
         SLR   R0,R1                                               0150
         ST    R0,SVTABLNG(,R5)                                    0150
*       SVTABUSE=LENGTH(SVTAB);     /* 16 BYTES OCCUPIED BY HEADER   */
         MVC   SVTABUSE(4,R5),FW16                                 0151
*       SVTABFRE=CON0;              /* NO UNUSED BYTES               */
         ST    R6,SVTABFRE(,R5)                                    0152
*       SVTELPTR=ADDR(SVTELFST);    /* ALL CONTROL BLOCKS ARE BUILT  */
         LA    SVTELPTR,SVTELFST(,R5)                              0153
*       SP78BLK=NO;                                                0154
         NI    SP78BLK(ECDAPTR),B'11111011'                        0154
*                                                                  0155
*       /*************************************************************/
*       /*                                                           */
*       /* INITIALIZE THE CONTROL VARIABLES INITIALIZE A NULL VALUE  */
*       /* ELEMENT AND ALL CONTROL VARIABLES WITH A NULL VALUE LIST  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0155
*       SVTELPTR->SVTLNG=CON0;      /* NULL ELEMENT LENGTH           */
         STH   R6,SVTLNG(,SVTELPTR)                                0155
*       SVTELPTR->SVTORIG=CON0;     /* NULL ELEMENT FREE LENGTH      */
         STH   R6,SVTORIG(,SVTELPTR)                               0156
*       CALL SVTELUPT;                                             0157
         BAL   R14,SVTELUPT                                        0157
*       RFY                                                        0158
*        (R2,                                                      0158
*         R3,                                                      0158
*         R4,                                                      0158
*         R5) RSTD;                                                0158
*       R2=ADDR(CVARMAP);           /* ADDRESS OF CVAR AREA          */
         L     R2,SNTABPTR                                         0159
         LA    R2,CVARMAP(,R2)                                     0159
*       R3=LENGTH(CVARMAP);         /* LENGTH TO INITIALIZE          */
         LA    R3,272                                              0160
*       R4=R2;                      /* NO DATA TO MOVE               */
         LR    R4,R2                                               0161
*       R5=CON0;                    /* PADS CVARMAP WITH ZEROS       */
         SLR   R5,R5                                               0162
*       MVCL(R2,R4);                /* ZERO AREA                     */
         MVCL  R2,R4                                               0163
*       RFY                                                        0164
*        (R2,                                                      0164
*         R3,                                                      0164
*         R4,                                                      0164
*         R5) UNRSTD;                                              0164
*       DO ICTR=1 TO DIM(NULLVAR);  /* INITIALIZE NULL VALUE       0165
*                                      VARIABLES                     */
         LA    ICTR,1                                              0165
@DL00165 DS    0H                                                  0166
*         SNTDATA(1:NULLEN(ICTR))=NULLADR(ICTR)->NULLVDAT(1:NULLEN(ICTR
*             ));                                                  0166
         LR    R14,ICTR                                            0166
         SLA   R14,2                                               0166
         SLR   R15,R15                                             0166
         IC    R15,NULLEN-4(R14)                                   0166
         LR    R0,R15                                              0166
         BCTR  R0,0                                                0166
         LA    R1,NULLADR-4(R14)                                   0166
         SLR   R14,R14                                             0166
         ICM   R14,7,0(R1)                                         0166
         LR    R1,R0                                               0166
         EX    R1,@SM01540                                         0166
*         SNTLNG=NULLEN(ICTR);                                     0167
         STH   R15,SNTLNG(,SNTELPTR)                               0167
*         SNTVLPTR=ADDR(SVTELFST);                                 0168
         L     R1,SVTABPTR                                         0168
         LA    R2,SVTELFST(,R1)                                    0168
         ST    R2,SNTVLPTR(,SNTELPTR)                              0168
         C     ICTR,FW#EVAL         NEW IMMEDIATE EVALUATION?   ZP60014
         BH    @SYMEVAL             YES, GO SET THE FLAG        ZP60014
*         IF ICTR<CON11 THEN        /* FIRST 10 VARIABLES REQUIRE    */
         C     ICTR,FW11                                           0169
         BNL   @RF00169                                            0169
@SYMEVAL EQU   *                                                ZP60014
*           SNTEVAL=YES;            /* IMMEDIATE EVALUATION          */
         OI    SNTEVAL(SNTELPTR),B'00000010'                       0170
*         IF ICTR<=CON15 THEN       /* FIRST 15 VARIABLES CAN NOT    */
@RF00169 EQU   *                                                   0171
         C     ICTR,FW#GRP1         NO USER UPDATE 2ND GROUP?   ZP60014
         BH    @SYMNOUU             YES, SET THE FLAG           ZP60014
         C     ICTR,FW15                                           0171
         BH    @RF00171                                            0171
@SYMNOUU EQU   *                                                ZP60014
*           SNTNAUTH=YES;           /* BE SET BY USER                */
         OI    SNTNAUTH(SNTELPTR),B'00000100'                      0172
*         SNTABUSE=SNTABUSE+SNTLNG+LENGTH(SNTELEM);                0173
@RF00171 L     R3,SNTABPTR                                         0173
         LA    R2,8                                                0173
         LH    R4,SNTLNG(,SNTELPTR)                                0173
         L     R5,SNTABUSE(,R3)                                    0173
         ALR   R5,R4                                               0173
         ALR   R5,R2                                               0173
         ST    R5,SNTABUSE(,R3)                                    0173
*         SNTELPTR=SNTELPTR+SNTLNG+LENGTH(SNTELEM);                0174
         ALR   R4,SNTELPTR                                         0174
         ALR   R4,R2                                               0174
         LR    SNTELPTR,R4                                         0174
*       END;                                                       0175
         AL    ICTR,FW01                                           0175
         C     ICTR,FW#SYM          ORIGINALLY 19         ZP60014  0175
         BNH   @DL00165                                            0175
*       RFY                                                        0176
*         SVTELEM BASED(SVTELPTR);                                 0176
*                                                                  0177
*       /*************************************************************/
*       /*                                                           */
*       /* INITIALIZE THOSE CONTROL VARIABLES REQUIRING VALUES       */
*       /* -SYSUID                                                   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0177
*       SVTDATA(1:PSCBUSRL)=PSCBUSER(1:PSCBUSRL);                  0177
         L     R6,CPPLPTR(,ECDAPTR)                                0177
         L     R6,CPPLPSCB-CPPL(,R6)                               0177
         SLR   R14,R14                                             0177
         IC    R14,PSCBUSRL-PSCB(,R6)                              0177
         LR    R15,R14                                             0177
         BCTR  R15,0                                               0177
         EX    R15,@SM01544                                        0177
*       SVTLNG=PSCBUSRL;            /* USERID LENGTH                 */
         STH   R14,SVTLNG(,SVTELPTR)                               0178
*       SVTORIG=SVTLNG;             /* ORIGIONAL LENGTH SAME         */
         STH   R14,SVTORIG(,SVTELPTR)                              0179
*       CUIDVAL=SVTELPTR;           /* SNTAB VALUE POINTER           */
         L     R6,SNTABPTR                                         0180
         STCM  SVTELPTR,15,CUIDVAL(R6)                             0180
*       CALL SVTELUPT;                                             0181
*                                                                  0181
         BAL   R14,SVTELUPT                                        0181
*                                                                  0182
*       /*************************************************************/
*       /*                                                           */
*       /* -SYSPROC                                                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0182
*       DO ICTR=8 TO 1 BY-1 WHILE(CSCBPROC(ICTR)=BLANK);/* DETERMINE */
         LA    ICTR,8                                              0192
@DL00192 L     R1,TIOTPTR                                          0192
         ALR   R1,ICTR                                             0192
         CLI   CSCBPROC-1(R1),C' '                                 0192
         BNE   @DC00192                                            0192
*       END;                        /* LENGTH OF THE PROCEDURE NAME  */
         BCTR  ICTR,0                                              0193
         LTR   ICTR,ICTR                                           0193
         BP    @DL00192                                            0193
@DC00192 DS    0H                                                  0194
*       IF ICTR>CON0 THEN           /* MOVE PROCNAME IN IF PRESENT   */
         LTR   ICTR,ICTR                                           0194
         BNP   @RF00194                                            0194
*         DO;                                                      0195
*           SVTDATA(1:ICTR)=CSCBPROC(1:ICTR);                      0196
         LR    R2,ICTR                                             0196
         BCTR  R2,0                                                0196
         L     R1,TIOTPTR                                          0196
         EX    R2,@SM01546                                         0196
*           SVTLNG=ICTR;                                           0197
         STH   ICTR,SVTLNG(,SVTELPTR)                              0197
*           SVTORIG=ICTR;                                          0198
         STH   ICTR,SVTORIG(,SVTELPTR)                             0198
*           CPROCVAL=SVTELPTR;                                     0199
         L     R6,SNTABPTR                                         0199
         STCM  SVTELPTR,15,CPROCVAL(R6)                            0199
*           CALL SVTELUPT;                                         0200
         BAL   R14,SVTELUPT                                        0200
*         END;                                                     0201
*       ELSE                        /* IF NO PROCNAME THEN SET TO    */
*         CPROCVAL=ADDR(SVTELFST);  /* NULL ELEMENT                  */
         B     @RC00194                                            0202
@RF00194 L     R6,SVTABPTR                                         0202
         LA    R6,SVTELFST(,R6)                                    0202
         L     R1,SNTABPTR                                         0202
         STCM  R6,15,CPROCVAL(R1)                                  0202
*                                                                  0203
*       /*************************************************************/
*       /*                                                           */
*       /* - LASTCC                                                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0203
*       SVTDATA(1)=CONC0;           /* LASTCC INITIALIZED TO ZERO    */
@RC00194 MVI   SVTDATA(SVTELPTR),C'0'                              0203
*       SVTLNG=LENGTH(CONC0);                                      0204
         MVC   SVTLNG(2,SVTELPTR),HW01                             0204
*       SVTORIG=CON4;               /* RESERVE FOUR BYTES            */
         MVC   SVTORIG(2,SVTELPTR),HW04                            0205
*       CLCCVAL=SVTELPTR;                                          0206
         L     R6,SNTABPTR                                         0206
         STCM  SVTELPTR,15,CLCCVAL(R6)                             0206
*       SVTABFRE=SVTABFRE+CON3;     /* UP FREE SPACE                 */
         L     R6,SVTABPTR                                         0207
         LA    R14,3                                               0207
         AL    R14,SVTABFRE(,R6)                                   0207
         ST    R14,SVTABFRE(,R6)                                   0207
*       CALL SVTELUPT;                                             0208
*                                                                  0208
         BAL   R14,SVTELUPT                                        0208
*                                                                  0209
*       /*************************************************************/
*       /*                                                           */
*       /* -MAXCC                                                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0209
*       SVTDATA(1)=CONC0;                                          0209
         MVI   SVTDATA(SVTELPTR),C'0'                              0209
*       SVTLNG=LENGTH(CONC0);                                      0210
         MVC   SVTLNG(2,SVTELPTR),HW01                             0210
*       SVTORIG=CON4;                                              0211
         MVC   SVTORIG(2,SVTELPTR),HW04                            0211
*       CMCCVAL=SVTELPTR;                                          0212
         L     R6,SNTABPTR                                         0212
         ST    SVTELPTR,CMCCVAL(,R6)                               0212
*       SVTABFRE=SVTABFRE+CON3;                                    0213
         L     R6,SVTABPTR                                         0213
         LA    R14,3                                               0213
         AL    R14,SVTABFRE(,R6)                                   0213
         ST    R14,SVTABFRE(,R6)                                   0213
*       CALL SVTELUPT;                                             0214
*                                                                  0214
         BAL   R14,SVTELUPT                                        0214
*                                                                  0215
*       /*************************************************************/
*       /*                                                           */
*       /* -SYSSCAN                                                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0215
*       SVTDATA(1:2)=CONC16;        /* DEFAULT IS 16                 */
         MVC   SVTDATA(2,SVTELPTR),$CHAR16                         0215
*       SVTLNG=LENGTH(CONC16);                                     0216
         LA    R6,2                                                0216
         STH   R6,SVTLNG(,SVTELPTR)                                0216
*       SVTORIG=CON4;               /* FOUR BYTES ALLOCATED TO THIS  */
         MVC   SVTORIG(2,SVTELPTR),HW04                            0217
*       CSCANVAL=SVTELPTR;          /* VARIABLE                      */
         L     R1,SNTABPTR                                         0218
         STCM  SVTELPTR,15,CSCANVAL(R1)                            0218
*       SVTABFRE=SVTABFRE+CON2;                                    0219
         L     R2,SVTABPTR                                         0219
         AL    R6,SVTABFRE(,R2)                                    0219
         ST    R6,SVTABFRE(,R2)                                    0219
*       CALL SVTELUPT;                                             0220
         BAL   R14,SVTELUPT                                        0220
*                                                                  0221
*       /*************************************************************/
*       /*                                                           */
*       /* -SYSDLM                                                   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0221
*       SVTDATA(1)=CONC0;           /* DEFAULT VALUE IS 0            */
         MVI   SVTDATA(SVTELPTR),C'0'                              0221
*       SVTLNG=LENGTH(CONC0);                                      0222
         LA    R6,1                                                0222
         STH   R6,SVTLNG(,SVTELPTR)                                0222
*       SVTORIG=CON2;                                              0223
         MVC   SVTORIG(2,SVTELPTR),HW02                            0223
*       CDLMVAL=SVTELPTR;                                          0224
         L     R1,SNTABPTR                                         0224
         STCM  SVTELPTR,15,CDLMVAL(R1)                             0224
*       SVTABFRE=SVTABFRE+CON1;                                    0225
         L     R2,SVTABPTR                                         0225
         AL    R6,SVTABFRE(,R2)                                    0225
         ST    R6,SVTABFRE(,R2)                                    0225
*       CALL SVTELUPT;                                             0226
*                                                                  0226
         BAL   R14,SVTELUPT                                        0226
*                                                                  0227
*       /*************************************************************/
*       /*                                                           */
*       /* -SYSNEST                                                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0227
*       IF NESTED=YES THEN          /* IF WE ARE EXECUTING IN A      */
         TM    NESTED(ECDAPTR),B'00000010'                         0227
         BNO   @RF00227                                            0227
*         DO;                       /* NESTED LEVEL THEN VALUE IS    */
*           SVTDATA(1:LENGTH(NYES))=NYES;/* YES                      */
         MVC   SVTDATA(3,SVTELPTR),$YES                            0229
*           SVTORIG=LENGTH(NYES);                                  0230
         MVC   SVTORIG(2,SVTELPTR),HW03                            0230
*         END;                                                     0231
*       ELSE                        /* ELSE IT IS NO                 */
*         DO;                                                      0232
         B     @RC00227                                            0232
@RF00227 DS    0H                                                  0233
*           SVTDATA(1:LENGTH(NNO))=NNO;                            0233
         MVC   SVTDATA(2,SVTELPTR),$NO                             0233
*           SVTORIG=LENGTH(NNO);                                   0234
         MVC   SVTORIG(2,SVTELPTR),HW02                            0234
*         END;                                                     0235
*       SVTLNG=SVTORIG;             /* LENGTH IS SAME AS ORIGIONAL 0236
*                                      LNG                           */
@RC00227 LH    R6,SVTORIG(,SVTELPTR)                               0236
         STH   R6,SVTLNG(,SVTELPTR)                                0236
*       CNESTVAL=SVTELPTR;          /* SAVE ADDRESS OF VALUE         */
         L     R6,SNTABPTR                                         0237
         ST    SVTELPTR,CNESTVAL(,R6)                              0237
*       CALL SVTELUPT;                                             0238
*                                                                  0238
         BAL   R14,SVTELUPT                                        0238
*
*       /*************************************************************/
*       /*                                                  ZP60014  */
*       /* -SYSOUTLINE                                      ZP60014  */
*       /*                                                  ZP60014  */
*       /*************************************************************/
*
         L     R14,CPPLPTR(,ECDAPTR)
         L     R14,CPPLECT-CPPL(,R14)
         XC    44(4,R14),44(R14)           RESET ECTNUM
         MVI   SVTDATA(SVTELPTR),C'0'      SET VALUE FOR SYSOUTLINE
         LA    R0,1                        GET THE VALUE LENGTH
         STH   R0,SVTLNG(,SVTELPTR)        SET CURRENT VALUE LENGTH
         LA    R0,10                       GET THE VALUE LENGTH LIMIT
         STH   R0,SVTORIG(,SVTELPTR)       SET ORIGINAL VALUE LENGTH
         L     R6,SNTABPTR                 POINT TO SYMBOL NAME TABLE
         STCM  SVTELPTR,15,COUTLINE(R6)    SET POINTER TO VALUE
         BAL   R14,SVTELUPT                UPDATE SYMBOL VALUE TABLE
*
*       /*************************************************************/
*       /*                                                  ZP60014  */
*       /* -SYSOUTTRAP                                      ZP60014  */
*       /*                                                  ZP60014  */
*       /*************************************************************/
*
         MVI   SVTDATA(SVTELPTR),C'0'      SET VALUE FOR SYSOUTLINE
         LA    R0,1                        GET THE VALUE LENGTH
         STH   R0,SVTLNG(,SVTELPTR)        SET CURRENT VALUE LENGTH
         LA    R0,10                       GET THE VALUE LENGTH LIMIT
         STH   R0,SVTORIG(,SVTELPTR)       SET ORIGINAL VALUE LENGTH
         L     R6,SNTABPTR                 POINT TO SYMBOL NAME TABLE
         STCM  SVTELPTR,15,COUTTRAP(R6)    SET POINTER TO VALUE
         BAL   R14,SVTELUPT                UPDATE SYMBOL VALUE TABLE
*
*       /*************************************************************/
*       /*                                                  ZP60014  */
*       /* -SYSENV                                          ZP60014  */
*       /*                                                  ZP60014  */
*       /*************************************************************/
*
         L     R2,PSAAOLD                  POINT TO THE CURRENT ASCB
         ICM   R1,15,$FORE                 PREPARE FOR FOREGROUND
         ICM   R0,15,ASCBTSB-ASCB(R2)      GET ADDRESS OF TSB
         BNZ   GROUNDOK                    IT EXISTS SO IN FOREGROUND
         ICM   R1,15,$BACK                 NOT THERE SO IN BACKGROUND
GROUNDOK STCM  R1,15,SVTDATA(SVTELPTR)     SET VALUE FOR SYSENV
         LA    R0,4                        GET THE VALUE LENGTH
         STH   R0,SVTLNG(,SVTELPTR)        SET CURRENT VALUE LENGTH
         STH   R0,SVTORIG(,SVTELPTR)       SET ORIGINAL VALUE LENGTH
         L     R6,SNTABPTR                 POINT TO SYMBOL NAME TABLE
         STCM  SVTELPTR,15,CENVVAL(R6)     SET POINTER TO VALUE
         BAL   R14,SVTELUPT                UPDATE SYMBOL VALUE TABLE
*
*       /*************************************************************/
*       /*                                                  ZP60014  */
*       /* -SYSTERMID                                       ZP60014  */
*       /*                                                  ZP60014  */
*       /*************************************************************/
*
         LA    R0,GTTRMPRM
         ST    R0,GTTRMLST
         LA    R0,GTTRMALT
         ST    R0,GTTRMLST+4
         LA    R0,GTTRMATR
         ST    R0,GTTRMLST+8
         LA    R0,GTTRMNAM
         ST    R0,GTTRMLST+12
         OI    GTTRMLST+12,X'80'           FLAG LAST PARAMETER
         LA    R1,GTTRMLST                 POINT TO PLIST
         LA    R0,17                       GET GTTERM MACRO ID
         SLL   R0,24                       PROMOTE TO FLAG BYTE
         SVC   94                          ISSUE GTTERM
         LTR   R15,R15                     SUCCESS?
         BNZ   TERMDONE                    NO, CANNOT SET TERMINAL ID
         LA    R1,GTTRMNAM                 YES, POINT TO TERMINAL NAME
         LA    ICTR,8                      GET MAXIMUM NAME LENGTH
TERMBLNK LA    R2,0(ICTR,R1)               POINT PAST TRAILING CHAR
         BCTR  R2,0                        POINT TO TRAILING CHAR
         CLI   0(R2),C' '                  TRAILING BLANK?
         BH    TERMOKAY                    NO, HAVE LENGTH
         BCT   ICTR,TERMBLNK               YES, DECREMENT LENGTH
         B     TERMDONE                    TERMINAL NAME NOT ACQUIRED
TERMOKAY LTR   R2,ICTR                     GET LENGTH OF TERMINAL NAME
         BNP   TERMDONE                    NAME NOT SUPPLIED
         BCTR  R2,0                        GET TERMINAL ID LENGTH CODE
         EX    R2,@SM01548                 MOVE IN TERMINAL NAME
         STH   ICTR,SVTLNG(,SVTELPTR)      SET CURRENT VALUE LENGTH
         STH   ICTR,SVTORIG(,SVTELPTR)     SET ORIGINAL VALUE LENGTH
         L     R6,SNTABPTR                 POINT TO SYMBOL NAME TABLE
         STCM  SVTELPTR,15,CTERMVAL(R6)    SET POINTER TO VALUE
         BAL   R14,SVTELUPT                UPDATE SYMBOL VALUE TABLE
TERMDONE EQU   *
*
*       /*************************************************************/
*       /*                                                  ZP60014  */
*       /* -SYSSMFID                                        ZP60014  */
*       /*                                                  ZP60014  */
*       /*************************************************************/
*
         L     R2,CVTPTR                   ---> CVT
         L     R2,CVTSMCA-CVT(,R2)         ---> SMCA
         LA    R1,SMCASID-SMCABASE(,R2)    ---> SMCASID
         LA    ICTR,3
SMFBLANK LA    R2,0(ICTR,R1)               ---> END OF SMCASID
         CLI   0(R2),C' '                  TRAILING BLANK?
         BNE   SMFIDOK                     NO, HAVE LENGTH
         BCT   ICTR,SMFBLANK               YES, DECREMENT LENGTH
SMFIDOK  LR    R2,ICTR                     GET LENGTH CODE OF SID
         EX    R2,@SM01548                 MOVE IN SMF ID
         LA    ICTR,1(,ICTR)               RESTORE LENGTH
         STH   ICTR,SVTLNG(,SVTELPTR)      SET CURRENT VALUE LENGTH
         STH   ICTR,SVTORIG(,SVTELPTR)     SET ORIGINAL VALUE LENGTH
         L     R6,SNTABPTR                 POINT TO SYMBOL NAME TABLE
         STCM  SVTELPTR,15,CSMFVAL(R6)     SET POINTER TO VALUE
         BAL   R14,SVTELUPT                UPDATE SYMBOL VALUE TABLE
*
*       /*************************************************************/
*       /*                                                  ZP60014  */
*       /* -SYSOPSYS                                        ZP60014  */
*       /*                                                  ZP60014  */
*       /*************************************************************/
*
         MVC   SVTDATA(L'$OSLEVEL,SVTELPTR),$OSLEVEL
         LA    R0,L'$OSLEVEL               GET THE VALUE LENGTH
         STH   R0,SVTLNG(,SVTELPTR)        SET CURRENT VALUE LENGTH
         STH   R0,SVTORIG(,SVTELPTR)       SET ORIGINAL VALUE LENGTH
         L     R6,SNTABPTR                 POINT TO SYMBOL NAME TABLE
         STCM  SVTELPTR,15,COPERVAL(R6)    SET POINTER TO VALUE
         BAL   R14,SVTELUPT                UPDATE SYMBOL VALUE TABLE
*
*       /*************************************************************/
*       /*                                                  ZP60014  */
*       /* -SYSJES                                          ZP60014  */
*       /*                                                  ZP60014  */
*       /*************************************************************/
*
         L     R14,PSATOLD                 ---> TCB
         L     R14,TCBJSCB-TCB(,R14)       ---> JSCB
         L     R14,JSCBSSIB-IEZJSCB(,R14)  ---> SSIB
         LA    R1,SSIBSSNM-SSIB(,R14)      ---> JOB'S SUBSYSTEM NAME
         LA    ICTR,4                      GET MAXIMUM NAME LENGTH
JSNMBLNK LA    R2,0(ICTR,R1)               POINT PAST TRAILING CHAR
         BCTR  R2,0                        POINT TO TRAILING CHAR
         CLI   0(R2),C' '                  TRAILING BLANK?
         BH    JSNMOKAY                    NO, HAVE LENGTH
         BCT   ICTR,JSNMBLNK               YES, DECREMENT LENGTH
         B     JSNMDONE                    JES NAME NOT ACQUIRED
JSNMOKAY LTR   R2,ICTR                     GET LENGTH OF JES NAME
         BNP   JSNMDONE                    NAME NOT SUPPLIED
         BCTR  R2,0                        GET JES NAME LENGTH CODE
         EX    R2,@SM01548                 MOVE IN JES NAME
         STH   ICTR,SVTLNG(,SVTELPTR)      SET CURRENT VALUE LENGTH
         STH   ICTR,SVTORIG(,SVTELPTR)     SET ORIGINAL VALUE LENGTH
         L     R6,SNTABPTR                 POINT TO SYMBOL NAME TABLE
         STCM  SVTELPTR,15,CJESVAL(R6)     SET POINTER TO VALUE
         BAL   R14,SVTELUPT                UPDATE SYMBOL VALUE TABLE
JSNMDONE EQU   *
*                                                                  0239
*       /*************************************************************/
*       /*                                                           */
*       /* -SYSICMD                                                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0239
*       IF IMPLICIT=YES THEN        /* INIT TO IMPLICIT INVOC NAME   */
         TM    IMPLICIT(ECDAPTR),B'10000000'                       0239
         BNO   @RF00239                                            0239
*         DO;                                                      0240
*           SVTDATA(1:ECDAILNG)=PROCNAME(1:ECDAILNG);/* IMPLICIT NME */
         SLR   R6,R6                                               0241
         IC    R6,ECDAILNG(,ECDAPTR)                               0241
         LR    R14,R6                                              0241
         BCTR  R14,0                                               0241
         L     R1,ECDAINME(,ECDAPTR)                               0241
         EX    R14,@SM01548                                        0241
*           SVTORIG=ECDAILNG;       /* SAVE LENGTH                   */
         STH   R6,SVTORIG(,SVTELPTR)                               0242
*           SVTLNG=SVTORIG;                                        0243
         STH   R6,SVTLNG(,SVTELPTR)                                0243
*           CICMDVAL=SVTELPTR;      /* ADDR OF VALUE                 */
         L     R6,SNTABPTR                                         0244
         STCM  SVTELPTR,15,CICMDVAL(R6)                            0244
*           CALL SVTELUPT;          /* UPDATE TABLE INFO             */
         BAL   R14,SVTELUPT                                        0245
*         END;                                                     0246
*       ECDALNEL=ADDR(CLASTVAL);                          ZP60014  0247
@RF00239 L     R14,SNTABPTR                                        0247
         LA    R15,CLASTVAL(,R14)                         ZP60014  0247
         ST    R15,ECDALNEL(,ECDAPTR)                              0247
*       USNTABST=SNTABPTR+SNTABUSE;                                0248
         LR    R15,R14                                             0248
         AL    R15,SNTABUSE(,R14)                                  0248
         ST    R15,USNTABST                                        0248
*       RFY                                                        0249
*         SVTELEM BASED(SNTVLPTR);                                 0249
*                                                                  0249
*       /*************************************************************/
*       /*                                                           */
*       /* DETERMINE IF FIRST STATEMENT IS A PROC STATEMENT          */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0250
*       ICTR=CON1;                                                 0250
         LA    ICTR,1                                              0250
*       CALL SKIPSEP;               /* SKIP LEADING SEPERATORS       */
         BAL   R14,SKIPSEP                                         0251
*       SCTR=ICTR;                  /* SAVE START OF PARM            */
         LR    SCTR,ICTR                                           0252
         C     SCTR,LINELNG
         BNH   DOFNDSEP
         MVC   CT431RET(4),FW08
         B     @RC00112
*       CALL FINDSEP;               /* LOCATE THE NEXT SEPERATOR     */
DOFNDSEP BAL   R14,FINDSEP                                         0253
*       IF(ICTR-SCTR)^=LENGTH(CPROC) RECORD(SCTR:ICTR-CON1)^=CPROC THEN
         LR    R9,ICTR                                             0254
         SLR   R9,SCTR                                             0254
         C     R9,FW04                                             0254
         BNE   @RT00254                                            0254
         L     R3,ECDAIREC(,ECDAPTR)                               0254
         ALR   R3,SCTR                                             0254
         CLC   RECORD-1(4,R3),$PROC                                0254
         BE    @RF00254                                            0254
@RT00254 DS    0H                                                  0255
*         DO;                                                      0255
*           IF(IMPLICIT=NO&(VLST=YES&VLSTLNG^=CON0)) (IMPLICIT=YES&
*               ECTNOPD=NO) THEN    /* IF THERE WERE PARMS IN        */
         TM    IMPLICIT(ECDAPTR),B'10000000'                       0256
         BNZ   @GL00002                                            0256
         L     R9,ECDAEANS(,ECDAPTR)                               0256
         TM    VLST(R9),B'10000000'                                0256
         BNO   @GL00002                                            0256
         LH    R9,VLSTLNG(,R9)                                     0256
         LTR   R9,R9                                               0256
         BNZ   @RT00256                                            0256
@GL00002 TM    IMPLICIT(ECDAPTR),B'10000000'                       0256
         BNO   @RF00256                                            0256
         L     R9,CPPLPTR(,ECDAPTR)                                0256
         L     R9,CPPLECT-CPPL(,R9)                                0256
         TM    ECTSWS-ECT(R9),ECTNOPD                              0256
         BNZ   @RF00256                                            0256
@RT00256 DS    0H                                                  0257
*             DO;                   /* VALUE LIST AND NO PROC STMT   */
*               EXMSGID=A529;       /* THEN TELL USER THE VALUE LIST
*                                      PARMS ARE IGNORED             */
         MVC   EXMSGID(4),$MSGA529                                 0258
*               IF IMPLICIT=NO THEN /* EXPLICIT - PICK UP ADDRESS OF */
         TM    IMPLICIT(ECDAPTR),B'10000000'                       0259
         BNZ   @RF00259                                            0259
*                 DO;               /* VALUE LIST FROM PARSE PDL     */
*                   MVAR(1)=VLSTPTR;                               0261
         L     R9,ECDAEANS(,ECDAPTR)                               0261
         L     R15,VLSTPTR(,R9)                                    0261
         ST    R15,MVAR                                            0261
*                   MVARLEN(1)=VLSTLNG;                            0262
         LH    R9,VLSTLNG(,R9)                                     0262
         STC   R9,MVARLEN                                          0262
*                 END;                                             0263
*               ELSE                /* IMPLICIT - PICK UP ADDRESS    */
*                 DO;               /* OF VALUE LIST ADDRESS USING   */
         B     @RC00259                                            0264
@RF00259 DS    0H                                                  0265
*                   MVAR(1)=ADDR(CBUFTEXT)+CBUFOFF;/* CMD BUFFER   0265
*                                      OFFSETS                       */
         L     R9,CPPLPTR(,ECDAPTR)                                0265
         L     R9,CPPLCBUF-CPPL(,R9)                               0265
         LA    R14,CBUFTEXT(,R9)                                   0265
         LH    R15,CBUFOFF(,R9)                                    0265
         ALR   R14,R15                                             0265
         ST    R14,MVAR                                            0265
*                   MVARLEN(1)=CBUFLNG-CBUFOFF;                    0266
         LCR   R15,R15                                             0266
         AH    R15,CBUFLNG(,R9)                                    0266
         STC   R15,MVARLEN                                         0266
*                 END;                                             0267
*               CALL MSGRTN;                                       0268
@RC00259 BAL   R14,MSGRTN                                          0268
*             END;                                                 0269
*
*
*             CT431RET=CON0;
@RF00256 SLR   R9,R9
         ST    R9,CT431RET
         B     @RF00270                                            0272
*         END;                                                     0273
*                                                                  0273
*       /*************************************************************/
*       /*                                                           */
*       /* CONTROL RETURNS TO IKJCT431 EXIT POINT                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0274
*                                                                  0274
*       /*************************************************************/
*       /*                                                           */
*       /* SYNTAX CHECK THE POSITIONAL SPECIFICATION                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0274
*       ELSE                        /* CHECK POSIT SPECIFICATION     */
*         DO;                                                      0274
@RF00254 DS    0H                                                  0275
*           CT431RET=CON4;                                         0275
         MVC   CT431RET(4),FW04                                    0275
*                                   /* STMTS OTHER THAN PROC STMT ARE
*                                      RETURNED TO IKJCT430 SO THEY  */
*                                   /* WILL BE PROCESSED BY IKJCT432 */
@RF00270 CLC   CT431RET(4),FW04
         BNE   @RC00112
*           CALL SKIPSEP;           /* FIND START OF NUMBER          */
         BAL   R14,SKIPSEP                                         0276
*           SCTR=ICTR;                                             0277
         LR    SCTR,ICTR                                           0277
*           CALL FINDSEP;           /* FIND END OF NUMBER            */
         BAL   R14,FINDSEP                                         0278
*           IF ICTR-SCTR>CON0&ICTR-SCTR<CON9 THEN/* IF NUMBER EIGHT
*                                      OR LESS BYTES                 */
         LR    R3,ICTR                                             0279
         SLR   R3,SCTR                                             0279
         LTR   R3,R3                                               0279
         BNP   @RF00279                                            0279
         C     R3,FW09                                             0279
         BNL   @RF00279                                            0279
*             DO;                   /* LONG THEN IT MAY BE VALID-    */
*               PCTR=CON8;          /* OVER EIGHT BYTES IT IS INVALID*/
         LA    PCTR,8                                              0281
*               PACKLOC='';                                        0282
*                                                                  0282
         MVI   PACKLOC,C' '                                        0282
         MVC   PACKLOC+1(7),PACKLOC                                0282
*               /*****************************************************/
*               /*                                                   */
*               /* PREPARE TO PACK AND CONVERT POSITIONAL            */
*               /* SPECIFICATION                                     */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0283
*               DO JCTR=ICTR-CON1 TO SCTR BY-1 WHILE RECORD(JCTR)^<
*                     CONC0&RECORD(JCTR)^>CONC9;                   0283
         LR    R9,ICTR                                             0283
         BCTR  R9,0                                                0283
         ST    R9,JCTR                                             0283
         B     @DE00283                                            0283
@DL00283 L     R3,ECDAIREC(,ECDAPTR)                               0283
         ALR   R9,R3                                               0283
         CLI   RECORD-1(R9),C'0'                                   0283
         BL    @DC00283                                            0283
         L     R4,JCTR                                             0283
         ALR   R4,R3                                               0283
         CLI   RECORD-1(R4),C'9'                                   0283
         BH    @DC00283                                            0283
*                 PACKLOC(PCTR)=RECORD(JCTR);/* POSITIONAL         0284
*                                      SPECIFICATION MUST            */
         LA    R9,PACKLOC-1(PCTR)                                  0284
         L     R4,JCTR                                             0284
         ALR   R3,R4                                               0284
         MVC   0(1,R9),RECORD-1(R3)                                0284
*                 PCTR=PCTR-CON1;   /* BE NUMERIC                    */
         BCTR  PCTR,0                                              0285
*               END;                                               0286
         BCTR  R4,0                                                0286
         LR    R9,R4                                               0286
         ST    R9,JCTR                                             0286
@DE00283 CR    R9,SCTR                                             0286
         BNL   @DL00283                                            0286
@DC00283 DS    0H                                                  0287
*               IF JCTR^<SCTR THEN  /* IF ALL DIGITS WERE NOT MOVED  */
         C     SCTR,JCTR                                           0287
         BH    @RF00287                                            0287
*                 POSPCERR=YES;     /* IN THEN ONE OF THE DIGITS WAS
*                                      NOT NUMERIC - INDICATE      0288
*                                      POSITIONAL SPECIFICATION    0288
*                                      INVALID                       */
         OI    POSPCERR,B'01000000'                                0288
*               ELSE                /* CONVERT THE NUMBER TO BINARY  */
*                 DO;               /* AND SAVE                      */
         B     @RC00287                                            0289
@RF00287 DS    0H                                                  0290
*                   PACK(CVERTLOC,PACKLOC);                        0290
         PACK  CVERTLOC(8),PACKLOC(8)                              0290
*                   CVB(POSNUM,CVERTLOC);                          0291
         CVB   R9,CVERTLOC                                         0291
         ST    R9,POSNUM                                           0291
*                 END;                                             0292
*             END;                                                 0293
*           ELSE                                                   0294
*             POSPCERR=YES;                                        0294
         B     @RC00279                                            0294
@RF00279 OI    POSPCERR,B'01000000'                                0294
*           IF POSPCERR=YES THEN    /* IF POSITIONAL SPECIFICATION   */
@RC00279 TM    POSPCERR,B'01000000'                                0295
         BNO   @RF00295                                            0295
*             DO;                   /* INVALID NOTIFY USER AND       */
*               NOTEXEC=YES;        /* EXIT TO IKJCT430              */
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0297
*               MVAR(1)=ADDR(RECORD(SCTR));                        0298
         L     R3,ECDAIREC(,ECDAPTR)                               0298
         LA    R3,RECORD-1(SCTR,R3)                                0298
         ST    R3,MVAR                                             0298
*               MVARLEN(1)=ICTR-SCTR;                              0299
         LR    R3,ICTR                                             0299
         SLR   R3,SCTR                                             0299
         STC   R3,MVARLEN                                          0299
*               EXMSGID=M506;                                      0300
         MVC   EXMSGID(4),$MSGM506                                 0300
*               CALL MSGRTN;                                       0301
         BAL   R14,MSGRTN                                          0301
*             END;                                                 0302
*                                                                  0303
*           /*********************************************************/
*           /*                                                       */
*           /* SYNTAX CHECK EACH POSITIONAL PARAMETER                */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0303
*           ELSE                    /* POSIT SPECIFICATION O.K.      */
*             DO;                                                  0303
         B     @RC00295                                            0303
@RF00295 DS    0H                                                  0304
*               POSCHAR=CON0;                                      0304
         SLR   POSCHAR,POSCHAR                                     0304
*               CALL SKIPSEP;       /* SKIP PRECEEDING SEPERATORS    */
         BAL   R14,SKIPSEP                                         0305
*               DO PCTR=1 TO POSNUM WHILE ICTR<=LINELNG&STABERR=NO;/*
*                                      FIND PARAMETER START          */
         LA    PCTR,1                                              0306
         B     @DE00306                                            0306
@DL00306 C     ICTR,LINELNG                                        0306
         BH    @DC00306                                            0306
         TM    STABERR,B'10000000'                                 0306
         BNZ   @DC00306                                            0306
*                 SCTR=ICTR;        /* SAVE START OF PARAMETER       */
         LR    SCTR,ICTR                                           0307
*                 POSERR=NO;                                       0308
         NI    POSERR,B'11011111'                                  0308
*                 IF(RECORD(SCTR)^<CONCA&/* FIRST CHARACTER MUST BE  */
*                     RECORD(SCTR)^>CONCI) (RECORD(SCTR)^<CONCJ&RECORD(
*                     SCTR)^>CONCR) (RECORD(SCTR)^<CONCS&RECORD(SCTR)^>
*                     CONCZ) THEN   /* ALPHA                         */
         L     R9,ECDAIREC(,ECDAPTR)                               0309
         LR    R3,R9                                               0309
         ALR   R3,SCTR                                             0309
         CLI   RECORD-1(R3),C'A'                                   0309
         BL    @GL00010                                            0309
         ALR   R9,SCTR                                             0309
         CLI   RECORD-1(R9),C'I'                                   0309
         BNH   @RT00309                                            0309
@GL00010 L     R9,ECDAIREC(,ECDAPTR)                               0309
         LR    R3,R9                                               0309
         ALR   R3,SCTR                                             0309
         CLI   RECORD-1(R3),C'J'                                   0309
         BL    @GL00009                                            0309
         ALR   R9,SCTR                                             0309
         CLI   RECORD-1(R9),C'R'                                   0309
         BNH   @RT00309                                            0309
@GL00009 L     R9,ECDAIREC(,ECDAPTR)                               0309
         LR    R3,R9                                               0309
         ALR   R3,SCTR                                             0309
         CLI   RECORD-1(R3),C'S'                                   0309
         BL    @RF00309                                            0309
         ALR   R9,SCTR                                             0309
         CLI   RECORD-1(R9),C'Z'                                   0309
         BH    @RF00309                                            0309
@RT00309 DS    0H                                                  0310
*                   CALL VALIDATE;                                 0310
         BAL   R14,VALIDATE                                        0310
*                 ELSE              /* IF FIRST CHARACTER NOT ALPHA  */
*                   POSERR=YES;     /* THEN IT IS AN ERROR           */
         B     @RC00309                                            0311
@RF00309 OI    POSERR,B'00100000'                                  0311
*                 IF POSERR=NO&     /* IF THERE HAVE BEEN NO ERRORS  */
*                     VALIDERR=NO&  /* AND THE PARAMETER HAS A GOOD  */
*                     JCTR-SCTR<CON253 THEN/* LENGTH                 */
@RC00309 TM    POSERR,B'00100100'                                  0312
         BNZ   @RF00312                                            0312
         L     R9,JCTR                                             0312
         SLR   R9,SCTR                                             0312
         C     R9,FW253                                            0312
         BNL   @RF00312                                            0312
*                   DO;                                            0313
*                     PARMADR=ADDR(RECORD(SCTR));/* USE THE        0314
*                                      SNTAB/SVTAB                   */
         L     R3,ECDAIREC(,ECDAPTR)                               0314
         LA    R3,RECORD-1(SCTR,R3)                                0314
         ST    R3,PARMADR                                          0314
*                     PARMLNG=JCTR-SCTR;/* UPDATE ROUTINE TO PLACE IN*/
         ST    R9,PARMLNG                                          0315
*                     POSCHAR=POSCHAR+PARMLNG;/* TABLES              */
         ALR   POSCHAR,R9                                          0316
*                     PARMTYPE=POSIT;                              0317
         SLR   R9,R9                                               0317
         STH   R9,PARMTYPE                                         0317
*                     CALL SNTABUPT;                               0318
         BAL   R14,SNTABUPT                                        0318
*                   END;                                           0319
*                 ELSE                                             0320
*                   DO;                                            0320
         B     @RC00312                                            0320
@RF00312 DS    0H                                                  0321
*                     IF ICTR-SCTR^<CON253 THEN/* USE INVALID PARM 0321
*                                      LENGTH                        */
         LR    R3,ICTR                                             0321
         SLR   R3,SCTR                                             0321
         C     R3,FW253                                            0321
         BL    @RF00321                                            0321
*                       EXMSGID=A507;/* MESSAGE                      */
         MVC   EXMSGID(4),$MSGA507                                 0322
*                     ELSE          /* OTHERWISE EXPLAIN WHY PARM    */
*                       DO;         /* INVALID                       */
         B     @RC00321                                            0323
@RF00321 DS    0H                                                  0324
*                         EXMSGID=M507;                            0324
         MVC   EXMSGID(4),$MSGM507                                 0324
*                         ICTR=ICTR+CON1;                          0325
         AL    ICTR,FW01                                           0325
*                       END;                                       0326
*                     MVAR(1)=ADDR(CPOSIT);                        0327
@RC00321 LA    R9,@CC01304                                         0327
         ST    R9,MVAR                                             0327
*                     MVARLEN(1)=LENGTH(CPOSIT);                   0328
         MVI   MVARLEN,X'0A'                                       0328
*                     MVAR(2)=ADDR(RECORD(SCTR));                  0329
         L     R3,ECDAIREC(,ECDAPTR)                               0329
         LA    R9,RECORD-1(SCTR,R3)                                0329
         ST    R9,MVAR+4                                           0329
*                     MVARLEN(2)=ICTR-SCTR;                        0330
         LR    R3,ICTR                                             0330
         SLR   R3,SCTR                                             0330
         STC   R3,MVARLEN+4                                        0330
*                     IF ICTR-SCTR>CON127 THEN/* TRUNCATE            */
         C     R3,FW127                                            0331
         BNH   @RF00331                                            0331
*                       MVARLEN(2)=CON127;/* LENGTHS GT 127          */
         MVI   MVARLEN+4,X'7F'                                     0332
*                     NOTEXEC=YES;  /* PROCEDURE HAS ERRORS          */
@RF00331 OI    NOTEXEC(ECDAPTR),B'01000000'                        0333
*                     CALL MSGRTN;  /* ISSUE MESSAGE TO USER         */
         BAL   R14,MSGRTN                                          0334
*                     CALL SKIPSEP; /* FIND START OF NEXT PARM       */
         BAL   R14,SKIPSEP                                         0335
*                   END;                                           0336
*               END;                                               0337
@RC00312 AL    PCTR,FW01                                           0337
@DE00306 C     PCTR,POSNUM                                         0337
         BNH   @DL00306                                            0337
@DC00306 DS    0H                                                  0338
*               IF PCTR<=POSNUM&STABERR=NO THEN/* IF WE DID NOT    0338
*                                      PROCESS ENOUGH                */
         C     PCTR,POSNUM                                         0338
         BH    @RF00338                                            0338
         TM    STABERR,B'10000000'                                 0338
         BNZ   @RF00338                                            0338
*                 DO;               /* PARMS THEN NOTIFY USER        */
*                   NOTEXEC=YES;                                   0340
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0340
*                   EXMSGID=M509;                                  0341
         MVC   EXMSGID(4),$MSGM509                                 0341
*                   CALL MSGRTN;                                   0342
         BAL   R14,MSGRTN                                          0342
*                 END;                                             0343
*                                                                  0344
*               /*****************************************************/
*               /*                                                   */
*               /* SYNTAX CHECK KEYWORD SPECIFICATIONS               */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0344
*               KEYWORD=YES;        /* CURRENTLY PROCESSING KEYWORDS */
@RF00338 OI    KEYWORD,B'00001000'                                 0344
*               KEYWCHAR=CON0;                                     0345
         SLR   KEYWCHAR,KEYWCHAR                                   0345
*               KEYCHAR=CON0;                                      0346
         SLR   KEYCHAR,KEYCHAR                                     0346
*               KEYWNUM=CON0;                                      0347
         SLR   R9,R9                                               0347
         ST    R9,KEYWNUM                                          0347
*               KEYNUM=CON0;                                       0348
         ST    R9,KEYNUM                                           0348
*               DO WHILE ICTR<=LINELNG&STABERR=NO;                 0349
         B     @DE00349                                            0349
@DL00349 DS    0H                                                  0350
*                 SCTR=ICTR;                                       0350
         LR    SCTR,ICTR                                           0350
*                 KEYERR=NO;                                       0351
         NI    KEYERR,B'11101111'                                  0351
*                 IF(RECORD(SCTR)^<CONCA&/* FIRST CHARACTER MUST BE
*                                      ALPHA                         */
*                     RECORD(SCTR)^>CONCI) (RECORD(SCTR)^<CONCJ&RECORD(
*                     SCTR)^>CONCR) (RECORD(SCTR)^<CONCS&RECORD(SCTR)^>
*                     CONCZ) THEN                                  0352
         L     R9,ECDAIREC(,ECDAPTR)                               0352
         LR    R1,R9                                               0352
         ALR   R1,SCTR                                             0352
         CLI   RECORD-1(R1),C'A'                                   0352
         BL    @GL00017                                            0352
         ALR   R9,SCTR                                             0352
         CLI   RECORD-1(R9),C'I'                                   0352
         BNH   @RT00352                                            0352
@GL00017 L     R9,ECDAIREC(,ECDAPTR)                               0352
         LR    R1,R9                                               0352
         ALR   R1,SCTR                                             0352
         CLI   RECORD-1(R1),C'J'                                   0352
         BL    @GL00016                                            0352
         ALR   R9,SCTR                                             0352
         CLI   RECORD-1(R9),C'R'                                   0352
         BNH   @RT00352                                            0352
@GL00016 L     R9,ECDAIREC(,ECDAPTR)                               0352
         LR    R1,R9                                               0352
         ALR   R1,SCTR                                             0352
         CLI   RECORD-1(R1),C'S'                                   0352
         BL    @RF00352                                            0352
         ALR   R9,SCTR                                             0352
         CLI   RECORD-1(R9),C'Z'                                   0352
         BH    @RF00352                                            0352
@RT00352 DS    0H                                                  0353
*                   CALL VALIDATE;                                 0353
         BAL   R14,VALIDATE                                        0353
*                 ELSE              /* OTHERWISE IT IS AN ERROR      */
*                   KEYERR=YES;                                    0354
         B     @RC00352                                            0354
@RF00352 OI    KEYERR,B'00010000'                                  0354
*                 IF(KEYERR=NO&VALIDERR=NO)&JCTR-SCTR<=CON31 THEN/*
*                                      IF THERE HAVE BEEN NO ERRORS  */
@RC00352 TM    KEYERR,B'00010100'                                  0355
         BNZ   @RF00355                                            0355
         L     R9,JCTR                                             0355
         SLR   R9,SCTR                                             0355
         C     R9,FW31                                             0355
         BH    @RF00355                                            0355
*                   DO;             /* THEN PREPARE FOR SNTAB ENTRY  */
*                     PARMADR=ADDR(RECORD(SCTR));                  0357
         L     R14,ECDAIREC(,ECDAPTR)                              0357
         LA    R15,RECORD-1(SCTR,R14)                              0357
         ST    R15,PARMADR                                         0357
*                     PARMLNG=JCTR-SCTR;/* IF THE NEXT NON SEPERATOR
*                                      IS                            */
         ST    R9,PARMLNG                                          0358
*                     IF ICTR<=LINELNG&RECORD(ICTR)=LFPAREN THEN/* A
*                                      LEFT PAREN THEN IT A          */
         C     ICTR,LINELNG                                        0359
         BH    @RF00359                                            0359
         ALR   R14,ICTR                                            0359
         CLI   RECORD-1(R14),C'('                                  0359
         BNE   @RF00359                                            0359
*                       DO;         /* KEYWORD WITH VALUE            */
*                         PARMTYPE=KEYW;                           0361
         MVC   PARMTYPE(2),HW03                                    0361
*                         KEYWCHAR=KEYWCHAR+PARMLNG;               0362
         ALR   KEYWCHAR,R9                                         0362
*                         KEYWNUM=KEYWNUM+CON1;                    0363
         LA    R2,1                                                0363
         AL    R2,KEYWNUM                                          0363
         ST    R2,KEYWNUM                                          0363
*                         CALL VALUECHK;/* SYNTAX CHECK THE VALUE    */
         BAL   R14,VALUECHK                                        0364
*                         IF VALSTR^=CON0 THEN                     0365
         L     R9,VALSTR                                           0365
         LTR   R9,R9                                               0365
         BZ    @RF00365                                            0365
*                           DO;                                    0366
*                             VALLNG=VALEND-VALSTR+CON1;           0367
         L     R2,VALEND                                           0367
         SLR   R2,R9                                               0367
         AL    R2,FW01                                             0367
         ST    R2,VALLNG                                           0367
*                             VALADR=ADDR(RECORD(VALSTR));         0368
         L     R2,ECDAIREC(,ECDAPTR)                               0368
         LA    R9,RECORD-1(R9,R2)                                  0368
         ST    R9,VALADR                                           0368
*                           END;                                   0369
*                         ELSE                                     0370
*                           VALLNG=CON0;                           0370
         B     @RC00365                                            0370
@RF00365 SLR   R2,R2                                               0370
         ST    R2,VALLNG                                           0370
*                       END;                                       0371
*                     ELSE          /* IF CHARACTER NOT A LEFT PAREN */
*                       DO;         /* THEN IT A KEYWORD WITH NO     */
         B     @RC00359                                            0372
@RF00359 DS    0H                                                  0373
*                         KEYCHAR=KEYCHAR+PARMLNG;/* VALUE           */
         AL    KEYCHAR,PARMLNG                                     0373
*                         PARMTYPE=KEYWO;                          0374
         LA    R9,1                                                0374
         STH   R9,PARMTYPE                                         0374
*                         KEYNUM=KEYNUM+CON1;                      0375
         AL    R9,KEYNUM                                           0375
         ST    R9,KEYNUM                                           0375
*                       END;                                       0376
*                     CALL SNTABUPT;/* CREATE ENTRY IN SNTAB/SVTAB   */
@RC00359 BAL   R14,SNTABUPT                                        0377
*                   END;                                           0378
*                 ELSE              /* IF ERRORS HAD BEEN DETECTED   */
*                   DO;                                            0379
         B     @RC00355                                            0379
@RF00355 DS    0H                                                  0380
*                     IF JCTR-SCTR>CON31 THEN/* THEN NOTIFY USER AND
*                                      CONTINUE                      */
         L     R9,JCTR                                             0380
         SLR   R9,SCTR                                             0380
         C     R9,FW31                                             0380
         BNH   @RF00380                                            0380
*                       EXMSGID=A507;/* SYNTAX CHECKING ANY OTHER    */
         MVC   EXMSGID(4),$MSGA507                                 0381
*                     ELSE          /* PARMS ON PROC STATEMENT       */
*                       DO;                                        0382
         B     @RC00380                                            0382
@RF00380 DS    0H                                                  0383
*                         EXMSGID=M507;                            0383
         MVC   EXMSGID(4),$MSGM507                                 0383
*                         ICTR=ICTR+CON1;                          0384
         AL    ICTR,FW01                                           0384
*                       END;                                       0385
*                     MVAR(1)=ADDR(CKEYWORD);                      0386
@RC00380 LA    R9,$KEYWORD                                         0386
         ST    R9,MVAR                                             0386
*                     MVARLEN(1)=LENGTH(CKEYWORD);                 0387
         MVI   MVARLEN,X'07'                                       0387
*                     MVAR(2)=ADDR(RECORD(SCTR));                  0388
         L     R9,ECDAIREC(,ECDAPTR)                               0388
         LA    R9,RECORD-1(SCTR,R9)                                0388
         ST    R9,MVAR+4                                           0388
*                     MVARLEN(2)=ICTR-SCTR;                        0389
         LR    R9,ICTR                                             0389
         SLR   R9,SCTR                                             0389
         STC   R9,MVARLEN+4                                        0389
*                     NOTEXEC=YES;                                 0390
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0390
*                     CALL MSGRTN;                                 0391
         BAL   R14,MSGRTN                                          0391
*                   END;                                           0392
*                 CALL SKIPSEP;     /* UPDATE TO NEXT KEYWORD        */
@RC00355 BAL   R14,SKIPSEP                                         0393
*               END;                                               0394
@DE00349 C     ICTR,LINELNG                                        0394
         BH    @DC00349                                            0394
         TM    STABERR,B'10000000'                                 0394
         BZ    @DL00349                                            0394
@DC00349 DS    0H                                                  0395
*               IF NOTEXEC=YES (POSNUM+KEYNUM+KEYWNUM=CON0) THEN   0395
         TM    NOTEXEC(ECDAPTR),B'01000000'                        0395
         BO    @RT00395                                            0395
         L     R2,POSNUM                                           0395
         AL    R2,KEYNUM                                           0395
         AL    R2,KEYWNUM                                          0395
         LTR   R2,R2                                               0395
         BNZ   @RF00395                                            0395
@RT00395 DS    0H                                                  0396
*                 DO;                                              0396
*                   IF NOTEXEC=NO THEN                             0397
         TM    NOTEXEC(ECDAPTR),B'01000000'                        0397
         BNZ   @RF00397                                            0397
*                     DO;                                          0398
*                       IF(IMPLICIT=NO&(VLST=YES&VLSTLNG^=CON0)) ( 0399
*                           IMPLICIT=YES&ECTNOPD=NO) THEN          0399
         TM    IMPLICIT(ECDAPTR),B'10000000'                       0399
         BNZ   @GL00025                                            0399
         L     R6,ECDAEANS(,ECDAPTR)                               0399
         TM    VLST(R6),B'10000000'                                0399
         BNO   @GL00025                                            0399
         LH    R6,VLSTLNG(,R6)                                     0399
         LTR   R6,R6                                               0399
         BNZ   @RT00399                                            0399
@GL00025 TM    IMPLICIT(ECDAPTR),B'10000000'                       0399
         BNO   @RF00399                                            0399
         L     R6,CPPLPTR(,ECDAPTR)                                0399
         L     R6,CPPLECT-CPPL(,R6)                                0399
         TM    ECTSWS-ECT(R6),ECTNOPD                              0399
         BNZ   @RF00399                                            0399
@RT00399 DS    0H                                                  0400
*                         DO;                                      0400
*                           EXMSGID=B529;                          0401
         MVC   EXMSGID(4),$MSGB529                                 0401
*                           IF IMPLICIT=NO THEN/* EXPLICIT - PICK UP
*                                      ADDR FROM                     */
         TM    IMPLICIT(ECDAPTR),B'10000000'                       0402
         BNZ   @RF00402                                            0402
*                             DO;   /* FROM PDL                      */
*                               MVAR(1)=VLSTPTR;                   0404
         L     R6,ECDAEANS(,ECDAPTR)                               0404
         L     R9,VLSTPTR(,R6)                                     0404
         ST    R9,MVAR                                             0404
*                               MVARLEN(1)=VLSTLNG;                0405
         LH    R6,VLSTLNG(,R6)                                     0405
         STC   R6,MVARLEN                                          0405
*                             END;                                 0406
*                           ELSE    /* IMPLICIT - PICK UP ADDR USING */
*                             DO;                                  0407
         B     @RC00402                                            0407
@RF00402 DS    0H                                                  0408
*                               MVAR(1)=ADDR(CBUFTEXT)+CBUFOFF;    0408
         L     R6,CPPLPTR(,ECDAPTR)                                0408
         L     R6,CPPLCBUF-CPPL(,R6)                               0408
         LA    R8,CBUFTEXT(,R6)                                    0408
         LH    R9,CBUFOFF(,R6)                                     0408
         ALR   R8,R9                                               0408
         ST    R8,MVAR                                             0408
*                               MVARLEN(1)=CBUFLNG-CBUFOFF;        0409
         LCR   R9,R9                                               0409
         AH    R9,CBUFLNG(,R6)                                     0409
         STC   R9,MVARLEN                                          0409
*                             END;                                 0410
*                           CALL MSGRTN;                           0411
@RC00402 BAL   R14,MSGRTN                                          0411
*                         END;                                     0412
*                     END;                                         0413
*                 END;                                             0414
*                                                                  0414
*               /*****************************************************/
*               /*                                                   */
*               /* IF ERRORS HAVE OCCURRED THEN CONTROL GOES TO EXIT */
*               /* AT THIS POINT                                     */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0415
*                                                                  0415
*               /*****************************************************/
*               /*                                                   */
*               /* GET CORE FOR THE VALUE LIST PCL                   */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0415
*               ELSE                /* PARAMETER SYNTAX O.K.         */
*                 DO;                                              0415
         B     @RC00395                                            0415
@RF00395 DS    0H                                                  0416
*                   POSAR=POSNUM*LENGTH(IDMOD)+POSCHAR;/* AMOUNT   0416
*                                      NEEDED FOR POSITIONAL       0416
*                                      PARAMETERS                    */
         L     POSAR,POSNUM                                        0416
         MH    POSAR,HW56                                          0416
         ALR   POSAR,POSCHAR                                       0416
*                   KEYAR=KEYNUM*LENGTH(KWMOD)+KEYCHAR;/* AMOUNT   0417
*                                      NEEDED FOR KEYWORDS WITHOUT 0417
*                                      VALUES                        */
         L     R9,KEYNUM                                           0417
         MH    R9,HW11                                             0417
         ALR   R9,KEYCHAR                                          0417
         ST    R9,KEYAR                                            0417
*                   KEYWAR=KEYWNUM*(LENGTH(KWMOD)+CON2+LENGTH(SUBMOD)+
*                       LENGTH(VIDMAP))+KEYWCHAR*CON2;/* AMOUNT FOR
*                                      KEYWORDS WITH VALUES          */
         L     KEYWAR,KEYWNUM                                      0418
         MH    KEYWAR,HW69                                         0418
         LR    R4,KEYWCHAR                                         0418
         ALR   R4,R4                                               0418
         ALR   KEYWAR,R4                                           0418
*                   GETAMT=POSAR+KEYAR+KEYWAR+LENGTH(PCEHEAD)+LENGTH(
*                       PCEEND);                                   0419
         ALR   R9,POSAR                                            0419
         ALR   R9,KEYWAR                                           0419
         AL    R9,FW08                                             0419
         ST    R9,GETAMT                                           0419
*                   GETAMT=GETAMT-1;                                 */
         BCTR  R9,0
         ST    R9,GETAMT
*                   PCLAMT=GETAMT;  /* SAVE LENGTH OF PCL            */
*                                                                  0420
         ST    R9,PCLAMT                                           0420
*                   /*************************************************/
*                   /*                                               */
*                   /* IF THIS IS AN EXPLICIT EXEC WITH A VALUE LIST */
*                   /* THEN GET EXTRA SO WE CAN COPY OVER THE VALUE  */
*                   /* LIST                                          */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0421
*                   IF IMPLICIT=NO&VLST=YES&VLSTLNG^=CON0 THEN/* IF
*                                      EXPLICIT THEN                 */
         TM    IMPLICIT(ECDAPTR),B'10000000'                       0421
         BNZ   @RF00421                                            0421
         L     R6,ECDAEANS(,ECDAPTR)                               0421
         TM    VLST(R6),B'10000000'                                0421
         BNO   @RF00421                                            0421
         LH    R4,VLSTLNG(,R6)                                     0421
         LTR   R4,R4                                               0421
         BZ    @RF00421                                            0421
*                     DO;           /* ADD EXTRA                     */
*                       GETAMT=GETAMT+VLSTLNG+CON4;                0423
         ALR   R9,R4                                               0423
         AL    R9,FW04                                             0423
         ST    R9,GETAMT                                           0423
*                       COPYVLST=YES;                              0424
         OI    COPYVLST,B'00000010'                                0424
*                     END;                                         0425
*                   RFY                                            0426
*                     R15 RSTD;                                    0426
@RF00421 DS    0H                                                  0427
*                   DO;             /* GETMAIN (EC) LV(GETAMT)     0427
*                                      A(GETADR) SP(1)               */
*                     RESPECIFY                                    0428
*                      (R1) RESTRICTED;                            0428
*                     I004=I004&&I004;/* INIT LIST                   */
         XC    I004(10),I004                                       0429
*                     I00404='20'X; /* TYPE                          */
         MVI   I00404,X'20'                                        0430
*                     I00401=GETAMT;/* LENGTH                        */
         L     R9,GETAMT                                           0431
         ST    R9,I00401                                           0431
*                     I00403=ADDR(GETADR);/* ADDR OF ADDR LIST       */
         LA    R14,GETADR                                          0432
         STCM  R14,7,I00403                                        0432
*                     I00405=1;     /* SUBPOOL VALUE                 */
         MVI   I00405,X'01'                                        0433
*                     R1=ADDR(I004);/* REG1 POINTS TO LIST           */
         LA    R1,I004                                             0434
*                     SVC(4);       /* STANDARD-FORM OF GETMAIN      */
         SVC   4                                                   0435
*                     RESPECIFY                                    0436
*                      (R1) UNRESTRICTED;                          0436
*                   END;            /* GETMAIN (EC) LV(GETAMT)     0437
*                                      A(GETADR) SP(1)               */
*                   IF R15^=CON0 THEN/* IF STORAGE COULD NOT BE      */
         LTR   R15,R15                                             0438
         BZ    @RF00438                                            0438
*                     DO;           /* OBTAINED THEN NOTIFY USER     */
*                       EXMSGID=M511;/* AND TERMINATE                */
         MVC   EXMSGID(4),$MSGM511                                 0440
*                       NOTEXEC=YES;                               0441
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0441
*                       CT431RET=CON16;                            0442
         MVC   CT431RET(4),FW16                                    0442
*                       CALL MSGRTN;                               0443
         BAL   R14,MSGRTN                                          0443
*                     END;                                         0444
*                   ELSE                                           0445
*                     DO;                                          0445
         B     @RC00438                                            0445
@RF00438 DS    0H                                                  0446
*                       PCLCUR=GETADR;/* INIT ADDRESS OF CURRENT PCL */
         L     PCLCUR,GETADR                                       0446
*                       PCLLNG=PCLAMT;/* LENGTH OF PCL               */
         L     R14,PCLAMT                                          0447
         STH   R14,PCLLNG(,PCLCUR)                                 0447
*                       PCLBASE=PCLCUR;                            0448
         LR    PCLBASE,PCLCUR                                      0448
*                       PCLKEYOF=POSAR+LENGTH(PCEHEAD);/* OFFSET TO
*                                      KEYWORDS ADDRESS OF START OF
*                                      SUBFIELD AREA                 */
         LA    R6,6                                                0449
         LR    R14,POSAR                                           0449
         ALR   R14,R6                                              0449
         STH   R14,PCLKEYOF(,PCLCUR)                               0449
*                       SBFCUR=PCLCUR+LENGTH(PCEHEAD)+POSAR+KEYAR+ 0450
*                           KEYWNUM*(LENGTH(KWMOD)+CON2)+KEYWCHAR; 0450
         LR    SBFCUR,PCLCUR                                       0450
         ALR   SBFCUR,R6                                           0450
         ALR   SBFCUR,POSAR                                        0450
         AL    SBFCUR,KEYAR                                        0450
         L     R14,KEYWNUM                                         0450
         MH    R14,HW13                                            0450
         ALR   SBFCUR,R14                                          0450
         ALR   SBFCUR,KEYWCHAR                                     0450
*                       SBFBASE=SBFCUR;                            0451
         ST    SBFCUR,SBFBASE                                      0451
*                       PCLCUR=PCLCUR+LENGTH(PCEHEAD);/* UPDATE TO 0452
*                                      NEXT PCE                      */
         ALR   PCLCUR,R6                                           0452
*                       PDLCUR=CON8;/* DSECT OFFSET PAST PDL HEADER  */
         LA    PDLCUR,8                                            0453
*                                                                  0454
*                       /*********************************************/
*                       /*                                           */
*                       /* INITIALIZE PCES FOR THE POSITIONAL        */
*                       /* PARAMETERS                                */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0454
*                       SNTELPTR=USNTABST;/* ELEMENT BASE TO FIRST 0454
*                                      USER                          */
         L     SNTELPTR,USNTABST                                   0454
*                       SNTABPTR=SNTABFST;/* PARM                    */
         L     R14,LSDPTR(,ECDAPTR)                                0455
         L     R5,LSDEXEC-LSD(,R14)                                0455
         L     R14,SNTABFST(,R5)                                   0455
         ST    R14,SNTABPTR                                        0455
*                       DO PCTR=1 TO POSNUM;/* MOVE IN A COPY OF THE
*                                      MODEL                         */
         LA    PCTR,1                                              0456
         B     @DE00456                                            0456
@DL00456 DS    0H                                                  0457
*                         PCELMT(1:LENGTH(IDMOD))=IDMOD;           0457
         MVC   PCELMT(56,PCLCUR),IDMOD                             0457
*                         IDPRNME(1:SNTLNG)=SNTDATA(1:SNTLNG);/* COPY
*                                      POSIT PARM NAME               */
         LH    R6,SNTLNG(,SNTELPTR)                                0458
         LR    R14,R6                                              0458
         BCTR  R14,0                                               0458
         EX    R14,@SM01557                                        0458
*                         IDLNG=IDLNG+SNTLNG;/* ADJUST TOTAL LENGTH
*                                      TO INCLUDE NAME               */
         ICM   R14,12,IDLNG(PCLCUR)                                0459
         SRA   R14,16                                              0459
         ALR   R14,R6                                              0459
         STCM  R14,3,IDLNG(PCLCUR)                                 0459
*                         IF IDPRMLNG+SNTLNG>CON223 THEN/* IF PROMPT
*                                      INFO TOO LARGE                */
         SLR   R14,R14                                             0460
         IC    R14,IDPRMLNG(,PCLCUR)                               0460
         ALR   R6,R14                                              0460
         C     R6,FW223                                            0460
         BNH   @RF00460                                            0460
*                           IDPRMLNG=CON223;/* FOR PARSE PROMPT    0461
*                                      MESSAGE THEN                  */
         MVI   IDPRMLNG(PCLCUR),X'DF'                              0461
*                         ELSE                                     0462
*                           IDPRMLNG=IDPRMLNG+SNTLNG;              0462
         B     @RC00460                                            0462
@RF00460 SLR   R6,R6                                               0462
         IC    R6,IDPRMLNG(,PCLCUR)                                0462
         AH    R6,SNTLNG(,SNTELPTR)                                0462
         STC   R6,IDPRMLNG(,PCLCUR)                                0462
*                         IDPDLOFF=PDLCUR;/* OFFSET TO PCE           */
@RC00460 STCM  PDLCUR,3,IDPDLOFF(PCLCUR)                           0463
*                         PCLCUR=PCLCUR+IDLNG;/* UPDATE TO START OF
*                                      NEXT PCE                      */
         ICM   R14,12,IDLNG(PCLCUR)                                0464
         SRA   R14,16                                              0464
         ALR   PCLCUR,R14                                          0464
*                         PDLCUR=PDLCUR+LENGTH(IDENTPDE);/* UPDATE TO
*                                      NEXT PDE                      */
         AL    PDLCUR,FW08                                         0465
*                         IF SNTLAST=YES THEN/* IF THIS IS LAST SNTAB
*                                      ELEMENT                       */
         TM    SNTLAST(SNTELPTR),B'00000001'                       0466
         BNO   @RF00466                                            0466
*                           DO;     /* UPDATE TO NEXT SNTAB TABLE    */
*                             SNTABPTR=SNTABNXT;                   0468
         L     R6,SNTABPTR                                         0468
         L     R14,SNTABNXT(,R6)                                   0468
         ST    R14,SNTABPTR                                        0468
*                             SNTELPTR=SNTABPTR+LENGTH(SNTAB);     0469
         AL    R14,FW12                                            0469
         LR    SNTELPTR,R14                                        0469
*                           END;                                   0470
*                         ELSE      /* OTHERWISE STEP UP TO NEXT     */
*                           SNTELPTR=SNTELPTR+SNTLNG+LENGTH(SNTELEM);
         B     @RC00466                                            0471
@RF00466 LR    R6,SNTELPTR                                         0471
         AH    R6,SNTLNG(,SNTELPTR)                                0471
         AL    R6,FW08                                             0471
         LR    SNTELPTR,R6                                         0471
*                                   /* ELEMENT                       */
*                       END;                                       0472
@RC00466 AL    PCTR,FW01                                           0472
@DE00456 C     PCTR,POSNUM                                         0472
         BNH   @DL00456                                            0472
*                                                                  0473
*                       /*********************************************/
*                       /*                                           */
*                       /* BUILD PCES FOR EACH KEYWORD ENTRY         */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0473
*                       DO PCTR=1 TO(KEYWNUM+KEYNUM);/* MOVE IN MODEL
*                                      PCL                           */
         LA    PCTR,1                                              0473
         B     @DE00473                                            0473
@DL00473 DS    0H                                                  0474
*                         PCELMT(1:LENGTH(KWMOD))=KWMOD;           0474
         MVC   PCELMT(11,PCLCUR),KWMOD                             0474
*                         KWPDLOFF=PDLCUR;/* SAVE OFFSET TO PDL      */
         STCM  PDLCUR,3,KWPDLOFF(PCLCUR)                           0475
*                         NADAT(1:SNTLNG)=SNTDATA(1:SNTLNG);/* COPY
*                                      NAME AND                      */
         LH    R6,SNTLNG(,SNTELPTR)                                0476
         LR    R14,R6                                              0476
         BCTR  R14,0                                               0476
         EX    R14,@SM01559                                        0476
*                         NALNG=SNTLNG+LENGTH(NAMPCE);/* LENGTH FROM
*                                      SNTAB                         */
         LA    R0,5                                                0477
         ALR   R0,R6                                               0477
         STCM  R0,3,NALNG(PCLCUR)                                  0477
*                         NADATLNG=SNTLNG-CON1;                    0478
         STC   R14,NADATLNG(,PCLCUR)                               0478
*                         PDLCUR=PDLCUR+LENGTH(KEYPDE);/* UPDATE TO
*                                      NEXT PDL                      */
         LA    R1,2                                                0479
         ALR   PDLCUR,R1                                           0479
*                         IF SNTKEYW=YES THEN/* IF THIS A KEYWORD  0480
*                                      WITH                          */
         TM    SNTKEYW(SNTELPTR),B'00100000'                       0480
         BNO   @RF00480                                            0480
*                           DO;     /* WITH VALUE THEN BUILD SUBFIELD*/
*                             NALNG=NALNG+CON2;/* ADD TWO BYTES FOR
*                                      SBFD OFFSET                   */
         ALR   R0,R1                                               0482
         STCM  R0,3,NALNG(PCLCUR)                                  0482
*                             KWSUBFLD=YES;/* SET SUBFLD INDICATOR   */
         OI    KWSUBFLD(PCLCUR),B'00000100'                        0483
*                             PCLCUR=PCLCUR+KEYLNG+NALNG;/* UPDATE TO
*                                      NEXT PCE                      */
         LR    R6,PCLCUR                                           0484
         ICM   R0,12,KEYLNG(PCLCUR)                                0484
         SRA   R0,16                                               0484
         ALR   R6,R0                                               0484
         ICM   R0,12,NALNG(PCLCUR)                                 0484
         SRA   R0,16                                               0484
         ALR   R6,R0                                               0484
         LR    PCLCUR,R6                                           0484
*                             SBFOFF=SBFCUR-PCLBASE+CON1;/* SAVE   0485
*                                      OFFSET TO SUBFIELD            */
         LCR   R1,R1                                               0485
         ALR   R1,PCLCUR                                           0485
         LR    R6,SBFCUR                                           0485
         SLR   R6,PCLBASE                                          0485
         LA    R0,1                                                0485
         ALR   R0,R6                                               0485
         STH   R0,SBFOFF(,R1)                                      0485
*                             SBFELMT(1:LENGTH(SUBMOD))=SUBMOD;/*  0486
*                                      COPY MODEL SUBFLD             */
         MVC   SBFELMT(3,SBFCUR),SUBMOD                            0486
*                             SUBNXSUB=SBFCUR-PCLBASE+LENGTH(SUBFLD)+
*                                 LENGTH(VIDMAP)+SNTLNG;/* FIND    0487
*                                      OFFSET TO NEXT SUBFIELD       */
         AL    R6,FW56                                             0487
         LH    R1,SNTLNG(,SNTELPTR)                                0487
         ALR   R6,R1                                               0487
         STCM  R6,3,SUBNXSUB(SBFCUR)                               0487
*                             SBFCUR=SBFCUR+LENGTH(SUBFLD);/* UPDATE
*                                      TO NEXT JBF PCE               */
         LA    R6,3                                                0488
         ALR   SBFCUR,R6                                           0488
*                             SBFELMT(1:LENGTH(VIDMAP))=IDMOD;/* COPY
*                                      IDENT MODEL                   */
         MVC   SBFELMT(53,SBFCUR),IDMOD                            0489
*                             SBFCUR->IDMODTYP=KEYTYPE;/* MODIFY TYPE
*                                      TO KEYWORD                    */
         MVC   IDMODTYP(21,SBFCUR),@CC01285                        0490
*                             SBFCUR->VIDPRINF=KEYTYPE;            0491
         MVC   VIDPRINF(18,SBFCUR),@CC01285                        0491
*                             SBFCUR->VIDNAME(1:SNTLNG)=SNTDATA(1: 0492
*                                 SNTLNG);/* KEY-NAME                */
         EX    R14,@SM01561                                        0492
*                             SBFCUR->IDPRMLNG=SBFCUR->IDPRMLNG+SNTLNG-
*                                 CON3;                            0493
         SLR   R14,R14                                             0493
         IC    R14,IDPRMLNG(,SBFCUR)                               0493
         ALR   R14,R1                                              0493
         SLR   R14,R6                                              0493
         STC   R14,IDPRMLNG(,SBFCUR)                               0493
*                             SBFCUR->IDLNG=SBFCUR->IDLNG+SNTLNG-CON3;
         ICM   R14,12,IDLNG(SBFCUR)                                0494
         SRA   R14,16                                              0494
         ALR   R1,R14                                              0494
         SLR   R1,R6                                               0494
         STCM  R1,3,IDLNG(SBFCUR)                                  0494
*                                   /* SAVE PCE LENGTH               */
*                             SBFCUR->IDCHAR=YES;/* INDICATE IDENT IS
*                                      CHARACTER                     */
         OI    IDCHAR(SBFCUR),B'00001000'                          0495
*                             SBFCUR->IDPDLOFF=PDLCUR;/* PDL OFFSET
*                                      FOR THIS PCE                  */
         STCM  PDLCUR,3,IDPDLOFF(SBFCUR)                           0496
*                             SBFCUR=SBFCUR+SBFCUR->IDLNG;/* UPDATE
*                                      TO NEXT SBF PCE               */
         ALR   SBFCUR,R1                                           0497
*                             PDLCUR=PDLCUR+LENGTH(IDENTPDE);/* NEXT
*                                      AVAILABLE PDE                 */
         AL    PDLCUR,FW08                                         0498
*                           END;                                   0499
*                         ELSE      /* FOR KEYWORDS WITHOUT VALUES   */
*                           PCLCUR=PCLCUR+KEYLNG+NALNG;/* NO SUBFIELD
*                                      NECESSARY                     */
         B     @RC00480                                            0500
@RF00480 LR    R6,PCLCUR                                           0500
         ICM   R14,12,KEYLNG(PCLCUR)                               0500
         SRA   R14,16                                              0500
         ALR   R6,R14                                              0500
         ICM   R14,12,NALNG(PCLCUR)                                0500
         SRA   R14,16                                              0500
         ALR   R6,R14                                              0500
         LR    PCLCUR,R6                                           0500
*                         IF SNTLAST=YES THEN/* IF LAST ELEMENT THEN
*                                      UPDATE                        */
@RC00480 TM    SNTLAST(SNTELPTR),B'00000001'                       0501
         BNO   @RF00501                                            0501
*                           DO;     /* TO NEXT SNTAB                 */
*                             SNTABPTR=SNTABNXT;                   0503
         L     R6,SNTABPTR                                         0503
         L     R14,SNTABNXT(,R6)                                   0503
         ST    R14,SNTABPTR                                        0503
*                             SNTELPTR=SNTABPTR+LENGTH(SNTAB);     0504
         AL    R14,FW12                                            0504
         LR    SNTELPTR,R14                                        0504
*                           END;                                   0505
*                         ELSE      /* OTHERWISE-STEP TO NEXT ELEMT  */
*                           SNTELPTR=SNTELPTR+SNTLNG+LENGTH(SNTELEM);
         B     @RC00501                                            0506
@RF00501 LR    R6,SNTELPTR                                         0506
         AH    R6,SNTLNG(,SNTELPTR)                                0506
         AL    R6,FW08                                             0506
         LR    SNTELPTR,R6                                         0506
*                       END;                                       0507
@RC00501 AL    PCTR,FW01                                           0507
@DE00473 L     R14,KEYWNUM                                         0507
         AL    R14,KEYNUM                                          0507
         CR    PCTR,R14                                            0507
         BNH   @DL00473                                            0507
*                       SBFELMT(1)=ENDMOD;/* INITIALIZE THE END PCE  */
         MVC   SBFELMT(1,SBFCUR),ENDMOD                            0508
*                       PCLBASE->PDLLNG=PDLCUR;/* UPDATE FINAL PDL 0509
*                                      LENGTH                        */
         STH   PDLCUR,PDLLNG(,PCLBASE)                             0509
*                                                                  0510
*                       /*********************************************/
*                       /*                                           */
*                       /* PARSE THE VALUE LIST                      */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0510
*                       PPLPTR=ADDR(SERVBLK);/* SET UP PARSE PARMS   */
         LA    PPLPTR,SERVBLK                                      0510
*                       PPLUPT=CPPLUPT;                            0511
         L     R14,CPPLPTR(,ECDAPTR)                               0511
         L     R6,CPPLUPT-CPPL(,R14)                               0511
         ST    R6,PPLUPT-PPL(,PPLPTR)                              0511
*                       PPLPCL=PCLBASE;                            0512
         ST    PCLBASE,PPLPCL-PPL(,PPLPTR)                         0512
*                       PPLECT=CPPLECT;                            0513
         L     R14,CPPLECT-CPPL(,R14)                              0513
         ST    R14,PPLECT-PPL(,PPLPTR)                             0513
*                       PPLECB=ADDR(ECB);                          0514
         LA    R6,ECB                                              0514
         ST    R6,PPLECB-PPL(,PPLPTR)                              0514
*                       PPLANS=ADDR(VLSTANS);                      0515
         LA    R14,VLSTANS                                         0515
         ST    R14,PPLANS-PPL(,PPLPTR)                             0515
*                       IF COPYVLST=YES THEN/* COPY OVER THE VALUE   */
         TM    COPYVLST,B'00000010'                                0516
         BNO   @RF00516                                            0516
*                         DO;       /* LIST IF NECESSARY             */
*                           RFY                                    0518
*                            (R2,                                  0518
*                             R3,                                  0518
*                             R4,                                  0518
*                             R5) RSTD;                            0518
*                           R4=VLSTPTR;/* ADDRESS OF VALUE LIST      */
         L     R6,ECDAEANS(,ECDAPTR)                               0519
         L     R4,VLSTPTR(,R6)                                     0519
*                           R3=VLSTLNG;/* LENGTH OF VALUE LIST       */
         LH    R6,VLSTLNG(,R6)                                     0520
         LR    R3,R6                                               0520
*                           R5=R3;  /* NEW LENGTH IS SAME            */
         LR    R5,R3                                               0521
*                           R2=PCLBASE+PCLAMT;/* ADDR OF NEW VLIST   */
         LR    R2,PCLBASE                                          0522
         AL    R2,PCLAMT                                           0522
*                           R2->NVLSTLNG=VLSTLNG+CON4;/* INIT      0523
*                                      STANDARD                      */
         LA    R14,4                                               0523
         ALR   R6,R14                                              0523
         STH   R6,NVLSTLNG(,R2)                                    0523
*                           R2->NVLSTOFF=CON0;/* LENGTH AND OFFSET   */
         SLR   R6,R6                                               0524
         STH   R6,NVLSTOFF(,R2)                                    0524
*                           PPLCBUF=R2;/* ADDRESS OF VALUE LIST      */
         ST    R2,PPLCBUF-PPL(,PPLPTR)                             0525
*                           R2=R2+CON4;/* UPDATE TO DATA AREA        */
         ALR   R2,R14                                              0526
*                           MVCL(R2,R4);/* MOVE DATA                 */
         MVCL  R2,R4                                               0527
*                           RFY                                    0528
*                            (R2,                                  0528
*                             R3,                                  0528
*                             R4,                                  0528
*                             R5) UNRSTD;                          0528
*                         END;                                     0529
*                       ELSE        /* SET ADDRESS OF THE VALUE LIST */
*                         PPLCBUF=CPPLCBUF;                        0530
         B     @RC00516                                            0530
@RF00516 L     R14,CPPLPTR(,ECDAPTR)                               0530
         L     R14,CPPLCBUF-CPPL(,R14)                             0530
         ST    R14,PPLCBUF-PPL(,PPLPTR)                            0530
*                       RFY                                        0531
*                        (R1,                                      0531
*                         R15) RSTD;                               0531
@RC00516 DS    0H                                                  0532
*                       R1=PPLPTR;                                 0532
         LR    R1,PPLPTR                                           0532
*                       DO;         /* CALLTSSR EP(IKJPARS)          */
*                         RESPECIFY                                0534
*                           R1 RSTD;                               0534
*                         IF CVTPARS=0 THEN                        0535
         L     R6,CVTPTR                                           0535
         L     R8,CVTPARS-CVT(,R6)                                 0535
         LTR   R8,R8                                               0535
         BNZ   @RF00535                                            0535
*                           GEN(LINK EP=IKJPARS);                  0536
         LINK EP=IKJPARS
*                         ELSE                                     0537
*                           CALL CVTPARS;                          0537
         B     @RC00535                                            0537
@RF00535 L     R6,CVTPTR                                           0537
         L     R15,CVTPARS-CVT(,R6)                                0537
         BALR  R14,R15                                             0537
*                         RESPECIFY                                0538
*                           R1 UNRSTD;                             0538
@RC00535 DS    0H                                                  0539
*                       END;                                       0539
*                       RFY                                        0540
*                         R1 UNRSTD;                               0540
*                                                                  0541
*                       /*********************************************/
*                       /*                                           */
*                       /* IF THE PARSE RETURN CODE IS NON ZERO THEN */
*                       /* CALL IKJEFF19 TO ANALIZE THE PARSE ERROR  */
*                       /* CODE AND ISSUE A MESSAGE                  */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0541
*                       IF R15^=CON0 THEN/* IF PARSE ERROR THEN USE  */
         SLR   R6,R6                                               0541
         CR    R15,R6                                              0541
         BE    @RF00541                                            0541
*                         DO;       /* IKJEFF19 TO DIAGNOSE          */
*                           GFPARMS=GFPARMS&&GFPARMS;              0543
         L     R8,ERRPTR                                           0543
         XC    GFPARMS(44,R8),GFPARMS(R8)                          0543
*                           GFRCODE=R15;                           0544
         ST    R15,GFRCODE(,R8)                                    0544
*                           RFY                                    0545
*                             R15 UNRSTD;                          0545
*                           GFCPPLP=CPPLPTR;                       0546
         L     R15,CPPLPTR(,ECDAPTR)                               0546
         ST    R15,GFCPPLP(,R8)                                    0546
*                           GFCALLID=GFPARSE;                      0547
         MVC   GFCALLID(2,R8),HW21                                 0547
*                           GF02PTR=CON0;                          0548
         ST    R6,GF02PTR(,R8)                                     0548
*                           RFY                                    0549
*                             R1 RSTD;                             0549
*                           R1=ADDR(ERRPTR);                       0550
         LA    R1,ERRPTR                                           0550
*                           DO;     /* LINK EP(IKJEFF19)             */
*                             I00601='00'X;/* EP/DE FLAG             */
         MVI   I00601,X'00'                                        0552
*                             I00602=ADDR(IKJEFF19);/* ADDR OF EP/DE */
         LA    R8,IKJEFF19                                         0553
         STCM  R8,7,I00602                                         0553
*                             I00604=0;/* DCB PTR                    */
         STCM  R6,7,I00604                                         0554
*                             I00603='00'X;/* ERRET FLAG             */
         MVI   I00603,X'00'                                        0555
*                             RESPECIFY                            0556
*                              (R15) RESTRICTED;                   0556
*                             R15=ADDR(I006);/* ADDR OF LINK LIST */
         LA    R15,I006                                            0557
*                             SVC(6);/* ISSUE LINK SVC               */
         SVC   6                                                   0558
*                             RESPECIFY                            0559
*                              (R15) UNRESTRICTED;                 0559
*                           END;    /* LINK EP(IKJEFF19)             */
*                           RFY                                    0561
*                             R1 UNRSTD;                           0561
*                           NOTEXEC=YES;                           0562
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0562
*                         END;                                     0563
*                       ELSE        /* PARSE SUCCESSFUL - CONTINUE   */
*                         DO;                                      0564
         B     @RC00541                                            0564
@RF00541 DS    0H                                                  0565
*                           SNTABPTR=SNTABFST;/* RESET BASES TO START
*                                      OF PROC                       */
         L     R5,LSDPTR(,ECDAPTR)                                 0565
         L     R6,LSDEXEC-LSD(,R5)                                 0565
         L     R6,SNTABFST(,R6)                                    0565
         ST    R6,SNTABPTR                                         0565
*                           SNTELPTR=USNTABST;/* PARMS LOOP CONTROL  */
         L     SNTELPTR,USNTABST                                   0566
*                           PDLCUR=VLSTANS+LENGTH(PDLHEAD);/* RESET
*                                      BASES- PDLSTART               */
         LA    PDLCUR,8                                            0567
         AL    PDLCUR,VLSTANS                                      0567
*                           PCLCUR=PCLBASE+LENGTH(PCEHEAD);/* -    0568
*                                      PCLSTART                      */
         LA    PCLCUR,6                                            0568
         ALR   PCLCUR,PCLBASE                                      0568
*                           SBFCUR=SBFBASE+LENGTH(SUBFLD);/* -     0569
*                                      SUBSTART                      */
*                                                                  0569
         LA    SBFCUR,3                                            0569
         AL    SBFCUR,SBFBASE                                      0569
*                           /*****************************************/
*                           /*                                       */
*                           /* PLACE POSITIONAL PARAMETER VALUES IN  */
*                           /* SVTAB                                 */
*                           /*                                       */
*                           /*****************************************/
*                                                                  0570
*                           DO PCTR=1 TO POSNUM WHILE STABERR=NO;  0570
         LA    PCTR,1                                              0570
         B     @DE00570                                            0570
@DL00570 TM    STABERR,B'10000000'                                 0570
         BNZ   @DC00570                                            0570
*                             VALADR=IDPDEPTR;/* VALUE ADDRESS       */
         MVC   VALADR(4),IDPDEPTR(PDLCUR)                          0571
*                             VALLNG=IDPDELNG;/* VALUE LENGTH        */
         ICM   R6,12,IDPDELNG(PDLCUR)                              0572
         SRA   R6,16                                               0572
         ST    R6,VALLNG                                           0572
*                             RFY                                  0573
*                               R15 RSTD;                          0573
*                             CALL SVTABUPT;/* CREATE VALUE ENTRY    */
         BAL   R14,SVTABUPT                                        0574
*                             RFY                                  0575
*                               R15 UNRSTD;                        0575
*                             IF SNTLAST=YES THEN/* IF THIS IS LAST
*                                      ELEMT IN THIS                 */
         TM    SNTLAST(SNTELPTR),B'00000001'                       0576
         BNO   @RF00576                                            0576
*                               DO; /* TABLE THEN UPDATE TO NEXT     */
*                                 SNTABPTR=SNTABNXT;               0578
         L     R2,SNTABPTR                                         0578
         L     R4,SNTABNXT(,R2)                                    0578
         ST    R4,SNTABPTR                                         0578
*                                 SNTELPTR=SNTABPTR+LENGTH(SNTAB); 0579
         AL    R4,FW12                                             0579
         LR    SNTELPTR,R4                                         0579
*                               END;                               0580
*                             ELSE  /* OTHERWISE UPDATE TO NEXT    0581
*                                      ELEMENT IN THE CURRENT SNTAB  */
*                               SNTELPTR=SNTELPTR+SNTLNG+LENGTH(SNTELEM
*                                   );                             0581
         B     @RC00576                                            0581
@RF00576 LR    R6,SNTELPTR                                         0581
         AH    R6,SNTLNG(,SNTELPTR)                                0581
         AL    R6,FW08                                             0581
         LR    SNTELPTR,R6                                         0581
*                             PDLCUR=PDLCUR+LENGTH(IDENTPDE);      0582
@RC00576 AL    PDLCUR,FW08                                         0582
*                           END;                                   0583
         AL    PCTR,FW01                                           0583
@DE00570 C     PCTR,POSNUM                                         0583
         BNH   @DL00570                                            0583
@DC00570 DS    0H                                                  0584
*                                                                  0584
*                           /*****************************************/
*                           /*                                       */
*                           /* PLACE KEYWORD VALUES IN SVTAB         */
*                           /*                                       */
*                           /*****************************************/
*                                                                  0584
*                           DO PCTR=1 TO(KEYNUM+KEYWNUM) WHILE STABERR=
*                                 NO;                              0584
         LA    PCTR,1                                              0584
         B     @DE00584                                            0584
@DL00584 TM    STABERR,B'10000000'                                 0584
         BNZ   @DC00584                                            0584
*                             IF SNTKEY=YES THEN/* IF THIS IS A    0585
*                                      KEYWORD WITHOUT               */
         TM    SNTKEY(SNTELPTR),B'01000000'                        0585
         BNO   @RF00585                                            0585
*                               DO; /* VALUE THEN CHECK PDL TO SEE IF
*                                      FOUND OR NOT                  */
*                                 IF KEYPDEP=CON1 THEN/* IF FOUND IN
*                                      VALUE LIST THEN               */
         CLC   KEYPDEP(2,PDLCUR),HW01                              0587
         BNE   @RF00587                                            0587
*                                   DO;/* CONVERT IT TO A KEYWORD  0588
*                                      WITH VALUE WITH ITS VALUE THE */
*                                    VALADR=ADDR(SNTDATA);/* KEYWORD
*                                      NAME                          */
         LA    R6,SNTDATA(,SNTELPTR)                               0589
         ST    R6,VALADR                                           0589
*                                    VALLNG=SNTLNG;                0590
         LH    R2,SNTLNG(,SNTELPTR)                                0590
         ST    R2,VALLNG                                           0590
*                                   END;                           0591
*                                 ELSE/* IF NOT FOUND-STILL CONVERT  */
*                                   DO;/* HOWEVER IT HAS A NULL VLAUE*/
         B     @RC00587                                            0592
@RF00587 DS    0H                                                  0593
*                                    VALADR=ADDR(SNTDATA);         0593
         LA    R4,SNTDATA(,SNTELPTR)                               0593
         ST    R4,VALADR                                           0593
*                                    VALLNG=CON0;                  0594
         SLR   R6,R6                                               0594
         ST    R6,VALLNG                                           0594
*                                   END;                           0595
*                               END;                               0596
*                             ELSE  /* OTHERWISE UPDATE THE SVTAB  0597
*                                      WITH THE NEW VALUE IF IT WAS  */
*                               DO; /* SPECIFIED                     */
         B     @RC00585                                            0597
@RF00585 DS    0H                                                  0598
*                                 IF KEYPDEP=CON1 THEN/* IF KEYWORD
*                                      FOUND THEN                    */
         CLC   KEYPDEP(2,PDLCUR),HW01                              0598
         BNE   @RF00598                                            0598
*                                   DO;/* REPLACE OLD VALUE          */
*                                    VALADR=VIPDEPTR;              0600
         LA    R2,2                                                0600
         ALR   R2,PDLCUR                                           0600
         MVC   VALADR(4),VIPDEPTR(R2)                              0600
*                                    VALLNG=VIPDELNG;              0601
         ICM   R4,12,VIPDELNG(R2)                                  0601
         SRA   R4,16                                               0601
         ST    R4,VALLNG                                           0601
*                                   END;                           0602
*                               END;                               0603
@RF00598 DS    0H                                                  0604
*                             IF SNTKEY=YES /* IF THE KEYWORD VALUE
*                                      HAS                           */
*                                 KEYPDEP=CON1 THEN/* BEEN CHANGED 0604
*                                      THEN GO UPDATE                */
@RC00585 TM    SNTKEY(SNTELPTR),B'01000000'                        0604
         BO    @RT00604                                            0604
         CLC   KEYPDEP(2,PDLCUR),HW01                              0604
         BNE   @RF00604                                            0604
@RT00604 DS    0H                                                  0605
*                               DO; /* THE SVTAB                     */
*                                 RFY                              0606
*                                   R15 RSTD;                      0606
*                                 CALL SVTABUPT;/* UPDATE SVTAB      */
         BAL   R14,SVTABUPT                                        0607
*                                 RFY                              0608
*                                   R15 UNRSTD;                    0608
*                               END;                               0609
*                             IF SNTKEY=YES THEN/* UPDATE PDLCUR FOR
*                                      KEYWORDS                      */
@RF00604 TM    SNTKEY(SNTELPTR),B'01000000'                        0610
         BNO   @RF00610                                            0610
*                               PDLCUR=PDLCUR+LENGTH(KEYPDE);      0611
         AL    PDLCUR,FW02                                         0611
*                             ELSE  /* UPEATE PDLCUR FOR KEYWORDS  0612
*                                      WITH VALUE                    */
*                               PDLCUR=PDLCUR+LENGTH(KEYPDE)+LENGTH(
*                                   IDENTPDE);                     0612
         B     @RC00610                                            0612
@RF00610 AL    PDLCUR,FW10                                         0612
*                             IF SNTLAST=YES THEN/* IF THIS IS THE 0613
*                                      LAST ELMT IN                  */
@RC00610 TM    SNTLAST(SNTELPTR),B'00000001'                       0613
         BNO   @RF00613                                            0613
*                               DO; /* SNTAB THEN UPDATE TO NEXT     */
*                                 SNTABPTR=SNTABNXT;               0615
         L     R6,SNTABPTR                                         0615
         L     R2,SNTABNXT(,R6)                                    0615
         ST    R2,SNTABPTR                                         0615
*                                 SNTELPTR=SNTABPTR+LENGTH(SNTAB); 0616
         AL    R2,FW12                                             0616
         LR    SNTELPTR,R2                                         0616
*                               END;                               0617
*                             ELSE  /* OTHERWISE UPDATE TO NEXT ELMT
*                                      IN THE CURRENT SNTAB          */
*                               SNTELPTR=SNTELPTR+SNTLNG+LENGTH(SNTELEM
*                                   );                             0618
         B     @RC00613                                            0618
@RF00613 LR    R4,SNTELPTR                                         0618
         AH    R4,SNTLNG(,SNTELPTR)                                0618
         AL    R4,FW08                                             0618
         LR    SNTELPTR,R4                                         0618
*                           END;                                   0619
@RC00613 AL    PCTR,FW01                                           0619
@DE00584 L     R6,KEYNUM                                           0619
         AL    R6,KEYWNUM                                          0619
         CR    PCTR,R6                                             0619
         BNH   @DL00584                                            0619
@DC00584 DS    0H                                                  0620
*                         END;                                     0620
*                       GEN(IKJRLSA VLSTANS);/* FREE VALUE LIST PDL
*                                      CORE                          */
@RC00541 DS    0H                                                  0621
         IKJRLSA VLSTANS
*                       FREEADR=PCLBASE;/* FREE THE VALUE LIST PCL   */
         ST    PCLBASE,FREEADR                                     0622
*                       FREEAMT=PCLBASE->PCLLNG;/* FREE LENGTH       */
         LH    R8,PCLLNG(,PCLBASE)                                 0623
         ST    R8,FREEAMT                                          0623
*                       IF COPYVLST=YES THEN/* IF VALUE LIST WAS     */
         TM    COPYVLST,B'00000010'                                0624
         BNO   @RF00624                                            0624
*                         FREEAMT=FREEAMT+VLSTLNG+CON4;/* COPIED THEN
*                                      UP THE AMT TO BE FREED        */
         L     R6,ECDAEANS(,ECDAPTR)                               0625
         AH    R8,VLSTLNG(,R6)                                     0625
         AL    R8,FW04                                             0625
         ST    R8,FREEAMT                                          0625
*                       DO;         /* FREEMAIN (E) LV(FREEAMT)    0626
*                                      A(FREEADR) SP(CON1)           */
@RF00624 DS    0H                                                  0627
*                         RESPECIFY                                0627
*                          (R1) RESTRICTED;                        0627
*                         I005=I005&&I005;/* INIT LIST               */
         XC    I005(10),I005                                       0628
*                         I00505='00'X;/* SET TYPE                   */
         MVI   I00505,X'00'                                        0629
*                         I00502=FREEAMT;/* LENGTH                   */
         MVC   I00502(3),FREEAMT+1                                 0630
*                         I00504=ADDR(FREEADR);/* ADDR OF ADDR LIST  */
         LA    R0,FREEADR                                          0631
         STCM  R0,7,I00504                                         0631
*                         I00506=CON1;/* SUBPOOL VALUE               */
         MVI   I00506,X'01'                                        0632
*                         R1=ADDR(I005);/* REG1 POINTS TO LIST       */
         LA    R1,I005                                             0633
*                         SVC(5);   /* STANDARD-FORM OF GETMAIN      */
         SVC   5                                                   0634
*                         RESPECIFY                                0635
*                          (R1) UNRESTRICTED;                      0635
*                       END;        /* FREEMAIN (E) LV(FREEAMT)    0636
*                                      A(FREEADR) SP(CON1)           */
*                     END;                                         0637
*                 END;                                             0638
@RC00438 DS    0H                                                  0639
*             END;                                                 0639
@RC00395 DS    0H                                                  0640
*         END;                                                     0640
@RC00295 DS    0H                                                  0641
*     END;                                                         0641
*                                                                  0641
@RC00254 DS    0H                                                  0642
*   /*****************************************************************/
*   /*                                                               */
*   /* IKJCT431 EXIT POINT                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0642
*   RETURN CODE(CT431RET);                                         0642
@RC00112 L     R2,CT431RET                                         0642
         L     R13,4(,R13)                                         0642
         L     R0,@SIZDATD                                         0642
         LR    R1,R10                                              0642
         FREEMAIN R,LV=(0),A=(1)
         LR    R15,R2                                              0642
         L     R14,12(,R13)                                        0642
         LM    R0,R12,20(R13)                                      0642
         BR    R14                                                 0642
*                                                                  0643
*   /*****************************************************************/
*   /*                                                               */
*   /* SVTELUPT - UPDATES THE SVTABUSE WITH THE LENGTH OF THE VALUE  */
*   /* JUST ADDED AND UPDATES SNTELPTR TO THE NEXT AVAILABLE SLOT    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0643
*SVTELUPT:                                                         0643
*   PROC;                                                          0643
SVTELUPT STM   R14,R8,12(R13)                                      0643
         STM   R10,R12,60(R13)                                     0643
*   RFY                                                            0644
*     SVTELEM BASED(SVTELPTR);                                     0644
*   SVTABUSE=SVTABUSE+LENGTH(SVTELEM)+SVTORIG;                     0645
         L     R8,SVTABPTR                                         0645
         LA    R14,4                                               0645
         L     R15,SVTABUSE(,R8)                                   0645
         ALR   R15,R14                                             0645
         LH    R0,SVTORIG(,SVTELPTR)                               0645
         ALR   R15,R0                                              0645
         ST    R15,SVTABUSE(,R8)                                   0645
*   SVTELPTR=SVTELPTR+LENGTH(SVTELEM)+SVTORIG;                     0646
         ALR   R14,SVTELPTR                                        0646
         ALR   R14,R0                                              0646
         LR    SVTELPTR,R14                                        0646
*   RFY                                                            0647
*     SVTELEM BASED(SNTVLPTR);                                     0647
*   END SVTELUPT;                                                  0648
@EL00002 DS    0H                                                  0648
@EF00002 DS    0H                                                  0648
@ER00002 LM    R14,R8,12(R13)                                      0648
         LM    R10,R12,60(R13)                                     0648
         BR    R14                                                 0648
*                                                                  0649
*   /*****************************************************************/
*   /*                                                               */
*   /* SKIPSEP- SKIP BLANKS, COMMAS, TABS AND COMMENTS IN THE INPUT  */
*   /* RECORD LOCATED BY ECDAIREC                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0649
*SKIPSEP:                                                          0649
*   PROC;                                                          0649
SKIPSEP  STM   R14,R5,12(R13)                                      0649
         STM   R7,R8,48(R13)                                       0649
         STM   R10,R12,60(R13)                                     0649
*   CYCLE=CON1;                                                    0650
         LA    CYCLE,1                                             0650
*   DO WHILE CYCLE=CON1;                                           0651
         B     @DE00651                                            0651
@DL00651 DS    0H                                                  0652
*     DO ICTR=ICTR TO LINELNG WHILE RECORD(ICTR)=BLANK RECORD(ICTR)=
*           COMMA RECORD(ICTR)=TAB;                                0652
         B     @DE00652                                            0652
@DL00652 L     R8,ECDAIREC(,ECDAPTR)                               0652
         LR    R1,R8                                               0652
         ALR   R1,ICTR                                             0652
         CLI   RECORD-1(R1),C' '                                   0652
         BE    @DB00652                                            0652
         LR    R1,R8                                               0652
         ALR   R1,ICTR                                             0652
         CLI   RECORD-1(R1),C','                                   0652
         BE    @DB00652                                            0652
         ALR   R8,ICTR                                             0652
         CLI   RECORD-1(R8),X'05'                                  0652
         BNE   @DC00652                                            0652
@DB00652 DS    0H                                                  0653
*     END;                                                         0653
         AL    ICTR,FW01                                           0653
@DE00652 C     ICTR,LINELNG                                        0653
         BNH   @DL00652                                            0653
@DC00652 DS    0H                                                  0654
*     IF ICTR<LINELNG&RECORD(ICTR:ICTR+CON1)=SLASHAST THEN         0654
         C     ICTR,LINELNG                                        0654
         BNL   @RF00654                                            0654
         L     R8,ECDAIREC(,ECDAPTR)                               0654
         ALR   R8,ICTR                                             0654
         CLC   RECORD-1(2,R8),SLSHASTR                             0654
         BNE   @RF00654                                            0654
*       DO;                                                        0655
*         DO ICTR=(ICTR+CON2) TO(LINELNG-CON1) WHILE RECORD(ICTR:ICTR+
*               CON1)^=ASTSLASH;                                   0656
         LA    R8,2                                                0656
         ALR   R8,ICTR                                             0656
         LR    ICTR,R8                                             0656
         B     @DE00656                                            0656
@DL00656 L     R8,ECDAIREC(,ECDAPTR)                               0656
         ALR   R8,ICTR                                             0656
         CLC   RECORD-1(2,R8),ASTRSLSH                             0656
         BE    @DC00656                                            0656
*         END;                                                     0657
         AL    ICTR,FW01                                           0657
@DE00656 L     R8,LINELNG                                          0657
         BCTR  R8,0                                                0657
         CR    ICTR,R8                                             0657
         BNH   @DL00656                                            0657
@DC00656 DS    0H                                                  0658
*         IF ICTR=LINELNG THEN                                     0658
         C     ICTR,LINELNG                                        0658
         BNE   @RF00658                                            0658
*           DO;                                                    0659
*             CYCLE=CON0;                                          0660
         SLR   CYCLE,CYCLE                                         0660
*             ICTR=ICTR+CON1;                                      0661
         AL    ICTR,FW01                                           0661
*           END;                                                   0662
*         ELSE                                                     0663
*           ICTR=ICTR+CON2;                                        0663
         B     @RC00658                                            0663
@RF00658 AL    ICTR,FW02                                           0663
*       END;                                                       0664
*     ELSE                                                         0665
*       CYCLE=CON0;                                                0665
         B     @RC00654                                            0665
@RF00654 SLR   CYCLE,CYCLE                                         0665
*   END;                                                           0666
@RC00654 DS    0H                                                  0666
@DE00651 C     CYCLE,FW01                                          0666
         BE    @DL00651                                            0666
*   END;                            /* PROCEDURE END                 */
@EL00003 DS    0H                                                  0667
@EF00003 DS    0H                                                  0667
@ER00003 LM    R14,R5,12(R13)                                      0667
         LM    R7,R8,48(R13)                                       0667
         LM    R10,R12,60(R13)                                     0667
         BR    R14                                                 0667
*                                                                  0668
*   /*****************************************************************/
*   /*                                                               */
*   /* FINDSEP - FINDS NEXT SEPERATOR IN RECORD LOCATED BY TCDAIBUF  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0668
*FINDSEP:                                                          0668
*   PROC;                                                          0668
FINDSEP  STM   R14,R5,12(R13)                                      0668
         STM   R7,R12,48(R13)                                      0668
*   CYCLE=CON1;                                                    0669
         LA    CYCLE,1                                             0669
*   DO WHILE CYCLE=CON1;                                           0670
         B     @DE00670                                            0670
@DL00670 DS    0H                                                  0671
*     DO ICTR=ICTR TO LINELNG WHILE RECORD(ICTR)^=BLANK&RECORD(ICTR)^=
*           COMMA&RECORD(ICTR)^=TAB&RECORD(ICTR)^=SLASH;           0671
         B     @DE00671                                            0671
@DL00671 L     R8,ECDAIREC(,ECDAPTR)                               0671
         LR    R1,R8                                               0671
         ALR   R1,ICTR                                             0671
         CLI   RECORD-1(R1),C' '                                   0671
         BE    @DC00671                                            0671
         LR    R1,R8                                               0671
         ALR   R1,ICTR                                             0671
         CLI   RECORD-1(R1),C','                                   0671
         BE    @DC00671                                            0671
         LR    R1,R8                                               0671
         ALR   R1,ICTR                                             0671
         CLI   RECORD-1(R1),X'05'                                  0671
         BE    @DC00671                                            0671
         ALR   R8,ICTR                                             0671
         CLI   RECORD-1(R8),C'/'                                   0671
         BE    @DC00671                                            0671
*     END;                                                         0672
*                                                                  0672
         AL    ICTR,FW01                                           0672
@DE00671 C     ICTR,LINELNG                                        0672
         BNH   @DL00671                                            0672
@DC00671 DS    0H                                                  0673
*     /***************************************************************/
*     /*                                                             */
*     /* IF NOT OPENING COMMENT THEN CONTINUE SEARCH                 */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0673
*     IF RECORD(ICTR)=SLASH&(ICTR=LINELNG ICTR<LINELNG&RECORD(ICTR:ICTR
*         +CON1)^=SLASHAST) THEN                                   0673
         L     R8,ECDAIREC(,ECDAPTR)                               0673
         LR    R1,R8                                               0673
         ALR   R1,ICTR                                             0673
         CLI   RECORD-1(R1),C'/'                                   0673
         BNE   @RF00673                                            0673
         L     R2,LINELNG                                          0673
         CR    ICTR,R2                                             0673
         BE    @RT00673                                            0673
         CR    ICTR,R2                                             0673
         BNL   @RF00673                                            0673
         ALR   R8,ICTR                                             0673
         CLC   RECORD-1(2,R8),SLSHASTR                             0673
         BE    @RF00673                                            0673
@RT00673 DS    0H                                                  0674
*       ICTR=ICTR+CON1;                                            0674
         AL    ICTR,FW01                                           0674
*     ELSE                                                         0675
*       CYCLE=CON0;                                                0675
         B     @RC00673                                            0675
@RF00673 SLR   CYCLE,CYCLE                                         0675
*   END;                                                           0676
@RC00673 DS    0H                                                  0676
@DE00670 C     CYCLE,FW01                                          0676
         BE    @DL00670                                            0676
*   END;                            /* END OF FINDSEP PROCEDURE      */
@EL00004 DS    0H                                                  0677
@EF00004 DS    0H                                                  0677
@ER00004 LM    R14,R5,12(R13)                                      0677
         LM    R7,R12,48(R13)                                      0677
         BR    R14                                                 0677
*                                                                  0678
*   /*****************************************************************/
*   /*                                                               */
*   /* VALIDATE ROUTINE - THIS SUBROUTINE VERIFIES THAT REMAINING    */
*   /* CHARACTERS OF A SYMBOLIC PARAMETER UP TO FIRST SEPERATOR (OR  */
*   /* LEFT PAREN FOR KEYWORDS) ARE VALID ALPHANUMERIC               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0678
*VALIDATE:                                                         0678
*   PROC;                                                          0678
VALIDATE STM   R14,R5,@SA00005                                     0678
         STM   R7,R12,@SA00005+32                                  0678
*   VALIDERR=NO;                                                   0679
         NI    VALIDERR,B'11111011'                                0679
*   CYCLE=CON1;                                                    0680
         LA    CYCLE,1                                             0680
*   DO ICTR=ICTR TO LINELNG WHILE CYCLE=CON1&VALIDERR=NO;          0681
         B     @DE00681                                            0681
@DL00681 C     CYCLE,FW01                                          0681
         BNE   @DC00681                                            0681
         TM    VALIDERR,B'00000100'                                0681
         BNZ   @DC00681                                            0681
*     IF RECORD(ICTR)<CONCA         /* IF THE CHARACTER IS NOT A THRU*/
*         (RECORD(ICTR)>CONCI&      /* Z OR O THRU 9 THEN MAKE SURE  */
*         RECORD(ICTR)<CONCJ)       /* IT WAS A SEPERATOR BY CALLING */
*         (RECORD(ICTR)>CONCR&RECORD(ICTR)<CONCS) (RECORD(ICTR)>CONCZ&
*         RECORD(ICTR)<CONC0) RECORD(ICTR)>CONC9 THEN/* SKIPSEP - IF
*                                      OFFSETS DIFFER                */
         L     R8,ECDAIREC(,ECDAPTR)                               0682
         LR    R1,R8                                               0682
         ALR   R1,ICTR                                             0682
         CLI   RECORD-1(R1),C'A'                                   0682
         BL    @RT00682                                            0682
         LR    R1,R8                                               0682
         ALR   R1,ICTR                                             0682
         CLI   RECORD-1(R1),C'I'                                   0682
         BNH   @GL00044                                            0682
         ALR   R8,ICTR                                             0682
         CLI   RECORD-1(R8),C'J'                                   0682
         BL    @RT00682                                            0682
@GL00044 L     R8,ECDAIREC(,ECDAPTR)                               0682
         LR    R1,R8                                               0682
         ALR   R1,ICTR                                             0682
         CLI   RECORD-1(R1),C'R'                                   0682
         BNH   @GL00043                                            0682
         ALR   R8,ICTR                                             0682
         CLI   RECORD-1(R8),C'S'                                   0682
         BL    @RT00682                                            0682
@GL00043 L     R8,ECDAIREC(,ECDAPTR)                               0682
         LR    R1,R8                                               0682
         ALR   R1,ICTR                                             0682
         CLI   RECORD-1(R1),C'Z'                                   0682
         BNH   @GL00042                                            0682
         ALR   R8,ICTR                                             0682
         CLI   RECORD-1(R8),C'0'                                   0682
         BL    @RT00682                                            0682
@GL00042 L     R8,ECDAIREC(,ECDAPTR)                               0682
         ALR   R8,ICTR                                             0682
         CLI   RECORD-1(R8),C'9'                                   0682
         BNH   @RF00682                                            0682
@RT00682 DS    0H                                                  0683
*       DO;                         /* UPON RETURN THEN IT IS AN     */
*         JCTR=ICTR;                /* ERROR SYNTAX UNLESS THIS IS   */
         ST    ICTR,JCTR                                           0684
*         CALL SKIPSEP;             /* A KEYWORD WITH VALUE          */
         BAL   R14,SKIPSEP                                         0685
*         IF ICTR=JCTR THEN                                        0686
         C     ICTR,JCTR                                           0686
         BNE   @RF00686                                            0686
*           IF KEYWORD=YES&RECORD(ICTR)=LFPAREN THEN               0687
         TM    KEYWORD,B'00001000'                                 0687
         BNO   @RF00687                                            0687
         L     R8,ECDAIREC(,ECDAPTR)                               0687
         ALR   R8,ICTR                                             0687
         CLI   RECORD-1(R8),C'('                                   0687
         BNE   @RF00687                                            0687
*             CYCLE=CON0;                                          0688
         SLR   CYCLE,CYCLE                                         0688
*           ELSE                                                   0689
*             VALIDERR=YES;                                        0689
         B     @RC00687                                            0689
@RF00687 OI    VALIDERR,B'00000100'                                0689
*         ELSE                                                     0690
*           CYCLE=CON0;                                            0690
         B     @RC00686                                            0690
@RF00686 SLR   CYCLE,CYCLE                                         0690
*       END;                                                       0691
@RC00686 DS    0H                                                  0692
*   END;                                                           0692
@RF00682 AL    ICTR,FW01                                           0692
@DE00681 C     ICTR,LINELNG                                        0692
         BNH   @DL00681                                            0692
@DC00681 DS    0H                                                  0693
*   IF CYCLE=CON1 THEN                                             0693
         C     CYCLE,FW01                                          0693
         BNE   @RF00693                                            0693
*     JCTR=ICTR;                                                   0694
         ST    ICTR,JCTR                                           0694
*   ELSE                                                           0695
*     ICTR=ICTR-CON1;                                              0695
         B     @RC00693                                            0695
@RF00693 BCTR  ICTR,0                                              0695
*   END;                            /* END OF VALIDATE PROCEDURE     */
@EL00005 DS    0H                                                  0696
@EF00005 DS    0H                                                  0696
@ER00005 LM    R14,R5,@SA00005                                     0696
         LM    R7,R12,@SA00005+32                                  0696
         BR    R14                                                 0696
*                                                                  0697
*   /*****************************************************************/
*   /*                                                               */
*   /* SNTABUPT = THE SNTABUPT ROUTINE UPDATES THE SNTAB(AND SVTAB)  */
*   /* BASED ON AN INPUT OPERATION CODE AND PARM TYPE PARMOP=CREATE-0*/
*   /* CREATE AN ENTRY PARMOP=LOCATE-1 LOCATE AN ENTRY (OR CREATE AN */
*   /* ENTRY IF ENTRY NOT FOUND AND THIS IS NOT A LABLE REQUEST      */
*   /* PARMTYPE=POSIT-1 POSITIONAL PARAMETER =KEY -2 KEYWORD WITHOUT */
*   /* VALUE =KEYWV-3 KEYWORD WITH VALUE                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0697
*SNTABUPT:                                                         0697
*   PROC;                                                          0697
SNTABUPT STM   R14,R7,@SA00006                                     0697
         STM   R9,R12,@SA00006+40                                  0697
*   SNTABPTR=SNTABFST;                                             0698
         L     R3,LSDPTR(,ECDAPTR)                                 0698
         L     R6,LSDEXEC-LSD(,R3)                                 0698
         L     R3,SNTABFST(,R6)                                    0698
         ST    R3,SNTABPTR                                         0698
*   UPTPTR1=SNTABFST+LENGTH(SNTAB); /* ADDRESS OF FIRST ELEMENT      */
*                                                                  0699
         AL    R3,FW12                                             0699
         LR    UPTPTR1,R3                                          0699
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE IF NAME ALREADY DEFINED IN SNTAB                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0700
*   CYCLE=CON1;                                                    0700
         LA    CYCLE,1                                             0700
*   DO WHILE UPTPTR1^=SNTELPTR&CYCLE=CON1;                         0701
         B     @DE00701                                            0701
@DL00701 DS    0H                                                  0702
*     IF UPTPTR1->SNTLNG=PARMLNG&UPTPTR1->SNTDATA(1:UPTPTR1->SNTLNG)=
*         PARMDAT(1:UPTPTR1->SNTLNG) THEN                          0702
         LH    R3,SNTLNG(,UPTPTR1)                                 0702
         C     R3,PARMLNG                                          0702
         BNE   @RF00702                                            0702
         BCTR  R3,0                                                0702
         L     R6,PARMADR                                          0702
         EX    R3,@SC01563                                         0702
         BNE   @RF00702                                            0702
*       CYCLE=CON0;                                                0703
         SLR   CYCLE,CYCLE                                         0703
*     ELSE                                                         0704
*       IF UPTPTR1->SNTLAST=YES THEN                               0704
         B     @RC00702                                            0704
@RF00702 TM    SNTLAST(UPTPTR1),B'00000001'                        0704
         BNO   @RF00704                                            0704
*         DO;                                                      0705
*           SNTABPTR=SNTABNXT;                                     0706
         L     R3,SNTABPTR                                         0706
         L     R6,SNTABNXT(,R3)                                    0706
         ST    R6,SNTABPTR                                         0706
*           UPTPTR1=SNTABPTR+LENGTH(SNTAB);                        0707
         AL    R6,FW12                                             0707
         LR    UPTPTR1,R6                                          0707
*         END;                                                     0708
*       ELSE                                                       0709
*         UPTPTR1=UPTPTR1+UPTPTR1->SNTLNG+LENGTH(SNTELEM);         0709
         B     @RC00704                                            0709
@RF00704 LR    R3,UPTPTR1                                          0709
         AH    R3,SNTLNG(,UPTPTR1)                                 0709
         AL    R3,FW08                                             0709
         LR    UPTPTR1,R3                                          0709
*   END;                                                           0710
@RC00704 DS    0H                                                  0710
@RC00702 DS    0H                                                  0710
@DE00701 CR    UPTPTR1,SNTELPTR                                    0710
         BE    @DC00701                                            0710
         C     CYCLE,FW01                                          0710
         BE    @DL00701                                            0710
@DC00701 DS    0H                                                  0711
*   IF CYCLE=CON0 THEN              /* CYCLE SET TO ZERO IF PARAMETER*/
         LTR   CYCLE,CYCLE                                         0711
         BNZ   @RF00711                                            0711
*     DO;                           /* IS MULTIPLY DEFINED           */
*       EXMSGID=M530;                                              0713
         MVC   EXMSGID(4),$MSGM530                                 0713
*       MVAR(1)=ADDR(MSGINS);                                      0714
         LA    R6,$STMT1                                           0714
         ST    R6,MVAR                                             0714
*       MVARLEN(1)=LENGTH(MSGINS);                                 0715
         MVI   MVARLEN,X'06'                                       0715
*       MVAR(2)=PARMADR;                                           0716
         L     R6,PARMADR                                          0716
         ST    R6,MVAR+4                                           0716
*       MVARLEN(2)=PARMLNG;                                        0717
         L     R6,PARMLNG                                          0717
         STC   R6,MVARLEN+4                                        0717
*       NOTEXEC=YES;                                               0718
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0718
*       CALL MSGRTN;                                               0719
         BAL   R14,MSGRTN                                          0719
*     END;                                                         0720
*   ELSE                            /* PARAMETER WAS NOT ALREADY     */
*     DO;                           /* DEFINED SO WE MUST CREATE AN
*                                      ENTRY                         */
         B     @RC00711                                            0721
@RF00711 DS    0H                                                  0722
*       IF NOTEXEC=NO&(SNTABLNG-SNTABUSE<PARMLNG+LENGTH(SNTELEM)) THEN
         TM    NOTEXEC(ECDAPTR),B'01000000'                        0722
         BNZ   @RF00722                                            0722
         L     R9,SNTABPTR                                         0722
         L     R6,SNTABLNG(,R9)                                    0722
         L     R14,SNTABUSE(,R9)                                   0722
         LR    R15,R6                                              0722
         SLR   R15,R14                                             0722
         LA    R0,8                                                0722
         L     R1,PARMLNG                                          0722
         ALR   R1,R0                                               0722
         CR    R15,R1                                              0722
         BNL   @RF00722                                            0722
*         DO;                       /* IF REMAINING SNTAB NOT LARGE
*                                      ENOUGH THEN GET A NEW BLOCK   */
*           ECDALNEL->SNTLAST=YES;  /* INDICATE LAST ELEMENT IN    0724
*                                      CURRENT SNTAB                 */
*                                                                  0724
         L     R1,ECDALNEL(,ECDAPTR)                               0724
         OI    SNTLAST(R1),B'00000001'                             0724
*           /*********************************************************/
*           /*                                                       */
*           /* FREE UNUSED AMOUNT                                    */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0725
*           FREEADR=(SNTABPTR+SNTABUSE+CON7)/CON8*CON8;            0725
         LR    R2,R9                                               0725
         ALR   R2,R14                                              0725
         AL    R2,FW07                                             0725
         SRDA  R2,32                                               0725
         DR    R2,R0                                               0725
         SLA   R3,3                                                0725
         ST    R3,FREEADR                                          0725
*           FREEAMT=SNTABPTR+SNTABLNG-FREEADR;                     0726
         ALR   R6,R9                                               0726
         SLR   R6,R3                                               0726
         ST    R6,FREEAMT                                          0726
*           SNTABLNG=SNTABUSE;                                     0727
         ST    R14,SNTABLNG(,R9)                                   0727
         C     R6,FW09
         BNL   LBL01200
         ST    R0,FREEAMT
         B     LBL01222
*           DO;                     /* FREEMAIN (E) LV(FREEAMT)    0728
*                                      A(FREEADR) SP(78)             */
*             RESPECIFY                                            0729
*              (R1) RESTRICTED;                                    0729
*             I005=I005&&I005;      /* INIT LIST                     */
LBL01200 XC    I005(10),I005                                       0730
*             I00505='00'X;         /* SET TYPE                      */
         MVI   I00505,X'00'                                        0731
*             I00502=FREEAMT;       /* LENGTH                        */
         MVC   I00502(3),FREEAMT+1                                 0732
*             I00504=ADDR(FREEADR); /* ADDR OF ADDR LIST             */
         LA    R6,FREEADR                                          0733
         STCM  R6,7,I00504                                         0733
*             I00506=78;            /* SUBPOOL VALUE                 */
         MVI   I00506,X'4E'                                        0734
*             R1=ADDR(I005);        /* REG1 POINTS TO LIST           */
         LA    R1,I005                                             0735
*             SVC(5);               /* STANDARD-FORM OF GETMAIN      */
         SVC   5                                                   0736
*             RESPECIFY                                            0737
*              (R1) UNRESTRICTED;                                  0737
*           END;                    /* FREEMAIN (E) LV(FREEAMT)    0738
*                                      A(FREEADR) SP(78)             */
*           GETAMT=(SNTABLNG+FREEAMT+PARMLNG+CON7)/CON8*CON8;      0739
LBL01222 L     R6,SNTABPTR                                         0739
         L     R4,SNTABLNG(,R6)                                    0739
         AL    R4,FREEAMT                                          0739
         AL    R4,PARMLNG                                          0739
         AL    R4,FW07                                             0739
         SRDA  R4,32                                               0739
         D     R4,FW08                                             0739
         SLA   R5,3                                                0739
         ST    R5,GETAMT                                           0739
*           RFY                                                    0740
*             R15 RSTD;                                            0740
*           DO;                     /* GETMAIN (EC) LV(GETAMT)     0741
*                                      A(GETADR) SP(78) RTCD(R15)    */
*             RESPECIFY                                            0742
*              (R1,                                                0742
*               R15) RESTRICTED;                                   0742
*             I004=I004&&I004;      /* INIT LIST                     */
         XC    I004(10),I004                                       0743
*             I00404='20'X;         /* TYPE                          */
         MVI   I00404,X'20'                                        0744
*             I00401=GETAMT;        /* LENGTH                        */
         ST    R5,I00401                                           0745
*             I00403=ADDR(GETADR);  /* ADDR OF ADDR LIST             */
         LA    R9,GETADR                                           0746
         STCM  R9,7,I00403                                         0746
*             I00405=78;            /* SUBPOOL VALUE                 */
         MVI   I00405,X'4E'                                        0747
*             R1=ADDR(I004);        /* REG1 POINTS TO LIST           */
         LA    R1,I004                                             0748
*             SVC(4);               /* STANDARD-FORM OF GETMAIN      */
         SVC   4                                                   0749
*             R15=R15;              /* SET RETURN CODE               */
*             RESPECIFY                                            0751
*              (R1,                                                0751
*               R15) UNRESTRICTED;                                 0751
*           END;                    /* GETMAIN (EC) LV(GETAMT)     0752
*                                      A(GETADR) SP(78) RTCD(R15)    */
*           IF R15^=CON0 THEN       /* RETURN CODE NON ZERO NOTIFY   */
         LTR   R15,R15                                             0753
         BZ    @RF00753                                            0753
*             DO;                   /* TYE USER -NOT ENOUGH STORAGE  */
*               RFY                                                0755
*                 R15 UNRSTD;                                      0755
*               EXMSGID=M511;                                      0756
         MVC   EXMSGID(4),$MSGM511                                 0756
*               NOTEXEC=YES;                                       0757
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0757
*               CALL MSGRTN;                                       0758
         BAL   R14,MSGRTN                                          0758
*               CT431RET=CON16;                                    0759
         MVC   CT431RET(4),FW16                                    0759
*               STABERR=YES;        /* SET ERROR FLAG TO             */
         OI    STABERR,B'10000000'                                 0760
*             END;                  /* AVOID ANY FURHTER PARMS       */
*           ELSE                    /* GETMAIN SUCCESSFUL -          */
*             DO;                   /* INITIALIZE HEADER OF NEW      */
         B     @RC00753                                            0762
@RF00753 DS    0H                                                  0763
*               GETADR->SNTABNXT=CON0;/* BLOCK                       */
         L     R2,GETADR                                           0763
         L     R3,GETAMT                                           0763
         XR    R4,R4                                               0763
         XR    R5,R5                                               0763
         MVCL  R2,R4                                               0763
         L     R6,GETADR
         SLR   R9,R9
         ST    R9,SNTABNXT(,R6)
*               GETADR->SNTABLNG=GETAMT;                           0764
         L     R9,GETAMT                                           0764
         ST    R9,SNTABLNG(,R6)                                    0764
*               GETADR->SNTABUSE=LENGTH(SNTAB);                    0765
         LA    R9,12                                               0765
         ST    R9,SNTABUSE(,R6)                                    0765
*               SNTABNXT=GETADR;                                   0766
         L     R1,SNTABPTR                                         0766
         ST    R6,SNTABNXT(,R1)                                    0766
*               SNTABPTR=SNTABNXT;                                 0767
         ST    R6,SNTABPTR                                         0767
*               SNTELPTR=SNTABPTR+LENGTH(SNTAB);                   0768
         ALR   R6,R9                                               0768
         LR    SNTELPTR,R6                                         0768
*             END;                                                 0769
*         END;                                                     0770
@RC00753 DS    0H                                                  0771
*       IF NOTEXEC=NO THEN          /* MOVE IN NAME OF SYMBOLIC PARM */
@RF00722 TM    NOTEXEC(ECDAPTR),B'01000000'                        0771
         BNZ   @RF00771                                            0771
*         DO;                                                      0772
*           SNTDATA(1:PARMLNG)=PARMDAT(1:PARMLNG);                 0773
         L     R6,PARMLNG                                          0773
         LR    R9,R6                                               0773
         BCTR  R9,0                                                0773
         L     R1,PARMADR                                          0773
         EX    R9,@SM01567                                         0773
*           SNTLNG=PARMLNG;                                        0774
         STH   R6,SNTLNG(,SNTELPTR)                                0774
*           SNTFLAGS=SNTFLAGS&&SNTFLAGS;                           0775
         XC    SNTFLAGS(2,SNTELPTR),SNTFLAGS(SNTELPTR)             0775
*           SNTVLPTR=ADDR(SVTELFST);                               0776
         L     R9,SVTABPTR                                         0776
         LA    R9,SVTELFST(,R9)                                    0776
         ST    R9,SNTVLPTR(,SNTELPTR)                              0776
*           SNTABUSE=SNTABUSE+SNTLNG+LENGTH(SNTELEM);              0777
         L     R9,SNTABPTR                                         0777
         AL    R6,SNTABUSE(,R9)                                    0777
         AL    R6,FW08                                             0777
         ST    R6,SNTABUSE(,R9)                                    0777
*           IF PARMTYPE=POSIT THEN  /* TURN ON APPROPRIATE SNTFLAGS  */
         LH    R6,PARMTYPE                                         0778
         LTR   R6,R6                                               0778
         BNZ   @RF00778                                            0778
*             SNTPOSIT=YES;                                        0779
         OI    SNTPOSIT(SNTELPTR),B'10000000'                      0779
*           ELSE                                                   0780
*             IF PARMTYPE=KEYWO THEN/* IS IT A KEYWORD WITHOUT VALUE */
         B     @RC00778                                            0780
@RF00778 CLC   PARMTYPE(2),HW01                                    0780
         BNE   @RF00780                                            0780
*               SNTKEY=YES;                                        0781
         OI    SNTKEY(SNTELPTR),B'01000000'                        0781
*             ELSE                  /* IF IT IS A KEYWORD WITH VALUE */
*               DO;                 /* THEN ASSIGN A VTABELEMENT     */
         B     @RC00780                                            0782
@RF00780 DS    0H                                                  0783
*                 SNTKEYW=YES;                                     0783
         OI    SNTKEYW(SNTELPTR),B'00100000'                       0783
*                 CALL SVTABUPT;                                   0784
         BAL   R14,SVTABUPT                                        0784
*               END;                                               0785
*           ECDALNEL=SNTELPTR;                                     0786
@RC00780 DS    0H                                                  0786
@RC00778 ST    SNTELPTR,ECDALNEL(,ECDAPTR)                         0786
*           SNTELPTR=SNTELPTR+SNTLNG+LENGTH(SNTELEM);              0787
         LR    R9,SNTELPTR                                         0787
         AH    R9,SNTLNG(,SNTELPTR)                                0787
         AL    R9,FW08                                             0787
         LR    SNTELPTR,R9                                         0787
*         END;                                                     0788
*     END;                                                         0789
*   END;                            /* END OF SNTAB UPDATE PROCEDURE */
@EL00006 DS    0H                                                  0790
@EF00006 DS    0H                                                  0790
@ER00006 LM    R14,R7,@SA00006                                     0790
         LM    R9,R12,@SA00006+40                                  0790
         BR    R14                                                 0790
*                                                                  0791
*   /*****************************************************************/
*   /*                                                               */
*   /* SVTABUPT - SVTABUPT ROUTINE WILL CREATE OR ASSIGN A NEW VALUE */
*   /* ELEMENT FOR THE VALUE SPECIFIED IN THE SNTAB/SVTAB PARM BLOCK */
*   /* UPON ENTRY THE SNTELPTR IS POINTING TO THE SNTAB ELEMENT      */
*   /* REQUIRING A VALUE ELEMENT                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0791
*SVTABUPT:                                                         0791
*   PROC;                                                          0791
SVTABUPT STM   R14,R7,@SA00007                                     0791
         STM   R9,R12,@SA00007+40                                  0791
*   TOBEADD=SNTELPTR;                                              0792
         LR    TOBEADD,SNTELPTR                                    0792
*   SVTABPTR=SVTABFST;                                             0793
*                                                                  0793
         L     R6,LSDPTR(,ECDAPTR)                                 0793
         L     R6,LSDEXEC-LSD(,R6)                                 0793
         L     R6,SVTABFST(,R6)                                    0793
         ST    R6,SVTABPTR                                         0793
*   /*****************************************************************/
*   /*                                                               */
*   /* FIRST DETERMINE IF THE NEW VALUE WILL FIT IN THE OLD SLOT     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0794
*   IF VALLNG>SVTORIG THEN          /* IF A NEW ELEMENT MUST BE      */
         L     R14,SNTVLPTR(,SNTELPTR)                             0794
         LH    R15,SVTORIG(,R14)                                   0794
         C     R15,VALLNG                                          0794
         BNL   @RF00794                                            0794
*     DO;                           /* ASSIGNED THEN ADD THE CURRENT */
*       IF SNTVLPTR^=ADDR(SVTELFST) THEN/* ELEMENT LENGTH TO THE     */
         LA    R0,SVTELFST(,R6)                                    0796
         CR    R14,R0                                              0796
         BE    @RF00796                                            0796
*         SVTABFRE=SVTABFRE+SVTORIG+LENGTH(SVTELEM);/* FREE SPACE    */
*                                                                  0797
         AL    R15,SVTABFRE(,R6)                                   0797
         AL    R15,FW04                                            0797
         ST    R15,SVTABFRE(,R6)                                   0797
*       /*************************************************************/
*       /*                                                           */
*       /* IF THE NEW VALUE WILL NOT FIT IN THE EXISTING SVTAB       */
*       /* ELEMENT THEN A NEW ELEMENT MUST BE ASSIGNED FROM THE      */
*       /* REMAINING SPACE IN THE SVTAB.                             */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0798
*       IF(VALLNG+LENGTH(SVTELEM))>(SVTABLNG-SVTABUSE) THEN/* IF   0798
*                                      VALUE                         */
@RF00796 L     R6,VALLNG                                           0798
         LA    R14,4                                               0798
         ALR   R14,R6                                              0798
         L     R15,SVTABPTR                                        0798
         L     R0,SVTABLNG(,R15)                                   0798
         L     R1,SVTABUSE(,R15)                                   0798
         LR    R2,R0                                               0798
         SLR   R2,R1                                               0798
         CR    R14,R2                                              0798
         BNH   @RF00798                                            0798
*         DO;                       /* WILL NOT FIX IN EXISTING SVTAB
*                                      THEN WE WILL HAVE TO GET A NEW
*                                      SVTAB                         */
*           GETAMT=SVTABUSE-SVTABFRE;                              0800
         SL    R1,SVTABFRE(,R15)                                   0800
         ST    R1,GETAMT                                           0800
*           GETAMT=MAX(GETAMT,SVTABLNG);/* SELECT THE MAXIMUM OF THE
*                                      AMOUNT CALCULATED ABOVE AND 0801
*                                      THE LENGTH OF THE CURRENT   0801
*                                      SVTAB TABLE                   */
         CR    R1,R0                                               0801
         BNL   *+6
         LR    R1,R0                                               0801
         ST    R1,GETAMT                                           0801
*           GETAMT=GETAMT+MAX(GETAMT/2,VALLNG+GAS);                0802
         LR    R14,R1                                              0802
         SRDA  R14,32                                              0802
         D     R14,FW02                                            0802
         AL    R6,FW300                                            0802
         CR    R15,R6                                              0802
         BNL   *+6
         LR    R15,R6                                              0802
         ALR   R1,R15                                              0802
         ST    R1,GETAMT                                           0802
*           RFY                                                    0803
*             R15 RSTD;                                            0803
*           DO;                     /* GETMAIN (EC) LV(GETAMT)     0804
*                                      A(GETADR) SP(78) RTCD(R15)    */
*             RESPECIFY                                            0805
*              (R1,                                                0805
*               R15) RESTRICTED;                                   0805
*             I004=I004&&I004;      /* INIT LIST                     */
         XC    I004(10),I004                                       0806
*             I00404='20'X;         /* TYPE                          */
         MVI   I00404,X'20'                                        0807
*             I00401=GETAMT;        /* LENGTH                        */
         L     R6,GETAMT                                           0808
         ST    R6,I00401                                           0808
*             I00403=ADDR(GETADR);  /* ADDR OF ADDR LIST             */
         LA    R14,GETADR                                          0809
         STCM  R14,7,I00403                                        0809
*             I00405=78;            /* SUBPOOL VALUE                 */
         MVI   I00405,X'4E'                                        0810
*             R1=ADDR(I004);        /* REG1 POINTS TO LIST           */
         LA    R1,I004                                             0811
*             SVC(4);               /* STANDARD-FORM OF GETMAIN      */
         SVC   4                                                   0812
*             R15=R15;              /* SET RETURN CODE               */
*             RESPECIFY                                            0814
*              (R1,                                                0814
*               R15) UNRESTRICTED;                                 0814
*           END;                    /* GETMAIN (EC) LV(GETAMT)     0815
*                                      A(GETADR) SP(78) RTCD(R15)    */
*           IF R15^=CON0 THEN                                      0816
         LTR   R15,R15                                             0816
         BZ    @RF00816                                            0816
*             DO;                                                  0817
*               RFY                                                0818
*                 R15 UNRSTD;                                      0818
*               EXMSGID=M511;                                      0819
         MVC   EXMSGID(4),$MSGM511                                 0819
*               CT431RET=CON16;                                    0820
         MVC   CT431RET(4),FW16                                    0820
*               NOTEXEC=YES;                                       0821
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0821
*               CALL MSGRTN;                                       0822
         BAL   R14,MSGRTN                                          0822
*               STABERR=YES;                                       0823
         OI    STABERR,B'10000000'                                 0823
*               RETURN;                                            0824
@EL00007 DS    0H                                                  0824
@EF00007 DS    0H                                                  0824
@ER00007 LM    R14,R7,@SA00007                                     0824
         LM    R9,R12,@SA00007+40                                  0824
         BR    R14                                                 0824
*             END;                                                 0825
*           ELSE                    /* INITIAL SVTAB HEADER FIELDS   */
*             DO;                   /* IN THE NEW BLOCK              */
@RF00816 DS    0H                                                  0827
         L     R2,GETADR
         L     R3,GETAMT
         XR    R4,R4
         XR    R5,R5
         MVCL  R2,R4
*               GETADR->SVTABNXT=CON0;                             0827
         SLR   R4,R4                                               0827
         L     R5,GETADR                                           0827
         ST    R4,SVTABNXT(,R5)                                    0827
*               GETADR->SVTABLNG=GETAMT;                           0828
         L     R15,GETAMT                                          0828
         ST    R15,SVTABLNG(,R5)                                   0828
*               GETADR->SVTABUSE=LENGTH(SVTAB);                    0829
         LA    R0,16                                               0829
         ST    R0,SVTABUSE(,R5)                                    0829
*               GETADR->SVTABFRE=CON0;                             0830
         ST    R4,SVTABFRE(,R5)                                    0830
*               SVTABNXT=GETADR;                                   0831
         L     R1,SVTABPTR                                         0831
         ST    R5,SVTABNXT(,R1)                                    0831
*               NEWVELEM=SVTABNXT+LENGTH(SVTAB);/* FITST ASSIGNABLE
*                                      ELEMENT IN NEW SVTAB          */
         ALR   R0,R5                                               0832
         LR    NEWVELEM,R0                                         0832
*               NEWVELEM->SVTLNG=CON0;/* CREATE A NULL ELEMENT AS    */
         STH   R4,SVTLNG(,NEWVELEM)                                0833
*               NEWVELEM->SVTORIG=CON0;/* FIRST ELEMENT IN NEW SVTAB */
         STH   R4,SVTORIG(,NEWVELEM)                               0834
*               NEWVELEM=NEWVELEM+LENGTH(SVTELEM);                 0835
         LA    R4,4                                                0835
         ALR   NEWVELEM,R4                                         0835
*               SVTABNXT->SVTABUSE=SVTABNXT->SVTABUSE+LENGTH(SVTELEM);
         AL    R4,SVTABUSE(,R5)                                    0836
         ST    R4,SVTABUSE(,R5)                                    0836
*               SAVSNTAB=SNTABPTR;  /* SAVE ADDRESS OF CURRENT SNTAB
*                                      ESTABLISH BASE TO FIRST SNTAB */
         L     R14,SNTABPTR                                        0837
         ST    R14,SAVSNTAB                                        0837
*               SNTABPTR=SNTABFST;  /* AND FIRST SNTAB ELEMENT       */
         L     R1,LSDPTR(,ECDAPTR)                                 0838
         L     R1,LSDEXEC-LSD(,R1)                                 0838
         L     R2,SNTABFST(,R1)                                    0838
         ST    R2,SNTABPTR                                         0838
*               SNTELPTR=SNTABPTR+LENGTH(SNTAB);                   0839
         AL    R2,FW12                                             0839
         LR    SNTELPTR,R2                                         0839
*               RFY                                                0840
*                (R2) RSTD;                                        0840
*               R2=NEWVELEM;        /* REGISTER TWO IS START OF FREE
*                                      SPACE IN NEW SVTAB, UPDATED 0841
*                                      AUTO BY MVCL                  */
*                                                                  0841
         LR    R2,NEWVELEM                                         0841
*               /*****************************************************/
*               /*                                                   */
*               /* COPY VALUE ELEMENTS TO NEW TABLE                  */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0842
*               LASTELMT=ECDALNEL+ECDALNEL->SNTLNG+LENGTH(SNTELEM);
         L     R3,ECDALNEL(,ECDAPTR)                               0842
         LH    LASTELMT,SNTLNG(,R3)                                0842
         ALR   LASTELMT,R3                                         0842
         AL    LASTELMT,FW08                                       0842
*               DO WHILE SNTELPTR^=LASTELMT;                       0843
         B     @DE00843                                            0843
@DL00843 DS    0H                                                  0844
*                 IF SNTELPTR^=TOBEADD THEN/* IF WE ARE AT THE     0844
*                                      ELEMENT                       */
         CR    SNTELPTR,TOBEADD                                    0844
         BE    @RF00844                                            0844
*                   DO;             /* THAT IS CHANGING THEN BYPASS
*                                      THE VALUE MOVE                */
*                     IF SNTVLPTR^=ADDR(SVTELFST) THEN/* IF THIS IS
*                                      NOT                           */
         L     R3,SNTVLPTR(,SNTELPTR)                              0846
         L     R1,SVTABPTR                                         0846
         LA    R4,SVTELFST(,R1)                                    0846
         CR    R3,R4                                               0846
         BE    @RF00846                                            0846
*                       DO;         /* A NULL VALUE THEN COPY VALUE  */
*                         RFY                                      0848
*                          (R3,                                    0848
*                           R4,                                    0848
*                           R5) RSTD;                              0848
*                         R4=SNTVLPTR;                             0849
         L     R14,SNTVLPTR(,SNTELPTR)                             0849
         LR    R4,R14                                              0849
*                         R3=SVTORIG+LENGTH(SVTELEM);              0850
         LA    R3,4                                                0850
         AH    R3,SVTORIG(,R14)                                    0850
*                         R5=R3;                                   0851
         LR    R5,R3                                               0851
*                         VLPTR=R2;                                0852
         ST    R2,VLPTR                                            0852
*                         MVCL(R2,R4);                             0853
         MVCL  R2,R4                                               0853
*                         SVTABNXT->SVTABUSE=SVTABNXT->SVTABUSE+SVTORIG
*                             +LENGTH(SVTELEM);                    0854
         L     R1,SVTABPTR                                         0854
         L     R14,SVTABNXT(,R1)                                   0854
         L     R15,SNTVLPTR(,SNTELPTR)                             0854
         LH    R0,SVTORIG(,R15)                                    0854
         L     R1,SVTABUSE(,R14)                                   0854
         ALR   R1,R0                                               0854
         AL    R1,FW04                                             0854
         ST    R1,SVTABUSE(,R14)                                   0854
*                         SVTABNXT->SVTABFRE=SVTABNXT->SVTABFRE+(  0855
*                             SVTORIG-SVTLNG);                     0855
         SH    R0,SVTLNG(,R15)                                     0855
         AL    R0,SVTABFRE(,R14)                                   0855
         ST    R0,SVTABFRE(,R14)                                   0855
*                         SNTVLPTR=VLPTR;                          0856
         L     R15,VLPTR                                           0856
         ST    R15,SNTVLPTR(,SNTELPTR)                             0856
*                         RFY                                      0857
*                          (R3,                                    0857
*                           R4,                                    0857
*                           R5) UNRSTD;                            0857
*                       END;                                       0858
*                     ELSE          /* OTHERWISE IF NULL ASSIGN VALUE*/
*                       SNTVLPTR=SVTABNXT+LENGTH(SVTAB);/* TO FIRST
*                                      ENTRY IN NEW SVTAB            */
         B     @RC00846                                            0859
@RF00846 LA    R3,16                                               0859
         L     R1,SVTABPTR                                         0859
         AL    R3,SVTABNXT(,R1)                                    0859
         ST    R3,SNTVLPTR(,SNTELPTR)                              0859
*                   END;                                           0860
@RC00846 DS    0H                                                  0861
*                 IF SNTLAST=YES THEN/* IF AT LAST ELEMENT IN SNTAB  */
@RF00844 TM    SNTLAST(SNTELPTR),B'00000001'                       0861
         BNO   @RF00861                                            0861
*                   DO;             /* THEN UPDATE TO NEXT SNTAB     */
*                     SNTABPTR=SNTABNXT;/* AND ITS FIRST ELEMENT     */
         L     R3,SNTABPTR                                         0863
         L     R3,SNTABNXT(,R3)                                    0863
         ST    R3,SNTABPTR                                         0863
*                     SNTELPTR=SNTABPTR+LENGTH(SNTAB);             0864
         AL    R3,FW12                                             0864
         LR    SNTELPTR,R3                                         0864
*                   END;                                           0865
*                 ELSE              /* OTHERWISE UPDATE TO NEXT      */
*                   SNTELPTR=SNTELPTR+SNTLNG+LENGTH(SNTELEM);/*    0866
*                                      ELEMENT IN THE CURRENT SNTAB
*                                      TABLE                         */
         B     @RC00861                                            0866
@RF00861 LR    R3,SNTELPTR                                         0866
         AH    R3,SNTLNG(,SNTELPTR)                                0866
         AL    R3,FW08                                             0866
         LR    SNTELPTR,R3                                         0866
*               END;                                               0867
@RC00861 DS    0H                                                  0867
@DE00843 CR    SNTELPTR,LASTELMT                                   0867
         BE    LBL0154E
         L     R3,SNTVLPTR(,SNTELPTR)
         LTR   R3,R3
         BNZ   @DL00843
*               RFY                                                0868
*                 R2 UNRSTD;                                       0868
*               FREEADR=SVTABPTR;   /* FREE THE OLD SVTAB WHEN ALL   */
LBL0154E L     R6,SVTABPTR                                         0869
         ST    R6,FREEADR                                          0869
*               FREEAMT=SVTABLNG;   /* VALUES HAVE BEEN COPIED       */
         L     R8,SVTABLNG(,R6)                                    0870
         ST    R8,FREEAMT                                          0870
*               SVTABFST=SVTABNXT;                                 0871
         L     R1,LSDPTR(,ECDAPTR)                                 0871
         L     R1,LSDEXEC-LSD(,R1)                                 0871
         L     R6,SVTABNXT(,R6)                                    0871
         ST    R6,SVTABFST(,R1)                                    0871
*               SVTABPTR=SVTABFST;                                 0872
         ST    R6,SVTABPTR                                         0872
*               DO;                 /* FREEMAIN (E) LV(FREEAMT)    0873
*                                      A(FREEADR) SP(78)             */
*                 RESPECIFY                                        0874
*                  (R1) RESTRICTED;                                0874
*                 I005=I005&&I005;  /* INIT LIST                     */
         XC    I005(10),I005                                       0875
*                 I00505='00'X;     /* SET TYPE                      */
         MVI   I00505,X'00'                                        0876
*                 I00502=FREEAMT;   /* LENGTH                        */
         STCM  R8,7,I00502                                         0877
*                 I00504=ADDR(FREEADR);/* ADDR OF ADDR LIST          */
         LA    R8,FREEADR                                          0878
         STCM  R8,7,I00504                                         0878
*                 I00506=78;        /* SUBPOOL VALUE                 */
         MVI   I00506,X'4E'                                        0879
*                 R1=ADDR(I005);/* REG1 POINTS TO LIST               */
         LA    R1,I005                                             0880
*                 SVC(5);           /* STANDARD-FORM OF GETMAIN      */
         SVC   5                                                   0881
*                 RESPECIFY                                        0882
*                  (R1) UNRESTRICTED;                              0882
*               END;                /* FREEMAIN (E) LV(FREEAMT)    0883
*                                      A(FREEADR) SP(78)             */
*             END;                                                 0884
*           SNTABPTR=SAVSNTAB;      /* RESTORE TO CURRENT SNTAB      */
         L     R6,SAVSNTAB                                         0885
         ST    R6,SNTABPTR                                         0885
*           SNTELPTR=TOBEADD;       /* RESTORE SNTAB ELEMENT BASE    */
         LR    SNTELPTR,TOBEADD                                    0886
*         END;                                                     0887
*       SVTELPTR=SVTABFST+SVTABUSE; /* PLACE NEW ELEMENT AT END OF   */
@RF00798 L     R6,LSDPTR(,ECDAPTR)                                 0888
         L     R6,LSDEXEC-LSD(,R6)                                 0888
         L     R14,SVTABPTR                                        0888
         L     R15,SVTABUSE(,R14)                                  0888
         L     SVTELPTR,SVTABFST(,R6)                              0888
         ALR   SVTELPTR,R15                                        0888
*       SNTVLPTR=SVTELPTR;          /* THE OLD (OR NEW) TABLE        */
         ST    SVTELPTR,SNTVLPTR(,SNTELPTR)                        0889
*       SVTORIG=VALLNG;             /* NEW ELEMENTS ARE EXACT IN     */
         L     R6,SNTVLPTR(,SNTELPTR)                              0890
         L     R9,VALLNG                                           0890
         STH   R9,SVTORIG(,R6)                                     0890
*       SVTLNG=SVTORIG;             /* SIZE                          */
         STH   R9,SVTLNG(,R6)                                      0891
*       SVTABUSE=SVTABUSE+SVTORIG+LENGTH(SVTELEM);                 0892
         ALR   R15,R9                                              0892
         AL    R15,FW04                                            0892
         ST    R15,SVTABUSE(,R14)                                  0892
*     END;                                                         0893
*                                                                  0893
*   /*****************************************************************/
*   /*                                                               */
*   /* PLACE THE NEW VALUE INTO THE SVTAB ELEMENT                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0894
*   SVTABFRE=SVTABFRE-(VALLNG-SVTLNG);/* ADJUST THE FREE AREA TO TAKE
*                                      INTO ACCOUNT ANY DIFFERENCE IN
*                                      THE ORIGIONAL LENGTH          */
@RF00794 L     R6,SVTABPTR                                         0894
         L     R9,VALLNG                                           0894
         L     R14,SNTVLPTR(,SNTELPTR)                             0894
         LR    R15,R9                                              0894
         SH    R15,SVTLNG(,R14)                                    0894
         LCR   R15,R15                                             0894
         AL    R15,SVTABFRE(,R6)                                   0894
         ST    R15,SVTABFRE(,R6)                                   0894
*   SVTLNG=VALLNG;                  /* SET NEW LENGTH                */
         STH   R9,SVTLNG(,R14)                                     0895
*   RFY                                                            0896
*    (R2,                                                          0896
*     R3,                                                          0896
*     R4,                                                          0896
*     R5) RSTD;                                                    0896
*   R2=ADDR(SVTDATA);               /* MOVE TO ADDRESS               */
         LA    R2,SVTDATA(,R14)                                    0897
*   R4=VALADR;                      /* MOVE FROM ADDRESS             */
         L     R4,VALADR                                           0898
*   R3=VALLNG;                      /* LENGTH OF MOVE                */
         LR    R3,R9                                               0899
*   R5=R3;                                                         0900
         LR    R5,R3                                               0900
*   MVCL(R2,R4);                    /* MOVE DATA                     */
         MVCL  R2,R4                                               0901
*   RFY                                                            0902
*    (R2,                                                          0902
*     R3,                                                          0902
*     R4,                                                          0902
*     R5) UNRSTD;                                                  0902
*   END SVTABUPT;                                                  0903
         B     @EL00007                                            0903
*                                                                  0904
*   /*****************************************************************/
*   /*                                                               */
*   /* VALUECHK - LOCATES THE START AND ENDING POSITIONS FOR THE     */
*   /* VALUE OF A KEYWORD AND VERIFIES THAT IT IS EITHER A QUOTED    */
*   /* STRING OR A CHARACTER STRING                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0904
*VALUECHK:                                                         0904
*   PROC;                                                          0904
VALUECHK STM   R14,R5,@SA00008                                     0904
         STM   R7,R12,@SA00008+32                                  0904
*   LFPARCTR=CON1;                                                 0905
         LA    R8,1                                                0905
         LR    LFPARCTR,R8                                         0905
*   VALSTR=CON0;                                                   0906
         SLR   R3,R3                                               0906
         ST    R3,VALSTR                                           0906
*   VALEND=CON0;                                                   0907
         ST    R3,VALEND                                           0907
*   ICTR=ICTR+CON1;                 /* INCREMENT PAST LEFT PAREN     */
         ALR   ICTR,R8                                             0908
*   CALL SKIPSEP;                                                  0909
         BAL   R14,SKIPSEP                                         0909
*   IF ICTR^>LINELNG THEN                                          0910
         C     ICTR,LINELNG                                        0910
         BH    @RF00910                                            0910
*     DO;                                                          0911
*       IF RECORD(ICTR)=QUOTE THEN  /* QUOTED STRING PROCESSING      */
         L     R3,ECDAIREC(,ECDAPTR)                               0912
         ALR   R3,ICTR                                             0912
         CLI   RECORD-1(R3),C''''                                  0912
         BNE   @RF00912                                            0912
*         DO;                                                      0913
*           ICTR=ICTR+CON1;         /* INCREMENT PAST FIRST QUOTE    */
         LA    R8,1                                                0914
         ALR   ICTR,R8                                             0914
*           VALSTR=ICTR;            /* SAVE START OF VALUE           */
         ST    ICTR,VALSTR                                         0915
*           CYCLE=CON1;             /* LOOP CONTROL SEARCH FOR VALUE
*                                      END                           */
         LR    CYCLE,R8                                            0916
*           DO ICTR=ICTR TO LINELNG WHILE CYCLE=CON1;              0917
         B     @DE00917                                            0917
@DL00917 LA    R8,1                                                0917
         CR    CYCLE,R8                                            0917
         BNE   @DC00917                                            0917
*             IF RECORD(ICTR)=QUOTE THEN/* CHECK FOR ENDING QUOTE    */
         L     R14,ECDAIREC(,ECDAPTR)                              0918
         LR    R15,R14                                             0918
         ALR   R15,ICTR                                            0918
         CLI   RECORD-1(R15),C''''                                 0918
         BNE   @RF00918                                            0918
*               DO;                 /* IF THIS IS A DOUBLE QUOTE THEN
*                                      REMOVE ONE FROM VALUE AND   0919
*                                      CONTINUE SEARCH FOR VALUE END */
*                 IF ICTR<LINELNG&RECORD(ICTR+CON1)=QUOTE THEN     0920
         L     R15,LINELNG                                         0920
         CR    ICTR,R15                                            0920
         BNL   @RF00920                                            0920
         LR    R1,R14                                              0920
         ALR   R1,ICTR                                             0920
         CLI   RECORD(R1),C''''                                    0920
         BNE   @RF00920                                            0920
*                   DO;                                            0921
*                     RFY                                          0922
*                      (R2,                                        0922
*                       R3,                                        0922
*                       R4,                                        0922
*                       R5) RSTD;                                  0922
*                     R2=ADDR(RECORD(ICTR));                       0923
         LA    R2,RECORD-1(ICTR,R14)                               0923
*                     R4=ADDR(RECORD(ICTR+CON1));                  0924
         LA    R4,RECORD(ICTR,R14)                                 0924
*                     R3=LINELNG-ICTR+CON1;                        0925
         SLR   R15,ICTR                                            0925
         ALR   R15,R8                                              0925
         LR    R3,R15                                              0925
*                     R5=R3;                                       0926
         LR    R5,R3                                               0926
*                     MVCL(R2,R4);                                 0927
         MVCL  R2,R4                                               0927
*                     RFY                                          0928
*                      (R2,                                        0928
*                       R3,                                        0928
*                       R4,                                        0928
*                       R5) UNRSTD;                                0928
*                     LINELNG=LINELNG-CON1;                        0929
         L     R8,LINELNG                                          0929
         BCTR  R8,0                                                0929
         ST    R8,LINELNG                                          0929
*                   END;                                           0930
*                 ELSE              /* IF NOT DOUBLE QUOTES THEN THIS*/
*                   DO;             /* IS THE VALUE END              */
         B     @RC00920                                            0931
@RF00920 DS    0H                                                  0932
*                     VALEND=ICTR-CON1;                            0932
         LR    R8,ICTR                                             0932
         BCTR  R8,0                                                0932
         ST    R8,VALEND                                           0932
*                     CYCLE=CON0;                                  0933
         SLR   CYCLE,CYCLE                                         0933
*                     ICTR=ICTR+CON1;                              0934
         AL    ICTR,FW01                                           0934
*                     CALL SKIPSEP; /* FIND END OF VALUE (END PAREN) */
         BAL   R14,SKIPSEP                                         0935
*                     IF ICTR<=LINELNG THEN/* IF CLOSING PAREN NOT   */
         C     ICTR,LINELNG                                        0936
         BH    @RF00936                                            0936
*                       DO;                                        0937
*                         IF RECORD(ICTR)^=RTPAREN THEN/* FOUND THEN
*                                      IT                            */
         L     R8,ECDAIREC(,ECDAPTR)                               0938
         LR    R1,R8                                               0938
         ALR   R1,ICTR                                             0938
         CLI   RECORD-1(R1),C')'                                   0938
         BE    @RF00938                                            0938
*                           DO;     /* IS AN ERROR                   */
*                             EXMSGID=M508;                        0940
         MVC   EXMSGID(4),$MSGM508                                 0940
*                             MVAR(1)=PARMADR;                     0941
         L     R2,PARMADR                                          0941
         ST    R2,MVAR                                             0941
*                             MVARLEN(1)=ADDR(RECORD(ICTR))-PARMADR+
*                                 CON1;                            0942
         LA    R8,RECORD-1(ICTR,R8)                                0942
         SLR   R8,R2                                               0942
         AL    R8,FW01                                             0942
         STC   R8,MVARLEN                                          0942
*                             NOTEXEC=YES;                         0943
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0943
*                             CALL MSGRTN;                         0944
         BAL   R14,MSGRTN                                          0944
*                           END;                                   0945
*                       END;                                       0946
@RF00938 DS    0H                                                  0947
*                   END;                                           0947
@RF00936 DS    0H                                                  0948
*               END;                                               0948
@RC00920 DS    0H                                                  0949
*           END;                    /* IF WE DID NOT FIND END OF THE */
@RF00918 AL    ICTR,FW01                                           0949
@DE00917 C     ICTR,LINELNG                                        0949
         BNH   @DL00917                                            0949
@DC00917 DS    0H                                                  0950
*           IF CYCLE=CON1 THEN      /* VALUE THEN ASSUME END AT      */
         C     CYCLE,FW01                                          0950
         BNE   @RF00950                                            0950
*             DO;                   /* RECORD END                    */
*               EXMSGID=M527;                                      0952
         MVC   EXMSGID(4),$MSGM527                                 0952
*               MVAR(1)=PARMADR;                                   0953
         L     R9,PARMADR                                          0953
         ST    R9,MVAR                                             0953
*               MVARLEN(1)=ADDR(RECORD(ICTR))-PARMADR;             0954
         L     R1,ECDAIREC(,ECDAPTR)                               0954
         LA    R8,RECORD-1(ICTR,R1)                                0954
         SLR   R8,R9                                               0954
         STC   R8,MVARLEN                                          0954
*               CALL MSGRTN;                                       0955
         BAL   R14,MSGRTN                                          0955
*               VALEND=ICTR-CON1;                                  0956
         LR    R9,ICTR                                             0956
         BCTR  R9,0                                                0956
         ST    R9,VALEND                                           0956
*             END;                  /* IF THE VALUE WAS A NULL QUOTED*/
*           IF VALEND<VALSTR THEN   /* STRING THEN MAKE IT LOOK LIKE */
@RF00950 L     R14,VALEND                                          0958
         C     R14,VALSTR                                          0958
         BNL   @RF00958                                            0958
*             DO;                   /* WE FOUND NOTHING              */
*               VALEND=CON0;                                       0960
         SLR   R15,R15                                             0960
         ST    R15,VALEND                                          0960
*               VALSTR=CON0;                                       0961
         ST    R15,VALSTR                                          0961
*             END;                                                 0962
*         END;                                                     0963
*                                                                  0963
*       /*************************************************************/
*       /*                                                           */
*       /* CHARACTER STRING VALUE PROCESSING                         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0964
*       ELSE                                                       0964
*         DO;                                                      0964
         B     @RC00912                                            0964
@RF00912 DS    0H                                                  0965
*           VALSTR=ICTR;            /* SAVE VALUE START              */
         ST    ICTR,VALSTR                                         0965
*           CYCLE=CON1;                                            0966
         LA    CYCLE,1                                             0966
*           DO ICTR=ICTR TO LINELNG WHILE CYCLE=CON1;              0967
         B     @DE00967                                            0967
@DL00967 LA    R3,1                                                0967
         CR    CYCLE,R3                                            0967
         BNE   @DC00967                                            0967
*             IF RECORD(ICTR)=LFPAREN THEN/* IF LEFT PAREN FOUND UP  */
         L     R8,ECDAIREC(,ECDAPTR)                               0968
         ALR   R8,ICTR                                             0968
         CLI   RECORD-1(R8),C'('                                   0968
         BNE   @RF00968                                            0968
*               LFPARCTR=LFPARCTR+CON1;/* COUNT                      */
         ALR   LFPARCTR,R3                                         0969
*             ELSE                                                 0970
*               IF RECORD(ICTR)=RTPAREN THEN/* IF THIS IS A RIGHT    */
         B     @RC00968                                            0970
@RF00968 L     R3,ECDAIREC(,ECDAPTR)                               0970
         ALR   R3,ICTR                                             0970
         CLI   RECORD-1(R3),C')'                                   0970
         BNE   @RF00970                                            0970
*                 DO;               /* PAREN THEN DETERMINE IF WE ARE
*                                      AT END OF THE VALUE           */
*                   LFPARCTR=LFPARCTR-CON1;                        0972
         BCTR  LFPARCTR,0                                          0972
*                   IF LFPARCTR=CON0 THEN                          0973
         LTR   LFPARCTR,LFPARCTR                                   0973
         BNZ   @RF00973                                            0973
*                     DO;                                          0974
*                       VALEND=ICTR-CON1;                          0975
         LR    R8,ICTR                                             0975
         BCTR  R8,0                                                0975
         ST    R8,VALEND                                           0975
*                       CYCLE=CON0;                                0976
         SLR   CYCLE,CYCLE                                         0976
*                     END;                                         0977
*                 END;                                             0978
*               ELSE                /* IF THIS IS A DELIMITER THEN   */
*                 DO;               /* IT IS END OF THE VALUE        */
         B     @RC00970                                            0979
@RF00970 DS    0H                                                  0980
*                   IF RECORD(ICTR)=BLANK RECORD(ICTR)=COMMA RECORD(
*                       ICTR)=TAB (RECORD(ICTR)=SLASH&(ICTR<LINELNG&
*                       RECORD(ICTR:ICTR+CON1)=SLASHAST)) THEN     0980
         L     R3,ECDAIREC(,ECDAPTR)                               0980
         LR    R8,R3                                               0980
         ALR   R8,ICTR                                             0980
         CLI   RECORD-1(R8),C' '                                   0980
         BE    @RT00980                                            0980
         LR    R8,R3                                               0980
         ALR   R8,ICTR                                             0980
         CLI   RECORD-1(R8),C','                                   0980
         BE    @RT00980                                            0980
         LR    R8,R3                                               0980
         ALR   R8,ICTR                                             0980
         CLI   RECORD-1(R8),X'05'                                  0980
         BE    @RT00980                                            0980
         LR    R8,R3                                               0980
         ALR   R8,ICTR                                             0980
         CLI   RECORD-1(R8),C'/'                                   0980
         BNE   @RF00980                                            0980
         C     ICTR,LINELNG                                        0980
         BNL   @RF00980                                            0980
         ALR   R3,ICTR                                             0980
         CLC   RECORD-1(2,R3),SLSHASTR                             0980
         BNE   @RF00980                                            0980
@RT00980 DS    0H                                                  0981
*                     DO;                                          0981
*                       CYCLE=CON0;                                0982
         SLR   CYCLE,CYCLE                                         0982
*                       VALEND=ICTR-CON1;                          0983
         LR    R3,ICTR                                             0983
         BCTR  R3,0                                                0983
         ST    R3,VALEND                                           0983
*                       CALL SKIPSEP;                              0984
         BAL   R14,SKIPSEP                                         0984
*                       IF ICTR<=LINELNG THEN                      0985
         C     ICTR,LINELNG                                        0985
         BH    @RF00985                                            0985
*                         DO;       /* IF NO ENDING PAREN COULD BE   */
*                           IF RECORD(ICTR)^=RTPAREN THEN/* THEN   0987
*                                      NOTIFY                        */
         L     R8,ECDAIREC(,ECDAPTR)                               0987
         LR    R3,R8                                               0987
         ALR   R3,ICTR                                             0987
         CLI   RECORD-1(R3),C')'                                   0987
         BE    @RF00987                                            0987
*                             DO;   /* USER AND RETURN TO SYNTAX ANY */
*                               EXMSGID=M508;/* REMAINING PARMS      */
         MVC   EXMSGID(4),$MSGM508                                 0989
*                               MVAR(1)=PARMADR;                   0990
         L     R3,PARMADR                                          0990
         ST    R3,MVAR                                             0990
*                               MVARLEN(1)=ADDR(RECORD(ICTR))-PARMADR+
*                                   CON1;                          0991
         LA    R8,RECORD-1(ICTR,R8)                                0991
         SLR   R8,R3                                               0991
         AL    R8,FW01                                             0991
         STC   R8,MVARLEN                                          0991
*                               NOTEXEC=YES;                       0992
         OI    NOTEXEC(ECDAPTR),B'01000000'                        0992
*                               CALL MSGRTN;                       0993
         BAL   R14,MSGRTN                                          0993
*                             END;                                 0994
*                         END;                                     0995
@RF00987 DS    0H                                                  0996
*                     END;                                         0996
@RF00985 DS    0H                                                  0997
*                 END;                                             0997
@RF00980 DS    0H                                                  0998
*           END;                    /* IF WE DID NOT FIND END OF     */
@RC00970 DS    0H                                                  0998
@RC00968 AL    ICTR,FW01                                           0998
@DE00967 C     ICTR,LINELNG                                        0998
         BNH   @DL00967                                            0998
@DC00967 DS    0H                                                  0999
*           IF CYCLE=CON1 THEN      /* VALUE THEN ASSUME END AT END  */
         C     CYCLE,FW01                                          0999
         BNE   @RF00999                                            0999
*             VALEND=ICTR-CON1;     /* OF RECORD                     */
         LR    R9,ICTR                                             1000
         BCTR  R9,0                                                1000
         ST    R9,VALEND                                           1000
*         END;                                                     1001
*     END;                                                         1002
*   END;                                                           1003
*                                                                  1003
@EL00008 DS    0H                                                  1003
@EF00008 DS    0H                                                  1003
@ER00008 LM    R14,R5,@SA00008                                     1003
         LM    R7,R12,@SA00008+32                                  1003
         BR    R14                                                 1003
*   /*****************************************************************/
*   /*                                                               */
*   /* END OF VALUE CHECK PROCEDURE                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1004
*                                                                  1004
*   /*****************************************************************/
*   /*                                                               */
*   /* MSGRTN - THE MESSAGE ROUTINE BUILDS THE IKJEFF02 PARAMETER    */
*   /* LIST AND THEN INVOKES IKJEFF02 TO ISSUE A MESSAGE             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1004
*MSGRTN:                                                           1004
*   PROC OPTIONS(SAVEAREA);                                        1004
MSGRTN   STM   R14,R12,12(R13)                                     1004
         ST    R13,@SA00009+4                                      1004
         LA    R14,@SA00009                                        1004
         ST    R14,8(,R13)                                         1004
         LR    R13,R14                                             1004
*   MSGTABLE=MSGTABLE&&MSGTABLE;    /* INITIALIZE IKJEFF02 PARMLIST  */
         L     R6,ERRPTR                                           1005
         XC    MSGTABLE(52,R6),MSGTABLE(R6)                        1005
*   LISTPTR=ADDR(MSGCSECT);         /* START OF MESSAGE PARMS        */
         LA    R8,MSGCSECT(,R6)                                    1006
         ST    R8,LISTPTR(,R6)                                     1006
*   TMCTPTR=CPPLPTR;                /* ADDRESS OF THE CPPL           */
         L     R14,CPPLPTR(,ECDAPTR)                               1007
         ST    R14,TMCTPTR(,R6)                                    1007
*   ECBPTR=ADDR(ECB);               /* DUMMY ECB ADDRESS             */
         LA    R15,ECB                                             1008
         ST    R15,ECBPTR(,R6)                                     1008
*   MSGCSECT=ADDR(IKJCT435);        /* IKJCT435 IS MESSAGE CSECT     */
         L     R0,IKJCT435                                         1009
         ST    R0,MSGCSECT(,R6)                                    1009
*   MTPUTLSW=YES;                   /* PUTLINE MESSAGE REUESTED      */
*   MTHEXSW=YES;                    /* PRINT RETURN CODES IN HEX     */
         OI    MTPUTLSW(R6),B'01010000'                            1011
*   MSGID=EXMSGID;                  /* ID OF THE MESSAGE TO BE ISSUED*/
         MVC   MSGID(4,R6),EXMSGID                                 1012
*   DO MCTR=1 TO DIM(MVAR);         /* INITIALIZE INSERTION VARIABLES*/
         LA    MCTR,1                                              1013
@DL01013 DS    0H                                                  1014
*     MTINSRT(MCTR)=MVAR(MCTR);     /* MVAR HAS BEEN PREVIOUSLY SET  */
         LR    R3,MCTR                                             1014
         SLA   R3,2                                                1014
         L     R6,MVAR-4(R3)                                       1014
         L     R1,ERRPTR                                           1014
         ST    R6,MTINSRT-4(R3,R1)                                 1014
*   END;                                                           1015
         AL    MCTR,FW01                                           1015
         C     MCTR,FW02                                           1015
         BNH   @DL01013                                            1015
*   RFY                                                            1016
*     R1 RSTD;                                                     1016
*   R1=ERRPTR;                      /* ADDRESS OF MSGTABLE           */
         L     R1,ERRPTR                                           1017
*   RFY                                                            1018
*     R1 UNRSTD;                                                   1018
*   DO;                             /* LINK EP(IKJEFF02)             */
*     I00601='00'X;                 /* EP/DE FLAG                    */
         MVI   I00601,X'00'                                        1020
*     I00602=ADDR(IKJEFF02);        /* ADDR OF EP/DE                 */
         LA    R6,IKJEFF02                                         1021
         STCM  R6,7,I00602                                         1021
*     I00604=0;                     /* DCB PTR                       */
         SLR   R6,R6                                               1022
         STCM  R6,7,I00604                                         1022
*     I00603='00'X;                 /* ERRET FLAG                    */
         MVI   I00603,X'00'                                        1023
*     RESPECIFY                                                    1024
*      (R15) RESTRICTED;                                           1024
*     R15=ADDR(I006);               /* ADDR OF LINK LIST             */
         LA    R15,I006                                            1025
*     SVC(6);                       /* ISSUE LINK SVC                */
         SVC   6                                                   1026
*     RESPECIFY                                                    1027
*      (R15) UNRESTRICTED;                                         1027
*   END;                            /* LINK EP(IKJEFF02) USE IKJEFF02
*                                      TO ISSUE MESSAGE              */
*   END MSGRTN;                     /* END OF MSGRTN                 */
@EL00009 L     R13,4(,R13)                                         1029
@EF00009 DS    0H                                                  1029
@ER00009 LM    R14,R12,12(R13)                                     1029
         BR    R14                                                 1029
@EL00001 L     R13,4(,R13)                                         1039
@EF00001 L     R0,@SIZDATD                                         1039
         LR    R1,R10                                              1039
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    R14,R12,12(R13)                                     1039
         BR    R14                                                 1039
@DATA    DS    0H
HW03     DC    H'3'
HW13     DC    H'13'
HW21     DC    H'21'
HW69     DC    H'69'
@SM01540 MVC   SNTDATA(0,SNTELPTR),NULLVDAT(R14)
@SM01544 MVC   SVTDATA(0,SVTELPTR),PSCBUSER-PSCB(R6)
@SM01546 MVC   SVTDATA(0,SVTELPTR),CSCBPROC(R1)
@SM01548 MVC   SVTDATA(0,SVTELPTR),PROCNAME(R1)
@SM01557 MVC   IDPRNME(0,PCLCUR),SNTDATA(SNTELPTR)
@SM01559 MVC   NADAT(0,PCLCUR),SNTDATA(SNTELPTR)
@SM01561 MVC   VIDNAME(0,SBFCUR),SNTDATA(SNTELPTR)
@SC01563 CLC   SNTDATA(0,UPTPTR1),PARMDAT(R6)
@SM01567 MVC   SNTDATA(0,SNTELPTR),PARMDAT(R1)
*   DCL                                                            1030
*     FEPATCH FIXED(31) STATIC;                                    1030
*   GEN DATA DEFS(FEPATCH);                                        1031
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     R15 FIXED(31) REG(15),                                       1032
*     R0 PTR(31) REG(0),                                           1032
*     R1 PTR(31) REG(1),                                           1032
*     R2 PTR(31) REG(2),                                           1032
*     R3 PTR(31) REG(3),                                           1032
*     R4 PTR(31) REG(4),                                           1032
*     R5 PTR(31) REG(5),                                           1032
*     R6 PTR(31) REG(6),                                           1032
*     R7 PTR(31) REG(7),                                           1032
*     R8 PTR(31) REG(8),                                           1032
*     R9 PTR(31) REG(9),                                           1032
*     R14 PTR(31) REG(14),                                         1032
*     R15 PTR(31) REG(15);                                         1032
*   DCL                                                            1033
*     1 I004 DEF(ILIST) BDY(WORD),  /* LIST FOR GETMAIN              */
*      2 I00401 PTR(31),            /* LENGTH                        */
*      2 I00402 CHAR(1),            /* HIARCHY                       */
*      2 I00403 PTR(24),            /* ADDR OF ADDR LIST             */
*      2 I00404 CHAR(1),            /* TYPE OF REQUEST               */
*      2 I00405 PTR(8);             /* SUBPOOL VALUE                 */
*   DCL                                                            1034
*     1 I005 DEF(ILIST) BDY(WORD),  /* LIST FOR FREEMAIN             */
*       3 I00501 PTR(8),            /* RESERVED                      */
*       3 I00502 PTR(24),           /* LENGTH                        */
*       3 I00503 PTR(8),            /* RESERVED                      */
*       3 I00504 PTR(24),           /* ADDR OF ADDR LIST             */
*       3 I00505 BIT(8),            /* TYPE OF FREEMAIN              */
*       3 I00506 PTR(8);            /* SUBPOOL VALUE                 */
*   DCL                                                            1035
*     1 I006 DEF(ILIST),            /* DEFINE LIST                   */
*      2 I00601 CHAR(1),            /* EP/DE FLAG                    */
*      2 I00602 PTR(24),            /* EP/DE PTR                     */
*      2 I00603 CHAR(1),            /* ERRET FLAG                    */
*      2 I00604 PTR(24),            /* DCB PTR                       */
*      2 I00605 PTR(31);            /* ERRET PTR                     */
*   DCL                                                            1036
*     1 I040 DEF(ILIST) BDY(WORD),  /* LIST FOR EXTRACT              */
*      2 I04001 PTR(31),            /* ADDRESS OF USERS ANSWER AREA  */
*      2 I04002 PTR(31),            /* ADDRESS OF TCB                */
*      2 I04003 BIT(16),            /* FLAGS INDICATING TCB FIELDS TO
*                                      EXTRACT                       */
*      2 I04004 CHAR(2);            /* RESERVED SPACE                */
*   DECLARE                                                        1037
*     ILIST CHAR(12) BDY(DWORD);    /* STANDARD LIST                 */
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       1038
*     I031F FIXED(31) BASED,                                       1038
*     I031P PTR(31) BASED,                                         1038
*     I015F FIXED(15) BASED,                                       1038
*     I015P PTR(15) BASED,                                         1038
*     I008P PTR(8) BASED,                                          1038
*     I001C CHAR(1) BASED;                                         1038
*   END                                                            1039
*                                                                  1039
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IKJCPPL )                                       */
         IKJCPPL
*/*%INCLUDE SYSLIB  (IKJEXEC )                                       */
*/*%INCLUDE SYSLIB  (IKJLSD  )                                       */
         IKJLSD
*/*%INCLUDE SYSLIB  (IKJEFFMT)                                       */
*/*%INCLUDE SYSLIB  (IKJEFFGF)                                       */
*/*%INCLUDE SYSLIB  (IKJECT  )                                       */
         IKJECT
*/*%INCLUDE SYSLIB  (IKJPSCB )                                       */
         IKJPSCB
*/*%INCLUDE SYSLIB  (IKJPPL  )                                       */
         IKJPPL
*/*%INCLUDE SYSLIB  (CVT     )                                       */
         CVT   DSECT=YES
         IHAPSA
         IHAASCB
         IEESMCA ,                                              ZP60014
         IKJTCB ,                                               ZP60014
         IEZJSCB ,                                              ZP60014
         IEFJSSIB ,                                             ZP60014
*                                                                  1039
*       ;                                                          1039
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SA00009 DS    18F
@SA00007 DS    14F
@SA00006 DS    14F
@SA00005 DS    14F
@SA00008 DS    14F
@TF00001 DS    F
IKJCT431 CSECT
         DS    0F
FW01     DC    F'1'
HW01     EQU   FW01+2
FW02     DC    F'2'
HW02     EQU   FW02+2
FW04     DC    F'4'
HW04     EQU   FW04+2
FW07     DC    F'7'
FW08     DC    F'8'
FW09     DC    F'9'
FW10     DC    F'10'
FW11     DC    F'11'
HW11     EQU   FW11+2
FW12     DC    F'12'
FW15     DC    F'15'
FW16     DC    F'16'
FW31     DC    F'31'
FW56     DC    F'56'
HW56     EQU   FW56+2
FW127    DC    F'127'
FW223    DC    F'223'
FW253    DC    F'253'
FW300    DC    F'300'
FW4096   DC    F'4096'
FW8192   DC    F'8192'                                          ZP60014
FW#GRP1  DC    A(GROUPONE)                                      ZP60014
FW#SYM   DC    A(SYMBOLCT)                                      ZP60014
FW#EVAL  DC    A(NEWIMMED)                                      ZP60014
@DATD    DSECT
         DS    0D
SNTABPTR DS    A
SVTABPTR DS    A
ERRPTR   DS    A
         DS    A
TIOTPTR  DS    A
         DS    A
POSNUM   DS    F
KEYNUM   DS    F
KEYWNUM  DS    F
SBFBASE  DS    A
PCLAMT   DS    F
ECB      DS    F
VLSTANS  DS    A
JCTR     DS    F
SAVSNTAB DS    A
CT431RET DS    F
VLPTR    DS    A
VALEND   DS    F
KEYAR    DS    F
USNTABST DS    A
LINELNG  DS    F
VALSTR   DS    F
FREEADR  DS    AL4
         ORG   FREEADR
GETADR   DS    AL4
         ORG   FREEADR+4
FREEAMT  DS    FL4
         ORG   FREEAMT
GETAMT   DS    FL4
         ORG   FREEAMT+4
ERRPARMS DS    CL52
SERVBLK  DS    CL28
EXMSGID  DS    CL4
PACKLOC  DS    CL8
         DS    CL4
CVERTLOC DS    CL8
FLGCT431 DS    BL1
         ORG   FLGCT431
STABERR  DS    BL1
POSPCERR EQU   FLGCT431+0
POSERR   EQU   FLGCT431+0
KEYERR   EQU   FLGCT431+0
KEYWORD  EQU   FLGCT431+0
VALIDERR EQU   FLGCT431+0
COPYVLST EQU   FLGCT431+0
         ORG   FLGCT431+1
         DS    CL3
NTUPTPRM DS    CL20
         ORG   NTUPTPRM
PARMADR  DS    AL4
PARMLNG  DS    FL4
PARMTYPE DS    FL2
PARMOP   DS    FL2
VALADR   DS    AL4
VALLNG   DS    FL4
         ORG   NTUPTPRM+20
ILIST    DS    CL12
MVAR     DS    AL4
         ORG   MVAR+0
MVARLEN  DS    AL1
         ORG   MVARLEN+0
MVARHEX  DS    BL1
         ORG   MVAR+8
IKJCT431 CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
IKJCT435 DC    V(IKJCT435)
         DS    0D
@CC01285 DC    C'VALUE FOR KEYWORD    '
@CC01304 DC    C'POSITIONAL'
$OSLEVEL DC    C'OS/VS2 3.8 EBB1102'                            ZP60014
$OUTLINE DC    C'SYSOUTLINE'                                    ZP60014
$OUTTRAP DC    C'SYSOUTTRAP'                                    ZP60014
$SYSTERM DC    C'SYSTERMID'                                     ZP60014
$SYS4SDT DC    C'SYS4SDATE'            SORTABLE DATE (4D-YR)    ZP60014
$SYS4JDT DC    C'SYS4JDATE'            JULIAN DATE (4D-YR)      ZP60014
$SYS4IDT DC    C'SYS4IDATE'            ISO-FORMAT DATE (4D-YR)  ZP60014
IKJEFF02 DC    C'IKJEFF02'
IKJEFF19 DC    C'IKJEFF19'
$DATATYP DC    C'DATATYPE'
$SYSSMFI DC    C'SYSSMFID'                                      ZP60014
$SYSOPER DC    C'SYSOPSYS'                                      ZP60014
$SYSSTIM DC    C'SYSSTIME'             SHORTENED TIME           ZP60014
$SYSSDAT DC    C'SYSSDATE'             SORTABLE DATE            ZP60014
$SYSJDAT DC    C'SYSJDATE'             JULIAN DATE              ZP60014
$SYS4DAT DC    C'SYS4DATE'             (4D-YR)                  ZP60014
$SYSLTRM DC    C'SYSLTERM'                                      ZP60014
$SYSWTRM DC    C'SYSWTERM'                                      ZP60014
$SYSTIME DC    C'SYSTIME'
$SYSPROC DC    C'SYSPROC'
$KEYWORD DC    C'KEYWORD'
$SYSSCAN DC    C'SYSSCAN'
$SYSDATE DC    C'SYSDATE'
$SYSNEST DC    C'SYSNEST'
$SYSPREF DC    C'SYSPREF'
$SYSDVAL DC    C'SYSDVAL'
$SYSPCMD DC    C'SYSPCMD'
$SYSSCMD DC    C'SYSSCMD'
$SYSICMD DC    C'SYSICMD'
$STMT1   DC    C'STMT 1'
$LASTCC  DC    C'LASTCC'
$SYSUID  DC    C'SYSUID'
$SUBSTR  DC    C'SUBSTR'
$SYSDLM  DC    C'SYSDLM'
$LENGTH  DC    C'LENGTH'
$SYSENV  DC    C'SYSENV'                                        ZP60014
$SYSJES  DC    C'SYSJES'                                        ZP60014
$SYSCPU  DC    C'SYSCPU'                                        ZP60014
$SYSSRV  DC    C'SYSSRV'                                        ZP60014
$SYSDSN  DC    C'SYSDSN'                                        ZP60014
$MAXCC   DC    C'MAXCC'
$BACK    DC    C'BACK'                                          ZP60014
$FORE    DC    C'FORE'                                          ZP60014
$MSGM511 DC    C'M511'
$MSGM507 DC    C'M507'
$MSGM530 DC    C'M530'
$MSGM527 DC    C'M527'
$MSGA507 DC    C'A507'
$MSGA529 DC    C'A529'
$MSGB529 DC    C'B529'
$EVAL    DC    C'EVAL'
$PROC    DC    C'PROC'
$MSGM506 DC    C'M506'
$MSGM508 DC    C'M508'
$MSGM509 DC    C'M509'
$NRSTR   DC    C'NR'                   KEEP WITH STR 2009-08-23 ZP60014
$STR     DC    C'STR'
$YES     DC    C'YES'
$NO      DC    C'NO'
$CHAR16  DC    C'16'
SLSHASTR DC    C'/*'
ASTRSLSH DC    C'*/'
IDMOD    DS    CL56
         ORG   IDMOD
@NM00045 DC    X'9000'
@NM00046 DC    FL2'56'
@NM00047 DC    FL4'0'
@NM00048 DC    AL1(0)
@NM00049 DC    FL2'25'
@NM00050 DC    X'0012'
@NM00051 DC    CL21'POSITIONAL PARAMETER '
@NM00052 DC    AL1(20)
@NM00053 DC    CL21'POSITIONAL PARAMETER '
         ORG   IDMOD+56
KWMOD    DS    CL11
         ORG   KWMOD
@NM00055 DC    X'4000'
@NM00056 DC    FL2'6'
@NM00057 DS    FL2
@NM00058 DC    X'6000'
@NM00059 DS    CL3
         ORG   KWMOD+11
SUBMOD   DC    X'000000'
ENDMOD   DC    X'00'
NULLVARX DS    0A
NULLENX  DC    AL1(7)
NULLADRX DC    AL3($SYSTIME)           HH:MM:SS
         DC    AL1(7)
         DC    AL3($SYSPCMD)
         DC    AL1(7)
         DC    AL3($SYSSCMD)
         DC    AL1(7)
         DC    AL3($SYSDATE)           MM/DD/YY
         DC    AL1(7)
         DC    AL3($SYSPREF)
         DC    AL1(6)
         DC    AL3($LENGTH)
         DC    AL1(8)
         DC    AL3($DATATYP)
         DC    AL1(3)
         DC    AL3($STR)
         DC    AL1(6)
         DC    AL3($SUBSTR)
         DC    AL1(4)
         DC    AL3($EVAL)
         DC    AL1(7)
         DC    AL3($SYSICMD)
         DC    AL1(6)
         DC    AL3($SYSDLM)
         DC    AL1(6)
         DC    AL3($SYSUID)
         DC    AL1(7)
         DC    AL3($SYSPROC)
         DC    AL1(7)
         DC    AL3($SYSNEST)
         DC    AL1(7)
         DC    AL3($SYSDVAL)
         DC    AL1(6)
         DC    AL3($LASTCC)
         DC    AL1(5)
         DC    AL3($MAXCC)
         DC    AL1(7)
         DC    AL3($SYSSCAN)
         DC    AL1(10)                                          ZP60014
         DC    AL3($OUTLINE)                                    ZP60014
         DC    AL1(10)                                          ZP60014
         DC    AL3($OUTTRAP)                                    ZP60014
GROUPONE EQU   (*-NULLVARX)/4          NEW NOT-AUTH VARS FOLLOW ZP60014
         DC    AL1(6)                                           ZP60014
         DC    AL3($SYSENV)                                     ZP60014
         DC    AL1(8)                                           ZP60014
         DC    AL3($SYSSMFI)                                    ZP60014
         DC    AL1(9)                                           ZP60014
         DC    AL3($SYSTERM)                                    ZP60014
         DC    AL1(8)                                           ZP60014
         DC    AL3($SYSOPER)                                    ZP60014
         DC    AL1(6)                                           ZP60014
         DC    AL3($SYSJES)                                     ZP60014
NEWIMMED EQU   (*-NULLVARX)/4          NEW IMMED-EVALS FOLLOW   ZP60014
         DC    AL1(8)                                           ZP60014
         DC    AL3($SYSSTIM)           HH:MM                    ZP60014
         DC    AL1(8)                                           ZP60014
         DC    AL3($SYSSDAT)           YY/MM/DD                 ZP60014
         DC    AL1(8)                                           ZP60014
         DC    AL3($SYSJDAT)           YY.DDD                   ZP60014
         DC    AL1(8)                                           ZP60014
         DC    AL3($SYS4DAT)           MM/DD/YYYY               ZP60014
         DC    AL1(9)                                           ZP60014
         DC    AL3($SYS4SDT)           YYYY/MM/DD               ZP60014
         DC    AL1(9)                                           ZP60014
         DC    AL3($SYS4JDT)           YYYY.DDD                 ZP60014
         DC    AL1(9)                                           ZP60014
         DC    AL3($SYS4IDT)           YYYY-MM-DD               ZP60014
         DC    AL1(8)                                           ZP60014
         DC    AL3($SYSLTRM)                                    ZP60014
         DC    AL1(8)                                           ZP60014
         DC    AL3($SYSWTRM)                                    ZP60014
         DC    AL1(6)                                           ZP60014
         DC    AL3($SYSCPU)                                     ZP60014
         DC    AL1(6)                                           ZP60014
         DC    AL3($SYSSRV)                                     ZP60014
         DC    AL1(6)                                           ZP60014
         DC    AL3($SYSDSN)                                     ZP60014
         DC    AL1(5)                                2009-08-23 ZP60014
         DC    AL3($NRSTR)                           2009-08-23 ZP60014
SYMBOLCT EQU   (*-NULLVARX)/4          SYMBOL ENTRY COUNT       ZP60014
IKJCT431 CSECT
         DS    0H
FEPATCH  DC    ((@DATA-@PSTART)/20)X'00'
         DC    0D'0'                   ALIGN END OF CSECT       ZP60014
@DATD    DSECT
GTTRMLST DS    4A                      GTTERM PLIST             ZP60014
GTTRMPRM DS    H                       PRIMARY SIZE             ZP60014
GTTRMALT DS    H                       ALTERNATE SIZE           ZP60014
GTTRMATR DS    F                       TERMINAL ATTRIBUTES      ZP60014
GTTRMNAM DS    CL16                    TERMINAL NAME (+NETID?)  ZP60014
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD DS    0D
IKJCT431 CSECT
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
UPTPTR1  EQU   R2
TOBEADD  EQU   R9
SVTELPTR EQU   R9
KEYWAR   EQU   R2
POSAR    EQU   R8
NEWVELEM EQU   R6
LASTELMT EQU   R6
LFPARCTR EQU   R2
SCTR     EQU   R2
PCTR     EQU   R5
MCTR     EQU   R2
ICTR     EQU   R6
CYCLE    EQU   R9
KEYWCHAR EQU   R5
KEYCHAR  EQU   R3
PCLBASE  EQU   R9
POSCHAR  EQU   R4
PDLCUR   EQU   R3
SBFCUR   EQU   R4
PCLCUR   EQU   R2
PPLPTR   EQU   R8
SNTELPTR EQU   R8
ECDAPTR  EQU   R7
ECDA     EQU   0
ECDACPPL EQU   ECDA
ECDAGADD EQU   ECDA+4
ECDAEANS EQU   ECDA+8
ECDALSD  EQU   ECDA+12
ECDAIREC EQU   ECDA+16
ECDACBLK EQU   ECDA+20
ECDACPRE EQU   ECDA+24
ECDACNXT EQU   ECDA+28
ECDALNEL EQU   ECDA+40
ECDAFLAG EQU   ECDA+56
IMPLICIT EQU   ECDAFLAG
NOTEXEC  EQU   ECDAFLAG
SP78CORE EQU   ECDAFLAG
SP78BLK  EQU   ECDAFLAG
NESTED   EQU   ECDAFLAG
ECDAGDAT EQU   ECDA+64
ECDAINME EQU   ECDA+72
ECDAILNG EQU   ECDAINME
EXECDATA EQU   0
SNTABFST EQU   EXECDATA
SVTABFST EQU   EXECDATA+4
GEXECDAT EQU   EXECDATA+8
@NM00004 EQU   EXECDATA+16
EXDATFLG EQU   EXECDATA+32
@NM00005 EQU   EXDATFLG
COMPROC  EQU   0
COMPRPTR EQU   COMPROC
COMPRID  EQU   COMPRPTR
COMPRNXT EQU   COMPRPTR+1
COMPRLNG EQU   COMPROC+4
COMPRUSE EQU   COMPROC+8
SNTAB    EQU   0
SNTABNXT EQU   SNTAB
SNTABLNG EQU   SNTAB+4
SNTABUSE EQU   SNTAB+8
SNTELFST EQU   SNTAB+12
SNTELEM  EQU   0
SNTVLPTR EQU   SNTELEM
SNTFLAGS EQU   SNTELEM+4
SNTPOSIT EQU   SNTFLAGS
SNTKEY   EQU   SNTFLAGS
SNTKEYW  EQU   SNTFLAGS
SNTNAUTH EQU   SNTFLAGS
SNTEVAL  EQU   SNTFLAGS
SNTLAST  EQU   SNTFLAGS
SNTLNG   EQU   SNTELEM+6
SNTDATA  EQU   SNTELEM+8
SVTAB    EQU   0
SVTABNXT EQU   SVTAB
SVTABLNG EQU   SVTAB+4
SVTABUSE EQU   SVTAB+8
SVTABFRE EQU   SVTAB+12
SVTELFST EQU   SVTAB+16
SVTELEM  EQU   0
SVTLNG   EQU   SVTELEM
SVTORIG  EQU   SVTELEM+2
SVTDATA  EQU   SVTELEM+4
MSGTABLE EQU   0
LISTPTR  EQU   MSGTABLE
TMCTPTR  EQU   MSGTABLE+4
ECBPTR   EQU   MSGTABLE+8
@NM00008 EQU   MSGTABLE+12
MSGCSECT EQU   MSGTABLE+16
SW       EQU   MSGTABLE+20
MTPUTLSW EQU   SW
MTHEXSW  EQU   SW
RETMSG   EQU   MSGTABLE+21
SW2      EQU   MSGTABLE+24
MSGID    EQU   MSGTABLE+40
MTINSRTS EQU   MSGTABLE+44
MTINSRT  EQU   MTINSRTS
MTLEN    EQU   MTINSRT
RET      EQU   0
GFPARMS  EQU   0
GFRCODE  EQU   GFPARMS+4
GF02PTR  EQU   GFPARMS+8
GFCALLID EQU   GFPARMS+12
GFBITS   EQU   GFPARMS+14
GFCPPLP  EQU   GFPARMS+16
IOSRL    EQU   0
IOSTELM  EQU   IOSRL
INSTACK  EQU   0
INSCODE  EQU   INSTACK
NULLVDAT EQU   0
CSCB     EQU   0
CSCBPROC EQU   CSCB+16
PROCNAME EQU   0
IREC     EQU   0
RECLNG   EQU   IREC
RECORD   EQU   IREC+4
PARMDAT  EQU   0
PCELMT   EQU   0
SBFELMT  EQU   0
IDENTPDE EQU   0
IDPDEPTR EQU   IDENTPDE
IDPDELNG EQU   IDENTPDE+4
IDPDEFLG EQU   IDENTPDE+6
KEYPDE   EQU   0
KEYPDEP  EQU   KEYPDE
PDLHEAD  EQU   0
VIDENPDE EQU   0
VIPDEPTR EQU   VIDENPDE
VIPDELNG EQU   VIDENPDE+4
VIPDEFLG EQU   VIDENPDE+6
IDENTMAP EQU   0
IDLNG    EQU   IDENTMAP+2
IDPDLOFF EQU   IDENTMAP+4
IDCHAR   EQU   IDENTMAP+6
IDMODTYP EQU   IDENTMAP+13
IDPRMLNG EQU   IDENTMAP+34
IDPRNME  EQU   IDENTMAP+56
KEYWDMAP EQU   0
KEYLNG   EQU   KEYWDMAP+2
KWPDLOFF EQU   KEYWDMAP+4
KWSUBFLD EQU   KEYWDMAP+6
SBFOFF   EQU   0
SUBFLD   EQU   0
SUBNXSUB EQU   SUBFLD+1
PCEHEAD  EQU   0
PCLLNG   EQU   PCEHEAD
PDLLNG   EQU   PCEHEAD+2
PCLKEYOF EQU   PCEHEAD+4
PCEEND   EQU   0
EXPAROUT EQU   0
DSNFLG   EQU   EXPAROUT+14
MEMFLG   EQU   EXPAROUT+22
PSWDFLG  EQU   EXPAROUT+30
VLSTPTR  EQU   EXPAROUT+32
VLSTLNG  EQU   EXPAROUT+36
VLSTFLG  EQU   EXPAROUT+38
VLST     EQU   VLSTFLG
CMDBUFF  EQU   0
CBUFLNG  EQU   CMDBUFF
CBUFOFF  EQU   CMDBUFF+2
CBUFTEXT EQU   CMDBUFF+4
NEWVLST  EQU   0
NVLSTLNG EQU   NEWVLST
NVLSTOFF EQU   NEWVLST+2
VIDMAP   EQU   0
VIDPRINF EQU   VIDMAP+35
VIDNAME  EQU   VIDMAP+53
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
MSGECB   EQU   0
MSGTMCT  EQU   0
VLSTBUF  EQU   0
APARM    EQU   0
CPPLPTR  EQU   ECDACPPL
CVARMAP  EQU   SNTELFST
CICMDVAL EQU   CVARMAP+142
CDLMVAL  EQU   CVARMAP+157
CUIDVAL  EQU   CVARMAP+171
CPROCVAL EQU   CVARMAP+185
CNESTVAL EQU   CVARMAP+200
CLCCVAL  EQU   CVARMAP+230
CMCCVAL  EQU   CVARMAP+244
CSCANVAL EQU   CVARMAP+257
COUTLINE EQU   CSCANVAL+15                                      ZP60014
COUTTRAP EQU   COUTLINE+18                                      ZP60014
CENVVAL  EQU   COUTTRAP+18                                      ZP60014
CSMFVAL  EQU   CENVVAL+14                                       ZP60014
CTERMVAL EQU   CSMFVAL+16                                       ZP60014
COPERVAL EQU   CTERMVAL+17                                      ZP60014
CJESVAL  EQU   COPERVAL+16                                      ZP60014
CSTIMVAL EQU   CJESVAL+14                                       ZP60014
CSDATVAL EQU   CSTIMVAL+16                                      ZP60014
CJDATVAL EQU   CSDATVAL+16                                      ZP60014
C4DATVAL EQU   CJDATVAL+16                                      ZP60014
C4SDTVAL EQU   C4DATVAL+16                                      ZP60014
C4JDTVAL EQU   C4SDTVAL+17                                      ZP60014
C4IDTVAL EQU   C4JDTVAL+17                                      ZP60014
CLTRMVAL EQU   C4IDTVAL+17                                      ZP60014
CWTRMVAL EQU   CLTRMVAL+16                                      ZP60014
CCPUVAL  EQU   CWTRMVAL+16                                      ZP60014
CSRVVAL  EQU   CCPUVAL+14                                       ZP60014
CDSNVAL  EQU   CSRVVAL+14                                       ZP60014
CNRSVAL  EQU   CDSNVAL+14                            2009-08-23 ZP60014
CLASTVAL EQU   CNRSVAL                 LAST NAME ADDED HERE     ZP60014
LSDPTR   EQU   ECDALSD
LSDBLKID EQU   LSDANEXT
LSDADAID EQU   LSDADATA
NAMPCE   EQU   KEYWDMAP+6
NALNG    EQU   NAMPCE+2
NADATLNG EQU   NAMPCE+4
NADAT    EQU   NAMPCE+5
CPBLKPTR EQU   ECDACBLK+1
SNTABBLK EQU   SNTABPTR+1
SVTABBLK EQU   SVTABPTR+1
NULLVAR  EQU   NULLVARX
NULLEN   EQU   NULLVAR
NULLADR  EQU   NULLVAR+1
I004     EQU   ILIST
I00401   EQU   I004
I00403   EQU   I004+5
I00404   EQU   I004+8
I00405   EQU   I004+9
I040     EQU   ILIST
I04001   EQU   I040
I04002   EQU   I040+4
I04003   EQU   I040+8
I006     EQU   ILIST
I00601   EQU   I006
I00602   EQU   I006+1
I00603   EQU   I006+4
I00604   EQU   I006+5
I005     EQU   ILIST
I00502   EQU   I005+1
I00504   EQU   I005+5
I00505   EQU   I005+8
I00506   EQU   I005+9
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
I00503   EQU   I005+4
I00501   EQU   I005
I00605   EQU   I006+8
I04004   EQU   I040+10
I00402   EQU   I004+4
NAMFLG   EQU   NAMPCE
SYSSCAN  EQU   CVARMAP+265
CSCANLNG EQU   CVARMAP+263
CSCANFLG EQU   CVARMAP+261
MAXCC    EQU   CVARMAP+252
CMCCLNG  EQU   CVARMAP+250
CMCCFLG  EQU   CVARMAP+248
LASTCC   EQU   CVARMAP+238
CLCCLNG  EQU   CVARMAP+236
CLCCFLG  EQU   CVARMAP+234
SYSDVAL  EQU   CVARMAP+223
CDVALLNG EQU   CVARMAP+221
CDVALFLG EQU   CVARMAP+219
CDVALVAL EQU   CVARMAP+215
SYSNEST  EQU   CVARMAP+208
CNESTLNG EQU   CVARMAP+206
CNESTFLG EQU   CVARMAP+204
SYSPROC  EQU   CVARMAP+193
CPROCLNG EQU   CVARMAP+191
CPROCFLG EQU   CVARMAP+189
SYSUID   EQU   CVARMAP+179
CUIDLNG  EQU   CVARMAP+177
CUIDFLG  EQU   CVARMAP+175
SYSDLM   EQU   CVARMAP+165
CDLMLNG  EQU   CVARMAP+163
CDLMFLG  EQU   CVARMAP+161
SYSICMD  EQU   CVARMAP+150
CICMDLNG EQU   CVARMAP+148
CICMDFLG EQU   CVARMAP+146
EVAL     EQU   CVARMAP+138
CEVALLNG EQU   CVARMAP+136
CEVALFLG EQU   CVARMAP+134
CEVALVAL EQU   CVARMAP+130
SUBSTR   EQU   CVARMAP+124
CSSTRLNG EQU   CVARMAP+122
CSSTRFLG EQU   CVARMAP+120
CSSTRVAL EQU   CVARMAP+116
STRING   EQU   CVARMAP+113
CSTRLNG  EQU   CVARMAP+111
CSTRFLG  EQU   CVARMAP+109
CSTRVAL  EQU   CVARMAP+105
DATATYPE EQU   CVARMAP+97
CTYPELNG EQU   CVARMAP+95
CTYPEFLG EQU   CVARMAP+93
CTYPEVAL EQU   CVARMAP+89
CLENGTH  EQU   CVARMAP+83
CLENLNG  EQU   CVARMAP+81
CLENFLG  EQU   CVARMAP+79
CLENVAL  EQU   CVARMAP+75
SYSPREF  EQU   CVARMAP+68
CPREFLNG EQU   CVARMAP+66
CPREFLG  EQU   CVARMAP+64
CPREFVAL EQU   CVARMAP+60
SYSDATE  EQU   CVARMAP+53
CDATELNG EQU   CVARMAP+51
CDATEFLG EQU   CVARMAP+49
CDATEVAL EQU   CVARMAP+45
SYSSCMD  EQU   CVARMAP+38
CSCMDLNG EQU   CVARMAP+36
CSCMDFLG EQU   CVARMAP+34
CSCMDVAL EQU   CVARMAP+30
SYSPCMD  EQU   CVARMAP+23
CPCMDLNG EQU   CVARMAP+21
CPCMDFLG EQU   CVARMAP+19
CPCMDVAL EQU   CVARMAP+15
SYSTIME  EQU   CVARMAP+8
CTIMELNG EQU   CVARMAP+6
CTIMEFLG EQU   CVARMAP+4
CTIMEVAL EQU   CVARMAP
VIDPRLNG EQU   VIDMAP+34
@NM00054 EQU   VIDMAP
NVLSTDAT EQU   NEWVLST+4
PRMPPDE  EQU   EXPAROUT+42
LISTPDE  EQU   EXPAROUT+40
@NM00044 EQU   EXPAROUT+39
@NM00043 EQU   EXPAROUT+31
PSWD     EQU   PSWDFLG
PSWDLNG  EQU   EXPAROUT+28
PSWDPTR  EQU   EXPAROUT+24
@NM00042 EQU   EXPAROUT+23
MEM      EQU   MEMFLG
MEMLNG   EQU   EXPAROUT+20
MEMPTR   EQU   EXPAROUT+16
@NM00041 EQU   EXPAROUT+15
DSNQTE   EQU   DSNFLG
DSN      EQU   DSNFLG
DSNLNG   EQU   EXPAROUT+12
DSNPTR   EQU   EXPAROUT+8
EPDLLNG  EQU   EXPAROUT+6
EPDLSPNO EQU   EXPAROUT+4
EPDLNXT  EQU   EXPAROUT
@NM00040 EQU   SUBFLD
KWNAMDAT EQU   KEYWDMAP+11
KWNAMLNG EQU   KEYWDMAP+10
KWLNG    EQU   KEYWDMAP+8
@NM00039 EQU   KEYWDMAP+6
@NM00038 EQU   KEYWDMAP+6
@NM00037 EQU   KEYWDMAP
IDPRINFO EQU   IDENTMAP+35
@NM00036 EQU   IDENTMAP+7
@NM00035 EQU   IDENTMAP+6
@NM00034 EQU   IDENTMAP+6
@NM00033 EQU   IDENTMAP
IDPROMPT EQU   IDENTMAP
@NM00032 EQU   IDENTMAP
VIPDEP   EQU   VIPDEFLG
PDLLEN   EQU   PDLHEAD+6
PDLSPNO  EQU   PDLHEAD+4
PDLNXT   EQU   PDLHEAD
IDPDEP   EQU   IDPDEFLG
RECOFF   EQU   IREC+2
TIOTSTP  EQU   TIOT+16
TIOTNJOB EQU   TIOT
INSADLSD EQU   INSTACK+1
INSLIST  EQU   INSCODE
INSPROC  EQU   INSCODE
INSPROM  EQU   INSCODE
INSEXEC  EQU   INSCODE
INSOTDD  EQU   INSCODE
INSINDD  EQU   INSCODE
INSSTOR  EQU   INSCODE
INSDATA  EQU   INSCODE
@NM00031 EQU   IOSRL+12
IOSNELM  EQU   IOSRL+10
IOSTLEN  EQU   IOSRL+8
IOSBELM  EQU   IOSRL+4
@NM00016 EQU   GFPARMS+40
@NM00015 EQU   GFPARMS+36
GFPGMNP  EQU   GFPARMS+32
GFDSNP   EQU   GFPARMS+28
GFPGMNL  EQU   GFPARMS+26
GFDSNLEN EQU   GFPARMS+24
GFECBP   EQU   GFPARMS+20
@NM00014 EQU   GFPARMS+15
@NM00013 EQU   GFBITS
GFWTPSW  EQU   GFBITS
GFSUBSYS EQU   GFBITS
GFKEYN08 EQU   GFBITS
GFCBPTR  EQU   GFPARMS
RETCHAR  EQU   RET+2
RETSIZE  EQU   RET
MTADDR   EQU   MTINSRT+1
MTHIGHL  EQU   MTLEN
@NM00012 EQU   MSGTABLE+36
@NM00011 EQU   MSGTABLE+32
MTOLDPTR EQU   MSGTABLE+28
@NM00010 EQU   MSGTABLE+25
@NM00009 EQU   SW2
MTPGMSW  EQU   SW2
MTNPLMSW EQU   SW2
MTNOXQSW EQU   SW2
MTDOMSW  EQU   SW2
MT2OLDSW EQU   SW2
MTNHEXSW EQU   SW
MTWTPSW  EQU   SW
MTJOBISW EQU   SW
MTKEY1SW EQU   SW
MTWTOSW  EQU   SW
MTNOIDSW EQU   SW
MTHIGH   EQU   @NM00008
MTCPPL   EQU   TMCTPTR
@NM00007 EQU   SNTFLAGS+1
SNTGLOB  EQU   SNTFLAGS+1
SNTNOSCN EQU   SNTFLAGS
SNTLABEL EQU   SNTFLAGS
SNTGVAL  EQU   SNTVLPTR
COMRCDS  EQU   COMPROC+12
@NM00006 EQU   EXECDATA+60
FILEDCBS EQU   EXECDATA+56
RETPTR2  EQU   EXECDATA+52
ATACTEND EQU   EXECDATA+48
ATACTSTR EQU   EXECDATA+44
EXDLMPTR EQU   EXECDATA+40
GEXECCNT EQU   EXECDATA+36
NOLASTCC EQU   @NM00005+1
ATINCNTL EQU   @NM00005+1
ATTNCMD  EQU   @NM00005
NOMSG    EQU   @NM00005
CMAIN    EQU   @NM00005
ERINCNTL EQU   @NM00005
SYMLST   EQU   @NM00005
NOFLUSH  EQU   @NM00005
ERRCMD   EQU   @NM00005
CONLST   EQU   @NM00005
RETPTR   EQU   EXECDATA+28
ERACTEND EQU   EXECDATA+24
ERACTSTR EQU   EXECDATA+20
EXINSAVE EQU   @NM00004
LASTTSO  EQU   EXECDATA+12
ECDACPGM EQU   ECDA+68
ECDAGETL EQU   ECDA+60
@NM00003 EQU   ECDA+58
@NM00002 EQU   ECDAFLAG
@NM00001 EQU   ECDAFLAG
ECDAAEND EQU   ECDA+52
ECDAELNG EQU   ECDA+50
ECDANDO  EQU   ECDA+48
ECDAGCNT EQU   ECDA+44
ECDALCTR EQU   ECDA+36
ECDASPTR EQU   ECDA+32
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00270 EQU   @RC00254
@RC00287 EQU   @RC00279
@RC00365 EQU   @RC00359
@RF00397 EQU   @RC00395
@RF00399 EQU   @RC00395
@RC00587 EQU   @RC00585
@RC00658 EQU   @RC00654
@RC00687 EQU   @RC00686
@RC00693 EQU   @EL00005
@RC00711 EQU   @EL00006
@RF00771 EQU   @EL00006
@RF00973 EQU   @RC00970
@RF00910 EQU   @EL00008
@RC00912 EQU   @EL00008
@RF00999 EQU   @EL00008
@RF00958 EQU   @RC00912
@ENDDATA EQU   *
         END   IKJCT431,(C'PLS-III',0300,87344)
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
  IDENTIFY IKJCT431('ZP60014')
++MOD(IKJCT433) DISTLIB(AOST4).
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE 'IKJCT433, EXEC CONTROL MODULE - PHASE II PART I'
*
*   MODIFIED BY GREG PRICE SEPTEMBER 2005 FOR USERMOD ZP60014
*
*   2009-08-23 - ADD &NRSTR "NO RESCAN STRING"
*
IKJCT433 CSECT ,                                                   0001
         USING PSA,0                                            ZP60014
@MAINENT DS    0H                                                  0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(33)                                             0001
         DC    C'IKJCT433  88.013'                                 0001
         DC    C' ZP60014 20090823'
         DROP  R15
IKJUPDT  DS    0H                                                  0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP0UPDT-IKJUPDT)                            ZP60014
         ENTRY IKJUPDT
         DROP  R15
IKJINIT  DS    0H                                               ZP60014
         USING *,R15                                            ZP60014
         B     @PROLOG                                          ZP60014
         DC    AL2(@EP0INIT-IKJINIT)                            ZP60014
         ENTRY IKJINIT                                          ZP60014
         DROP  R15                                              ZP60014
IKJGET#  DS    0H                                               ZP60014
         USING *,R15                                            ZP60014
         B     @PROLOG                                          ZP60014
         DC    AL2(@EP0GET#-IKJGET#)                            ZP60014
         ENTRY IKJGET#                                          ZP60014
         DROP  R15                                              ZP60014
@PROLOG  STM   R14,R12,12(R13)                                     0001
         BALR  R12,0                                               0001
@PSTART  LA    R11,4095(,R12)                                      0001
         LA    R10,4095(,R11)                                      0001
         USING @PSTART,R12                                         0001
         USING @PSTART+4095,R11                                    0001
         USING @PSTART+8190,R10                                    0001
         L     R0,@SIZDATD                                         0001
         IKJEXEC  R,LV=(0)
         LR    R9,R1                                               0001
         USING @DATD,R9                                            0001
         ST    R13,@SA00001+4                                      0001
         LM    R15,R1,16(R13)                                      0001
         ST    R9,8(,R13)                                          0001
         LR    R13,R9                                              0001
         MVI   LCLFLAGS,0           RESET LOCAL FLAGS           ZP60014
         AH    R15,4(,R15)                                         0001
         BR    R15                                                 0001
@EP00001 MVC   @PC00001(20),0(R1)                                  0001
*                                                                  0035
*   /*****************************************************************/
*   /*                                                               */
*   /* START OF EXECUTABLE CODE                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0035
*   CALL INTSETUP;                  /* INIT MAIN SWITCHES - VARIABLES*/
         BAL   R14,INTSETUP                                        0035
*   OLDLINE=GTPBLINE;               /* POINT TO OLD RECORD           */
         L     R1,@PC00001+12                                      0036
         L     R1,GTPBLINE(,R1)                                    0036
         ST    R1,OLDLINE(,COMONPTR)                               0036
*   SCANLIM=F0;                     /* CLEAR SCAN LIMIT              */
         SLR   R2,R2                                               0037
         ST    R2,SCANLIM                                          0037
*   ERCOM=F0;                       /* INIT ERROR COUNTER (COMMON)   */
         ST    R2,ERCOM(,COMONPTR)                                 0038
*   CONTINU=YES;                    /* ALLOW CONTINUING              */
         OI    CONTINU(COMONPTR),B'01000000'                       0039
*   STM(R9,R12,REGAREA);            /* SAVE PHASE2 PART 1 REGS       */
         STM   R9,R12,REGAREA(COMONPTR)                            0040
*   DO WHILE CONTINU=YES;           /* PROCESS UNTIL DONE            */
         B     @DE00041                                            0041
@DL00041 DS    0H                                                  0042
*     EXECDPTR=LSDEXEC;             /* BASE EXEC DATA ON PTR IN LSD  */
         L     R1,LSDPTR(,COMONPTR)                                0042
         L     R2,LSDEXEC-LSD(,R1)                                 0042
         ST    R2,EXECDPTR(,COMONPTR)                              0042
*     ERROR=F0;                     /* INIT ERROR COUNTER TO ZERO    */
         SLR   R3,R3                                               0043
         ST    R3,ERROR                                            0043
*     SWS=''B;                      /* CLEAR INIT SWITCHES           */
         XC    SWS(5,COMONPTR),SWS(COMONPTR)                       0044
*     NEWBASE=MIN(BUFBASE,NEWBASE); /* POINTER TO OLD BUFFER IF ONE  */
         L     R3,BUFBASE(,COMONPTR)                               0045
         L     R4,NEWBASE(,COMONPTR)                               0045
         CR    R3,R4                                               0045
         BNH   *+6
         LR    R3,R4                                               0045
         ST    R3,NEWBASE(,COMONPTR)                               0045
*     BUFBASE=GTPBLINE;             /* SET BASE TO LINE PASSED       */
         L     R3,@PC00001+12                                      0046
         L     R1,GTPBLINE(,R3)                                    0046
         ST    R1,BUFBASE(,COMONPTR)                               0046
*     IF GTPBLINE>=ERACTSTR&GTPBLINE<ERACTEND&/* IF ERROR ACTIVE     */
*         ERINCNTL=YES THEN         /* AND WITHIN RANGE              */
         C     R1,ERACTSTR(,R2)                                    0047
         BL    @RF00047                                            0047
         C     R1,ERACTEND(,R2)                                    0047
         BNL   @RF00047                                            0047
         TM    ERINCNTL(R2),B'00001000'                            0047
         BNO   @RF00047                                            0047
*       ERRRANGE=YES;               /* SET ERROR RANGE INDICATOR     */
         OI    ERRRANGE(COMONPTR),B'00000100'                      0048
*     ELSE                          /* OTHERWISE                     */
*       IF ERINCNTL=YES THEN        /* IF DROPPING OUT OF ERROR      */
         B     @RC00047                                            0049
@RF00047 L     R2,EXECDPTR(,COMONPTR)                              0049
         TM    ERINCNTL(R2),B'00001000'                            0049
         BNO   @RF00049                                            0049
*         DO;                       /* SWAP RETURN POINTERS          */
*           RETPTR=RETPTR&&RETPTR2; /*                               */
         L     R3,RETPTR2(,R2)                                     0051
         L     R4,RETPTR(,R2)                                      0051
         XR    R4,R3                                               0051
         ST    R4,RETPTR(,R2)                                      0051
*           RETPTR2=RETPTR2&&RETPTR;/*                               */
         XR    R3,R4                                               0052
         ST    R3,RETPTR2(,R2)                                     0052
*           RETPTR=RETPTR&&RETPTR2; /*                               */
         XR    R4,R3                                               0053
         ST    R4,RETPTR(,R2)                                      0053
*           ERINCNTL=NO;            /* RESET SWITCH                  */
         NI    ERINCNTL(R2),B'11110111'                            0054
*         END;                      /*                               */
*     IF GTPBLINE>=ATACTSTR&GTPBLINE<ATACTEND&/* IF ERROR ACTIVE     */
*         ATINCNTL=YES THEN         /* AND WITHIN RANGE              */
@RF00049 DS    0H                                                  0056
@RC00047 L     R5,@PC00001+12                                      0056
         L     R1,GTPBLINE(,R5)                                    0056
         L     R2,EXECDPTR(,COMONPTR)                              0056
         C     R1,ATACTSTR(,R2)                                    0056
         BL    @RF00056                                            0056
         C     R1,ATACTEND(,R2)                                    0056
         BNL   @RF00056                                            0056
         TM    ATINCNTL(R2),B'10000000'                            0056
         BNO   @RF00056                                            0056
*       ATRANGE=YES;                /* SET ERROR RANGE INDICATOR     */
         OI    ATRANGE(COMONPTR),B'00000010'                       0057
*     ELSE                          /* OTHERWISE                     */
*       IF ATINCNTL=YES THEN        /* IF DROPPING OUT OF ERROR      */
         B     @RC00056                                            0058
@RF00056 L     R3,EXECDPTR(,COMONPTR)                              0058
         TM    ATINCNTL(R3),B'10000000'                            0058
         BNO   @RF00058                                            0058
*         DO;                       /* SWAP RETURN POINTERS          */
*           RETPTR=RETPTR&&RETPTR2; /*                               */
         L     R2,RETPTR2(,R3)                                     0060
         L     R4,RETPTR(,R3)                                      0060
         XR    R4,R2                                               0060
         ST    R4,RETPTR(,R3)                                      0060
*           RETPTR2=RETPTR2&&RETPTR;/*                               */
         XR    R2,R4                                               0061
         ST    R2,RETPTR2(,R3)                                     0061
*           RETPTR=RETPTR&&RETPTR2; /*                               */
         XR    R4,R2                                               0062
         ST    R4,RETPTR(,R3)                                      0062
*           ATINCNTL=NO;            /* RESET SWITCH                  */
         NI    ATINCNTL(R3),B'01111111'                            0063
*         END;                      /*                               */
*     IF ECTATTN=YES THEN           /* IF TMP ATTN ENTRY      @Z30969*/
@RF00058 DS    0H                                                  0065
@RC00056 L     R5,@PC00001+4                                       0065
         TM    ECTSWS-ECT(R5),ECTATTN                              0065
         BNO   @RF00065                                            0065
*       DO;                         /* PROCESS                       */
*         ECTATTN=NO;               /* RESET ENTRY                   */
         NI    ECTSWS-ECT(R5),255-ECTATTN                          0067
*         ATINCNTL=YES;             /* SET CNTL BIT                  */
         L     R1,EXECDPTR(,COMONPTR)                              0068
         OI    ATINCNTL(R1),B'10000000'                            0068
*         CALL RETUPDT(GTPBLINE);   /* SET RETURN POINTER            */
         L     R2,@PC00001+12                                      0069
         LA    R3,GTPBLINE(,R2)                                    0069
         ST    R3,@AL00001                                         0069
         LA    R1,@AL00001                                         0069
         BAL   R14,RETUPDT                                         0069
*         LSDANEXT=ATACTSTR;        /* BRANCH TO ACTION START        */
         L     R4,LSDPTR(,COMONPTR)                                0070
         L     R5,EXECDPTR(,COMONPTR)                              0070
         L     R5,ATACTSTR(,R5)                                    0070
         ST    R5,LSDANEXT-LSD(,R4)                                0070
*         ERROR=E4;                 /* GET ANOTHER COMMAND           */
         MVC   ERROR(4),FW4                                        0071
*         GTPBLINE=LSDANEXT;        /* SAVE LSDANEXT         @ZA08099*/
         L     R6,@PC00001+12                                      0072
         ST    R5,GTPBLINE(,R6)                                    0072
*         LSDANEXT=LSDANEXT+LSDANEXT->LL;/* UPDATE LSD POINTER     0073
*                                                            @ZA08099*/
         LH    R7,LL(,R5)                                          0073
         ALR   R7,R5                                               0073
         ST    R7,LSDANEXT-LSD(,R4)                                0073
*         GOTO FASTCYCL;            /* START MAIN LOOP AGAIN @ZA08099*/
         B     FASTCYCL                                            0074
*       END;                        /*                               */
*                                                                  0076
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS RETURN CODES                                        */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0076
*     ERRSAV=ECTRTCD;               /* SAVE ECT RETURN CODE          */
@RF00065 L     R14,@PC00001+4                                      0076
         SLR   R15,R15                                             0076
         ICM   R15,7,ECTRTCD-ECT(R14)                              0076
         ST    R15,ERRSAV                                          0076
*     IF ECTRCDF=ABNDFLG THEN       /* IF CODE IS ABEND              */
         CLI   ECTRCDF-ECT(R14),X'80'                              0077
         BNE   @RF00077                                            0077
*       RCABEND=YES;                /* USE ABEND CONVERSION          */
         OI    RCABEND(COMONPTR),B'10000000'                       0078
*     IF ERRSAV^=F0 THEN            /* IF TSO CMD ENDED IN ERROR     */
@RF00077 L     R0,ERRSAV                                           0079
         LTR   R0,R0                                               0079
         BZ    @RF00079                                            0079
*       DO;                         /*                               */
*         IF ERRCMD=NO THEN         /* AN NO ERROR IN EFFECT         */
         L     R1,EXECDPTR(,COMONPTR)                              0081
         TM    ERRCMD(R1),B'01000000'                              0081
         BNZ   @RF00081                                            0081
*           CALL RCUPDT;            /* UPDATE LASTCC AND MAXCC       */
         BAL   R14,RCUPDT                                          0082
*         ELSE                      /* OTHERWISE                     */
*           DO;                     /* CHECK IF ERROR ALREADY IN CNTL*/
         B     @RC00081                                            0083
@RF00081 DS    0H                                                  0084
*             IF ERRRANGE=YES THEN  /* IF IT IS THEN SET ERROR CODE  */
         TM    ERRRANGE(COMONPTR),B'00000100'                      0084
         BNO   @RF00084                                            0084
*               IF GTPBLINE^=ERACTSTR THEN/* NOT FIRST ERROR CMD     */
         L     R2,@PC00001+12                                      0085
         L     R1,EXECDPTR(,COMONPTR)                              0085
         CLC   GTPBLINE(4,R2),ERACTSTR(R1)                         0085
         BE    @RF00085                                            0085
*                 DO;               /* MUST HAVE BEEN A TSO COMMAND  */
*                   BACKUP=YES;     /* BACK UP AND LIST LAST TSO     */
         OI    BACKUP(COMONPTR),B'00000001'                        0087
*                   ERROR=E908;     /*                               */
         MVC   ERROR(4),FW908                                      0088
*                 END;              /*                               */
*               ELSE                                               0090
*                 ;                 /* OTHERWISE NOTHING             */
@RF00085 DS    0H                                                  0091
*             ELSE                  /* OTHERWISE GIVE ERRACTION CNTL */
*               DO;                 /*                               */
         B     @RC00084                                            0091
@RF00084 DS    0H                                                  0092
*                 CALL RCUPDT;      /* PROCESS MAXCC AND LASTCC      */
         BAL   R14,RCUPDT                                          0092
*                 IF ERACTSTR^=F0 THEN/* IF A ERROR ACTION SPECIFIED */
         L     R2,EXECDPTR(,COMONPTR)                              0093
         L     R3,ERACTSTR(,R2)                                    0093
         LTR   R3,R3                                               0093
         BZ    @RF00093                                            0093
*                   DO;             /* GO TO ERRACTION               */
*                     ERINCNTL=YES; /* SET ERROR IN CONTROL          */
         OI    ERINCNTL(R2),B'00001000'                            0095
*                     CALL RETUPDT(GTPBLINE);/* UPDATE RETURN POINT  */
         L     R4,@PC00001+12                                      0096
         LA    R5,GTPBLINE(,R4)                                    0096
         ST    R5,@AL00001                                         0096
         LA    R1,@AL00001                                         0096
         BAL   R14,RETUPDT                                         0096
*                     LSDANEXT=ERACTSTR;/* UPDATE LSD NEXT CMD       */
         L     R1,LSDPTR(,COMONPTR)                                0097
         L     R2,EXECDPTR(,COMONPTR)                              0097
         L     R0,ERACTSTR(,R2)                                    0097
         ST    R0,LSDANEXT-LSD(,R1)                                0097
*                     ERROR=E4;     /* SET ERROR CODE                */
         MVC   ERROR(4),FW4                                        0098
*                     GOTO FASTEXIT;/* GET NEXT COMMAND              */
         L     R1,@PC00001+4
         SLR   R0,R0
         STCM  R0,7,ECTRTCD-ECT(R1)
         MVI   ECTRCDF-ECT(R1),X'00'
         B     FASTEXIT                                            0099
*                   END;            /*                               */
*                 ELSE              /* IF NO ERROR ACTION, SET UP    */
*                   IF INSLIST=NO THEN/* TSO NOT ALREADY LISTED      */
***00093 L     R15,@PC00001+4                                      0101
***      L     R1,ECTIOWA-ECT(,R15)                                0101
***      L     R1,IOSTELM(,R1)                                     0101
***      TM    INSLIST(R1),B'00000001'                             0101
***      BNZ   @RF00101                                            0101
*                     BACKUP=YES;   /* BACKUP TO LIST TSO            */
@RF00093 OI    BACKUP(COMONPTR),B'00000001'                        0102
*               END;                /*                               */
@RF00101 DS    0H                                                  0104
*             IF BACKUP=YES THEN    /* BACK UP AND LIST ?            */
@RC00084 TM    BACKUP(COMONPTR),B'00000001'                        0104
         BNO   @RF00104                                            0104
*               DO;                 /* YES -                         */
*                 LSDANEXT=GTPBLINE;/* BACK UP LSD COMMAND POINTER   */
         L     R1,LSDPTR(,COMONPTR)                                0106
         L     R2,@PC00001+12                                      0106
         L     R0,GTPBLINE(,R2)                                    0106
         ST    R0,LSDANEXT-LSD(,R1)                                0106
*                 GTPBLINE=LASTTSO; /* GET TSO COMMAND               */
         L     R1,EXECDPTR(,COMONPTR)                              0107
         L     R3,LASTTSO(,R1)                                     0107
         ST    R3,GTPBLINE(,R2)                                    0107
*                 BUFBASE=LASTTSO;  /* POINT BUFFER TO LAST TSO CMD  */
         ST    R3,BUFBASE(,COMONPTR)                               0108
*                 LISTONLY=YES;     /* LIST COMMAND ONLY             */
         OI    LISTONLY(COMONPTR),B'00100000'                      0109
*               END;                /*                               */
*           END;                    /*                               */
@RF00104 DS    0H                                                  0112
*         ECTRTCD=F0;               /* ZERO ECT RETURN CODE          */
@RC00081 L     R4,@PC00001+4                                       0112
         SLR   R5,R5                                               0112
         STCM  R5,7,ECTRTCD-ECT(R4)                                0112
*         ECTRCDF=''B;              /* ZERO ABEND FLAG IF ON         */
         MVI   ECTRCDF-ECT(R4),X'00'                               0113
*       END;                        /*                               */
*     ELSE                          /* IF RETURN CODE WAS ZERO       */
*       IF ERRRANGE=NO THEN         /* AND NOT IN ERROR RANGE        */
         B     @RC00079                                            0115
@RF00079 TM    ERRRANGE(COMONPTR),B'00000100'                      0115
         BNZ   @RF00115                                            0115
*         CALL RCUPDT;              /* UPDATE RETURN CODES           */
         BAL   R14,RCUPDT                                          0116
*     RCABEND=NO;                   /* INSURE ABEND CLEAR            */
@RF00115 DS    0H                                                  0117
@RC00079 NI    RCABEND(COMONPTR),B'01111111'                       0117
*                                                                  0118
*     /***************************************************************/
*     /*                                                             */
*     /* SYMBOLIC SUBSTITUTION INITIALIZATION                        */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0118
*     OLDLINE=GTPBLINE;             /* BASE FOR OLD LINE WITH PARMS  */
         L     R6,@PC00001+12                                      0118
         L     R14,GTPBLINE(,R6)                                   0118
         ST    R14,OLDLINE(,COMONPTR)                              0118
*     V2=F0;                        /* INIT TO ZERO                  */
         SLR   R15,R15                                             0119
         ST    R15,V2                                              0119
*     MYO2=O2-OO+F1;                /* SET OFFSET TO START OF SCAN   */
         L     R0,BUFBASE(,COMONPTR)                               0120
         LR    R1,R0                                               0120
         LH    R1,OO(,R1)                                          0120
         LR    R2,R0                                               0120
         LH    R0,O2(,R2)                                          0120
         SLR   R0,R1                                               0120
         AL    R0,FW1                                              0120
         ST    R0,MYO2(,COMONPTR)                                  0120
*     IF CORE=NO THEN               /* IF NO CORE HAS BEEN GOTTEN    */
         TM    CORE(COMONPTR),B'10000000'                          0121
         BNZ   @RF00121                                            0121
*       CALL GETMORE(EVAL(-OO));    /* GETMAIN FOR NEW BUFFER        */
         LCR   R1,R1                                               0122
         ST    R1,@AFTEMPS+8                                       0122
         LA    R1,@AFTEMPS+8                                       0122
         ST    R1,@AL00001                                         0122
         LA    R1,@AL00001                                         0122
         BAL   R14,GETMORE                                         0122
*     ELSE                          /* IF OTHER THAN FIRST LOOP      */
*       IF LL>NEWLL THEN            /* IF NEW LINE BIGGER THAN GOTTEN*/
         B     @RC00121                                            0123
@RF00121 L     R1,BUFBASE(,COMONPTR)                               0123
         L     R2,NEWBASE(,COMONPTR)                               0123
         LH    R3,NEWLL(,R2)                                       0123
         CH    R3,LL(,R1)                                          0123
         BNL   @RF00123                                            0123
*         DO;                       /* CORE, GET MORE CORE           */
*           DO;                     /* FREEMAIN LV(NEWLL*2)        0125
*                                      A(NEWBASE) SP(1) MF(E,FRELST) */
*             RESPECIFY                                            0126
*              (R1) RESTRICTED;                                    0126
*             FRELST02=NEWLL*2;     /* LENGTH                        */
         ALR   R3,R3                                               0127
         STCM  R3,7,FRELST02                                       0127
*             FRELST04=ADDR(NEWBASE);/* ADDR OF ADDR LIST            */
         LA    R0,NEWBASE(,COMONPTR)                               0128
         STCM  R0,7,FRELST04                                       0128
*             FRELST06=1;           /* SUBPOOL VALUE                 */
         MVI   FRELST06,X'01'                                      0129
*             R1=ADDR(FRELST);      /* REG1 POINTS TO LIST           */
         LA    R1,FRELST                                           0130
*             SVC(5);               /* STANDARD-FORM OF GETMAIN      */
         SVC   5                                                   0131
*             RESPECIFY                                            0132
*              (R1) UNRESTRICTED;                                  0132
*           END;                    /* FREEMAIN LV(NEWLL*2)        0133
*                                      A(NEWBASE) SP(1) MF(E,FRELST) */
*           CORE=NO;                /* YES WE HAVE NO CORE TODAY     */
         NI    CORE(COMONPTR),B'01111111'                          0134
*           CALL GETMORE(EVAL(-OO));/* MINIMUM CORE REQIRED          */
         L     R1,BUFBASE(,COMONPTR)                               0135
         LH    R2,OO(,R1)                                          0135
         LCR   R2,R2                                               0135
         ST    R2,@AFTEMPS+8                                       0135
         LA    R3,@AFTEMPS+8                                       0135
         ST    R3,@AL00001                                         0135
         LA    R1,@AL00001                                         0135
         BAL   R14,GETMORE                                         0135
*         END;                      /*                               */
*       ELSE                        /* OTHERWISE                     */
*         FREEAMT=NEWLL-(LL-OO);    /* SET FREEAMT                   */
         B     @RC00123                                            0137
@RF00123 L     R1,NEWBASE(,COMONPTR)                               0137
         L     R2,BUFBASE(,COMONPTR)                               0137
         LH    R3,LL(,R2)                                          0137
         SH    R3,OO(,R2)                                          0137
         LCR   R3,R3                                               0137
         AH    R3,NEWLL(,R1)                                       0137
         ST    R3,FREEAMT(,COMONPTR)                               0137
*                                                                  0138
*     /***************************************************************/
*     /*                                                             */
*     /* COPY INPUT BUFFER TO GOTTEN BUFFER                          */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0138
*     RFY                                                          0138
*      (R2,                                                        0138
*       R3,                                                        0138
*       R4,                                                        0138
*       R5) RSTD;                   /* RESTRICT REGS FOR MVCL        */
@RC00123 DS    0H                                                  0138
@RC00121 DS    0H                                                  0139
*     R2=(ADDR(NEWC(1)));           /* POINTER TO 'TO' BUFFER        */
         L     R6,NEWBASE(,COMONPTR)                               0139
         LA    R2,NEWC(,R6)                                        0139
*     R4=ADDR(C(OO+1));             /* POINTER TO 'FROM' BUFFER      */
         L     R7,BUFBASE(,COMONPTR)                               0140
         LH    R14,OO(,R7)                                         0140
         LA    R4,C(R14,R7)                                        0140
*     R3=NEWLL-F4;                  /* LENGTH OF 'TO' BUFFER         */
         LA    R15,4                                               0141
         LH    R3,NEWLL(,R6)                                       0141
         SLR   R3,R15                                              0141
*     R5=(LL-(F4+OO)) BLANKS;       /* LENGTH OF 'FROM' BUFFER AND 0142
*                                      PADDING CHARACTER FOR MVCL    */
         ALR   R14,R15                                             0142
         LCR   R14,R14                                             0142
         AH    R14,LL(,R7)                                        0142
         O     R14,HIBLANK                                         0142
         LR    R5,R14                                              0142
*     MVCL(R2,R4);                  /* MOVE TO NEW BUFFER            */
         MVCL  R2,R4                                               0143
*     RFY                                                          0144
*      (R2,                                                        0144
*       R3,                                                        0144
*       R4,                                                        0144
*       R5) UNRSTD;                 /* RELEASE REGISTERS             */
*     BUFBASE=NEWBASE;              /* POINT TO GOTTEN BUFFER        */
         L     R4,NEWBASE(,COMONPTR)                               0145
         ST    R4,BUFBASE(,COMONPTR)                               0145
*     OO=F0;                        /* ZERO OFFSET FIELD             */
         SLR   R5,R5                                               0146
         STH   R5,OO(,R4)                                          0146
*     NEWBASE=NEWBASE+LL;           /* POINT TO NEW BUFFER           */
         LH    R6,LL(,R4)                                          0147
         ALR   R4,R6                                               0147
         ST    R4,NEWBASE(,COMONPTR)                               0147
*     IF ERROR=E16 THEN             /* IF A GETMAIN ERROR OCCURRED   */
         L     R7,ERROR                                            0148
         C     R7,FW16                                             0148
         BE    @RT00148                                            0148
*       GO TO FASTEXIT;             /* PROCESS ERROR MSG AND QUIT    */
*     CORE=YES;                     /* CORE HAS BEEN GOTTEN          */
         OI    CORE(COMONPTR),B'10000000'                          0150
*     NEWLL=LL;                     /* INIT LENGTH                   */
         STH   R6,NEWLL(,R4)                                       0151
*     NEWOO=F0;                     /* INIT OFFSET                   */
         STH   R5,NEWOO(,R4)                                       0152
*     IF ERROR=F0 THEN              /* IF OK SO FAR                  */
         CR    R7,R5                                               0153
         BNE   @RF00153                                            0153
*       DO;                         /* LOCATE SYSDLM                 */
*         CALL LOCATE(SYSSCAN,LENGTH(SYSSCAN),F0);/* LOCATE SYSSCAN  */
         LA    R1,@AL00155                                         0155
         BAL   R14,LOCATE                                          0155
*         IF ERROR=F0 THEN          /* IF LOCATE SUCCESSFUL          */
         L     R14,ERROR                                           0156
         LTR   R14,R14                                             0156
         BNZ   @RF00156                                            0156
*           DO;                     /* PROCESS VALUE                 */
*             ANSPTR=ADDR(SVTDATA); /* POINT TO SCAN DATA            */
         L     R1,SNTELPTR(,COMONPTR)                              0158
         L     R2,SNTVLPTR(,R1)                                    0158
         LA    R3,SVTDATA(,R2)                                     0158
         ST    R3,ANSPTR(,COMONPTR)                                0158
*             CLEN=SVTLNG;          /* LENGTH OF SCAN NUMBER         */
         LH    R4,SVTLNG(,R2)                                      0159
         STH   R4,CLEN(,COMONPTR)                                  0159
*             CALL CONVERT;         /* CONVERT TO USABLE FORM        */
         BAL   R14,CONVERT                                         0160
*             SCANLIM=V2;           /* SET SCAN LIMIT                */
         L     R6,V2                                               0161
         ST    R6,SCANLIM                                          0161
*             IF ERROR^=F0 THEN     /* CONVERT OK                    */
         L     R7,ERROR                                            0162
         LTR   R7,R7                                               0162
         BZ    @RF00162                                            0162
*               ERROR=E960;         /* SET ERROR CODE                */
         MVC   ERROR(4),FW960                                      0163
*           END;                    /*                               */
*         ELSE                      /* OTHERWISE                     */
*           ERROR=E999;             /* SET ERROR CODE                */
         B     @RC00156                                            0165
@RF00156 MVC   ERROR(4),FW999                                      0165
*       END;                                                       0166
@RC00156 DS    0H                                                  0167
*     IF SYMLST=YES THEN            /* SYMBOL LIST SPECIFIED ?       */
@RF00153 L     R1,EXECDPTR(,COMONPTR)                              0167
         TM    SYMLST(R1),B'00010000'                              0167
         BNO   @RF00167                                            0167
*       CALL CMDLST;                /* LIST COMMAND                  */
         BAL   R14,CMDLST                                          0168
*     IF OPCODE=IFCODE THEN         /* ON IF CMD, REMOVE 'THEN'      */
@RF00167 L     R1,OLDLINE(,COMONPTR)                               0169
         CLI   OPCODE(R1),2                                        0169
         BNE   @RF00169                                            0169
*       FREEAMT=FREEAMT+F4;         /* LOGICALLY REMOVE THEN         */
         LA    R2,4                                                0170
         AL    R2,FREEAMT(,COMONPTR)                               0170
         ST    R2,FREEAMT(,COMONPTR)                               0170
*                                                                  0171
*     /***************************************************************/
*     /*                                                             */
*     /* SYMBOLIC SUBSTITUTION MAINLINE                              */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0171
*     DO Z=1 TO SCANLIM WHILE EXITA=NO&ERROR=F0;/* SUB TO SCANLIM OR
*                                      DONE                          */
@RF00169 LA    R3,1                                                0171
         B     @DE00171                                            0171
@DL00171 TM    EXITA(COMONPTR),B'10000000'                         0171
         BNZ   @DC00171                                            0171
         L     R4,ERROR                                            0171
         LTR   R4,R4                                               0171
         BNZ   @DC00171                                            0171
*       EXITA=YES;                  /* CAUSE END UNLESS INSERT HAS 0172
*                                      BEEN CALLED AT LEAST ONCE     */
         OI    EXITA(COMONPTR),B'10000000'                         0172
*       DO I=MYO2 TO LL-(F4+FREEAMT) WHILE ERROR=F0;/* SCAN RECORD   */
         L     R5,MYO2(,COMONPTR)                                  0173
         B     @DE00173                                            0173
@DL00173 L     R6,ERROR                                            0173
         LTR   R6,R6                                               0173
         BNZ   @DC00173                                            0173
*         IF C(I)=AMPSAND THEN      /* IF AN AMPERSAND               */
         L     R7,I(,COMONPTR)                                     0174
         L     R6,BUFBASE(,COMONPTR)                               0174
         ALR   R6,R7                                               0174
         CLI   C-1(R6),C'&&'                                       0174
         BNE   @RF00174                                            0174
*           DO;                     /*                               */
*             I=I+F1;               /* SKIP AMPERSAND                */
         AL    R7,FW1                                              0176
         ST    R7,I(,COMONPTR)                                     0176
*             V=I;                  /* SAVE START OF VARIABLE        */
         ST    R7,V                                                0177
*             CALL SCANWORD;        /* SCAN FOR VALID CHARS          */
         BAL   R14,SCANWORD                                        0178
*             IF C(I)=PERIOD THEN   /* IF A CONCAT '.', SQUASH IT OUT*/
         L     R1,I(,COMONPTR)                                     0179
         L     R2,BUFBASE(,COMONPTR)                               0179
         ALR   R2,R1                                               0179
         CLI   C-1(R2),C'.'                                        0179
         BNE   @RF00179                                            0179
*               CALL SQUASH;        /* GET RID OF PERIOD             */
         BAL   R14,SQUASH                                          0180
*             IF LEN=F0 THEN        /* IF ONLY AN AMPERSAND          */
@RF00179 L     R3,LEN(,COMONPTR)                                   0181
         LTR   R3,R3                                               0181
         BNZ   @RF00181                                            0181
*               IF C(I)^=AMPSAND THEN/* IF NOT DOUBLE AMPERSANDS     */
         L     R1,I(,COMONPTR)                                     0182
         L     R2,BUFBASE(,COMONPTR)                               0182
         ALR   R2,R1                                               0182
         CLI   C-1(R2),C'&&'                                       0182
         BE    @RF00182                                            0182
*                 ERROR=E900;       /* SET ERROR CODE                */
         MVC   ERROR(4),FW900                                      0183
*               ELSE                                               0184
*                 ;                 /* OTHERWISE NOTHING             */
@RF00182 DS    0H                                                  0185
*             ELSE                  /* OTHERWISE SUBSTITUTE VALUE    */
*               CALL INSERT;        /* CALL INSERT ROUTINE           */
         B     @RC00181                                            0185
@RF00181 BAL   R14,INSERT                                          0185
*           END;                                                   0186
*         ELSE                      /* IF NOT AN & CHECK FOR COMMENT */
*           IF I<LL-(FREEAMT+F4)&C(I:I+F1)=OPENCMT THEN/*            */
         B     @RC00174                                            0187
@RF00174 L     R3,I(,COMONPTR)                                     0187
         L     R2,BUFBASE(,COMONPTR)                               0187
         LA    R4,4                                                0187
         AL    R4,FREEAMT(,COMONPTR)                               0187
         LCR   R4,R4                                               0187
         AH    R4,LL(,R2)                                          0187
         CR    R3,R4                                               0187
         BNL   @RF00187                                            0187
         ALR   R2,R3                                               0187
         CLC   C-1(2,R2),SLSHASTR                                  0187
         BNE   @RF00187                                            0187
*             DO I=I+F3 TO LL-(F4+FREEAMT) WHILE C(I-F1:I)^=CLOSCMT;
         AL    R3,FW3                                              0188
         B     @DE00188                                            0188
@DL00188 L     R1,I(,COMONPTR)                                     0188
         L     R2,BUFBASE(,COMONPTR)                               0188
         ALR   R2,R1                                               0188
         CLC   C-2(2,R2),ASTRSLSH                                  0188
         BE    @DC00188                                            0188
*                                   /*                               */
*             END;                  /* FIND END OF COMMENT           */
         LA    R3,1                                                0189
         AL    R3,I(,COMONPTR)                                     0189
@DE00188 ST    R3,I(,COMONPTR)                                     0189
         L     R1,BUFBASE(,COMONPTR)                               0189
         LA    R2,4                                                0189
         AL    R2,FREEAMT(,COMONPTR)                               0189
         LCR   R2,R2                                               0189
         AH    R2,LL(,R1)                                          0189
         CR    R3,R2                                               0189
         BNH   @DL00188                                            0189
@DC00188 DS    0H                                                  0190
*       END;                                                       0190
@RF00187 DS    0H                                                  0190
@RC00174 LA    R5,1                                                0190
         AL    R5,I(,COMONPTR)                                     0190
@DE00173 ST    R5,I(,COMONPTR)                                     0190
         L     R1,BUFBASE(,COMONPTR)                               0190
         LA    R4,4                                                0190
         AL    R4,FREEAMT(,COMONPTR)                               0190
         LCR   R4,R4                                               0190
         AH    R4,LL(,R1)                                          0190
         CR    R5,R4                                               0190
         BNH   @DL00173                                            0190
@DC00173 DS    0H                                                  0191
*     END;                                                         0191
         LA    R3,1                                                0191
         AL    R3,Z                                                0191
@DE00171 ST    R3,Z                                                0191
         C     R3,SCANLIM                                          0191
         BNH   @DL00171                                            0191
@DC00171 DS    0H                                                  0192
*                                                                  0192
*     /***************************************************************/
*     /*                                                             */
*     /* ACCESS METHOD SERVICES COMPATABILITY CHECK - LASTCC AND     */
*     /* MAXCC ARE ALLOWED WITHOUT & ON THE LEFT OF THE OPERATOR     */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0192
*     IF OPCODE=IFCODE OPCODE=DOCODE THEN/* IF OR DO COMMANDS        */
         L     R4,OLDLINE(,COMONPTR)                               0192
         CLI   OPCODE(R4),2                                        0192
         BE    @RT00192                                            0192
         CLI   OPCODE(R4),7                                        0192
         BNE   @RF00192                                            0192
@RT00192 DS    0H                                                  0193
*       DO;                         /* MAKE CHECK                    */
*         I=MYO2;                   /* START OF SCAN                 */
         L     R6,MYO2(,COMONPTR)                                  0194
         ST    R6,I(,COMONPTR)                                     0194
*         CALL FINDWORD;            /* FIND A WORD                   */
         BAL   R14,FINDWORD                                        0195
*         IF SEPS=NO THEN           /* IF NOT ALL SEPARATORS         */
         TM    SEPS(COMONPTR),B'10000000'                          0196
         BNZ   @RF00196                                            0196
*           IF(LEN=LENGTH(LASTCC)&  /* LASTCC LENGTH                 */
*               C(BEGIN:BEGIN+LENGTH(LASTCC)-F1)=LASTCC) /* LASTCC   */
*               (LEN=LENGTH(MAXCC)& /* MAXCC LENGTH                  */
*               C(BEGIN:BEGIN+LENGTH(MAXCC)-F1)=MAXCC) THEN/* MAXCC  */
         CLC   LEN(4,COMONPTR),FW6                                 0197
         BNE   @GL00008                                            0197
         L     R1,BEGIN(,COMONPTR)                                 0197
         L     R2,BUFBASE(,COMONPTR)                               0197
         ALR   R2,R1                                               0197
         CLC   C-1(6,R2),$LASTCC                                   0197
         BE    @RT00197                                            0197
@GL00008 CLC   LEN(4,COMONPTR),FW5                                 0197
         BNE   @RF00197                                            0197
         L     R1,BEGIN(,COMONPTR)                                 0197
         L     R2,BUFBASE(,COMONPTR)                               0197
         ALR   R2,R1                                               0197
         CLC   C-1(5,R2),$MAXCC                                    0197
         BNE   @RF00197                                            0197
@RT00197 DS    0H                                                  0198
*             DO;                   /* PROCESS                       */
*               V=BEGIN;            /* BACK UP ONE FOR INSERT        */
         L     R4,BEGIN(,COMONPTR)                                 0199
         ST    R4,V                                                0199
*               NOAMPER=YES;        /* INDICATE NO AMPERSAND         */
         OI    NOAMPER(COMONPTR),B'00000010'                       0200
*               CALL INSERT;        /* INSERT VALUE HERE             */
         BAL   R14,INSERT                                          0201
*             END;                                                 0202
*         IF OPCODE=IFCODE THEN     /* ON OF STMT                    */
@RF00197 DS    0H                                                  0203
@RF00196 L     R1,OLDLINE(,COMONPTR)                               0203
         CLI   OPCODE(R1),2                                        0203
         BNE   @RF00203                                            0203
*           DO;                     /* RE-INSERT 'THEN'              */
*             V=LL-(F3+FREEAMT);    /* SET START OF AREA             */
         L     R1,BUFBASE(,COMONPTR)                               0205
         LA    R0,3                                                0205
         AL    R0,FREEAMT(,COMONPTR)                               0205
         LCR   R0,R0                                               0205
         AH    R0,LL(,R1)                                          0205
         ST    R0,V                                                0205
*             I=V;                  /* SET END AREA                  */
         ST    R0,I(,COMONPTR)                                     0206
*             LEN=F0;               /* SET ZERO LENGTH TO REMOVE     */
         SLR   R1,R1                                               0207
         ST    R1,LEN(,COMONPTR)                                   0207
*             NOAMPER=YES;          /* NO AMPERSAND ON VARIABLE      */
*             INSTHEN=YES;          /* INSERT THEN TO INSERT         */
         OI    NOAMPER(COMONPTR),B'00000011'                       0209
*             ERRSAV=ERROR;         /* SAVE ERROR CODE               */
         L     R0,ERROR                                            0210
         ST    R0,ERRSAV                                           0210
*             ERROR=F0;             /* CLEAR ERROR IF ANY            */
         ST    R1,ERROR                                            0211
*             CALL INSERT;          /* INSERT THEN                   */
         BAL   R14,INSERT                                          0212
*             ERROR=ERRSAV;         /* RESTORE ERROR CONDITION       */
         L     R2,ERRSAV                                           0213
         ST    R2,ERROR                                            0213
*           END;                    /*                               */
*       END;                        /*                               */
@RF00203 DS    0H                                                  0216
*                                                                  0216
*     /***************************************************************/
*     /*                                                             */
*     /* CONTROL COMMAND LIST                                        */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0216
*     EXECDPTR=LSDEXEC;             /* RESET EXEC DATA POINTER       */
@RF00192 L     R1,LSDPTR(,COMONPTR)                                0216
         L     R1,LSDEXEC-LSD(,R1)                                 0216
         ST    R1,EXECDPTR(,COMONPTR)                              0216
*     IF ERROR=F0 THEN              /* IF OK SO FAR                  */
         L     R2,ERROR                                            0217
         LTR   R2,R2                                               0217
         BNZ   @RF00217                                            0217
*       DO I=1 TO LL-(F4+FREEAMT);  /* DO UNTIL END OF BUFFER        */
         LA    R3,1                                                0218
         B     @DE00218                                            0218
@DL00218 DS    0H                                                  0219
*         IF I<LL-(F4+FREEAMT)&     /* NOT BEFORE END OF BUFFER      */
*             (C(I:I+F1)=DAMPSAND   /* DOUBLE AMPERSAND              */
*             C(I:I+F1)=FDMPSAND) THEN/* FOLDED AMPERSANDS           */
         L     R4,I(,COMONPTR)                                     0219
         L     R5,BUFBASE(,COMONPTR)                               0219
         LA    R6,4                                                0219
         AL    R6,FREEAMT(,COMONPTR)                               0219
         LCR   R6,R6                                               0219
         AH    R6,LL(,R5)                                          0219
         CR    R4,R6                                               0219
         BNL   @RF00219                                            0219
         ALR   R4,R5                                               0219
         CLC   C-1(2,R4),$DBLAMPR                                  0219
         BE    @RT00219                                            0219
         L     R4,I(,COMONPTR)                                     0219
         ALR   R5,R4                                               0219
         CLC   C-1(2,R5),$HEX1010                                  0219
         BNE   @RF00219                                            0219
@RT00219 DS    0H                                                  0220
         TM    LCLFLAGS,$#NRSTR     PROCESSING &NRSTR?          ZP60014
         BO    @RF00219             YES, SUPPRESS SQUASH        ZP60014
*           CALL SQUASH;            /* SQUASH OUT THE EXTRA AMPERSAND*/
         BAL   R14,SQUASH                                          0220
*         IF OPCODE^=IFCODE&OPCODE^=DOCODE&/* NOT IF AND NOT DO      */
*             OPCODE^=SETCODE THEN  /* AND NOT SET                   */
@RF00219 L     R5,OLDLINE(,COMONPTR)                               0221
         CLI   OPCODE(R5),2                                        0221
         BE    @RF00221                                            0221
         CLI   OPCODE(R5),7                                        0221
         BE    @RF00221                                            0221
         CLI   OPCODE(R5),13                                       0221
         BE    @RF00221                                            0221
*           DO;                     /* FOLD TO UPPER CASE            */
*             FOLD=NO;              /* RESET FOLD INDICATOR          */
         NI    FOLD(COMONPTR),B'11101111'                          0223
*             TR(C(I),TRTABUP);     /* FOLD TO NORMAL CHARACTERS     */
         L     R1,I(,COMONPTR)                                     0224
         L     R2,BUFBASE(,COMONPTR)                               0224
         ALR   R2,R1                                               0224
         TR    C-1(1,R2),TRTABUP                                   0224
*           END;                    /*                               */
*       END;                                                       0226
@RF00221 LA    R3,1                                                0226
         AL    R3,I(,COMONPTR)                                     0226
@DE00218 ST    R3,I(,COMONPTR)                                     0226
         L     R1,BUFBASE(,COMONPTR)                               0226
         LA    R2,4                                                0226
         AL    R2,FREEAMT(,COMONPTR)                               0226
         LCR   R2,R2                                               0226
         AH    R2,LL(,R1)                                          0226
         CR    R3,R2                                               0226
         BNH   @DL00218                                            0226
         NI    LCLFLAGS,255-$#NRSTR RESET FUNCTION ACTIVE FLAG  ZP60014
*     IF LISTONLY=YES               /* BACKUP LIST OF TSO COMMAND    */
*         (ERROR>E16&(ERACTSTR=F0 ERRRANGE=YES)) /* A SEVERE ERROR   */
*         (CONLST=YES&(OPCODE^=F0 ERROR>E16)) THEN/* CONLIST         */
@RF00217 TM    LISTONLY(COMONPTR),B'00100000'                      0227
         BO    @RT00227                                            0227
         L     R3,ERROR                                            0227
         C     R3,FW16                                             0227
         BNH   @GL00015                                            0227
         L     R1,EXECDPTR(,COMONPTR)                              0227
         L     R2,ERACTSTR(,R1)                                    0227
         LTR   R2,R2                                               0227
         BZ    @RT00227                                            0227
         TM    ERRRANGE(COMONPTR),B'00000100'                      0227
         BO    @RT00227                                            0227
@GL00015 L     R1,EXECDPTR(,COMONPTR)                              0227
         TM    CONLST(R1),B'10000000'                              0227
         BNO   @RF00227                                            0227
         L     R1,OLDLINE(,COMONPTR)                               0227
         CLI   OPCODE(R1),0                                        0227
         BNE   @RT00227                                            0227
         L     R2,ERROR                                            0227
         C     R2,FW16                                             0227
         BNH   @RF00227                                            0227
@RT00227 DS    0H                                                  0228
*       DO;                                                        0228
*         LISTED=YES;               /* COMMAND ALREADY LISTED        */
         OI    LISTED(COMONPTR),B'00001000'                        0229
*         CALL CMDLST;              /* LIST COMMAND                  */
         BAL   R14,CMDLST                                          0230
*         IF LISTONLY=YES&ERROR=F0 THEN/* IF LISTED OK               */
         TM    LISTONLY(COMONPTR),B'00100000'                      0231
         BNO   @RF00231                                            0231
         L     R3,ERROR                                            0231
         LTR   R3,R3                                               0231
         BNZ   @RF00231                                            0231
*           ERROR=E4;               /* GET ANOTHER LINE              */
         MVC   ERROR(4),FW4                                        0232
*       END;                                                       0233
@RF00231 DS    0H                                                  0234
*                                                                  0234
*     /***************************************************************/
*     /*                                                             */
*     /* FUNCTION CALL AND NEXT COMMAND UPDATE                       */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0234
*     IF ERROR=F0 THEN              /* IF OK UP TO NOW               */
@RF00227 L     R4,ERROR                                            0234
         LTR   R4,R4                                               0234
         BNZ   @RF00234                                            0234
*       DO;                         /* CALL FUNCTION                 */
*         RFY                                                      0236
*          (R15) RSTD;              /* RESTRICT REG 15               */
*         CALL IKJCT436(UPTX,ECTX,ECB,GTPB,PARM433);/* CALL FUNCTION */
         L     R14,@PC00001                                        0237
         ST    R14,@AL00001                                        0237
         L     R14,@PC00001+4                                      0237
         ST    R14,@AL00001+4                                      0237
         L     R14,@PC00001+8                                      0237
         ST    R14,@AL00001+8                                      0237
         L     R14,@PC00001+12                                     0237
         ST    R14,@AL00001+12                                     0237
         L     R14,@PC00001+16                                     0237
         ST    R14,@AL00001+16                                     0237
         L     R15,IKJCT436                                        0237
         LA    R1,@AL00001                                         0237
         BALR  R14,R15                                             0237
*         ERROR=R15;                /* SET ERROR CODE                */
         ST    R15,ERROR                                           0238
*         RFY                                                      0239
*          (R15) UNRSTD;            /* RELEASE REG 15                */
*       END;                        /*                               */
*     ERCOM=F0;                     /* CLEAR COMMON ERROR FOR MSGOUT */
@RF00234 SLR   R0,R0                                               0241
         ST    R0,ERCOM(,COMONPTR)                                 0241
*     IF PARMDEFR=YES THEN          /* IF OK TO CHANGE STATUS        */
         L     R1,@PC00001+16                                      0242
         TM    PARMDEFR(R1),B'10000000'                            0242
         BNO   @RF00242                                            0242
*       GEN REFS(DEFERNO)(STAX MF=(E,DEFERNO));/* ALLOW ATTNS        */
         STAX MF=(E,DEFERNO)
*     IF ECBCBIT=YES THEN           /* IF ATTN POSTED                */
@RF00242 L     R2,@PC00001+8                                       0244
         TM    ECBCBIT(R2),B'01000000'                             0244
         BNO   @RF00244                                            0244
*       ERROR=E8;                   /* SET ATTN CODE                 */
         MVC   ERROR(4),FW8                                        0245
*     IF PARMDEFR=YES THEN          /* IF OK TO CHANGE STATUS        */
@RF00244 L     R3,@PC00001+16                                      0246
         TM    PARMDEFR(R3),B'10000000'                            0246
         BNO   @RF00246                                            0246
*       GEN REFS(DEFERYES)(STAX MF=(E,DEFERYES));/* NO ATTNS AGAIN   */
         STAX MF=(E,DEFERYES)
*     IF ERROR^=E4 THEN             /* IF NOT A CONTINU RETURN CODE  */
@RF00246 CLC   ERROR(4),FW4                                        0248
         BNE   LBL007EC
         TM    CONTINU(COMONPTR),B'00001110'
         BZ    @RF00248                                            0248
*       CONTINU=NO;                 /* DON''T CONTINUE               */
LBL007EC NI    CONTINU(COMONPTR),B'10111111'                       0249
*     IF CONTINU=YES THEN           /* IF OK TO CONTINUE             */
@RF00248 TM    CONTINU(COMONPTR),B'01000000'                       0250
         BNO   @RF00250                                            0250
*       DO;                         /* CHECK FOR END OF CLIST        */
*         ECDACBLK=LSDADATA;        /* POINT TO FIRST BLOCK          */
         L     R1,LSDPTR(,COMONPTR)                                0252
         L     R1,LSDADATA-LSD(,R1)                                0252
         ST    R1,ECDACBLK                                         0252
*         DO WHILE ECDACBK2^=F0&CONTINU=YES;/* FIND NEXT BLOCK       */
         B     @DE00253                                            0253
@DL00253 DS    0H                                                  0254
*           IF CURID=COMPRID&       /* IF IDS MATCH                  */
*               CURADDR>=ECDACBK2+COMPRLNG THEN/* AND AT END         */
         L     R2,LSDPTR(,COMONPTR)                                0254
         L     R3,ECDACBLK                                         0254
         CLC   CURID(1,R2),COMPRID(R3)                             0254
         BNE   @RF00254                                            0254
         SLR   R4,R4                                               0254
         ICM   R4,7,ECDACBK2                                       0254
         AL    R4,COMPRLNG(,R3)                                    0254
         SLR   R5,R5                                               0254
         ICM   R5,7,CURADDR(R2)                                    0254
         CR    R4,R5                                               0254
         BH    @RF00254                                            0254
*             IF COMPRNXT=F0 THEN   /* IF NO MORE BLOCKS     @ZA08099*/
         SLR   R2,R2                                               0255
         ICM   R2,7,COMPRNXT(R3)                                   0255
         LTR   R2,R2                                               0255
         BNZ   @RF00255                                            0255
*               DO;                 /*                       @ZA08099*/
*                 EOCLIST=YES;      /* END OF THIS CLIST     @ZA08099*/
         L     R3,@PC00001+16                                      0257
         OI    EOCLIST(R3),B'01000000'                             0257
*                 CONTINU=NO;       /* DISSALLOW CONTINUE            */
         NI    CONTINU(COMONPTR),B'10111111'                       0258
*               END;                /*                       @ZA08099*/
*             ELSE                  /* OTHERWISE                     */
*               DO;                 /* GO TO NEXT BLOCK              */
         B     @RC00255                                            0260
@RF00255 DS    0H                                                  0261
*                 CURADDR=COMPRNXT+LENGTH(COMPROC);/* UPDATE LSD     */
         L     R4,LSDPTR(,COMONPTR)                                0261
         L     R5,ECDACBLK                                         0261
         LA    R6,12                                               0261
         SLR   R7,R7                                               0261
         ICM   R7,7,COMPRNXT(R5)                                   0261
         ALR   R6,R7                                               0261
         STCM  R6,7,CURADDR(R4)                                    0261
*                 CURID=COMPRID+1;  /* INCREMENT BLOCK ID            */
         LA    R14,1                                               0262
         SLR   R15,R15                                             0262
         IC    R15,COMPRID(,R5)                                    0262
         ALR   R14,R15                                             0262
         STC   R14,CURID(,R4)                                      0262
*                 ECDACBLK=F0;      /* END SCAN                      */
         SLR   R0,R0                                               0263
         ST    R0,ECDACBLK                                         0263
*               END;                /*                               */
*           ELSE                    /* OTHERWISE                     */
*             ECDACBLK=COMPRPTR;    /* CHECK NEXT BLOCK              */
         B     @RC00254                                            0265
@RF00254 L     R1,ECDACBLK                                         0265
         L     R2,COMPRPTR(,R1)                                    0265
         ST    R2,ECDACBLK                                         0265
*         END;                      /*                               */
@RC00254 DS    0H                                                  0266
@DE00253 SLR   R3,R3                                               0266
         ICM   R3,7,ECDACBK2                                       0266
         LTR   R3,R3                                               0266
         BZ    @DC00253                                            0266
         TM    CONTINU(COMONPTR),B'01000000'                       0266
         BO    @DL00253                                            0266
@DC00253 DS    0H                                                  0267
*         IF CONTINU=YES THEN       /* IF CONTINUING                 */
         TM    CONTINU(COMONPTR),B'01000000'                       0267
         BNO   @RF00267                                            0267
*           DO;                     /* UPDATE POINTERS               */
*             GTPBLINE=LSDANEXT;    /* SAVE LSDANEXT                 */
         L     R4,@PC00001+12                                      0269
         L     R5,LSDPTR(,COMONPTR)                                0269
         L     R6,LSDANEXT-LSD(,R5)                                0269
         ST    R6,GTPBLINE(,R4)                                    0269
*             LSDANEXT=LSDANEXT+LSDANEXT->LL;/* UPDATE LSD POINTER   */
         LH    R7,LL(,R6)                                          0270
         ALR   R7,R6                                               0270
         ST    R7,LSDANEXT-LSD(,R5)                                0270
*           END;                    /*                               */
*       END;                        /*                               */
@RF00267 DS    0H                                                  0273
*FASTCYCL:                                                         0273
*   END;                            /*                       @ZA08099*/
@RF00250 DS    0H                                                  0273
FASTCYCL DS    0H                                                  0273
@DE00041 TM    CONTINU(COMONPTR),B'01000000'                       0273
         BO    @DL00041                                            0273
*                                                                  0274
*   /*****************************************************************/
*   /*                                                               */
*   /* RETURN CODE UPDATE IF ERROR AND STACK FLUSH IF NEEDED         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0274
*FASTEXIT:                                                         0274
*   IF ERROR>E8 THEN                /* IF AN ERROR OCCURRED          */
FASTEXIT L     R14,ERROR                                           0274
         C     R14,FW8                                             0274
         BNH   @RF00274                                            0274
*     DO;                           /* PROCESS ERROR CONDITION       */
*       IF ERROR=E16 THEN           /* IF A GETMAIN FAIL             */
         C     R14,FW16                                            0276
         BE    LBL008F2
*       IF ERROR=E999
         C     R14,FW999                                           0276
         BE    LBL008F2
         L     R1,EXECDPTR(,COMONPTR)
         CLC   STAECNT(2,R1),HW1
         BNH   @RF00276                                            0276
*         QUIT=YES;                 /* FLUSH STACK                   */
LBL008F2 OI    QUIT(COMONPTR),B'00100000'                          0277
*       ELSE                        /* OTHERWISE                     */
*         QUIT=NO;                  /* DONT FLUSH -- YET             */
         B     @RC00276                                            0278
@RF00276 NI    QUIT(COMONPTR),B'11011111'                          0278
*       ERRSAV=ERROR;               /* SAVE ERROR CODE               */
@RC00276 L     R3,ERROR                                            0279
         ST    R3,ERRSAV                                           0279
*       ERROR=F0;                   /* SET ERROR TO ZERO TO          */
         SLR   R4,R4                                               0280
         ST    R4,ERROR                                            0280
*       CALL RCUPDT;                /* SET RETURN CODE INDICATORS    */
         BAL   R14,RCUPDT                                          0281
*       IF ERRCMD=YES THEN          /* ID ERROR COMMAND IN EFFECT    */
         L     R5,EXECDPTR(,COMONPTR)                              0282
         TM    ERRCMD(R5),B'01000000'                              0282
         BNO   @RF00282                                            0282
         CLC   STAECNT(2,R5),HW1
         BH    @RF00282
*         IF ERRRANGE=YES THEN      /* IF IN AN ERROR RANGE          */
         TM    ERRRANGE(COMONPTR),B'00000100'                      0283
         BNO   @RF00283                                            0283
*           DO;                     /*                               */
*             IF ERRSAV^=E908 THEN  /* NOT ALREADY A RECURSE MSG     */
         CLC   ERRSAV(4),FW908                                     0285
         BE    @RF00285                                            0285
*               RECURSE=YES;        /* SET RECURSIVE ERROR BIT       */
         OI    RECURSE(COMONPTR),B'00100000'                       0286
*             QUIT=YES;             /* FLUSH STACK                   */
@RF00285 OI    QUIT(COMONPTR),B'00100000'                          0287
*           END;                    /*                               */
*         ELSE                      /* IF NOT IN ERRANGE             */
*           IF ERACTSTR^=F0 THEN    /* IF NO ERACTSTR                */
         B     @RC00283                                            0289
@RF00283 L     R6,EXECDPTR(,COMONPTR)                              0289
         L     R7,ERACTSTR(,R6)                                    0289
         LTR   R7,R7                                               0289
         BZ    @RF00289                                            0289
*             DO;                   /*                               */
*               ERINCNTL=YES;       /* SET ERROR IN CONTROL          */
         OI    ERINCNTL(R6),B'00001000'                            0291
*               CALL RETUPDT(LSDANEXT);/* UPDATE RETURN POINT        */
         L     R1,LSDPTR(,COMONPTR)                                0292
         LA    R2,LSDANEXT-LSD(,R1)                                0292
         ST    R2,@AL00001                                         0292
         LA    R1,@AL00001                                         0292
         BAL   R14,RETUPDT                                         0292
*               LSDANEXT=ERACTSTR;  /* SET GOTO ADDR                 */
         L     R1,LSDPTR(,COMONPTR)                                0293
         L     R2,EXECDPTR(,COMONPTR)                              0293
         L     R0,ERACTSTR(,R2)                                    0293
         ST    R0,LSDANEXT-LSD(,R1)                                0293
*             END;                  /*                               */
*           ELSE                    /* OTHERWISE                     */
*             IF LISTED=NO THEN     /* IF COMMAND NOT LISTED         */
         B     @RC00289                                            0295
@RF00289 TM    LISTED(COMONPTR),B'00001000'                        0295
         BNZ   @RF00295                                            0295
*               DO;                 /* LIST COMMAND IN ERROR         */
*                 LISTED=YES;       /* SAY WE HAVE LISTED COMMAND    */
         OI    LISTED(COMONPTR),B'00001000'                        0297
*                 CALL CMDLST;      /* LIST COMMAND                  */
         BAL   R14,CMDLST                                          0298
*               END;                /*                               */
*             ELSE                                                 0300
*               ;                   /* NOTHING                       */
@RF00295 DS    0H                                                  0301
*       ELSE                        /* IF NO ERRCMD                  */
*         QUIT=YES;                 /* FLUSH STACK                   */
         B     @RC00282                                            0301
@RF00282 OI    QUIT(COMONPTR),B'00100000'                          0301
*       IF QUIT=YES LISTED=YES THEN /* FLUSH STACK ?                 */
@RC00282 TM    QUIT(COMONPTR),B'00100000'                          0302
         BO    @RT00302                                            0302
         TM    LISTED(COMONPTR),B'00001000'                        0302
         BNO   @RF00302                                            0302
@RT00302 DS    0H                                                  0303
*         DO;                       /* IF SO PRINT ERROR MSG         */
*           IF LISTED=NO THEN       /* IF NOT ALREADY LISTED         */
         TM    LISTED(COMONPTR),B'00001000'                        0304
         BNZ   @RF00304                                            0304
*             CALL CMDLST;          /* LIST COMMAND                  */
         BAL   R14,CMDLST                                          0305
*           IF QUIT=YES THEN        /* GOING TO FLUSH ?              */
@RF00304 TM    QUIT(COMONPTR),B'00100000'                          0306
         BNO   @RF00306                                            0306
*             NOMSG=NO;             /* ALLOW MESSAGE TO GO OUT       */
         L     R1,EXECDPTR(,COMONPTR)                              0307
         NI    NOMSG(R1),B'11111101'                               0307
*           CALL MSGOUT;            /* PUT OUT SELECTED MESSAGE      */
@RF00306 BAL   R14,MSGOUT                                          0308
*           IF RECURSE=YES THEN     /* A RECURSIVE ERROR ?           */
         TM    RECURSE(COMONPTR),B'00100000'                       0309
         BNO   @RF00309                                            0309
*             DO;                   /* BUILD CORRECT MESSAGE         */
*               ERRSAV=E908;        /* SET RECURSIVE ERROR           */
         MVC   ERRSAV(4),FW908                                     0311
*               CALL MSGOUT;        /* PUT OUT RECURSIVE MESSAGE     */
         BAL   R14,MSGOUT                                          0312
*             END;                  /*                               */
*           IF QUIT=YES THEN        /* FLUSH THE STACK               */
@RF00309 TM    QUIT(COMONPTR),B'00100000'                          0314
         BNO   @RF00314                                            0314
*             DO;                   /* FLUSH IT                      */
*               ECTRTCD=ERRSAV;     /* SET ECT RETURN CODE FIELD     */
         L     R2,@PC00001+4                                       0316
         MVC   ECTRTCD-ECT(3,R2),ERRSAV+1                          0316
*               ECTRCDF=''B;        /* CLEAR ABEND FLAG              */
         MVI   ECTRCDF-ECT(R2),X'00'                               0317
*               NOFLUSH=NO;         /* TURN OFF NOFLUSH OPTION       */
*               CMAIN=NO;           /* TURN OFF MAIN OPTION          */
         L     R1,EXECDPTR(,COMONPTR)                              0319
         NI    NOFLUSH(R1),B'11011011'                             0319
*               IOPL(4)=ADDR(STFLUSH);/* PUTLINE PARM BLOCK          */
         LA    R2,STFLUSH                                          0320
         ST    R2,IOPL+12(,COMONPTR)                               0320
*               RFY                                                0321
*                (R1) RSTD;         /* RESTRICT REG ONE              */
*               R1=ADDR(IOPL);      /* LOAD PARM ADDRESS             */
         LR    R1,COMONPTR                                         0322
*               CALL IKJEFT30;      /* FLUSH STACK                   */
         L     R15,IKJEFT30                                        0323
         BALR  R14,R15                                             0323
*               RFY                                                0324
*                (R1) UNRSTD;       /* RELEASE REG ONE               */
*             END;                  /*                               */
*         END;                      /*                               */
@RF00314 DS    0H                                                  0327
*       ERROR=E4;                   /* SET OK TO GET ANOTHER COMMAND */
@RF00302 MVC   ERROR(4),FW4                                        0327
*     END;                          /*                               */
*                                                                  0329
*   /*****************************************************************/
*   /*                                                               */
*   /* FREE BUFFERS AS REQUIRED                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0329
*   IF CORE=YES THEN                /* NO GETMAIN ERROR YET          */
@RF00274 TM    CORE(COMONPTR),B'10000000'                          0329
         BNO   @RF00329                                            0329
*     DO;                           /* FREE PARTS OF OR ALL BUFFERS  */
*       IF ERROR=F0 THEN            /* IF ALL OK                     */
         L     R0,ERROR                                            0331
         LTR   R0,R0                                               0331
         BNZ   @RF00331                                            0331
*         DO;                       /* FREEMAIN EXCESS PART OF BUFFER*/
*           FREEADDR(1)=(BUFBASE+LL-FREEAMT+7)/8*8;/* CALC FREE ADDR */
         L     R1,BUFBASE(,COMONPTR)                               0333
         LH    R2,LL(,R1)                                          0333
         LR    R4,R1                                               0333
         ALR   R4,R2                                               0333
         L     R3,FREEAMT(,COMONPTR)                               0333
         SLR   R4,R3                                               0333
         AL    R4,FW7                                              0333
         SRDA  R4,32                                               0333
         D     R4,FW8                                              0333
         SLA   R5,3                                                0333
         ST    R5,FREEADDR                                         0333
*           FREELEN(1)=LL-(FREEADDR(1)-BUFBASE);/* CALC FREE LENGTH  */
         SLR   R5,R1                                               0334
         LCR   R5,R5                                               0334
         ALR   R5,R2                                               0334
         ST    R5,FREELEN                                          0334
*           LL=LL-FREEAMT;          /* ADJUST BUFFER LL              */
         SLR   R2,R3                                               0335
         STH   R2,LL(,R1)                                          0335
*           GTPBLINE=BUFBASE;       /* PUT LINE ADDR IN CALLERS AREA */
         L     R4,@PC00001+12                                      0336
         ST    R1,GTPBLINE(,R4)                                    0336
*         END;                      /*                               */
*       ELSE                        /* OTHERWISE FREE OBTAINED BUFFER*/
*         DO;                       /*                               */
         B     @RC00331                                            0338
@RF00331 DS    0H                                                  0339
*           FREEADDR(1)=BUFBASE;    /* BUFFER ADDRESS                */
         L     R5,BUFBASE(,COMONPTR)                               0339
         ST    R5,FREEADDR                                         0339
*           FREELEN(1)=LL;          /* BUFFER LENGTH                 */
         LH    R6,LL(,R5)                                          0340
         ST    R6,FREELEN                                          0340
*         END;                      /*                               */
*       FREEADDR(2)=NEWBASE;        /* ALTERNATE BUFFER ALWAYS FREED */
@RC00331 L     R7,NEWBASE(,COMONPTR)                               0342
         ST    R7,FREEADDR+4                                       0342
*       FREELEN(2)=NEWLL FREELAST;  /* LENGTH OF ALTERNATE BUFFER    */
         LH    R14,NEWLL(,R7)                                      0343
         O     R14,HIGHBIT                                         0343
         ST    R14,FREELEN+4                                       0343
*       DO;                         /* FREEMAIN (L) LA(FREELEN(1)) 0344
*                                      A(FREEADDR(1)) SP(F1)       0344
*                                      MF(E,FRELST)                  */
*         RESPECIFY                                                0345
*          (R1) RESTRICTED;                                        0345
*         FRELST05='80'X;           /* SET TYPE                      */
         MVI   FRELST05,X'80'                                      0346
*         FRELST02=ADDR(FREELEN(1));/* ADDR OF LENGTH LIST           */
         LA    R0,FREELEN                                          0347
         STCM  R0,7,FRELST02                                       0347
*         FRELST04=ADDR(FREEADDR(1));/* ADDR OF ADDR LIST            */
         LA    R0,FREEADDR                                         0348
         STCM  R0,7,FRELST04                                       0348
*         FRELST06=F1;              /* SUBPOOL VALUE                 */
         MVI   FRELST06,X'01'                                      0349
*         R1=ADDR(FRELST);          /* REG1 POINTS TO LIST           */
         LA    R1,FRELST                                           0350
*         SVC(5);                   /* STANDARD-FORM OF GETMAIN      */
         SVC   5                                                   0351
*         RESPECIFY                                                0352
*          (R1) UNRESTRICTED;                                      0352
*       END;                        /* FREEMAIN (L) LA(FREELEN(1)) 0353
*                                      A(FREEADDR(1)) SP(F1)       0353
*                                      MF(E,FRELST)                  */
*     END;                                                         0354
*   RETURN CODE(ERROR);             /* RETURN TO GETLINE             */
@RF00329 L     R2,ERROR                                            0355
         L     R13,4(,R13)                                         0355
         L     R0,@SIZDATD                                         0355
         LR    R1,R9                                               0355
         IKJEXEC  R,LV=(0),A=(1)
         LR    R15,R2                                              0355
         L     R14,12(,R13)                                        0355
         LM    R0,R12,20(R13)                                      0355
         BR    R14                                                 0355
*                                                               ZP60014
*   /*****************************************************************/
*   /*                                                      ZP60014  */
*   /* RETURN NUMERIC VALUE                                 ZP60014  */
*   /*                                                      ZP60014  */
*   /*****************************************************************/
*                                                               ZP60014
@EP0GET# LA    R3,FW12              SET NUMERIC FUNCTION CODE   ZP60014
         B     @EP00356             BRANCH TO COMMON LOGIC      ZP60014
*                                                               ZP60014
*   /*****************************************************************/
*   /*                                                      ZP60014  */
*   /* UPDATE WITH IMPLICIT CREATE ENTRY                    ZP60014  */
*   /*                                                      ZP60014  */
*   /*****************************************************************/
*                                                               ZP60014
@EP0INIT LA    R3,FW8               SET LOCATE FUNCTION CODE    ZP60014
         B     @EP00356             BRANCH TO COMMON LOGIC      ZP60014
*                                                                  0356
*   /*****************************************************************/
*   /*                                                               */
*   /* UPDATE ONLY ENTRY                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0356
*IKJUPDT:                                                          0356
*   ENTRY(UPTX,ECTX,ECB,UPLIST);    /*                               */
@EP0UPDT LA    R3,FW0               SET LOCATE FUNCTION CODE    ZP60014
@EP00356 MVC   @PC00001(12),0(R1)                                  0356
         MVC   @PC00001+20(4),12(R1)                               0356
*   SWS=''B;                        /* CLEAR MOST SWITCHES           */
         XC    SWS(5,COMONPTR),SWS(COMONPTR)                       0357
*   CALL INTSETUP;                  /* INIT VARIABLES                */
         BAL   R14,INTSETUP                                        0358
*   SYSUPDTE=YES;                   /* INDICATE SYSTEM UPDATE        */
         OI    SYSUPDTE(COMONPTR),B'00000100'                      0359
*   CALL LOCATE(LCVAL,LCVALLEN,F0); /* LOCATE VARIABLE               */
         L     R2,@PC00001+20       (PRESERVE R3 - ZP60014)        0360
         L     R1,LCVALPTR(,R2)     (PRESERVE R3 - ZP60014)        0360
         ST    R1,@AL00001                                         0360
         LA    R2,LCVALLEN(,R2)     (PRESERVE R3 - ZP60014)        0360
         ST    R2,@AL00001+4                                       0360
         ST    R3,@AL00001+8        SET LOCATE FUNCTION CODE       0360
         LA    R1,@AL00001                                         0360
         BAL   R14,LOCATE                                          0360
*   IF ERROR=F0 THEN                /* IF FOUND                      */
         L     R4,ERROR                                            0361
         LTR   R4,R4                                               0361
         BNZ   @RF00361                                            0361
         L     R3,@AL00001+8        POINT TO FUNCTION CODE      ZP60014
         CLC   FUNC(4,R3),FW12      GETTING NUMERIC VALUE?      ZP60014
         BNE   NOT#VALU             NO                          ZP60014
         L     R3,SNTELPTR(,COMONPTR)                           ZP60014
         L     R1,SNTVLPTR(,R3)     POINT TO VALUE ELEMENT      ZP60014
         LH    R0,SVTLNG(,R1)       GET VALUE LENGTH            ZP60014
         LA    R1,SVTDATA(,R1)      GET VALUE ADDRESS           ZP60014
         STH   R0,CLEN(,COMONPTR)   SET VALUE LENGTH            ZP60014
         ST    R1,ANSPTR(,COMONPTR) SET VALUE ADDRESS           ZP60014
         BAL   R14,CONVERT          CONVERT TO BINARY           ZP60014
         L     R15,ERROR            GET ERROR CODE              ZP60014
         XC    ERROR,ERROR          RESET ERROR CODE            ZP60014
         LTR   R15,R15              VALID NUMERIC?              ZP60014
         BNZ   @RF00361             NO, RETURN ZERO             ZP60014
         MVC   ERROR,V2             YES, SET NUMERIC VALUE      ZP60014
         B     @RF00361             RETURN BINARY VALUE         ZP60014
NOT#VALU DS    0H                                               ZP60014
*     CALL UPDATE(UPVAL,UPVALLEN);  /* UPDATE THE VARIABLE           */
         L     R5,@PC00001+20                                      0362
         L     R1,UPVALPTR(,R5)                                    0362
         ST    R1,@AL00001                                         0362
         LA    R2,UPVALLEN(,R5)                                    0362
         ST    R2,@AL00001+4                                       0362
         LA    R1,@AL00001                                         0362
         BAL   R14,UPDATE                                          0362
*   RETURN CODE(ERROR);             /* RETURN TO GETLINE             */
@RF00361 L     R3,ERROR                                            0363
         L     R13,4(,R13)                                         0363
         L     R0,@SIZDATD                                         0363
         LR    R1,R9                                               0363
         IKJEXEC  R,LV=(0),A=(1)
         LR    R15,R3                                              0363
         L     R14,12(,R13)                                        0363
         LM    R0,R12,20(R13)                                      0363
         BR    R14                                                 0363
*                                                                  0364
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZATION ROUTINE                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0364
*INTSETUP:                                                         0364
*   PROC;                                                          0364
*EL00001 L     R13,4(,R13)                                         0364
*EF00001 L     R0,@SIZDATD                                         0364
*        LR    R1,R9                                               0364
*        IKJEXEC  R,LV=(0),A=(1)
*ER00001 LM    R14,R12,12(R13)                                     0364
*        BR    R14                                                 0364
INTSETUP STM   R14,R12,12(R13)                                     0364
*   STFLUSH(1:MACLEN)=STACKL(1:MACLEN);/* COPY LIST MACROS           */
**       L     R4,MACLEN                                  ZP60014  0365
**       BCTR  R4,0                                       ZP60014  0365
**       EX    R4,@SM01094                                ZP60014  0365
         MVC   STFLUSH(MACLEN),STACKL                     ZP60014  0365
*   IOPL(1)=ADDR(UPT);              /* ADDR OF UPT                   */
         L     R5,@PC00001                                         0366
         ST    R5,IOPL(,COMONPTR)                                  0366
*   IOPL(2)=ADDR(ECT);              /* ADDR OF ECT                   */
         L     R6,@PC00001+4                                       0367
         ST    R6,IOPL+4(,COMONPTR)                                0367
*   IOPL(3)=ADDR(ECB);              /* ADDR OF ECB                   */
         L     R7,@PC00001+8                                       0368
         ST    R7,IOPL+8(,COMONPTR)                                0368
*   ERROR=F0;                       /* ZERO ERROR INDICATOR          */
         SLR   R7,R7                                               0369
         ST    R7,ERROR                                            0369
*   ERCOM=F0;                       /* ZERO ERROR INDICATOR (COMMON) */
         ST    R7,ERCOM(,COMONPTR)                                 0370
*   FREEAMT=F0;                     /* ZERO AMOUNT THAT IS FREE      */
         ST    R7,FREEAMT(,COMONPTR)                               0371
*   FREEADDR(1)=F0;                 /* INIT FREEMAIN ADDR TO 0       */
         ST    R7,FREEADDR                                         0372
*   FREELEN(1)=F0;                  /* INIT FREEMAIN LENGTH TO 0     */
         ST    R7,FREELEN                                          0373
*   SW2=''B;                        /* TURN OFF LOOP SWITCHES        */
         MVI   SW2(COMONPTR),X'00'                                 0374
*   FRELST=''B;                     /* CLEAR FREEMAIN LIST AREA      */
         XC    FRELST(10),FRELST                                   0375
*   GETLST=''B;                     /* CLEAR GETMAIN LIST AREA       */
         XC    GETLST(10),GETLST                                   0376
*   LSDPTR=INSADLSD;                /* POINT TO LSD                  */
         L     R1,ECTIOWA-ECT(,R6)                                 0377
         L     R1,IOSTELM(,R1)                                     0377
         SLR   R0,R0                                               0377
         ICM   R0,7,INSADLSD(R1)                                   0377
         ST    R0,LSDPTR(,COMONPTR)                                0377
*   DO;                             /* GETMAIN (EC) MF(M,GETLST)     */
*     GETLST04='20'X;               /* TYPE                          */
         MVI   GETLST04,X'20'                                      0379
*   END;                            /* GETMAIN (EC) MF(M,GETLST) SET
*                                      TYPE OF GETMAIN               */
*   DO;                             /* FREEMAIN (E) MF(M,FRELST)     */
*     FRELST05='00'X;               /* SET TYPE                      */
         MVI   FRELST05,X'00'                                      0382
*   END;                            /* FREEMAIN (E) MF(M,FRELST) SET
*                                      TYPE OF FREEMAIN              */
*   END INTSETUP;                                                  0384
@EL00002 DS    0H                                                  0384
@EF00002 DS    0H                                                  0384
@ER00002 LM    R14,R12,12(R13)                                     0384
         BR    R14                                                 0384
*                                                                  0385
*   /*****************************************************************/
*   /*                                                               */
*   /* MESSAGE OUTPUT ROUTINE                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0385
*MSGOUT:                                                           0385
*   PROC OPTIONS(SAVEAREA);                                        0385
MSGOUT   STM   R14,R12,12(R13)                                     0385
         ST    R13,@SA00003+4                                      0385
         LA    R14,@SA00003                                        0385
         ST    R14,8(,R13)                                         0385
         LR    R13,R14                                             0385
*   MATCH=NO;                       /* RESET MATCH SWITCH            */
         NI    MATCH(COMONPTR),B'11101111'                         0386
*   IF RCABEND=YES THEN             /* FOR AN ABEND ERROR            */
         TM    RCABEND(COMONPTR),B'10000000'                       0387
         BNO   @RF00387                                            0387
*     I=MSGDIM;                     /* GET INTERNAL ERROR MSG        */
         L     R1,@MSGTABL                                         0388
         LH    R2,MSGDIM-MSGTABL(,R1)                              0388
         ST    R2,I(,COMONPTR)                                     0388
*   ELSE                            /* OTHERWISE START FROM BEGINNING*/
*     I=F1;                         /*                               */
         B     @RC00387                                            0389
@RF00387 MVC   I(4,COMONPTR),FW1                                   0389
*   DO I=I TO MSGDIM WHILE MATCH=NO;/* NOT FOUND?-TRY HERE           */
@RC00387 L     R3,I(,COMONPTR)                                     0390
         B     @DE00390                                            0390
@DL00390 TM    MATCH(COMONPTR),B'00010000'                         0390
         BNZ   @DC00390                                            0390
*     IF(ERRSAV>=IDA(I)&ERRSAV<=IDC(I)) I=MSGDIM THEN/* A MATCH      */
         L     R4,ERRSAV                                           0391
         L     R5,I(,COMONPTR)                                     0391
         MH    R5,HW12                                             0391
         L     R6,@MSGTABL                                         0391
         LA    R1,0(R5,R6)                                         0391
         AL    R1,FWNEG10                                          0391
         CH    R4,IDA-MSGTABL-2(,R1)                               0391
         BL    @GL00025                                            0391
         AL    R6,FWNEG8                                           0391
         CH    R4,IDC-MSGTABL-4(R5,R6)                             0391
         BNH   @RT00391                                            0391
@GL00025 L     R2,@MSGTABL                                         0391
         L     R3,I(,COMONPTR)                                     0391
         CH    R3,MSGDIM-MSGTABL(,R2)                              0391
         BNE   @RF00391                                            0391
@RT00391 DS    0H                                                  0392
*       DO;                         /* FILL IN OLD                   */
*         MATCH=YES;                /* TERMINATE SCAN FOR MESSAGE    */
         OI    MATCH(COMONPTR),B'00010000'                         0393
*         N=SEGNUM(I);              /* GET CURRENT NUMBER OF SEGMENTS*/
         L     R4,I(,COMONPTR)                                     0394
         MH    R4,HW12                                             0394
         L     R5,@MSGTABL                                         0394
         LA    R1,0(R4,R5)                                         0394
         BCTR  R1,0                                                0394
         BCTR  R1,0                                                0394
         SLR   R0,R0                                               0394
         IC    R0,SEGNUM-MSGTABL-10(,R1)                           0394
         ST    R0,N                                                0394
*         OLD(3)=MSGSEG1(I);        /* FIRST SEGMENT                 */
         ST    R4,@AFTEMPS
         ALR   R4,R5
         AL    R4,FWNEG5                                           0395
         SLR   R1,R1                                               0395
         ICM   R1,7,MSGSEG1-MSGTABL-7(R4)                          0395
         ST    R1,OLD+8                                            0395
*         OLD(4)=MSGSEG2(I);        /* SECOND SEGMENT IF ONE         */
         AL    R5,@AFTEMPS
         BCTR  R5,0                                                0396
         SLR   R4,R4                                               0396
         ICM   R4,7,MSGSEG2-MSGTABL-11(R5)                         0396
         ST    R4,OLD+12                                           0396
*         IF RECURSE=YES&ERRSAV=E908 THEN/* IF ALSO TYPE ERROR       */
         TM    RECURSE(COMONPTR),B'00100000'                       0397
         BNO   @RF00397                                            0397
         CLC   ERRSAV(4),FW908                                     0397
         BNE   @RF00397                                            0397
*           DO;                     /* FILL IN OLD                   */
*             OLD(2)=N+F1;          /* SET COUNT                     */
         AL    R0,FW1                                              0399
         ST    R0,OLD+4                                            0399
*             OLD(5)=OLD(4);        /* GET ROOM FOR ALSO             */
         L     R6,OLD+12                                           0400
         ST    R6,OLD+16                                           0400
*             OLD(4)=ADDR(ALSO);    /* GET ADDR OF ALSO              */
         L     R7,@ALSO                                            0401
         ST    R7,OLD+12                                           0401
*           END;                    /*                               */
*         ELSE                      /* OTHERWISE                     */
*           OLD(2)=N;               /* NUMBER OF SEGMENTS            */
         B     @RC00397                                            0403
@RF00397 L     R15,N                                               0403
         ST    R15,OLD+4                                           0403
*         IF SECLEVEL(I)=YES THEN   /* IF PROCESSING REQ SECOND LVL  */
@RC00397 L     R0,I(,COMONPTR)                                     0404
         MH    R0,HW12                                             0404
         L     R1,@MSGTABL                                         0404
         ALR   R1,R0                                               0404
         AL    R1,FWNEG6                                           0404
         TM    SECLEVEL-MSGTABL-6(R1),B'10000000'                  0404
         BNO   @RF00404                                            0404
*           DO;                     /* BUILD SECOND LEVEL MSG        */
*             OLD(1)=ADDR(OLD2);    /* POINT TO SECOND LEVEL         */
         LA    R2,OLD2                                             0406
         ST    R2,OLD                                              0406
*             OLD2(1)=F0;           /* NO THIRD LEVEL MESSAGE        */
         SLR   R3,R3                                               0407
         ST    R3,OLD2                                             0407
*             OLD2(2)=F1;           /* ONE SEGMENT                   */
         MVC   OLD2+4(4),FW1                                       0408
*             OLD2(3)=ADDR(MYSEG);  /* MESSAGE                       */
         LA    R2,MYSEG                                            0409
         ST    R2,OLD2+8                                           0409
*             MYSEG=MSTRLV2(1:LENGTH(MYSEG));/* COPY MSG TO GOTTEN   */
         L     R2,@MSTRLV2                                         0410
         MVC   MYSEG(35),MSTRLV2-MSTRLV2(R2)                       0410
         L     R2,EXECDPTR(,COMONPTR)
         CLC   STAECNT(2,R2),HW1
         BNH   LBL00D28
         STH   R3,STAECNT(,R2)
         MVC   OLD2+4(4),FW2
         LA    R3,1484(,R9)
         ST    R3,1556(,R9)
         L     R4,@MSTRLV3
         MVC   1484(32,R9),MSTRLV3-MSTRLV3(R4)
*             CALL LOCATE(LASTCC,LENGTH(LASTCC),F0);/* LOCATE LASTCC */
LBL00D28 LA    R1,@AL00411                                         0411
         BAL   R14,LOCATE                                          0411
*             IF ERROR=F0&SVTLNG>F0 THEN/* IF LOCATE OK              */
         SLR   R5,R5                                               0412
         C     R5,ERROR                                            0412
         BNE   @RF00412                                            0412
         L     R1,SNTELPTR(,COMONPTR)                              0412
         L     R4,SNTVLPTR(,R1)                                    0412
         LH    R6,SVTLNG(,R4)                                      0412
         CR    R6,R5                                               0412
         BNH   @RF00412                                            0412
*               DO;                 /* FILL IN CODE                  */
*                 N=MIN(SVTLNG,F5); /* SAVE LENGTH (MAX OF 5)        */
         LA    R7,5                                                0414
         CR    R6,R7                                               0414
         BNH   *+6
         LR    R6,R7                                               0414
         ST    R6,N                                                0414
*                 IF SVTDATA(1)=CCS SVTDATA(1)=CCU THEN/* ABEND CD   */
         CLI   SVTDATA(R4),C'S'                                    0415
         BE    @RT00415                                            0415
         CLI   SVTDATA(R4),C'U'                                    0415
         BNE   @RF00415                                            0415
@RT00415 DS    0H                                                  0416
*                   DO;             /* ABEND CODE ?                  */
*                     N=MIN(SVTLNG,F5);/* SAVE LENGTH (MAX OF 5)     */
         L     R1,SNTELPTR(,COMONPTR)                              0417
         L     R2,SNTVLPTR(,R1)                                    0417
         LH    R3,SVTLNG(,R2)                                      0417
         LA    R4,5                                                0417
         CR    R3,R4                                               0417
         BNH   *+6
         LR    R3,R4                                               0417
         ST    R3,N                                                0417
*                     OUTCD=SVTDATA(1:N);/* OK ALL CHARS             */
         MVI   OUTCD+1,C' '                                        0418
         MVC   OUTCD+2(3),OUTCD+1                                  0418
         BCTR  R3,0                                                0418
         EX    R3,@SM01100                                         0418
*                   END;            /*                               */
*                 ELSE              /* OTHERWISE                     */
*                   DO;             /* DONT OVERLAY THE 'E'          */
         B     @RC00415                                            0420
@RF00415 DS    0H                                                  0421
*                     N=MIN(SVTLNG,F3);/* MAX NUMBER LENGTH          */
         L     R1,SNTELPTR(,COMONPTR)                              0421
         L     R2,SNTVLPTR(,R1)                                    0421
         LH    R3,SVTLNG(,R2)                                      0421
         LA    R4,3                                                0421
         CR    R3,R4                                               0421
         BNH   *+6
         LR    R3,R4                                               0421
         ST    R3,N                                                0421
*                     OUTCD(5-N:4)=SVTDATA(1:N);/* ON NUMBERS        */
         LCR   R3,R3                                               0422
         AL    R3,FW5                                              0422
         LA    R1,OUTCD-1(R3)                                      0422
         LCR   R3,R3                                               0422
         AL    R3,FW4                                              0422
         EX    R3,@SM01102                                         0422
*                   END;            /*                               */
*               END;                /*                               */
*           END;                    /*                               */
*         ELSE                      /* OTHERWISE                     */
*           OLD(1)=F0;              /* NO SECOUND LEVEL MESSAGE      */
         B     @RC00404                                            0426
@RF00404 SLR   R2,R2                                               0426
         ST    R2,OLD                                              0426
*       END;                        /*                               */
@RC00404 DS    0H                                                  0428
*   END;                            /*                               */
@RF00391 LA    R3,1                                                0428
         AL    R3,I(,COMONPTR)                                     0428
         ST    R3,I(,COMONPTR)                                     0428
@DE00390 L     R2,@MSGTABL                                         0428
         CH    R3,MSGDIM-MSGTABL(,R2)                              0428
         BNH   @DL00390                                            0428
@DC00390 DS    0H                                                  0429
*   IOPL(4)=ADDR(PUTMLVL);          /* PUTLINE LIST FORM             */
         LA    R3,PUTMLVL                                          0429
         ST    R3,IOPL+12(,COMONPTR)                               0429
*   RFY                                                            0430
*    (R1,                                                          0430
*     R2,                                                          0430
*     R15) RSTD;                    /* RESTRICT ENTRY REG            */
*   R1=ADDR(IOPL);                  /* GET ADDR OF IOPL              */
         LR    R1,COMONPTR                                         0431
*   R2=ADDR(OLD);                   /* GET ADDR OF OLD               */
         LA    R2,OLD                                              0432
*   R15=ADDR(IKJEFT40);             /* ENTRY TO PUTLINE              */
         L     R15,IKJEFT40                                        0433
*   GEN REFS(R1,R2,R15)                                            0434
*       (PUTLINE OUTPUT=((2),MULTLVL),MF=(E,(1)),ENTRY=(15));      0434
         PUTLINE OUTPUT=((2),MULTLVL),MF=(E,(1)),ENTRY=(15)
*   RFY                                                            0435
*    (R1,                                                          0435
*     R2,                                                          0435
*     R15) UNRSTD;                  /* RELEASE REG 15                */
*   END MSGOUT;                                                    0436
@EL00003 L     R13,4(,R13)                                         0436
@EF00003 DS    0H                                                  0436
@ER00003 LM    R14,R12,12(R13)                                     0436
         BR    R14                                                 0436
*                                                                  0437
*   /*****************************************************************/
*   /*                                                               */
*   /* INSERT MAINLINE                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0437
*INSERT:                                                           0437
*   PROC;                                                          0437
INSERT   STM   R14,R12,@SA00004                                    0437
*   IF INSTHEN=NO THEN              /* AS LONG AS NOT INSERT THEN    */
         TM    INSTHEN(COMONPTR),B'00000001'                       0438
         BNZ   @RF00438                                            0438
*     CALL LOCATE(C(V),LEN,F0);     /* LOCATE SYMBOLIC VARIABLE      */
         L     R1,BUFBASE(,COMONPTR)                               0439
         L     R2,V                                                0439
         LA    R3,C-1(R2,R1)                                       0439
         ST    R3,@AL00001                                         0439
         LA    R4,LEN(,COMONPTR)                                   0439
         ST    R4,@AL00001+4                                       0439
         LA    R5,FW0                                              0439
         ST    R5,@AL00001+8                                       0439
         LA    R1,@AL00001                                         0439
         BAL   R14,LOCATE                                          0439
*   IF ERROR=F0 THEN                /* IF VARIABLE FOUND             */
@RF00438 L     R6,ERROR                                            0440
         LTR   R6,R6                                               0440
         BNZ   @RF00440                                            0440
*     DO;                           /*                               */
*       IF NOAMPER=NO THEN          /* IF AMPERSAND PRESENT          */
         TM    NOAMPER(COMONPTR),B'00000010'                       0442
         BNZ   @RF00442                                            0442
*         DO;                       /* RESET V TO AMPERSAND AND      */
*           V=V-F1;                 /* ADD THE LENGTH OF AN          */
         L     R7,V                                                0444
         BCTR  R7,0                                                0444
         ST    R7,V                                                0444
*           LEN=LEN+F1;             /* AMPERSAND TO LEN              */
         LA    R14,1                                               0445
         AL    R14,LEN(,COMONPTR)                                  0445
         ST    R14,LEN(,COMONPTR)                                  0445
*         END;                      /*                               */
*       IF INSTHEN=YES THEN         /* IF IN INSERT THEN MODE        */
@RF00442 TM    INSTHEN(COMONPTR),B'00000001'                       0447
         BNO   @RF00447                                            0447
*         DO;                       /* POINT TO THEN                 */
*           INSRTDA=ADDR(CTHEN);    /* ADDR OF THEN                  */
         LA    R15,$THEN                                           0449
         ST    R15,INSRTDA                                         0449
*           INSRTLN=LENGTH(CTHEN);  /* LENGTH OF THEN                */
         MVC   INSRTLN(4),FW4                                      0450
*         END;                      /*                               */
*       ELSE                        /* OTHERWISE                     */
*         DO;                       /* GET VARIABLES INSERT DATA     */
         B     @RC00447                                            0452
@RF00447 DS    0H                                                  0453
*           INSRTLN=SVTLNG;         /* GET INSERT LENGTH             */
         L     R0,SNTELPTR(,COMONPTR)                              0453
         LR    R1,R0
         L     R1,SNTVLPTR(,R1)                                    0453
         LH    R2,SVTLNG(,R1)                                      0453
         ST    R2,INSRTLN                                          0453
*           INSRTDA=ADDR(SVTDATA);  /* GET POINTER TO INSERT DATA    */
         LA    R1,SVTDATA(,R1)                                     0454
         ST    R1,INSRTDA                                          0454
*           IF SNTEVAL=YES THEN     /* IF EVALUATION REQUIRED        */
         LR    R1,R0
         TM    SNTEVAL(R1),B'00000010'                             0455
         BNO   @RF00455                                            0455
*             CALL IMVALRTN;        /* CALL ROUTINE TO PROCESS EVAL  */
         BAL   R14,IMVALRTN                                        0456
*         END;                                                     0457
@RF00455 DS    0H                                                  0458
*       EXITA=NO;                   /* SAY WE HAVE INSERTED DATA     */
@RC00447 NI    EXITA(COMONPTR),B'01111111'                         0458
*       IF ERROR=F0&WAIT=NO THEN    /* IF NO ERROR FROM BUILT IN FUNC*/
         L     R2,ERROR                                            0459
         LTR   R2,R2                                               0459
         BNZ   @RF00459                                            0459
         TM    WAIT(COMONPTR),B'00010000'                          0459
         BNZ   @RF00459                                            0459
*         DO;                       /* PERFORM INSERT                */
*           IF INSRTLN-LEN>FREEAMT THEN/* IF INSERT DATA IS GREATER  */
         L     R3,INSRTLN                                          0461
         SL    R3,LEN(,COMONPTR)                                   0461
         L     R2,FREEAMT(,COMONPTR)                               0461
         CR    R3,R2                                               0461
         BNH   @RF00461                                            0461
*             CALL GETMORE(INSRTLN-LEN-FREEAMT);/* GET BIGGER BUFFER */
         SLR   R3,R2                                               0462
         ST    R3,@AFTEMPS+4                                       0462
         LA    R3,@AFTEMPS+4                                       0462
         ST    R3,@AL00001                                         0462
         LA    R1,@AL00001                                         0462
         BAL   R14,GETMORE                                         0462
*           ELSE                    /* OTHERWISE UPDATE FREE AMOUNT  */
*             FREEAMT=FREEAMT-(INSRTLN-LEN);/* UPDATE FREEAMT        */
         B     @RC00461                                            0463
@RF00461 L     R4,INSRTLN                                          0463
         SL    R4,LEN(,COMONPTR)                                   0463
         LCR   R4,R4                                               0463
         AL    R4,FREEAMT(,COMONPTR)                               0463
         ST    R4,FREEAMT(,COMONPTR)                               0463
*           IF ERROR=F0 THEN        /* NO ERROR FROM GETMORE         */
@RC00461 L     R5,ERROR                                            0464
         LTR   R5,R5                                               0464
         BNZ   @RF00464                                            0464
*             DO;                   /*                               */
*               RFY                                                0466
*                (R2,                                              0466
*                 R3,                                              0466
*                 R4,                                              0466
*                 R5) RSTD;         /* RESTRICT REGISTERS            */
*               R2=ADDR(NEWC);      /* POINT TO NEW BUFFER           */
         L     R2,NEWBASE(,COMONPTR)                               0467
         LA    R2,NEWC(,R2)                                        0467
*               R3=V-F1;            /* LENGTH OF FIRST PART          */
         L     R3,V                                                0468
         BCTR  R3,0                                                0468
*               R4=ADDR(C);         /* POINT TO OLD BUFFER           */
         L     R4,BUFBASE(,COMONPTR)                               0469
         LA    R4,C(,R4)                                           0469
*               R5=R3;              /* SAME LENGTH                   */
         LR    R5,R3                                               0470
*               MVCL(R2,R4);        /* MOVE FIRST PART OF BUFFER     */
         MVCL  R2,R4                                               0471
*               KPTR=R2;            /* SAVE LOC IN BUFFER WHERE DATA
*                                      IS GOING                      */
         ST    R2,KPTR                                             0472
*               R3=INSRTLN;         /* LENGTH OF SYMBOLIC VARIABLE   */
         L     R3,INSRTLN                                          0473
*               R4=INSRTDA;         /* POINT TO SUBSTITUTE DATA      */
         L     R4,INSRTDA                                          0474
*               R5=R3;              /* EQUAL LENGTH                  */
         LR    R5,R3                                               0475
*               MVCL(R2,R4);        /* MOVE IN DATA (R2 UPDATED BY 0476
*                                      MVCL)                         */
         MVCL  R2,R4                                               0476
*               R3=NEWLL-(INSRTLN+V+F3);/* TO LENGTH - ALREADY MOVED */
         L     R6,NEWBASE(,COMONPTR)                               0477
         LA    R7,3                                                0477
         L     R3,INSRTLN                                          0477
         AL    R3,V                                                0477
         ALR   R3,R7                                               0477
         LCR   R3,R3                                               0477
         AH    R3,NEWLL(,R6)                                       0477
*               R4=ADDR(C(I));      /* POINT TO RESUME BUFFER        */
         L     R14,I(,COMONPTR)                                    0478
         L     R15,BUFBASE(,COMONPTR)                              0478
         LA    R4,C-1(R14,R15)                                     0478
*               R5=(LL-(I+F3)) BLANKS;/* THE REMAINING SEGMENT AND 0479
*                                      PAD                           */
         ALR   R14,R7                                              0479
         LCR   R14,R14                                             0479
         AH    R14,LL(,R15)                                        0479
         O     R14,HIBLANK                                         0479
         LR    R5,R14                                              0479
*               I=R2-(ADDR(NEWC));  /* POINT I TO RESUME SEGMENT     */
         LA    R6,NEWC(,R6)                                        0480
         LCR   R6,R6                                               0480
         ALR   R6,R2                                               0480
         ST    R6,I(,COMONPTR)                                     0480
*               MVCL(R2,R4);        /* MOVE RESUME PART OF BUFFER    */
         MVCL  R2,R4                                               0481
*               RFY                                                0482
*                (R2,                                              0482
*                 R3,                                              0482
*                 R4,                                              0482
*                 R5) UNRSTD;       /* RELEASE REGISTERS             */
*               IF SNTNOSCN=YES THEN/* IF NO RESCAN ALLOWED          */
         L     R1,SNTELPTR(,COMONPTR)                              0483
         TM    SNTNOSCN(R1),B'00001000'                            0483
         BNO   @RF00483                                            0483
*                 DO K=INSRTLN TO F1 BY-F1;                        0484
         L     R2,INSRTLN                                          0484
         ST    R2,K                                                0484
         B     @DE00484                                            0484
@DL00484 DS    0H                                                  0485
*                   FOLD=YES;       /* FOLD TO SPECIAL CHARS         */
         OI    FOLD(COMONPTR),B'00010000'                          0485
*                   IF KPTR->INSRTCHR(K)=AMPSAND THEN/* NO RESCAN    */
         L     R3,KPTR                                             0486
         ALR   R2,R3                                               0486
         BCTR  R2,0                                                0486
         CLI   INSRTCHR(R2),C'&&'                                  0486
         BNE   @RF00486                                            0486
*                     KPTR->INSRTCHR(K)=NOSCNAMP;/* REQUIRES SPECIAL
*                                      FOLDED NO-RESCAN AMPERSAND    */
         L     R2,K                                                0487
         ALR   R3,R2                                               0487
         BCTR  R3,0                                                0487
         MVI   INSRTCHR(R3),X'03'                                  0487
*                   ELSE                                           0488
*                     TR(KPTR->INSRTCHR(K),TRTABDN);               0488
         B     @RC00486                                            0488
@RF00486 L     R1,KPTR                                             0488
         AL    R1,K                                                0488
         BCTR  R1,0                                                0488
         TR    INSRTCHR(1,R1),TRTABDN                              0488
*                 END;                                             0489
*                                                                  0489
@RC00486 SLR   R2,R2                                               0489
         BCTR  R2,0                                                0489
         AL    R2,K                                                0489
         ST    R2,K                                                0489
@DE00484 LTR   R2,R2                                               0489
         BP    @DL00484                                            0489
*               /*****************************************************/
*               /*                                                   */
*               /* FREE OLD BUFFER IF A NEW ONE WAS GOTTEN           */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0490
*               IF FREESW=YES THEN  /* IF FREEMAIN NECESSARY         */
@RF00483 TM    FREESW(COMONPTR),B'00100000'                        0490
         BNO   @RF00490                                            0490
*                 DO;               /*                               */
*                   DO;             /* FREEMAIN LV(FREELEN(1))     0492
*                                      A(FREEADDR) SP(1) MF(E,FRELST)*/
*                     RESPECIFY                                    0493
*                      (R1) RESTRICTED;                            0493
*                     FRELST02=FREELEN(1);/* LENGTH                  */
         MVC   FRELST02(3),FREELEN+1                               0494
*                     FRELST04=ADDR(FREEADDR);/* ADDR OF ADDR LIST   */
         LA    R0,FREEADDR                                         0495
         STCM  R0,7,FRELST04                                       0495
*                     FRELST06=1;   /* SUBPOOL VALUE                 */
         MVI   FRELST06,X'01'                                      0496
*                     R1=ADDR(FRELST);/* REG1 POINTS TO LIST         */
         LA    R1,FRELST                                           0497
*                     SVC(5);       /* STANDARD-FORM OF GETMAIN      */
         SVC   5                                                   0498
*                     RESPECIFY                                    0499
*                      (R1) UNRESTRICTED;                          0499
*                   END;            /* FREEMAIN LV(FREELEN(1))     0500
*                                      A(FREEADDR) SP(1) MF(E,FRELST)*/
*                   BUFBASE=NEWBASE;/* RESET POINTER TO BUFFER       */
         L     R2,NEWBASE(,COMONPTR)                               0501
         ST    R2,BUFBASE(,COMONPTR)                               0501
*                   NEWBASE=NEWBASE+LL;/* POINT TO NEW FREE BUFFER   */
         LH    R3,LL(,R2)                                          0502
         ALR   R2,R3                                               0502
         ST    R2,NEWBASE(,COMONPTR)                               0502
*                   NEWLL=LL;       /* INIT LENGTH                   */
         STH   R3,NEWLL(,R2)                                       0503
*                   NEWOO=F0;       /* INIT OFFSET                   */
         SLR   R3,R3                                               0504
         STH   R3,NEWOO(,R2)                                       0504
*                   FREESW=NO;      /* RESET FREESWITCH              */
         NI    FREESW(COMONPTR),B'11011111'                        0505
*                 END;                                             0506
*               ELSE                /* OTHERWISE                     */
*                 DO;                                              0507
         B     @RC00490                                            0507
@RF00490 DS    0H                                                  0508
*                   BUFBASE=BUFBASE&&NEWBASE;/* SWAP BUFFER POINTERS */
         L     R4,NEWBASE(,COMONPTR)                               0508
         L     R5,BUFBASE(,COMONPTR)                               0508
         XR    R5,R4                                               0508
         ST    R5,BUFBASE(,COMONPTR)                               0508
*                   NEWBASE=NEWBASE&&BUFBASE;/*                      */
         XR    R4,R5                                               0509
         ST    R4,NEWBASE(,COMONPTR)                               0509
*                   BUFBASE=BUFBASE&&NEWBASE;/*                      */
         XR    R5,R4                                               0510
         ST    R5,BUFBASE(,COMONPTR)                               0510
*                 END;                                             0511
*             END;                                                 0512
*         END;                                                     0513
*       ELSE                        /* OTHERWISE                     */
*         WAIT=NO;                  /* TURN OFFF WAIT                */
         B     @RC00459                                            0514
@RF00459 NI    WAIT(COMONPTR),B'11101111'                          0514
*     END;                                                         0515
*   END INSERT;                                                    0516
@EL00004 DS    0H                                                  0516
@EF00004 DS    0H                                                  0516
@ER00004 LM    R14,R12,@SA00004                                    0516
         BR    R14                                                 0516
*                                                                  0517
*   /*****************************************************************/
*   /*                                                               */
*   /* GET BIGGER BUFFER                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0517
*GETMORE:                                                          0517
*   PROC(MINIMUM);                                                 0517
GETMORE  STM   R14,R12,12(R13)                                     0517
         MVC   @PC00005(4),0(R1)                                   0517
*   DCL                                                            0518
*     MINIMUM FIXED(31);                                           0518
*   HOWMUCH=F16*((GAS+MINIMUM+LL)/F8);/* CALCULATE HOWMUCH TO GET    */
         L     R6,@PC00005                                         0519
         LA    R14,200                                             0519
         AL    R14,MINIMUM(,R6)                                    0519
         L     R7,BUFBASE(,COMONPTR)                               0519
         LH    R6,LL(,R7)                                          0519
         ALR   R14,R6                                              0519
         SRDA  R14,32                                              0519
         D     R14,FW8                                             0519
         SLA   R15,4                                               0519
         ST    R15,HOWMUCH                                         0519
*   IF CORE=YES THEN                /* IF ALREADY CORE               */
         TM    CORE(COMONPTR),B'10000000'                          0520
         BNO   @RF00520                                            0520
*     DO;                           /* FIND ADDR OF OLD CORE         */
*       FREESW=YES;                 /* ALLOW FREEMAIN                */
         OI    FREESW(COMONPTR),B'00100000'                        0522
*       FREEADDR(1)=MIN(BUFBASE,NEWBASE);/* GET LOW ADDR FOR FREE    */
         L     R14,NEWBASE(,COMONPTR)                              0523
         CR    R7,R14                                              0523
         BNH   *+6
         LR    R7,R14                                              0523
         ST    R7,FREEADDR                                         0523
*       FREELEN(1)=LL*F2;           /* AMOUNT TO FREE                */
         ALR   R6,R6                                               0524
         ST    R6,FREELEN                                          0524
*     END;                          /*                               */
*   DO;                             /* GETMAIN LV(HOWMUCH) A(NEWBASE)
*                                      SP(1) MF(E,GETLST)          0526
*                                      RTCD(RETURNCD)                */
@RF00520 DS    0H                                                  0527
*     RESPECIFY                                                    0527
*      (R1,                                                        0527
*       R15) RESTRICTED;                                           0527
*     GETLST01=HOWMUCH;             /* LENGTH                        */
         L     R14,HOWMUCH                                         0528
         ST    R14,GETLST01                                        0528
*     GETLST03=ADDR(NEWBASE);       /* ADDR OF ADDR LIST             */
         LA    R0,NEWBASE(,COMONPTR)                               0529
         STCM  R0,7,GETLST03                                       0529
*     GETLST05=1;                   /* SUBPOOL VALUE                 */
         MVI   GETLST05,X'01'                                      0530
*     R1=ADDR(GETLST);              /* REG1 POINTS TO LIST           */
         LA    R1,GETLST                                           0531
*     SVC(4);                       /* STANDARD-FORM OF GETMAIN      */
         SVC   4                                                   0532
*     RETURNCD=R15;                 /* SET RETURN CODE               */
         ST    R15,RETURNCD                                        0533
*     RESPECIFY                                                    0534
*      (R1,                                                        0534
*       R15) UNRESTRICTED;                                         0534
*   END;                            /* GETMAIN LV(HOWMUCH) A(NEWBASE)
*                                      SP(1) MF(E,GETLST)          0535
*                                      RTCD(RETURNCD)                */
*   IF ERROR=F0&RETURNCD^=F0 THEN   /* GETMAIN FAIL                  */
         SLR   R2,R2                                               0536
         C     R2,ERROR                                            0536
         BNE   @RF00536                                            0536
         L     R3,RETURNCD                                         0536
         CR    R3,R2                                               0536
         BE    @RF00536                                            0536
*     DO;                           /* AND PROCESS ORIG BUFFER       */
*       IF CORE=NO THEN             /* POINT TO ORIG BUFFER          */
         TM    CORE(COMONPTR),B'10000000'                          0538
         BNZ   @RF00538                                            0538
*         NEWBASE=BUFBASE;          /* FOR SQUASH                    */
         L     R5,BUFBASE(,COMONPTR)                               0539
         ST    R5,NEWBASE(,COMONPTR)                               0539
*       ERROR=E16;                  /* SET ERROR CODE                */
@RF00538 MVC   ERROR(4),FW16                                       0540
*     END;                                                         0541
*   ELSE                                                           0542
*     DO;                           /*                               */
         B     @RC00536                                            0542
@RF00536 DS    0H                                                  0543
*       NEWLL=HOWMUCH/F2;           /* SET NEW LL                    */
         L     R6,NEWBASE(,COMONPTR)                               0543
         L     R0,HOWMUCH                                          0543
         SRDA  R0,32                                               0543
         D     R0,FW2                                              0543
         STH   R1,NEWLL(,R6)                                       0543
*       FREEAMT=NEWLL-(LL+MINIMUM); /* RESET FREEAMT                 */
         L     R7,BUFBASE(,COMONPTR)                               0544
         L     R14,@PC00005                                        0544
         LH    R15,LL(,R7)                                         0544
         AL    R15,MINIMUM(,R14)                                   0544
         SLR   R1,R15                                              0544
         ST    R1,FREEAMT(,COMONPTR)                               0544
*       NEWOO=F0;                   /* INIT OFFSET TO ZERO           */
         SLR   R7,R7                                               0545
         STH   R7,NEWOO(,R6)                                       0545
*     END;                          /*                               */
*   END GETMORE;                                                   0547
@EL00005 DS    0H                                                  0547
@EF00005 DS    0H                                                  0547
@ER00005 LM    R14,R12,12(R13)                                     0547
         BR    R14                                                 0547
*                                                                  0548
*   /*****************************************************************/
*   /*                                                               */
*   /* REMOVE ONE CHARACTER FROM BUFFER                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0548
*SQUASH:                                                           0548
*   PROC;                                                          0548
SQUASH   STM   R14,R12,12(R13)                                     0548
*   RFY                                                            0549
*    (R2,                                                          0549
*     R3,                                                          0549
*     R4,                                                          0549
*     R5) RSTD;                     /* RESTRICT REGISTERS            */
*   R2=ADDR(C(I));                  /* ADDRESS OF 'TO'               */
         L     R14,I(,COMONPTR)                                    0550
         L     R15,BUFBASE(,COMONPTR)                              0550
         LA    R2,C-1(R14,R15)                                     0550
*   R4=ADDR(C(I+F1));               /* ADDRESS OF 'FROM'             */
         LA    R4,C(R14,R15)                                       0551
*   R3=LL-(I+F3);                   /* LENGTH OF 'TO'                */
         AL    R14,FW3                                             0552
         LCR   R14,R14                                             0552
         AH    R14,LL(,R15)                                        0552
         LR    R3,R14                                              0552
*   R5=(R3-F1) BLANKS;              /* LENGTH OF 'FROM' AND PADDING
*                                      CHARACTER FOR LONGER 'TO' AREA*/
         LR    R5,R3                                               0553
         BCTR  R5,0                                                0553
         O     R5,HIBLANK                                          0553
*   MVCL(R2,R4);                    /* SQUASH BUFFER                 */
         MVCL  R2,R4                                               0554
*   RFY                                                            0555
*    (R2,                                                          0555
*     R3,                                                          0555
*     R4,                                                          0555
*     R5) UNRSTD;                   /* RELEASE REGISTERS             */
*   FREEAMT=FREEAMT+F1;             /* ADD REMOVED BYTE TO FREEAMT   */
         LA    R6,1                                                0556
         AL    R6,FREEAMT(,COMONPTR)                               0556
         ST    R6,FREEAMT(,COMONPTR)                               0556
*   END SQUASH;                                                    0557
@EL00006 DS    0H                                                  0557
@EF00006 DS    0H                                                  0557
@ER00006 LM    R14,R12,12(R13)                                     0557
         BR    R14                                                 0557
*                                                                  0558
*   /*****************************************************************/
*   /*                                                               */
*   /* RETURN POINTER UPDATE ROUTINE                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0558
*RETUPDT:                                                          0558
*   PROC(NEXTCMD);                                                 0558
RETUPDT  STM   R14,R12,12(R13)                                     0558
         MVC   @PC00007(4),0(R1)                                   0558
*   DCL                                                            0559
*     NEXTCMD FIXED(31);            /* THE NEXT COMMAND AFTER THE ONE
*                                      INTERRUPTED FROM              */
*   RETPTR2=RETPTR;                 /* SWAP AND SAVE RETURN          */
         L     R7,EXECDPTR(,COMONPTR)                              0560
         L     R6,RETPTR(,R7)                                      0560
         ST    R6,RETPTR2(,R7)                                     0560
*   RETPTR=NEXTCMD;                 /* SAVE ANSWER                   */
         L     R6,@PC00007                                         0561
         L     R6,NEXTCMD(,R6)                                     0561
         ST    R6,RETPTR(,R7)                                      0561
*   END RETUPDT;                    /*                               */
@EL00007 DS    0H                                                  0562
@EF00007 DS    0H                                                  0562
@ER00007 LM    R14,R12,12(R13)                                     0562
         BR    R14                                                 0562
*                                                                  0563
*   /*****************************************************************/
*   /*                                                               */
*   /* SUBSTRING FUNCTION                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0563
*SUBSTRTN:                                                         0563
*   PROC OPTIONS(SAVEAREA);                                        0563
SUBSTRTN STM   R14,R12,12(R13)                                     0563
         ST    R13,@SA00008+4                                      0563
         LA    R14,@SA00008                                        0563
         ST    R14,8(,R13)                                         0563
         LR    R13,R14                                             0563
*   CALL WAITRTN;                   /* CHECK IF '&' VARIABLE IN RNGE */
         BAL   R14,WAITRTN                                         0564
*   IF WAIT=NO&ERROR=F0 THEN        /* IF OK TO PROCEED THEN         */
         TM    WAIT(COMONPTR),B'00010000'                          0565
         BNZ   @RF00565                                            0565
         L     R7,ERROR                                            0565
         LTR   R7,R7                                               0565
         BNZ   @RF00565                                            0565
*     DO;                           /* GET RANGE TO PROCESS          */
*       CSAVE=C(I-F1:I);            /* SAVE ORIGINAL BUFFER          */
         L     R14,I(,COMONPTR)                                    0567
         L     R15,BUFBASE(,COMONPTR)                              0567
         ALR   R14,R15                                             0567
         MVC   CSAVE(2),C-2(R14)                                   0567
*       C(I-F1:I)=XEQUAL;           /* MAKE RANGE LOOK LINE SET STMT */
         L     R14,I(,COMONPTR)                                    0568
         ALR   R14,R15                                             0568
         MVC   C-2(2,R14),$XEQUALS                                 0568
*       BUFPTR=ADDR(C(I-F1));       /* POINT TO DUMMY SET STATEMENT  */
         L     R14,I(,COMONPTR)                                    0569
         LA    R15,C-2(R14,R15)                                    0569
         ST    R15,BUFPTR(,COMONPTR)                               0569
*       DO CLEN=F3 TO M-I+F1 WHILE BUF(CLEN)^=COLON&BUF(CLEN)^=COMMA;
         LA    R0,3                                                0570
         B     @DE00570                                            0570
@DL00570 LH    R1,CLEN(,COMONPTR)                                  0570
         L     R2,BUFPTR(,COMONPTR)                                0570
         ALR   R1,R2                                               0570
         BCTR  R1,0                                                0570
         CLI   BUF(R1),C':'                                        0570
         BE    @DC00570                                            0570
         LH    R3,CLEN(,COMONPTR)                                  0570
         ALR   R2,R3                                               0570
         BCTR  R2,0                                                0570
         CLI   BUF(R2),C','                                        0570
         BE    @DC00570                                            0570
*                                   /*                               */
*       END;                        /* AND LENGTH OF DUMMY STMT      */
         LA    R0,1                                                0571
         AH    R0,CLEN(,COMONPTR)                                  0571
@DE00570 STH   R0,CLEN(,COMONPTR)                                  0571
         L     R1,M                                                0571
         SL    R1,I(,COMONPTR)                                     0571
         AL    R1,FW1                                              0571
         CR    R0,R1                                               0571
         BNH   @DL00570                                            0571
@DC00570 DS    0H                                                  0572
*       IF BUF(CLEN)=':' THEN       /* IF COLON FOUND, THE SET RANGE */
         LH    R1,CLEN(,COMONPTR)                                  0572
         L     R2,BUFPTR(,COMONPTR)                                0572
         ALR   R2,R1                                               0572
         BCTR  R2,0                                                0572
         CLI   BUF(R2),C':'                                        0572
         BNE   @RF00572                                            0572
*         RANGE=YES;                /* SWITCH                        */
         OI    RANGE(COMONPTR),B'00001000'                         0573
*       ELSE                        /* CHECK FOR STRING DELIM        */
*         IF BUF(CLEN)=COMMA THEN   /* IF IT IS                      */
         B     @RC00572                                            0574
@RF00572 LH    R3,CLEN(,COMONPTR)                                  0574
         L     R2,BUFPTR(,COMONPTR)                                0574
         ALR   R3,R2                                               0574
         BCTR  R3,0                                                0574
         CLI   BUF(R3),C','                                        0574
         BNE   @RF00574                                            0574
*           DO;                     /* INIT INSERT START AND LENGTH  */
*             INSRTDA=ADDR(BUF(CLEN+F1));/* BEGIN OF STRING          */
         LH    R3,CLEN(,COMONPTR)                                  0576
         LA    R4,BUF(R3,R2)                                       0576
         ST    R4,INSRTDA                                          0576
*             INSRTLN=ADDR(C(M))-INSRTDA;/* LENGTH OF STRING         */
         L     R1,BUFBASE(,COMONPTR)                               0577
         L     R5,M                                                0577
         LA    R5,C-1(R5,R1)                                       0577
         SLR   R5,R4                                               0577
         ST    R5,INSRTLN                                          0577
*             RANGE=NO;             /* RE-INIT RANGE SWITCH  @ZA24504*/
         NI    RANGE(COMONPTR),B'11110111'                         0578
*           END;                    /*                               */
*       IF ERROR=F0 THEN            /* IF OK UNTIL NOW               */
@RF00574 DS    0H                                                  0580
@RC00572 SLR   R6,R6                                               0580
         C     R6,ERROR                                            0580
         BNE   @RF00580                                            0580
*         DO;                       /* THEN CONTINUE                 */
*           CLEN=CLEN-F1;           /* DECREMENT CLEN FROM DO INCR   */
         LH    R7,CLEN(,COMONPTR)                                  0582
         BCTR  R7,0                                                0582
         STH   R7,CLEN(,COMONPTR)                                  0582
*           TYPE=F0;                /* ALLOW ONLY NUMERIC STMT       */
         ST    R6,TYPE(,COMONPTR)                                  0583
*           LEN1=CLEN;              /* SAVE LENGTH OF FIRST STMT     */
         ST    R7,LEN1                                             0584
*           RFY                                                    0585
*            (R15) RSTD;            /* RESTRICT R15 FOR RETURNCD     */
*           CALL IKJCT434(BUF,CLEN,TYPE,OUTA1);/* PROCESS EXPRESSOIN */
         L     R14,BUFPTR(,COMONPTR)                               0586
         ST    R14,@AL00001                                        0586
         LA    R14,CLEN(,COMONPTR)                                 0586
         ST    R14,@AL00001+4                                      0586
         LA    R14,TYPE(,COMONPTR)                                 0586
         ST    R14,@AL00001+8                                      0586
         LA    R14,OUTA1                                           0586
         ST    R14,@AL00001+12                                     0586
         L     R15,IKJCT434                                        0586
         LA    R1,@AL00001                                         0586
         BALR  R14,R15                                             0586
*           ERROR=R15;              /* SAVE ERROR CODE               */
         ST    R15,ERROR                                           0587
*           C(I-F1:I)=CSAVE;        /* RESTORE ORIGINAL BUFFER       */
         L     R14,I(,COMONPTR)                                    0588
         L     R1,BUFBASE(,COMONPTR)                               0588
         ALR   R1,R14                                              0588
         MVC   C-2(2,R1),CSAVE                                     0588
*           RFY                                                    0589
*            (R15) UNRSTD;          /* RELEASE R15                   */
*                                                                  0590
*           /*********************************************************/
*           /*                                                       */
*           /* PROCESS SUBSTRING                                     */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0590
*           IF ERROR=F0 THEN        /* IF OK                         */
         L     R2,ERROR                                            0590
         LTR   R2,R2                                               0590
         BNZ   @RF00590                                            0590
*             DO;                   /* CONVERT ANSWER TO USEABLE     */
*               CALL CONVERT;       /* FORM                          */
         BAL   R14,CONVERT                                         0592
*               V1=V2;              /* SET START OF RANGE            */
         L     R4,V2                                               0593
         ST    R4,V1                                               0593
*               IF ERROR=F0&RANGE=YES THEN/* IF RANGE, THEN FIND   0594
*                                      VALUE 2                       */
         L     R5,ERROR                                            0594
         LTR   R5,R5                                               0594
         BNZ   @RF00594                                            0594
         TM    RANGE(COMONPTR),B'00001000'                         0594
         BNO   @RF00594                                            0594
*                 DO;               /*                               */
*                   BUFPTR=ADDR(BUF(LEN1));/* POINT TO DUMMY STMT  0596
*                                      NUMBER 2                      */
         L     R1,BUFPTR(,COMONPTR)                                0596
         L     R2,LEN1                                             0596
         BCTR  R1,0                                                0596
         LA    R3,BUF(R2,R1)                                       0596
         ST    R3,BUFPTR(,COMONPTR)                                0596
*                   CSAVE=BUF(F1:F2);/* SAVE ORIGINAL BUFFER         */
         MVC   CSAVE(2),BUF(R3)                                    0597
*                   BUF(F1:F2)=XEQUAL;/* CREATE DUMMY STMT           */
         MVC   BUF(2,R3),$XEQUALS                                  0598
*                   DO CLEN=F3 TO M-(I+LEN1)+F2 WHILE BUF(CLEN)^=COMMA;
         LA    R4,3                                                0599
         B     @DE00599                                            0599
@DL00599 LH    R1,CLEN(,COMONPTR)                                  0599
         L     R2,BUFPTR(,COMONPTR)                                0599
         ALR   R2,R1                                               0599
         BCTR  R2,0                                                0599
         CLI   BUF(R2),C','                                        0599
         BE    @DC00599                                            0599
*                   END;                                           0600
         LA    R4,1                                                0600
         AH    R4,CLEN(,COMONPTR)                                  0600
@DE00599 STH   R4,CLEN(,COMONPTR)                                  0600
         L     R5,I(,COMONPTR)                                     0600
         AL    R5,LEN1                                             0600
         LCR   R5,R5                                               0600
         AL    R5,M                                                0600
         AL    R5,FW2                                              0600
         CR    R4,R5                                               0600
         BNH   @DL00599                                            0600
@DC00599 DS    0H                                                  0601
*                   INSRTDA=ADDR(BUF(CLEN+1));/* POINT TO INSERT DATA*/
         LH    R6,CLEN(,COMONPTR)                                  0601
         L     R7,BUFPTR(,COMONPTR)                                0601
         LA    R14,BUF(R6,R7)                                      0601
         ST    R14,INSRTDA                                         0601
*                   INSRTLN=ADDR(C(M))-INSRTDA;/* GET LENGTH OF DATA */
         L     R1,BUFBASE(,COMONPTR)                               0602
         L     R15,M                                               0602
         LA    R15,C-1(R15,R1)                                     0602
         SLR   R15,R14                                             0602
         ST    R15,INSRTLN                                         0602
*                   CLEN=CLEN-F1;   /* BACK PAST COMMA               */
         BCTR  R6,0                                                0603
         STH   R6,CLEN(,COMONPTR)                                  0603
*                   TYPE=F0;        /* ALLOW ONLY NUMERIC            */
         SLR   R6,R6                                               0604
         ST    R6,TYPE(,COMONPTR)                                  0604
*                   RFY                                            0605
*                    (R15) RSTD;    /* RESTRICT R15 FOR RETURN CODE  */
*                   CALL IKJCT434(BUF,CLEN,TYPE,OUTA1);/* PROCESS  0606
*                                      NUMBER 2                      */
         ST    R7,@AL00001                                         0606
         LA    R14,CLEN(,COMONPTR)                                 0606
         ST    R14,@AL00001+4                                      0606
         LA    R14,TYPE(,COMONPTR)                                 0606
         ST    R14,@AL00001+8                                      0606
         LA    R14,OUTA1                                           0606
         ST    R14,@AL00001+12                                     0606
         L     R15,IKJCT434                                        0606
         LA    R1,@AL00001                                         0606
         BALR  R14,R15                                             0606
*                   ERROR=R15;      /* SAVE ERROR CODE               */
         ST    R15,ERROR                                           0607
*                   BUF(F1:F2)=CSAVE;/* RESTORE OLD BUFFER           */
         L     R14,BUFPTR(,COMONPTR)                               0608
         MVC   BUF(2,R14),CSAVE                                    0608
*                   RFY                                            0609
*                    (R15) UNRSTD;  /* RELEASE R15                   */
*                   IF ERROR=F0 THEN/* IF OKAY                       */
         L     R15,ERROR                                           0610
         LTR   R15,R15                                             0610
         BNZ   @RF00610                                            0610
*                     DO;           /* CHECK FOR VALID RANGE         */
*                       CALL CONVERT;/* CONVERT NUMBER 2 TO USABLE   */
         BAL   R14,CONVERT                                         0612
*                       IF ERROR=F0&V1>V2 THEN/* FORM AND CHECK RANGE*/
         L     R0,ERROR                                            0613
         LTR   R0,R0                                               0613
         BNZ   @RF00613                                            0613
         L     R1,V1                                               0613
         C     R1,V2                                               0613
         BNH   @RF00613                                            0613
*                         ERROR=E912;/* SET ERROR CODE               */
         MVC   ERROR(4),FW912                                      0614
*                     END;          /*                               */
@RF00613 DS    0H                                                  0616
*                 END;                                             0616
@RF00610 DS    0H                                                  0617
*               IF ERROR=F0 THEN    /* IF EVERYTHING STILL OK        */
@RF00594 SLR   R2,R2                                               0617
         C     R2,ERROR                                            0617
         BNE   @RF00617                                            0617
*                 IF V2>INSRTLN V1=F0 THEN/* IF OUTSIDE RANGE, SET 0618
*                                      ERROR                         */
         L     R3,V2                                               0618
         C     R3,INSRTLN                                          0618
         BH    @RT00618                                            0618
         C     R2,V1                                               0618
         BNE   @RF00618                                            0618
@RT00618 DS    0H                                                  0619
*                   ERROR=E932;     /* INDICATOR                     */
         MVC   ERROR(4),FW932                                      0619
*                 ELSE              /*                               */
*                   DO;             /* SET UP INSERT INFO            */
         B     @RC00618                                            0620
@RF00618 DS    0H                                                  0621
*                     INSRTLN=V2-V1+F1;/* LENGTH OF INSERT DATA      */
         LA    R4,1                                                0621
         L     R5,V1                                               0621
         L     R6,V2                                               0621
         SLR   R6,R5                                               0621
         ALR   R6,R4                                               0621
         ST    R6,INSRTLN                                          0621
*                     INSRTDA=INSRTDA+V1-F1;/* POINTER TO INSERT DATA*/
         AL    R5,INSRTDA                                          0622
         BCTR  R5,0                                                0622
         ST    R5,INSRTDA                                          0622
*                     DO I=1 TO INSRTLN;/* NUMBER OF CHARS           */
         B     @DE00623                                            0623
@DL00623 DS    0H                                                  0624
*                       TR(INSRTCHR(I),TRTABDN);/* FOLD TO SPCL CHRS */
         L     R1,I(,COMONPTR)                                     0624
         L     R2,INSRTDA                                          0624
         ALR   R2,R1                                               0624
         BCTR  R2,0                                                0624
         TR    INSRTCHR(1,R2),TRTABDN                              0624
*                     END;          /*                               */
         LA    R4,1                                                0625
         AL    R4,I(,COMONPTR)                                     0625
@DE00623 ST    R4,I(,COMONPTR)                                     0625
         C     R4,INSRTLN                                          0625
         BNH   @DL00623                                            0625
*                     I=M+F1;       /* POINT I TO RESUME DATA        */
         LA    R5,1                                                0626
         AL    R5,M                                                0626
         ST    R5,I(,COMONPTR)                                     0626
*                   END;            /*                               */
*             END;                  /*                               */
*         END;                      /*                               */
*     END;                          /*                               */
*   END SUBSTRTN;                   /*                               */
@EL00008 L     R13,4(,R13)                                         0631
@EF00008 DS    0H                                                  0631
@ER00008 LM    R14,R12,12(R13)                                     0631
         BR    R14                                                 0631
*                                                                  0632
*   /*****************************************************************/
*   /*                                                               */
*   /* WAIT ROUTINE                                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0632
*WAITRTN:                                                          0632
*   PROC;                                                          0632
WAITRTN  STM   R14,R12,12(R13)                                     0632
*   PCTR=F1;                        /* INIT PAREN COUNTER            */
         MVC   PCTR(4),FW1                                         0633
*   SENTINAL=NO;                    /* CLEAR SWITCH                  */
*   FOLD=YES;                       /* INDICATE POSSIBLE FOLD        */
         OI    FOLD(COMONPTR),B'00010000'                          0635
         NI    SENTINAL(COMONPTR),B'01111111'                      0635
*   M=I;                            /* START OF PSTRING SCAN         */
         L     R6,I(,COMONPTR)                                     0636
         ST    R6,M                                                0636
*   IF M>LL-(FREEAMT+F4) (C(M)^=LPAREN&/* PAST BFR OR NO '('         */
*       C(M)^=SENTNLL) THEN         /* OR LEFT SENTINAL              */
         L     R7,BUFBASE(,COMONPTR)                               0637
         LA    R14,4                                               0637
         AL    R14,FREEAMT(,COMONPTR)                              0637
         LCR   R14,R14                                             0637
         AH    R14,LL(,R7)                                         0637
         CR    R6,R14                                              0637
         BH    @RT00637                                            0637
         ALR   R6,R7                                               0637
         CLI   C-1(R6),C'('                                        0637
         BE    @RF00637                                            0637
         L     R6,M                                                0637
         ALR   R7,R6                                               0637
         CLI   C-1(R7),X'01'                                       0637
         BE    @RF00637                                            0637
@RT00637 DS    0H                                                  0638
*     ERROR=E936;                   /* SET ERROR CODE                */
         MVC   ERROR(4),FW936                                      0638
*   ELSE                            /* OTHERWISE                     */
*     DO;                           /* FIND END OF BIF               */
         B     @RC00637                                            0639
@RF00637 DS    0H                                                  0640
*       IF C(M)=SENTNLL THEN        /* IF SENTINAL PROCESSING        */
         L     R1,BUFBASE(,COMONPTR)                               0640
         AL    R1,M                                                0640
         CLI   C-1(R1),X'01'                                       0640
         BNE   @RF00640                                            0640
*         SENTINAL=YES;             /* SETIN SWITCH                  */
         OI    SENTINAL(COMONPTR),B'10000000'                      0641
*       ELSE                        /* OTHERWISE                     */
*         C(M)=SENTNLL;             /* FLAG AS SENTINAL PROCESS      */
         B     @RC00640                                            0642
@RF00640 L     R1,BUFBASE(,COMONPTR)                               0642
         AL    R1,M                                                0642
         MVI   C-1(R1),X'01'                                       0642
*       DO M=M+F1 TO LL-(F4+FREEAMT) WHILE PCTR>F0;/* FIND END OF BF */
@RC00640 LA    R2,1                                                0643
         AL    R2,M                                                0643
         B     @DE00643                                            0643
@DL00643 L     R3,PCTR                                             0643
         LTR   R3,R3                                               0643
         BNP   @DC00643                                            0643
*         IF M<LL-(F4+FREEAMT)&C(M:M+F1)=DAMPSAND THEN/* NOT D AMP   */
         L     R3,BUFBASE(,COMONPTR)                               0644
         LA    R4,4                                                0644
         AL    R4,FREEAMT(,COMONPTR)                               0644
         LCR   R4,R4                                               0644
         AH    R4,LL(,R3)                                          0644
         CR    R2,R4                                               0644
         BNL   @RF00644                                            0644
         ALR   R3,R2                                               0644
         CLC   C-1(2,R3),$DBLAMPR                                  0644
         BNE   @RF00644                                            0644
*           M=M+F1;                 /* SKIP OVER                     */
         AL    R2,FW1                                              0645
         ST    R2,M                                                0645
*         ELSE                      /* CHECK IF A SINGLE AMPERSAND   */
*           IF C(M)=AMPSAND THEN    /* IF IT IS THEN                 */
         B     @RC00644                                            0646
@RF00644 L     R1,BUFBASE(,COMONPTR)                               0646
         AL    R1,M                                                0646
         CLI   C-1(R1),C'&&'                                       0646
         BNE   @RF00646                                            0646
         TM    LCLFLAGS,$#NRSTR     PROCESSING &NRSTR?          ZP60014
         BNO   NORMWAIT             NO, SCAN AS NORMAL          ZP60014
         CLC   Z,FW1                ON FIRST SCAN?              ZP60014
         BNH   NORMWAIT             YES, SCAN AS NORMAL         ZP60014
         CLC   C(5,R1),$NRSTR       REMOVING &NRSTR?            ZP60014
         BNE   @RF00646             NO, SKIP SUBSTITUTION       ZP60014
NORMWAIT EQU   *                    DO NORMAL SUBSTITUTION      ZP60014
*             WAIT=YES;             /* SET WAIT SWITCH               */
         OI    WAIT(COMONPTR),B'00010000'                          0647
*           ELSE                    /* OTHERWISE                     */
*             IF C(M)=SENTNLR THEN  /* IF A SENTINAL                 */
         B     @RC00646                                            0648
@RF00646 L     R2,M                                                0648
         L     R1,BUFBASE(,COMONPTR)                               0648
         ALR   R1,R2                                               0648
         CLI   C-1(R1),X'02'                                       0648
         BNE   @RF00648                                            0648
*               DO;                 /* CHECK IF SENTINAL MODE        */
*                 PCTR=F0;          /* TERMINATE SCAN                */
         SLR   R3,R3                                               0650
         ST    R3,PCTR                                             0650
*                 IF SENTINAL=NO THEN/* IF IN SENTINAL MODE          */
         TM    SENTINAL(COMONPTR),B'10000000'                      0651
         BNZ   @RF00651                                            0651
*                   M=M-F1;         /* DONT COUNT SENTINAL           */
         BCTR  R2,0                                                0652
         ST    R2,M                                                0652
*               END;                /* IF A CLOSE PAREN              */
*             ELSE                  /* IF NOT SENTINAL               */
*               IF SENTINAL=NO THEN /* IF IN SENTINAL MODE           */
         B     @RC00648                                            0654
@RF00648 TM    SENTINAL(COMONPTR),B'10000000'                      0654
         BNZ   @RF00654                                            0654
*                 DO;               /* SKIP PAREN CHECK              */
*                   IF C(M)=RPAREN THEN/* IF A CLOSE PAREN           */
         L     R4,M                                                0656
         L     R5,BUFBASE(,COMONPTR)                               0656
         ALR   R4,R5                                               0656
         CLI   C-1(R4),C')'                                        0656
         BNE   @RF00656                                            0656
*                     DO;           /* DECREMENT COUNT               */
*                       PCTR=PCTR-F1;/*                              */
         L     R4,PCTR                                             0658
         BCTR  R4,0                                                0658
         ST    R4,PCTR                                             0658
*                       IF PCTR=F0 THEN/* IF PAREN COUNT IS ZERO     */
         LTR   R4,R4                                               0659
         BNZ   @RF00659                                            0659
*                         C(M)=SENTNLR;/* PAREN TO SENTINAL          */
         L     R4,M                                                0660
         ALR   R5,R4                                               0660
         MVI   C-1(R5),X'02'                                       0660
*                     END;          /*                               */
*                   ELSE            /* OTHERWISE                     */
*                     IF C(M)=LPAREN THEN/* IF AN OPEN PAREN         */
         B     @RC00656                                            0662
@RF00656 L     R1,BUFBASE(,COMONPTR)                               0662
         AL    R1,M                                                0662
         CLI   C-1(R1),C'('                                        0662
         BNE   @RF00662                                            0662
*                       PCTR=PCTR+F1;/* INCREMENT THE PAREN COUNT    */
         LA    R2,1                                                0663
         AL    R2,PCTR                                             0663
         ST    R2,PCTR                                             0663
*                 END;              /*                               */
@RF00662 DS    0H                                                  0664
@RC00656 DS    0H                                                  0665
*       END;                        /*                               */
@RF00654 DS    0H                                                  0665
@RC00648 DS    0H                                                  0665
@RC00646 DS    0H                                                  0665
@RC00644 LA    R2,1                                                0665
         AL    R2,M                                                0665
@DE00643 ST    R2,M                                                0665
         L     R3,BUFBASE(,COMONPTR)                               0665
         LA    R4,4                                                0665
         AL    R4,FREEAMT(,COMONPTR)                               0665
         LCR   R4,R4                                               0665
         AH    R4,LL(,R3)                                          0665
         CR    R2,R4                                               0665
         BNH   @DL00643                                            0665
@DC00643 DS    0H                                                  0666
*     END;                          /*                               */
*   LEN=M-V;                        /* ADJUST LEN FOR WHOLE BIF      */
@RC00637 L     R5,M                                                0667
         LR    R4,R5                                               0667
         SL    R4,V                                                0667
         ST    R4,LEN(,COMONPTR)                                   0667
*   IF PCTR=F0 THEN                 /* IF CLOSE PAREN FOUND          */
         L     R4,PCTR                                             0668
         LTR   R4,R4                                               0668
         BNZ   @RF00668                                            0668
*     M=M-F1;                       /* DECREMENT M                   */
         BCTR  R5,0                                                0669
         ST    R5,M                                                0669
*   END WAITRTN;                                                   0670
@EL00009 DS    0H                                                  0670
@EF00009 DS    0H                                                  0670
@ER00009 LM    R14,R12,12(R13)                                     0670
         BR    R14                                                 0670
*                                                                  0671
*   /*****************************************************************/
*   /*                                                               */
*   /* CONVERT ROUTINE                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0671
*CONVERT:                                                          0671
*   PROC;                                                          0671
CONVERT  STM   R14,R12,12(R13)                                     0671
*   DCL                                                            0672
*     NDX FIXED(31);                /* INDEX TO ANSWER               */
*   AREA=ZEROS;                     /* PLACE ZEROS IN AREA           */
         MVC   AREA(16),$16ZEROS                                   0673
*   IF ANSWER(F1)=MINUS THEN        /* IF ANSWER IS NEGATIVE         */
         L     R1,ANSPTR(,COMONPTR)                                0674
         CLI   ANSWER(R1),C'-'                                     0674
         BNE   @RF00674                                            0674
*     ERCOM=E920;                   /* SET ERROR CODE                */
         MVC   ERCOM(4,COMONPTR),FW920                             0675
*   ELSE                            /* OTHERWISE OK                  */
*     DO;                           /* BUILD PACKAREA                */
         B     @RC00674                                            0676
@RF00674 DS    0H                                                  0677
*       IF CLEN<F1 CLEN>F16 THEN    /* IF ANS NOT NUMERIC OR NULL    */
         LH    R2,CLEN(,COMONPTR)                                  0677
         LTR   R2,R2                                               0677
         BNP   @RT00677                                            0677
         C     R2,FW16                                             0677
         BNH   @RF00677                                            0677
@RT00677 DS    0H                                                  0678
*         ERCOM=E924;               /* SET ERROR CODE                */
         MVC   ERCOM(4,COMONPTR),FW924                             0678
*       ELSE                        /* IF OK THEN MOVE INTO AREA     */
*         AREA(F17-CLEN:F16)=ANSWER(F1:CLEN);/* MOVE IN VARIABLE   0679
*                                      ANSWER                        */
         B     @RC00677                                            0679
@RF00677 LA    R3,17                                               0679
         SH    R3,CLEN(,COMONPTR)                                  0679
         LA    R2,AREA-1(R3)                                       0679
         LCR   R3,R3                                               0679
         AL    R3,FW16                                             0679
         L     R1,ANSPTR(,COMONPTR)                                0679
         EX    R3,@SM01104                                         0679
*       DO NDX=F16 TO F1 BY-F1 WHILE ERCOM=F0;/* CHECK FOR ALPHA   0680
*                                      ANSWER                        */
@RC00677 LA    R2,16                                               0680
         ST    R2,NDX                                              0680
@DL00680 L     R3,ERCOM(,COMONPTR)                                 0680
         LTR   R3,R3                                               0680
         BNZ   @DC00680                                            0680
*         IF AREA(NDX)<CC0 AREA(NDX)>CC9 THEN/*                      */
         LA    R3,AREA-1(R2)                                       0681
         CLI   0(R3),C'0'                                          0681
         BL    @RT00681                                            0681
         LA    R3,AREA-1(R2)                                       0681
         CLI   0(R3),C'9'                                          0681
         BNH   @RF00681                                            0681
@RT00681 DS    0H                                                  0682
*           ERCOM=E916;             /* SET ERROR CODE                */
         MVC   ERCOM(4,COMONPTR),FW916                             0682
*       END;                                                       0683
@RF00681 SLR   R2,R2                                               0683
         BCTR  R2,0                                                0683
         AL    R2,NDX                                              0683
         ST    R2,NDX                                              0683
         LTR   R2,R2                                               0683
         BP    @DL00680                                            0683
@DC00680 DS    0H                                                  0684
*       IF ERCOM=F0 THEN            /* IF NO ERROR SO FAR            */
         L     R3,ERCOM(,COMONPTR)                                 0684
         LTR   R3,R3                                               0684
         BNZ   @RF00684                                            0684
*         DO;                       /* PACK INTO USABLE FORM         */
*           PACK(WORKAREA,AREA);    /* ISSUE PACK                    */
         PACK  WORKAREA(8),AREA(16)                                0686
*           CVB(V2,WORKAREA);       /* ISSUE CONVERT TO BINARY       */
         CVB   R4,WORKAREA                                         0687
         ST    R4,V2                                               0687
*           CNVTANS=V2;             /* PLACE IN COMMON AREA          */
         ST    R4,CNVTANS(,COMONPTR)                               0688
*         END;                      /*                               */
*     END;                                                         0690
@RF00684 DS    0H                                                  0691
*   ERROR=ERCOM;                    /* SAVE ERROR FOR INT USE        */
@RC00674 L     R6,ERCOM(,COMONPTR)                                 0691
         ST    R6,ERROR                                            0691
*   END CONVERT;                                                   0692
@EL00010 DS    0H                                                  0692
@EF00010 DS    0H                                                  0692
@ER00010 LM    R14,R12,12(R13)                                     0692
         BR    R14                                                 0692
*                                                                  0693
*   /*****************************************************************/
*   /*                                                               */
*   /* IMMEDIATE VALUE NEEDED                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0693
*IMVALRTN:                                                         0693
*   PROC;                                                          0693
IMVALRTN STM   R14,R12,@SA00011                                    0693
*   INDEX=F0;                       /* INIT INDEX                    */
         SLR   R7,R7                                               0694
         ST    R7,INDEX                                            0694
*   DO N=1 TO DIM(IMMDATA) WHILE INDEX=F0;/* FIND BUILT IN FUNCTION  */
         LA    R14,1                                               0695
         ST    R14,N                                               0695
@DL00695 L     R15,INDEX                                           0695
         LTR   R15,R15                                             0695
         BNZ   @DC00695                                            0695
*     IF IMMLEN(N)=SNTLNG&          /* SAME LENGTH                   */
*         IMMDATA(N,1:SNTLNG)=C(V+F1:V+SNTLNG) THEN/* SAME TEXT      */
         LR    R15,R14                                             0696
         SLA   R15,4                                               0696
         L     R1,SNTELPTR(,COMONPTR)                              0696
         LH    R2,SNTLNG(,R1)                                      0696
         CH    R2,IMMLEN-16(R15)                                   0696
         BNE   @RF00696                                            0696
         L     R1,BUFBASE(,COMONPTR)                               0696
         BCTR  R2,0                                                0696
         LA    R3,IMMDATA-16(R15)                                  0696
         AL    R1,V                                                0696
         EX    R2,@SC01106                                         0696
         BNE   @RF00696                                            0696
*       INDEX=N;                    /* SET INDEX TO ROUTINE          */
         ST    R14,INDEX                                           0697
*   END;                                                           0698
@RF00696 LA    R14,1                                               0698
         AL    R14,N                                               0698
         ST    R14,N                                               0698
         C     R14,INDX#MAX                               ZP60014  0698
         BNH   @DL00695                                            0698
@DC00695 DS    0H                                                  0699
*   IF INDEX=F0 THEN                /* IF NO MATCH                   */
         L     R15,INDEX                                           0699
         LTR   R15,R15                                             0699
         BNZ   @RF00699                                            0699
*     ERROR=E999;                   /* SET ERROR CODE                */
         MVC   ERROR(4),FW999                                      0700
*   ELSE                            /* CHECK FOR &STR                */
*     CALL ROUTINE;                 /* PROCESS IMVAL                 */
         B     @RC00699                                            0701
@RF00699 L     R0,INDEX                                            0701
         SLA   R0,4                                                0701
         LR    R1,R0
         L     R15,VECTOR-16(R1)                                   0701
         BALR  R14,R15                                             0701
*   END;                                                           0702
@EL00011 DS    0H                                                  0702
@EF00011 DS    0H                                                  0702
@ER00011 LM    R14,R12,@SA00011                                    0702
         BR    R14                                                 0702
*                                                                  0703
*   /*****************************************************************/
*   /*                                                               */
*   /* TIME BUILT IN FUNCTION                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0703
*TIMERTN:                                                          0703
*   PROC;                                                          0703
TIMERTN  STM   R14,R12,@SA00012                                    0703
         LA    R2,IMMDATA-16(R1)    POINT TO FUNCTION NAME      ZP60014
*   RFY                                                            0704
*    (R0) RSTD;                     /* RESTRICT TIME REGISTER        */
*   GEN SETS(R0)(TIME DEC);         /* ISSUE TIME MACRO              */
         TIME  DEC
*   TEMPA=R0;                       /* SAVE TIME OF DAY              */
         ST    R0,TEMPA                                            0706
*   RFY                                                            0707
*    (R0) UNRSTD;                   /* RELEASE REGISTER              */
*   UNPK(TIMEOUT,TEMPA);            /* UNPACK TIME                   */
         UNPK  TIMEOUT(7),TEMPA(4)                                 0708
*   OUT1=HRS;                       /* HOURS                         */
         MVC   OUT1(2),HRS                                         0709
*   OUT2=MINUTES;                   /* MINUTES                       */
         MVC   OUT2(2),MINUTES                                     0710
*   OUT3=SEC;                       /* SECONDS                       */
         MVC   OUT3(2),SEC                                         0711
*   DELIM1=COLON;                   /* SEPARATE TIME ELEMENTS WITH   */
         MVI   DELIM1,C':'                                         0712
*   DELIM2=COLON;                   /* A COLON                       */
         MVI   DELIM2,C':'                                         0713
*   INSRTDA=ADDR(TIMEDATE);         /* POINT TO INSERT DATA          */
         LA    R0,TIMEDATE                                         0714
         ST    R0,INSRTDA                                          0714
*   INSRTLN=LENGTH(TIMEDATE);       /* SET LENGTH OF INSERT DATA     */
         MVC   INSRTLN(4),FW8                                      0715
         CLI   3(R2),C'S'           SYSSTIME?                   ZP60014
         BNE   @EL00012             NO, REALLY IS SYSTIME       ZP60014
         MVC   INSRTLN(4),FW5       YES, SET CORRECT LENGTH     ZP60014
*   END TIMERTN;                                                   0716
@EL00012 DS    0H                                                  0716
@EF00012 DS    0H                                                  0716
@ER00012 LM    R14,R12,@SA00012                                    0716
         BR    R14                                                 0716
*                                                                  0717
*   /*****************************************************************/
*   /*                                                               */
*   /* DATE BUILT IN FUNCTION                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0717
*DATERTN:                                                          0717
*   PROC;                                                          0717
DATERTN  STM   R14,R12,@SA00013                                    0717
         LA    R2,IMMDATA-16(R1)    POINT TO FUNCTION NAME      ZP60014
*   RFY                                                            0718
*    (R1) RSTD;                     /* RESTRICT DATE REG             */
*   GEN SETS(R1)(TIME DEC);         /* ISSUE TIME MACRO              */
         TIME  DEC
         LR    R14,R2               POINT TO FUNCTION NAME      ZP60014
*   TEMPA=R1;                       /* SAVE DATE                     */
         ST    R1,TEMPA                                            0720
         AP    TEMPA(4),YRS1900     CONVERT TO 4-DIGIT YEAR     ZP60014
         OI    TEMPA+3,X'0F'        RESTORE SIGN                ZP60014
         CLI   4(R14),C'J'          SYS4JDATE?                  ZP60014
         BE    ISJULIAN             YES                         ZP60014
         CLI   3(R14),C'J'          SYSJDATE?                   ZP60014
         BNE   NTJULIAN             NO                          ZP60014
ISJULIAN UNPK  TIMEDATE+1(7),TEMPA(4)                           ZP60014
         MVC   TIMEDATE(4),TIMEDATE+1                           ZP60014
         MVI   TIMEDATE+4,C'.'      GET YYYY.DDD                ZP60014
         LA    R1,TIMEDATE          POINT TO DATE DATA          ZP60014
         LA    R0,8                 GET DATE DATA LENGTH        ZP60014
         CLI   3(R14),C'4'          4-DIGIT YEAR REQUIRED?      ZP60014
         BE    HAVEDATE             YES                         ZP60014
         LA    R1,TIMEDATE+2        POINT TO DATE DATA          ZP60014
         LA    R0,6                 GET DATE DATA LENGTH        ZP60014
HAVEDATE ST    R1,INSRTDA           SET DATA ADDRESS            ZP60014
         ST    R0,INSRTLN           SET DATA LENGTH             ZP60014
         B     @EL00013                                         ZP60014
*                                                               ZP60014
NTJULIAN EQU   *                    NON-JULIAN DATE PROCESSING  ZP60014
*   RFY                                                            0721
*    (R1) UNRSTD;                   /* RELEASE DATE REGISTER         */
*   UNPK(DATEOUT,TEMPA);            /* UNPACK DATE                   */
         UNPK  DATEOUT(7),TEMPA(4)                        ZP60014  0722
*   PACK(WORKAREA,YR);              /* CONVERT YEAR TO USEABLE FORM  */
         PACK  WORKAREA(8),YR(4)                          ZP60014  0723
*   CVB(YEAR,WORKAREA);             /*                               */
         CVB   R1,WORKAREA                                         0724
         ST    R1,YEAR                                             0724
*   PACK(WORKAREA,DYS);             /* CONVERT DAYS TO USEABLE FORM  */
         PACK  WORKAREA(8),DYS(3)                                  0725
*   CVB(DAYS,WORKAREA);             /*                               */
         CVB   R0,WORKAREA                                         0726
         ST    R0,DAYS                                             0726
*   IF YEAR//F4=F0 THEN             /* IF A LEAP YEAR, SET LEAP      */
         LR    R2,R1                                               0727
         SRDA  R2,32                                               0727
         D     R2,FW4                                              0727
         LTR   R2,R2                                               0727
         BNZ   @RF00727                                            0727
*     LEAP=YES;                     /* YEAR SWITCH                   */
         OI    LEAP(COMONPTR),B'00000100'                          0728
*   ELSE                            /* IF NOT, TURN IT OFF           */
*     LEAP=NO;                      /*                               */
         B     @RC00727                                            0729
@RF00727 NI    LEAP(COMONPTR),B'11111011'                          0729
*   DO MONTH=1 TO DIM(DAYIN) WHILE DAYS>F0;/* SUBTRACT DAYS OF EACH
*                                      MONTH                         */
@RC00727 LA    R1,1                                                0730
         ST    R1,MONTH                                            0730
@DL00730 L     R2,DAYS                                             0730
         LTR   R2,R2                                               0730
         BNP   @DC00730                                            0730
*     DAYS=DAYS-DAYIN(MONTH);       /* UNTIL DAYS GOES NEGATIVE      */
         LR    R3,R1                                               0731
         ALR   R3,R3                                               0731
         SH    R2,DAYIN-2(R3)                                      0731
         ST    R2,DAYS                                             0731
*     IF MONTH=2&LEAP=YES THEN      /* IF LEAP YEAR, ADJUST FOR      */
         C     R1,FW2                                              0732
         BNE   @RF00732                                            0732
         TM    LEAP(COMONPTR),B'00000100'                          0732
         BNO   @RF00732                                            0732
*       DAYS=DAYS-F1;               /* EXTRA DAY IN FEBRUARY         */
         BCTR  R2,0                                                0733
         ST    R2,DAYS                                             0733
*   END;                            /*                               */
@RF00732 LA    R1,1                                                0734
         AL    R1,MONTH                                            0734
         ST    R1,MONTH                                            0734
         C     R1,FW12                                             0734
         BNH   @DL00730                                            0734
@DC00730 DS    0H                                                  0735
*   MONTH=MONTH-F1;                 /* ADJUST MONTH                  */
         L     R2,MONTH                                            0735
         BCTR  R2,0                                                0735
         ST    R2,MONTH                                            0735
*   DAYS=DAYS+DAYIN(MONTH);         /* ADD BACK DAYS                 */
         LR    R3,R2                                               0736
         ALR   R3,R3                                               0736
         LH    R3,DAYIN-2(R3)                                      0736
         AL    R3,DAYS                                             0736
         ST    R3,DAYS                                             0736
*   IF LEAP=YES&MONTH=FEBRUARY THEN /* IF LEAP YEAR, READJUST DAYS   */
         TM    LEAP(COMONPTR),B'00000100'                          0737
         BNO   @RF00737                                            0737
         C     R2,FW2                                              0737
         BNE   @RF00737                                            0737
*     DAYS=DAYS+F1;                 /*                               */
         AL    R3,FW1                                              0738
         ST    R3,DAYS                                             0738
*   CVD(MONTH,WORKAREA);            /* CONVERT MONTH AND DAY TO      */
@RF00737 L     R4,MONTH                                            0739
         CVD   R4,WORKAREA                                         0739
*   UNPK(OUT1,WORKAREA);            /* PRINTABLE FORM                */
         UNPK  OUT1(2),WORKAREA(8)                                 0740
*   OUT1(2)=OUT1(2) CC0;            /* INSURE PRINTABLE CHAR         */
         OI    OUT1+1,C'0'                                         0741
*   CVD(DAYS,WORKAREA);             /* DITTO FOR DAYS                */
         L     R5,DAYS                                             0742
         CVD   R5,WORKAREA                                         0742
*   UNPK(OUT2,WORKAREA);            /*                               */
         UNPK  OUT2(2),WORKAREA(8)                                 0743
*   OUT2(2)=OUT2(2) CC0;            /*                               */
         OI    OUT2+1,C'0'                                         0744
*   OUT3=YR;                        /* GET YEAR                      */
         MVC   OUT3(4),YR                                          0745
*   DELIM1=SLASH;                   /* SET DATE DELIMITERS TO SLASH  */
         MVI   DELIM1,C'/'                                         0746
*   DELIM2=SLASH;                   /*                               */
         MVI   DELIM2,C'/'                                         0747
*   INSRTDA=ADDR(TIMEDATE);         /* POINT TO INSERT DATA          */
         LA    R6,TIMEDATE                                         0748
         ST    R6,INSRTDA                                          0748
         MVC   INSRTLN(4),FW10      PREPARE FOR 4-DIGIT YEAR    ZP60014
         CLI   3(R14),C'4'          4-DIGIT YEAR REQUESTED?     ZP60014
         BNE   YEAR2DIG             NO                          ZP60014
         CLI   4(R14),C'D'          SYS4DATE?                   ZP60014
         BE    @EL00013             YES, ALL DONE               ZP60014
         MVC   TIMEDATE+5(5),TIMEDATE    MOVE MM/DD             ZP60014
         MVC   TIMEDATE(4),YR       SUPPLY 4-DIGIT YEAR         ZP60014
         MVI   TIMEDATE+4,C'/'      SUPPLY DELIMITER            ZP60014
         CLI   4(R14),C'S'          SYS4SDATE?                  ZP60014
         BE    @EL00013             YES, ALL DONE               ZP60014
         MVI   TIMEDATE+4,C'-'      NO, SUPPLY DELIMITERS       ZP60014
         MVI   TIMEDATE+7,C'-'          FOR SYS4IDATE           ZP60014
         B     @EL00013             ALL DONE                    ZP60014
YEAR2DIG EQU   *                                                ZP60014
         MVC   OUT3(2),OUT3+2       REMOVE CENTURY              ZP60014
*   INSRTLN=LENGTH(TIMEDATE);       /* SET INSERT DATA LENGTH        */
         MVC   INSRTLN(4),FW8                                      0749
         CLI   3(R14),C'D'          SYSDATE?                    ZP60014
         BE    @EL00013             YES, ALL DONE               ZP60014
         MVC   OUT3,OUT2            SHUFFLE DD RIGHT            ZP60014
         MVC   OUT2,OUT1            SHUFFLE MM RIGHT            ZP60014
         MVC   OUT1,YR+2            RELOAD YY - SYSSDATE DONE   ZP60014
*   END DATERTN;                                                   0750
@EL00013 DS    0H                                                  0750
@EF00013 DS    0H                                                  0750
@ER00013 LM    R14,R12,@SA00013                                    0750
         BR    R14                                                 0750
*                                                               ZP60014
*   /*****************************************************************/
*   /*                                                      ZP60014  */
*   /* TERMID BUILT IN FUNCTION                             ZP60014  */
*   /*                                                      ZP60014  */
*   /*****************************************************************/
*
TERMRTN  STM   R14,R12,12(R13)                                  ZP60014
         LA    R2,IMMDATA-16(R1)    POINT TO FUNCTION NAME           "
         GTSIZE
         CLI   3(R2),C'L'           SYSLTERM?                        "
         BE    HAVETERM             YES                              "
         LR    R0,R1                NO, MUST BE SYSWTERM             "
HAVETERM CVD   R0,WORKAREA          GET DIMENSION IN DECIMAL         "
         OI    WORKAREA+7,X'0F'     PREPARE FOR UNPACK               "
         UNPK  TIMEDATE(3),WORKAREA GET DIMENSION IN NUMERIC CHARS   "
         LA    R1,TIMEDATE          POINT TO DATA                    "
         LA    R2,3                 GET LENGTH OF DATA               "
         LA    R0,2                 GET MAXIMUM LEADING ZERO COUNT   "
TERMZERO CLI   0(R1),C'0'           LEADING ZERO?                    "
         BNE   TERMOKAY             NO, ALL READY                    "
         LA    R1,1(,R1)            YES, POINT PAST IT               "
         BCTR  R2,0                 DECREMENT LENGTH                 "
         BCT   R0,TERMZERO          CHECK FOR ANOTHER                "
TERMOKAY ST    R1,INSRTDA           POINT TO INSERT DATA             "
         ST    R2,INSRTLN           SET LENGTH OF INSERT DATA        "
         LM    R14,R12,12(R13)                                       "
         BR    R14                                              ZP60014
*                                                               ZP60014
*   /*****************************************************************/
*   /*                                                      ZP60014  */
*   /* CPU BUILT IN FUNCTION                                ZP60014  */
*   /*                                                      ZP60014  */
*   /*****************************************************************/
*
CPURTN   STM   R14,R12,12(R13)                                  ZP60014
         L     R2,PSAAOLD           POINT TO CURRENT ASCB            "
         LM    R0,R1,ASCBEJST-ASCB(R2)                               "
         SRDL  R0,12                GET TCB TIME IN MICROSECONDS     "
         D     R0,FW10K             CONVERT TO CENTISECONDS          "
         CVD   R1,WORKAREA          CONVERT TO DECIMAL               "
         OI    WORKAREA+7,X'0F'     PREPARE FOR UNPACK               "
         UNPK  AREA,WORKAREA        CONVERT TO NUMERIC CHARACTERS    "
         MVC   AREA(13),AREA+1      PROMOTE SECONDS                  "
         MVI   AREA+13,C'.'         INSERT DECIMAL POINT             "
         LA    R1,AREA              POINT TO START OF NUMBER         "
         LA    R2,12                GET MAX LEADING ZEROS TO CHOP    "
CPU0LOOP CLI   0(R1),C'0'           LEADING ZERO?                    "
         BNE   CPUTIMOK             NO, ALL READY                    "
         LA    R1,1(,R1)            YES, POINT PAST IT               "
         BCT   R2,CPU0LOOP          CHECK FOR ANOTHER                "
CPUTIMOK LA    R2,4(,R2)            GET DATA LENGTH                  "
         ST    R1,INSRTDA           POINT TO INSERT DATA             "
         ST    R2,INSRTLN           SET LENGTH OF INSERT DATA        "
         LM    R14,R12,12(R13)                                       "
         BR    R14                                              ZP60014
*                                                               ZP60014
*   /*****************************************************************/
*   /*                                                      ZP60014  */
*   /* SRV BUILT IN FUNCTION                                ZP60014  */
*   /*                                                      ZP60014  */
*   /*****************************************************************/
*
SRVRTN   STM   R14,R12,12(R13)                                  ZP60014
         LA    R1,AREA              POINT TO THREE WORDS             "
         SYSEVENT REQSERVC          GET ACCUMULATED SERVICE          "
         L     R1,AREA              LOAD JOB/SESSION SERVICE UNITS   "
         CVD   R1,WORKAREA          CONVERT TO DECIMAL               "
         MVC   AREA,ED15            LOAD EDIT MASK                   "
         LA    R1,AREA+15           PREPARE FOR ZERO (UNLIKELY)      "
         EDMK  AREA,WORKAREA        CONVERT TO NUMERIC CHARACTERS    "
         LA    R2,AREA+16           POINT PAST NUMBER                "
         SR    R2,R1                GET LENGTH OF NUMBER             "
         ST    R1,INSRTDA           POINT TO INSERT DATA             "
         ST    R2,INSRTLN           SET LENGTH OF INSERT DATA        "
         LM    R14,R12,12(R13)                                       "
         BR    R14                                              ZP60014
*                                                                  0751
*   /*****************************************************************/
*   /*                                                               */
*   /* LENGTH BUILT IN FUNCTION                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0751
*LENGRTN:                                                          0751
*   PROC;                                                          0751
LENGRTN  STM   R14,R12,@SA00014                                    0751
*   CALL SETUP;                     /* CHECK IF TO WAIT AND CALL     */
         BAL   R14,SETUP                                           0752
*   IF ERROR=F0&WAIT=NO THEN        /* EVALUATE P-STRING             */
         L     R7,ERROR                                            0753
         LTR   R7,R7                                               0753
         BNZ   @RF00753                                            0753
         TM    WAIT(COMONPTR),B'00010000'                          0753
         BNZ   @RF00753                                            0753
*     DO;                           /*                               */
*       CVD(CLEN,WORKAREA);         /* GET LENGTH IN PRINTABLE       */
         LH    R14,CLEN(,COMONPTR)                                 0755
         CVD   R14,WORKAREA                                        0755
*       UNPK(AREA,WORKAREA);        /* FORM FOR TABLE                */
         UNPK  AREA(16),WORKAREA(8)                                0756
*       AREA(16)=AREA(16) CC0;      /* INSURE NO SIGN                */
         OI    AREA+15,C'0'                                        0757
*       DO I=F16 TO F2 BY-F1 WHILE AREA(1)=CC0;/* LEFT JUSTIFY       */
         LA    R15,16                                              0758
         ST    R15,I(,COMONPTR)                                    0758
@DL00758 CLI   AREA,C'0'                                           0758
         BNE   @DC00758                                            0758
*         AREA(1:F15)=AREA(2:F16);  /* SHIFT BUFFER TO LEFT          */
         MVC   @TS00001(15),AREA+1                                 0759
         MVC   AREA(15),@TS00001                                   0759
*       END;                        /*                               */
         SLR   R15,R15                                             0760
         BCTR  R15,0                                               0760
         AL    R15,I(,COMONPTR)                                    0760
         ST    R15,I(,COMONPTR)                                    0760
         C     R15,FW2                                             0760
         BNL   @DL00758                                            0760
@DC00758 DS    0H                                                  0761
*       INSRTDA=ADDR(AREA);         /* POINT TO INSERT LENGTH        */
         LA    R0,AREA                                             0761
         ST    R0,INSRTDA                                          0761
*       INSRTLN=I;                  /* GET LENGTH OF LENGTH          */
         L     R2,I(,COMONPTR)                                     0762
         ST    R2,INSRTLN                                          0762
*       I=M+F1;                     /* POINT TO RESUME DATA          */
         LA    R3,1                                                0763
         AL    R3,M                                                0763
         ST    R3,I(,COMONPTR)                                     0763
*     END;                          /*                               */
*   END LENGRTN;                                                   0765
@EL00014 DS    0H                                                  0765
@EF00014 DS    0H                                                  0765
@ER00014 LM    R14,R12,@SA00014                                    0765
         BR    R14                                                 0765
*                                                                  0766
*   /*****************************************************************/
*   /*                                                               */
*   /* EVAL BUILT IN FUNCTION                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0766
*EVALRTN:                                                          0766
*   PROC;                                                          0766
EVALRTN  STM   R14,R12,@SA00015                                    0766
*   CALL SETUP;                     /* CHECK IF TO WAIT AND PSTR     */
         BAL   R14,SETUP                                           0767
*   IF ERROR=F0&WAIT=NO THEN        /* OK TO PROCESS                 */
         L     R4,ERROR                                            0768
         LTR   R4,R4                                               0768
         BNZ   @RF00768                                            0768
         TM    WAIT(COMONPTR),B'00010000'                          0768
         BNZ   @RF00768                                            0768
*     DO;                           /*                               */
*       INSRTDA=ADDR(ANSWER);       /* ANSWER OF EVALUATION          */
         L     R6,ANSPTR(,COMONPTR)                                0770
         ST    R6,INSRTDA                                          0770
*       INSRTLN=CLEN;               /* LENGTH OF ANSWER              */
         LH    R7,CLEN(,COMONPTR)                                  0771
         ST    R7,INSRTLN                                          0771
*       I=M+F1;                     /* POINT TO RESUME DATA          */
         LA    R14,1                                               0772
         AL    R14,M                                               0772
         ST    R14,I(,COMONPTR)                                    0772
*     END;                          /*                               */
*   END EVALRTN;                    /* END OF EVAL BIF               */
@EL00015 DS    0H                                                  0774
@EF00015 DS    0H                                                  0774
@ER00015 LM    R14,R12,@SA00015                                    0774
         BR    R14                                                 0774
*                                                                  0775
*   /*****************************************************************/
*   /*                                                               */
*   /* DATATYPE ROUTINE                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0775
*DATYRTN:                                                          0775
*   PROC;                                                          0775
DATYRTN  STM   R14,R12,@SA00016                                    0775
*   ALPHA=NO;                       /* RESET ALPHA SWITCH            */
         NI    ALPHA(COMONPTR),B'11111101'                         0776
*   CALL SETUP;                     /* CHECK TO SEE IF TO WAIT AND   */
         BAL   R14,SETUP                                           0777
*   IF ERROR=F0&WAIT=NO THEN        /* EVALUATE STRING               */
         L     R15,ERROR                                           0778
         LTR   R15,R15                                             0778
         BNZ   @RF00778                                            0778
         TM    WAIT(COMONPTR),B'00010000'                          0778
         BNZ   @RF00778                                            0778
*     DO;                           /*                               */
*       DO I=CLEN TO F1 BY-F1 WHILE ALPHA=NO;/* CHECK IF ANY ALPHA   */
         LH    R0,CLEN(,COMONPTR)                                  0780
         ST    R0,I(,COMONPTR)                                     0780
         B     @DE00780                                            0780
@DL00780 TM    ALPHA(COMONPTR),B'00000010'                         0780
         BNZ   @DC00780                                            0780
*         IF ANSWER(I)<CC0 ANSWER(I)>CC9 THEN/* IF AN ALPHA CHAR     */
         L     R1,I(,COMONPTR)                                     0781
         L     R2,ANSPTR(,COMONPTR)                                0781
         ALR   R1,R2                                               0781
         BCTR  R1,0                                                0781
         CLI   ANSWER(R1),C'0'                                     0781
         BL    @RT00781                                            0781
         L     R3,I(,COMONPTR)                                     0781
         ALR   R2,R3                                               0781
         BCTR  R2,0                                                0781
         CLI   ANSWER(R2),C'9'                                     0781
         BNH   @RF00781                                            0781
@RT00781 DS    0H                                                  0782
*           IF I^=F1 ANSWER(I)^=MINUS THEN/* IF NOT NEGATIVE         */
LBL019A8 LA    R4,1
         CH    R4,CLEN(,COMONPTR)
         BE    @RT00782
         L     R5,I(,COMONPTR)                                     0782
         CR    R5,R4                                               0782
         BNE   @RT00782                                            0782
         L     R1,ANSPTR(,COMONPTR)                                0782
         ALR   R1,R5                                               0782
         BCTR  R1,0                                                0782
         CLI   ANSWER(R1),C'-'                                     0782
         BE    @RF00782                                            0782
@RT00782 DS    0H                                                  0783
*             ALPHA=YES;            /* SET ALPHA SWITCH              */
         OI    ALPHA(COMONPTR),B'00000010'                         0783
*       END;                        /*                               */
@RF00782 DS    0H                                                  0784
@RF00781 SLR   R0,R0                                               0784
         BCTR  R0,0                                                0784
         AL    R0,I(,COMONPTR)                                     0784
         ST    R0,I(,COMONPTR)                                     0784
@DE00780 LTR   R0,R0                                               0784
         BP    @DL00780                                            0784
@DC00780 DS    0H                                                  0785
*       IF ALPHA=YES CLEN=F0 THEN   /* IF DATATYPE IS ALPHA THEN     */
         TM    ALPHA(COMONPTR),B'00000010'                         0785
         BO    @RT00785                                            0785
         LH    R1,CLEN(,COMONPTR)                                  0785
         LTR   R1,R1                                               0785
         BNZ   @RF00785                                            0785
@RT00785 DS    0H                                                  0786
*         DO;                       /* POINT TO 'CHAR' AND ITS LENGTH*/
*           INSRTDA=ADDR(CHR);      /*                               */
         LA    R2,CHR                                              0787
         ST    R2,INSRTDA                                          0787
*           INSRTLN=LENGTH(CHR);    /*                               */
         MVC   INSRTLN(4),FW4                                      0788
*         END;                      /*                               */
*       ELSE                        /* IF NOT ALPHA, POINT INSERT    */
*         DO;                       /* TO 'NUM' AND ITS LENGTH       */
         B     @RC00785                                            0790
@RF00785 DS    0H                                                  0791
*           INSRTDA=ADDR(NUM);      /*                               */
         LA    R3,NUM                                              0791
         ST    R3,INSRTDA                                          0791
*           INSRTLN=LENGTH(NUM);    /*                               */
         MVC   INSRTLN(4),FW3                                      0792
*         END;                      /*                               */
*       I=M+F1;                     /* POINT TO RESUME DATA          */
@RC00785 LA    R4,1                                                0794
         AL    R4,M                                                0794
         ST    R4,I(,COMONPTR)                                     0794
*     END;                          /*                               */
*   END DATYRTN;                                                   0796
@EL00016 DS    0H                                                  0796
@EF00016 DS    0H                                                  0796
@ER00016 LM    R14,R12,@SA00016                                    0796
         BR    R14                                                 0796
*                                                                  0797
*   /*****************************************************************/
*   /*                                                               */
*   /* USERID PREFIX ROUTINE                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0797
*PREFRTN:                                                          0797
*   PROC;                                                          0797
PREFRTN  STM   R14,R12,12(R13)                                     0797
*   INSRTDA=ADDR(UPTPREFX);         /* POINT TO PREFIX               */
         L     R5,@PC00001                                         0798
         LA    R4,UPTPREFX-UPT(,R5)                                0798
         ST    R4,INSRTDA                                          0798
*   INSRTLN=UPTPREFL;               /* GET PREFIX LENGTH             */
         SLR   R4,R4                                               0799
         IC    R4,UPTPREFL-UPT(,R5)                                0799
         ST    R4,INSRTLN                                          0799
*   END PREFRTN;                                                   0800
@EL00017 DS    0H                                                  0800
@EF00017 DS    0H                                                  0800
@ER00017 LM    R14,R12,12(R13)                                     0800
         BR    R14                                                 0800
*                                                                  0801
*   /*****************************************************************/
*   /*                                                               */
*   /* SYSPCMD ROUTINE GET SYSTEM PRIMARY COMMAND NAME               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0801
*SYSPRTN:                                                          0801
*   PROC;                                                          0801
SYSPRTN  STM   R14,R12,12(R13)                                     0801
*   INSRTDA=ADDR(ECTPCMD);          /* POINT TO PRIMARY NAME         */
         L     R5,@PC00001+4                                       0802
         LA    R6,ECTPCMD-ECT(,R5)                                 0802
         ST    R6,INSRTDA                                          0802
*   DO INSRTLN=F8 TO F2 BY-F1 WHILE INSRTCHR(INSRTLN)=BLANK;       0803
         LA    R7,8                                                0803
         ST    R7,INSRTLN                                          0803
@DL00803 L     R1,INSRTDA                                          0803
         ALR   R1,R7                                               0803
         BCTR  R1,0                                                0803
         CLI   INSRTCHR(R1),C' '                                   0803
         BNE   @DC00803                                            0803
*   END;                            /* SCAN FOR LAST NON BLANK       */
         BCTR  R7,0                                                0804
         ST    R7,INSRTLN                                          0804
         C     R7,FW2                                              0804
         BNL   @DL00803                                            0804
@DC00803 DS    0H                                                  0805
*   END SYSPRTN;                                                   0805
@EL00018 DS    0H                                                  0805
@EF00018 DS    0H                                                  0805
@ER00018 LM    R14,R12,12(R13)                                     0805
         BR    R14                                                 0805
*                                                                  0806
*   /*****************************************************************/
*   /*                                                               */
*   /* SYSSCMD ROUTINE GET SYSTEM SECONDARY COMMAND NAME             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0806
*SYSSRTN:                                                          0806
*   PROC;                                                          0806
SYSSRTN  STM   R14,R12,12(R13)                                     0806
*   INSRTDA=ADDR(ECTSCMD);          /* POINT TO SECONDARY NAME       */
         L     R2,@PC00001+4                                       0807
         LA    R3,ECTSCMD-ECT(,R2)                                 0807
         ST    R3,INSRTDA                                          0807
*   DO INSRTLN=F8 TO F2 BY-F1 WHILE INSRTCHR(INSRTLN)=BLANK;       0808
         LA    R4,8                                                0808
         ST    R4,INSRTLN                                          0808
@DL00808 L     R1,INSRTDA                                          0808
         ALR   R1,R4                                               0808
         BCTR  R1,0                                                0808
         CLI   INSRTCHR(R1),C' '                                   0808
         BNE   @DC00808                                            0808
*   END;                            /* SCAN FOR LAST NON BLANK       */
         BCTR  R4,0                                                0809
         ST    R4,INSRTLN                                          0809
         C     R4,FW2                                              0809
         BNL   @DL00808                                            0809
@DC00808 DS    0H                                                  0810
*   END SYSSRTN;                                                   0810
@EL00019 DS    0H                                                  0810
@EF00019 DS    0H                                                  0810
@ER00019 LM    R14,R12,12(R13)                                     0810
         BR    R14                                                 0810
*                                                                  0811
*   /*****************************************************************/
*   /*                                                               */
*   /* EVALUATION SETUP                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0811
*SETUP:                                                            0811
*   PROC OPTIONS(SAVEAREA);                                        0811
SETUP    STM   R14,R12,12(R13)                                     0811
         ST    R13,@SA00020+4                                      0811
         LA    R14,@SA00020                                        0811
         ST    R14,8(,R13)                                         0811
         LR    R13,R14                                             0811
*   CALL WAITRTN;                   /* CHECK FOR & IN P-STRING       */
         BAL   R14,WAITRTN                                         0812
*   IF WAIT=NO&ERROR=F0 THEN        /* IF OK TO PROCESS              */
         TM    WAIT(COMONPTR),B'00010000'                          0813
         BNZ   @RF00813                                            0813
         SLR   R2,R2                                               0813
         C     R2,ERROR                                            0813
         BNE   @RF00813                                            0813
*     DO;                           /*                               */
*       BUFPTR=ADDR(C(I-F1));       /* POINT TO DUMMY BUFFER         */
         L     R3,I(,COMONPTR)                                     0815
         L     R1,BUFBASE(,COMONPTR)                               0815
         LA    R4,C-2(R3,R1)                                       0815
         ST    R4,BUFPTR(,COMONPTR)                                0815
*       CSAVE=BUF(F1:F2);           /* SAVE ORIGINAL BUFFER          */
         MVC   CSAVE(2),BUF(R4)                                    0816
*       BUF(F1:F2)=XEQUAL;          /* MAKE DUMMY STATEMENT          */
         MVC   BUF(2,R4),$XEQUALS                                  0817
*       CLEN=M-I+F1;                /* SET LENGTH OF DUMMY STMT      */
         LCR   R3,R3                                               0818
         AL    R3,M                                                0818
         AL    R3,FW1                                              0818
         STH   R3,CLEN(,COMONPTR)                                  0818
*       TYPE=F0;                    /* NUMERIC ASSIGNMENT            */
         ST    R2,TYPE(,COMONPTR)                                  0819
*       RFY                                                        0820
*        (R15) RSTD;                /* RESTRICT RETURN CODE REG      */
*       CALL IKJCT434(BUF,CLEN,TYPE,OUTA1);/* PROCESS EXPRESSION     */
         ST    R4,@AL00001                                         0821
         LA    R14,CLEN(,COMONPTR)                                 0821
         ST    R14,@AL00001+4                                      0821
         LA    R14,TYPE(,COMONPTR)                                 0821
         ST    R14,@AL00001+8                                      0821
         LA    R14,OUTA1                                           0821
         ST    R14,@AL00001+12                                     0821
         L     R15,IKJCT434                                        0821
         LA    R1,@AL00001                                         0821
         BALR  R14,R15                                             0821
*       ERROR=R15;                  /* SAVE ERROR CODE               */
         ST    R15,ERROR                                           0822
*       BUF(F1:F2)=CSAVE;           /* RESTORE BUFFER                */
         L     R14,BUFPTR(,COMONPTR)                               0823
         MVC   BUF(2,R14),CSAVE                                    0823
*       RFY                                                        0824
*        (R15) UNRSTD;              /* RELEASE RETURN CODE REG       */
*     END;                                                         0825
*   END SETUP;                                                     0826
@EL00020 L     R13,4(,R13)                                         0826
@EF00020 DS    0H                                                  0826
@ER00020 LM    R14,R12,12(R13)                                     0826
         BR    R14                                                 0826
*                                                                  0827
*   /*****************************************************************/
*   /*                                                               */
*   /* SYMBOLIC VARIABLE LOCATE                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0827
*LOCATE:                                                           0827
*   PROC(NAME,NAML,FUNC);                                          0827
LOCATE   STM   R14,R12,@SA00021                                    0827
         MVC   @PC00021(12),0(R1)                                  0827
*   DCL                                                            0828
*     NAME CHAR(*),                                                0828
*     NAML FIXED(31),                                              0828
*     FUNC FIXED(31);                                              0828
*   EXECDPTR=LSDEXEC;               /* RESET EXEC DATA POINTER       */
         L     R1,LSDPTR(,COMONPTR)                                0829
         L     R2,LSDEXEC-LSD(,R1)                                 0829
         ST    R2,EXECDPTR(,COMONPTR)                              0829
*   SNTABPTR=SNTABFST;              /* POINT TO FIRST SNTAB          */
         L     R3,SNTABFST(,R2)                                    0830
         ST    R3,SNTABPTR                                         0830
*   SNTELPTR=ADDR(SNTELFST);        /* POINT TO FIRST NAME ENTRY     */
         LA    R4,SNTELFST(,R3)                                    0831
         ST    R4,SNTELPTR(,COMONPTR)                              0831
*   EXITB=NO;                       /* CLEAR EXITB                   */
         NI    EXITB(COMONPTR),B'10111111'                         0832
*   IF NAML>F252 THEN               /* IF NAME IS TOO LONG           */
         L     R5,@PC00021+4                                       0833
         L     R6,NAML(,R5)                                        0833
         C     R6,FW252                                            0833
         BNH   @RF00833                                            0833
*     ERCOM=E940;                   /* SET ERCOM CODE                */
         MVC   ERCOM(4,COMONPTR),FW940                             0834
*   DO WHILE EXITB=NO&ERCOM=F0;     /* SEARCH TABLE UNTIL FOUND OR 0835
*                                      UNTIL AN ERCOM OCCURS         */
@RF00833 B     @DE00835                                            0835
@DL00835 DS    0H                                                  0836
*     IF NAML=SNTLNG&NAME(1:NAML)=SNTDATA(1:SNTLNG) THEN/* IF FOUND  */
         L     R7,@PC00021+4                                       0836
         L     R6,SNTELPTR(,COMONPTR)                              0836
         LH    R14,SNTLNG(,R6)                                     0836
         C     R14,NAML(,R7)                                       0836
         BNE   @RF00836                                            0836
         L     R15,@PC00021                                        0836
         BCTR  R14,0                                               0836
         EX    R14,@SC01109                                        0836
         BNE   @RF00836                                            0836
*       EXITB=YES;                  /* SET FOUND SWITCH              */
         OI    EXITB(COMONPTR),B'01000000'                         0837
*     ELSE                          /* OTHERWISE UPDATE POINTER      */
*       IF SNTLAST=YES THEN         /* IF END OF TABLE               */
         B     @RC00836                                            0838
@RF00836 L     R1,SNTELPTR(,COMONPTR)                              0838
         TM    SNTLAST(R1),B'00000001'                             0838
         BNO   @RF00838                                            0838
*         IF SNTABNXT=F0 THEN       /* AND NO MORE TABLES            */
         L     R1,SNTABPTR                                         0839
         L     R2,SNTABNXT(,R1)                                    0839
         LTR   R2,R2                                               0839
         BNZ   @RF00839                                            0839
*           IF FUNC=F8 THEN         /* IF VARIABLE TO BE ADDED       */
         L     R3,@PC00021+8                                       0840
         CLC   FUNC(4,R3),FW8                                      0840
         BNE   @RF00840                                            0840
*             DO;                   /* ADD NAME TO TABLE             */
*               CALL NAMEADD;       /* ADD NAME TO TABLE             */
         BAL   R14,NAMEADD                                         0842
*               EXITB=YES;          /* CAUSE TERMINATION             */
         OI    EXITB(COMONPTR),B'01000000'                         0843
*             END;                  /*                               */
*           ELSE                    /* OTHERWISE                     */
*             ERCOM=E904;           /* SET NOT FOUND RETURN CODE     */
         B     @RC00840                                            0845
@RF00840 MVC   ERCOM(4,COMONPTR),FW904                             0845
*         ELSE                      /*                               */
*           DO;                     /* IF NOT THE END, UPDATE TO NEXT*/
         B     @RC00839                                            0846
@RF00839 DS    0H                                                  0847
*             SNTABPTR=SNTABNXT;    /* TABLE                         */
         L     R1,SNTABPTR                                         0847
         L     R2,SNTABNXT(,R1)                                    0847
         ST    R2,SNTABPTR                                         0847
*             SNTELPTR=ADDR(SNTELFST);/* POINT TO FIRST NAME ENTRY IN*/
         LA    R3,SNTELFST(,R2)                                    0848
         ST    R3,SNTELPTR(,COMONPTR)                              0848
*           END;                    /* NEXT TABLE                    */
*       ELSE                        /* NO MORE TABLES AND NOT FOUND  */
*         SNTELPTR=SNTELPTR+SNTLNG+LENGTH(SNTELEM);/* UPDATE POINTER */
         B     @RC00838                                            0850
@RF00838 L     R4,SNTELPTR(,COMONPTR)                              0850
         LH    R5,SNTLNG(,R4)                                      0850
         ALR   R5,R4                                               0850
         AL    R5,FW8                                              0850
         ST    R5,SNTELPTR(,COMONPTR)                              0850
*   END;                                                           0851
@RC00838 DS    0H                                                  0851
@RC00836 DS    0H                                                  0851
@DE00835 TM    EXITB(COMONPTR),B'01000000'                         0851
         BNZ   @DC00835                                            0851
         L     R6,ERCOM(,COMONPTR)                                 0851
         LTR   R6,R6                                               0851
         BZ    @DL00835                                            0851
@DC00835 DS    0H                                                  0852
*   IF ERCOM=F0&((FUNC^=F4&SNTLABEL=YES) /* IF A LABEL WAS FOUND WHEN*/
*       (FUNC=F4&SNTLABEL=NO)) THEN /* IT SHOULDNT, THEN SET         */
         L     R7,ERCOM(,COMONPTR)                                 0852
         LTR   R7,R7                                               0852
         BNZ   @RF00852                                            0852
         L     R14,@PC00021+8                                      0852
         CLC   FUNC(4,R14),FW4                                     0852
         BE    @GL00055                                            0852
         L     R1,SNTELPTR(,COMONPTR)                              0852
         TM    SNTLABEL(R1),B'00010000'                            0852
         BO    @RT00852                                            0852
@GL00055 L     R2,@PC00021+8                                       0852
         CLC   FUNC(4,R2),FW4                                      0852
         BNE   @RF00852                                            0852
         L     R1,SNTELPTR(,COMONPTR)                              0852
         TM    SNTLABEL(R1),B'00010000'                            0852
         BNZ   @RF00852                                            0852
@RT00852 DS    0H                                                  0853
*     ERCOM=E944;                   /* ERCOM INDICATOR               */
         MVC   ERCOM(4,COMONPTR),FW944                             0853
*   IF ERCOM=F0&SNTGLOB=YES THEN    /* IF A GLOBAL VARIABLE          */
@RF00852 L     R2,ERCOM(,COMONPTR)                                 0854
         LTR   R2,R2                                               0854
         BNZ   @RF00854                                            0854
         L     R1,SNTELPTR(,COMONPTR)                              0854
         TM    SNTGLOB(R1),B'10000000'                             0854
         BNO   @RF00854                                            0854
*     CALL GLOCATE;                 /* DO A GLOBAL SEARCH            */
         BAL   R14,GLOCATE                                         0855
*   ERROR=ERCOM;                    /*                               */
@RF00854 L     R3,ERCOM(,COMONPTR)                                 0856
         ST    R3,ERROR                                            0856
*                                                                  0857
*   /*****************************************************************/
*   /*                                                               */
*   /* NAME TABLE UPDATE - ADD A NAME ENTRY                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0857
*NAMEADD:                                                          0857
*   PROC;                                                          0857
         B     @PB00022                                            0857
NAMEADD  STM   R14,R12,12(R13)                                     0857
*   IF NAML>F31 THEN                /* IF NAME TOO LONG              */
         L     R4,@PC00021+4                                       0858
         L     R5,NAML(,R4)                                        0858
         C     R5,FW31                                             0858
         BNH   @RF00858                                            0858
*     ERCOM=E940;                   /* SET ERCOM CODE                */
         MVC   ERCOM(4,COMONPTR),FW940                             0859
*   ELSE                            /* OTHERWISE                     */
*     IF NAML+LENGTH(SNTELEM)>SNTABLNG-SNTABUSE THEN/* IF NO ROOM  0860
*                                      LEFT                          */
         B     @RC00858                                            0860
@RF00858 L     R6,@PC00021+4                                       0860
         L     R1,NAML(,R6)                                        0860
         LA    R0,8                                                0860
         ALR   R0,R1                                               0860
         L     R2,SNTABPTR                                         0860
         L     R3,SNTABLNG(,R2)                                    0860
         LR    R4,R3                                               0860
         SL    R4,SNTABUSE(,R2)                                    0860
         CR    R0,R4                                               0860
         BNH   @RF00860                                            0860
*       DO;                         /* GET ANOTHER TABLE             */
*         NEWLNG=MAX(SNTABLNG,NAML+LENGTH(SNTELEM)+LENGTH(SNTAB)+GAS);
         AL    R1,FW220                                            0862
         CR    R3,R1                                               0862
         BNL   *+6
         LR    R3,R1                                               0862
         ST    R3,NEWLNG                                           0862
*         DO;                       /* GETMAIN LV(NEWLNG) A(SNTSAVE)
*                                      SP(78) MF(E,GETLST)         0863
*                                      RTCD(ERCOM)                   */
*           RESPECIFY                                              0864
*            (R1,                                                  0864
*             R15) RESTRICTED;                                     0864
*           GETLST01=NEWLNG;        /* LENGTH                        */
         ST    R3,GETLST01                                         0865
*           GETLST03=ADDR(SNTSAVE); /* ADDR OF ADDR LIST             */
         LA    R14,SNTSAVE                                         0866
         STCM  R14,7,GETLST03                                      0866
*           GETLST05=78;            /* SUBPOOL VALUE                 */
         MVI   GETLST05,X'4E'                                      0867
*           R1=ADDR(GETLST);        /* REG1 POINTS TO LIST           */
         LA    R1,GETLST                                           0868
*           SVC(4);                 /* STANDARD-FORM OF GETMAIN      */
         SVC   4                                                   0869
*           ERCOM=R15;              /* SET RETURN CODE               */
         ST    R15,ERCOM(,COMONPTR)                                0870
*           RESPECIFY                                              0871
*            (R1,                                                  0871
*             R15) UNRESTRICTED;                                   0871
*         END;                      /* GETMAIN LV(NEWLNG) A(SNTSAVE)
*                                      SP(78) MF(E,GETLST)         0872
*                                      RTCD(ERCOM)                   */
*         IF ERCOM^=F0 THEN         /* IF GETMAIN ERCOM              */
         L     R2,ERCOM(,COMONPTR)                                 0873
         LTR   R2,R2                                               0873
         BZ    @RF00873                                            0873
*           ERCOM=E16;              /* SET ERCOM CODE                */
         MVC   ERCOM(4,COMONPTR),FW16                              0874
*         ELSE                      /* OTHERWISE                     */
*           DO;                     /* CHAIN NEW TABLE               */
         B     @RC00873                                            0875
@RF00873 DS    0H                                                  0876
*             RFY                                                  0876
*               SNTAB BASED(SNTSAVE);/* RESET BASE FOR NEW TABLE     */
*             SNTABNXT=F0;          /* NO NEXT TABLE                 */
         L     R3,SNTSAVE                                          0877
         SLR   R2,R2                                               0877
         ST    R2,SNTABNXT(,R3)                                    0877
*             SNTABLNG=NEWLNG;      /* LENGTH OF THIS TABLE          */
         L     R2,NEWLNG                                           0878
         ST    R2,SNTABLNG(,R3)                                    0878
*             SNTABUSE=LENGTH(SNTAB);/* LENGTH OF HEADER             */
         MVC   SNTABUSE(4,R3),FW12                                 0879
*             RFY                                                  0880
*               SNTAB BASED(SNTABPTR);/* RESTORE BASE                */
*             SNTABNXT=SNTSAVE;     /* CHAIN NEW TABLE               */
         L     R2,SNTABPTR                                         0881
         ST    R3,SNTABNXT(,R2)                                    0881
*             SNTABPTR=SNTSAVE;     /* SET BASE TO NEW TABLE         */
         ST    R3,SNTABPTR                                         0882
*           END;                    /*                               */
*       END;                        /*                               */
*     ELSE                          /* NOT A NEW TABLE               */
*       SNTLAST=NO;                 /* CLEAR OLD LAST SWITCH         */
         B     @RC00860                                            0885
@RF00860 L     R1,SNTELPTR(,COMONPTR)                              0885
         NI    SNTLAST(R1),B'11111110'                             0885
*   IF ERCOM=F0 THEN                /* IF NO GETMAIN ERCOM           */
@RC00860 DS    0H                                                  0886
@RC00858 L     R2,ERCOM(,COMONPTR)                                 0886
         LTR   R2,R2                                               0886
         BNZ   @RF00886                                            0886
*     DO;                           /* ADD ENTRY                     */
*       SNTELPTR=SNTABPTR+SNTABUSE; /* POINT TO NEW SLOT             */
         L     R3,SNTABPTR                                         0888
         L     R2,SNTABUSE(,R3)                                    0888
         LR    R4,R3                                               0888
         ALR   R4,R2                                               0888
         ST    R4,SNTELPTR(,COMONPTR)                              0888
*       SNTFLAGS=''B;               /* CLEAR FLAGS                   */
         XC    SNTFLAGS(2,R4),SNTFLAGS(R4)                         0889
*       SNTKEYW=YES;                /* KEYWORD WITH VALUE            */
*       SNTLAST=YES;                /* NOW LAST ELEMENT              */
         OI    SNTKEYW(R4),B'00100001'                             0891
*       SNTVLPTR=SVTABFST+LENGTH(SVTAB);/* POINT TO NULL ELEMENT     */
         L     R1,EXECDPTR(,COMONPTR)                              0892
         LA    R5,16                                               0892
         AL    R5,SVTABFST(,R1)                                    0892
         ST    R5,SNTVLPTR(,R4)                                    0892
*       SNTLNG=NAML;                /* LENGTH OF NAME                */
         L     R5,@PC00021+4                                       0893
         L     R1,NAML(,R5)                                        0893
         STH   R1,SNTLNG(,R4)                                      0893
*       SNTDATA(1:NAML)=NAME(1:NAML);/* NAME                         */
         LR    R5,R1                                               0894
         BCTR  R5,0                                                0894
         L     R6,@PC00021                                         0894
         EX    R5,@SM01111                                         0894
*       SNTABUSE=SNTABUSE+NAML+LENGTH(SNTELEM);/* AMOUNT IN USE      */
         ALR   R2,R1                                               0895
         AL    R2,FW8                                              0895
         ST    R2,SNTABUSE(,R3)                                    0895
*     END;                          /*                               */
*   END NAMEADD;                                                   0897
@EL00022 DS    0H                                                  0897
@EF00022 DS    0H                                                  0897
@ER00022 LM    R14,R12,12(R13)                                     0897
         BR    R14                                                 0897
*   END LOCATE;                                                    0898
@EL00021 DS    0H                                                  0898
@EF00021 DS    0H                                                  0898
@ER00021 LM    R14,R12,@SA00021                                    0898
         BR    R14                                                 0898
*                                                                  0899
*   /*****************************************************************/
*   /*                                                               */
*   /* GLOBAL LOCATE FUNCTION                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0899
*GLOCATE:                                                          0899
*   PROC;                                                          0899
GLOCATE  STM   R14,R12,12(R13)                                     0899
*   SNTSAVE=SNTELPTR;               /* SAVE NAME POINTER             */
         L     R14,SNTELPTR(,COMONPTR)                             0900
         ST    R14,SNTSAVE                                         0900
*   EXECDPTR=GEXECDAT;              /* POINT TO GLOBAL EXEC          */
         L     R1,EXECDPTR(,COMONPTR)                              0901
         L     R2,GEXECDAT(,R1)                                    0901
         ST    R2,EXECDPTR(,COMONPTR)                              0901
*   SNTABPTR=SNTABFST;              /* POINT TO FIRST NAME TABLE     */
         L     R3,SNTABFST(,R2)                                    0902
         ST    R3,SNTABPTR                                         0902
*   SNTELPTR=ADDR(SNTELFST);        /* BEGIN OF GLOBAL NAMES         */
         LA    R4,SNTELFST(,R3)                                    0903
         ST    R4,SNTELPTR(,COMONPTR)                              0903
*   EXITB=NO;                       /* TURN OFF EXIT SWITCH          */
         NI    EXITB(COMONPTR),B'10111111'                         0904
*   DO WHILE EXITB=NO&ERCOM=F0;     /* FIND GLOBAL VARIABLE          */
         B     @DE00905                                            0905
@DL00905 DS    0H                                                  0906
*     IF SNTLNG=F4&                 /* IF LENGTH IS FOUR             */
*         SNTSAVE->SNTGVAL=SNTDATA(1:F4) THEN/* MATCH                */
         L     R5,SNTELPTR(,COMONPTR)                              0906
         CLC   SNTLNG(2,R5),HW4                                    0906
         BNE   @RF00906                                            0906
         L     R1,SNTSAVE                                          0906
         CLC   SNTGVAL(4,R1),SNTDATA(R5)                           0906
         BNE   @RF00906                                            0906
*       EXITB=YES;                  /* EXIT LOCATE                   */
         OI    EXITB(COMONPTR),B'01000000'                         0907
*     ELSE                          /* OTHERWISE                     */
*       IF SNTLAST=YES THEN         /* LAST NAME ?                   */
         B     @RC00906                                            0908
@RF00906 L     R1,SNTELPTR(,COMONPTR)                              0908
         TM    SNTLAST(R1),B'00000001'                             0908
         BNO   @RF00908                                            0908
*         IF SNTABNXT=F0 THEN       /* NO MORE TABLES ?              */
         L     R1,SNTABPTR                                         0909
         L     R2,SNTABNXT(,R1)                                    0909
         LTR   R2,R2                                               0909
         BNZ   @RF00909                                            0909
*           ERCOM=E312;             /* SET ERCOM CODE                */
         MVC   ERCOM(4,COMONPTR),FW312                             0910
*         ELSE                      /* OTHERWISE                     */
*           DO;                     /* SCAN NEXT TABLE               */
         B     @RC00909                                            0911
@RF00909 DS    0H                                                  0912
*             SNTABPTR=SNTABNXT;    /* BASE NEXT TABLE               */
         L     R1,SNTABPTR                                         0912
         L     R2,SNTABNXT(,R1)                                    0912
         ST    R2,SNTABPTR                                         0912
*             SNTELPTR=ADDR(SNTELFST);/* POINT TO FIRST NAME         */
         LA    R3,SNTELFST(,R2)                                    0913
         ST    R3,SNTELPTR(,COMONPTR)                              0913
*           END;                    /*                               */
*       ELSE                        /* OTHERWISE                     */
*         SNTELPTR=SNTELPTR+SNTLNG+LENGTH(SNTELEM);/* GET NEXT       */
         B     @RC00908                                            0915
@RF00908 L     R4,SNTELPTR(,COMONPTR)                              0915
         LH    R5,SNTLNG(,R4)                                      0915
         ALR   R5,R4                                               0915
         AL    R5,FW8                                              0915
         ST    R5,SNTELPTR(,COMONPTR)                              0915
*   END;                            /*                               */
@RC00908 DS    0H                                                  0916
@RC00906 DS    0H                                                  0916
@DE00905 TM    EXITB(COMONPTR),B'01000000'                         0916
         BNZ   @DC00905                                            0916
         L     R6,ERCOM(,COMONPTR)                                 0916
         LTR   R6,R6                                               0916
         BZ    @DL00905                                            0916
@DC00905 DS    0H                                                  0917
*   ERROR=ERCOM;                                                   0917
         L     R14,ERCOM(,COMONPTR)                                0917
         ST    R14,ERROR                                           0917
*   END GLOCATE;                    /*                               */
@EL00023 DS    0H                                                  0918
@EF00023 DS    0H                                                  0918
@ER00023 LM    R14,R12,12(R13)                                     0918
         BR    R14                                                 0918
*                                                                  0919
*   /*****************************************************************/
*   /*                                                               */
*   /* SYMBOLIC VARIABLE UPDATE                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0919
*UPDATE:                                                           0919
*   PROC(VALUE,VALLEN);             /* UPDATE A VTAB ELEMENT         */
UPDATE   STM   R14,R12,12(R13)                                     0919
         MVC   @PC00024(8),0(R1)                                   0919
*   DCL                                                            0920
*     VALUE CHAR(*),                                               0920
*     VALLEN FIXED(31);                                            0920
*   SVTABPTR=SVTABFST;              /* POINT TO CURRENT VTAB         */
         L     R1,EXECDPTR(,COMONPTR)                              0921
         L     R1,SVTABFST(,R1)                                    0921
         ST    R1,SVTABPTR                                         0921
*   IF SNTNAUTH=YES&SYSUPDTE=NO THEN/* IF AN UNAUTHORIZED VARIABLE   */
         L     R1,SNTELPTR(,COMONPTR)                              0922
         TM    SNTNAUTH(R1),B'00000100'                            0922
         BNO   @RF00922                                            0922
         TM    SYSUPDTE(COMONPTR),B'00000100'                      0922
         BNZ   @RF00922                                            0922
*     ERCOM=E300;                   /* SET ERCOM CODE                */
         MVC   ERCOM(4,COMONPTR),FW300                             0923
*   ELSE                            /* OTHERWISE                     */
*     DO;                           /* UPDATE VARIABLE               */
         B     @RC00922                                            0924
@RF00922 DS    0H                                                  0925
*       IF VALLEN>SVTORIG THEN      /* IF A NEW SLOT IS NEEDED       */
         L     R2,@PC00024+4                                       0925
         L     R1,VALLEN(,R2)                                      0925
         L     R2,SNTELPTR(,COMONPTR)                              0925
         L     R3,SNTVLPTR(,R2)                                    0925
         CH    R1,SVTORIG(,R3)                                     0925
         BNH   @RF00925                                            0925
*         DO;                                                      0926
*           IF VALLEN+LENGTH(SVTELEM)>SVTABLNG-SVTABUSE THEN/* IF NEW
*                                      TABLE                         */
         AL    R1,FW4                                              0927
         L     R3,SVTABPTR                                         0927
         L     R0,SVTABLNG(,R3)                                    0927
         SL    R0,SVTABUSE(,R3)                                    0927
         CR    R1,R0                                               0927
         BNH   @RF00927                                            0927
*             DO;                   /* IS NEEDED, GET ONE            */
*               SNTSAVE=SNTELPTR;   /* SAVE NAME POINTER             */
         ST    R2,SNTSAVE                                          0929
*               EXITC=NO;           /* TURN OFF SWITCH               */
LBL01EDE NI    EXITC(COMONPTR),B'11111110'                         0930
*               NEWLNG=MAX(SVTABLNG+VALLEN+GAS,/* OLD SIZE + GAS     */
*                   (SVTABUSE-SVTABFRE)*F3/F2);/* 1.5 TIMES USED     */
         L     R1,SVTABPTR
         L     R2,@PC00024+4
         L     R3,SVTABLNG(,R1)
         AL    R3,VALLEN(,R2)
         AL    R3,FW200                                            0931
         L     R0,SVTABUSE(,R1)                                    0931
         SL    R0,SVTABFRE(,R1)                                    0931
         ALR   R0,R0                                               0931
         CR    R3,R0                                               0931
         BNL   *+6
         LR    R3,R0                                               0931
         ST    R3,NEWLNG                                           0931
*               DO;                 /* GETMAIN LV(NEWLNG) A(SVTABPTR)
*                                      SP(78) MF(E,GETLST)         0932
*                                      RTCD(ERCOM)                   */
*                 RESPECIFY                                        0933
*                  (R1,                                            0933
*                   R15) RESTRICTED;                               0933
*                 GETLST01=NEWLNG;  /* LENGTH                        */
         ST    R3,GETLST01                                         0934
*                 GETLST03=ADDR(SVTABPTR);/* ADDR OF ADDR LIST       */
         LA    R14,SVTABPTR                                        0935
         STCM  R14,7,GETLST03                                      0935
*                 GETLST05=78;      /* SUBPOOL VALUE                 */
         MVI   GETLST05,X'4E'                                      0936
*                 R1=ADDR(GETLST);/* REG1 POINTS TO LIST             */
         LA    R1,GETLST                                           0937
*                 SVC(4);           /* STANDARD-FORM OF GETMAIN      */
         SVC   4                                                   0938
*                 ERCOM=R15;        /* SET RETURN CODE               */
         ST    R15,ERCOM(,COMONPTR)                                0939
*                 RESPECIFY                                        0940
*                  (R1,                                            0940
*                   R15) UNRESTRICTED;                             0940
*               END;                /* GETMAIN LV(NEWLNG) A(SVTABPTR)
*                                      SP(78) MF(E,GETLST)         0941
*                                      RTCD(ERCOM)                   */
*               IF ERCOM^=F0 THEN   /* IF GETMAIN FAILS              */
         L     R2,ERCOM(,COMONPTR)                                 0942
         LTR   R2,R2                                               0942
         BZ    @RF00942                                            0942
*                 DO;               /* TERMINATE UPDATE              */
*                   ERCOM=E16;      /* SET ERCOM CODE                */
         LA    R3,16                                               0944
         ST    R3,ERCOM(,COMONPTR)                                 0944
*                   ERROR=ERCOM;    /* SET INT ERROR                 */
         ST    R3,ERROR                                            0945
*                   RETURN;         /* RETURN                        */
@EL00024 DS    0H                                                  0946
@EF00024 DS    0H                                                  0946
@ER00024 LM    R14,R12,12(R13)                                     0946
         BR    R14                                                 0946
*                 END;              /*                               */
*               ELSE                /* OTHERWISE                     */
*                 DO;               /* SET UP AND COPY TABLE         */
@RF00942 DS    0H                                                  0949
*                   SVTABNXT=SVTABFST;/* POINT TO OLD TABLE          */
         L     R4,SVTABPTR                                         0949
         L     R5,EXECDPTR(,COMONPTR)                              0949
         L     R7,SVTABFST(,R5)                                    0949
         ST    R7,SVTABNXT(,R4)                                    0949
*                   SVTABFRE=F0;    /* NO FREE SPACE IN TABLE        */
         SLR   R14,R14                                             0950
         ST    R14,SVTABFRE(,R4)                                   0950
*                   SVTABLNG=NEWLNG;/* LENGTH OF THIS TABLE          */
         L     R15,NEWLNG                                          0951
         ST    R15,SVTABLNG(,R4)                                   0951
*                   SVTABUSE=LENGTH(SVTAB)+LENGTH(NULELEM);/* INIT 0952
*                                      USED                          */
         MVC   SVTABUSE(4,R4),FW20                                 0952
*                   SVTABFST=SVTABPTR;/* INIT EXEC DATA POINTER      */
         ST    R4,SVTABFST(,R5)                                    0953
*                   SNTABPTR=SNTABFST;/* POINT TO FIRST NAME TAB     */
         L     R5,SNTABFST(,R5)                                    0954
         ST    R5,SNTABPTR                                         0954
*                   SNTELPTR=ADDR(SNTELFST);/* GET ADDR OF FIRST NAME*/
         LA    R15,SNTELFST(,R5)                                   0955
         ST    R15,SNTELPTR(,COMONPTR)                             0955
*                   RFY                                            0956
*                    (R2,                                          0956
*                     R3,                                          0956
*                     R4,                                          0956
*                     R5) RSTD;     /* RESTRICT REGS                 */
*                   EXITC=NO;       /* RESET EXIT SWITCH             */
         NI    EXITC(COMONPTR),B'11111110'                         0957
*                   R2=ADDR(SVTELFST)+LENGTH(NULELEM);/* GET FIRST 0958
*                                      ALAIL SLOT                    */
         L     R2,SVTABPTR               ( WAS SVTELFST(,R4) )     0958
         LA    R15,NULELEM(,R2)
         AL    R15,FW4                                             0958
         LR    R2,R15
         L     R15,SVTABPTR
*                   NULELEM=NULVAL; /* INIT NULL ELEMENT             */
         ST    R14,NULELEM(,R15)                                   0959
*                   DO WHILE EXITC=NO;/* MOVE UNTIL END OF TABLE     */
         B     @DE00960                                            0960
@DL00960 DS    0H                                                  0961
*                     IF SNTELPTR^=SNTSAVE&SNTLABEL=NO&/* OK TO COPY */
*                         SNTGLOB=NO THEN/* ELEMENT ?                */
         L     R0,SNTELPTR(,COMONPTR)                              0961
         C     R0,SNTSAVE                                          0961
         BE    @RF00961                                            0961
         LR    R1,R0
         TM    SNTLABEL(R1),B'00010000'                            0961
         BNZ   @RF00961                                            0961
         LR    R1,R0
         TM    SNTGLOB(R1),B'10000000'                             0961
         BNZ   @RF00961                                            0961
*                       DO;         /* YES-MOVE INTO NEW TABLE       */
*                         IF SVTORIG=F0 THEN/* IF ORIGINALLY NULL    */
         LR    R1,R0
         L     R1,SNTVLPTR(,R1)                                    0963
         LH    R1,SVTORIG(,R1)                                     0963
         LTR   R1,R1                                               0963
         BNZ   @RF00963                                            0963
*                           SNTVLPTR=ADDR(NULELEM);/* POINT TO NULL
*                                      ELEM                          */
         L     R1,SVTABPTR                                         0964
         LA    R1,NULELEM(,R1)                                     0964
         LR    R6,R0
         ST    R1,SNTVLPTR(,R6)                                    0964
*                         ELSE      /* OTHERWISE ASSIGN A SLOT       */
*                           DO;     /* IN NEW TABLE                  */
         B     @RC00963                                            0965
@RF00963 DS    0H                                                  0966
*                             R3=SVTORIG+LENGTH(SVTELEM);/* LENGTH OF
*                                      MOVE                          */
         LA    R7,4                                                0966
         L     R6,SNTELPTR(,COMONPTR)                              0966
         L     R14,SNTVLPTR(,R6)                                   0966
         LH    R15,SVTORIG(,R14)                                   0966
         LR    R3,R15                                              0966
         ALR   R3,R7                                               0966
*                             R4=SNTVLPTR;/* POINT TO OLD DATA       */
         LR    R4,R14                                              0967
*                             R5=R3;/* GET FROM LENGTH               */
         LR    R5,R3                                               0968
*                             SVTABFRE=SVTABFRE+SVTORIG-SVTLNG;/*  0969
*                                      UPDATE FREE                   */
         L     R0,SVTABPTR                                         0969
         LR    R1,R0
         L     R1,SVTABFRE(,R1)                                    0969
         ALR   R1,R15                                              0969
         SH    R1,SVTLNG(,R14)                                     0969
         LR    R14,R0
         ST    R1,SVTABFRE(,R14)                                   0969
*                             SVTABUSE=SVTABUSE+SVTORIG+LENGTH(SVTELEM)
*                                 ;                                0970
         LR    R14,R0
         AL    R15,SVTABUSE(,R14)                                  0970
         ALR   R15,R7                                              0970
         LR    R14,R0
         ST    R15,SVTABUSE(,R14)                                  0970
         LR    R1,R0
         C     R15,SVTABLNG(,R1)
         BH    LBL01EDE
*                             SNTVLPTR=R2;/* RESET VALUE POINTER     */
         ST    R2,SNTVLPTR(,R6)                                    0971
*                             MVCL(R2,R4);/* COPY INT NEW TABLE      */
         MVCL  R2,R4                                               0972
*                           END;                                   0973
*                       END;        /*                               */
@RC00963 DS    0H                                                  0975
*                     IF SNTLAST=YES THEN/* IF LAST IN TABLE         */
@RF00961 L     R1,SNTELPTR(,COMONPTR)                              0975
         TM    SNTLAST(R1),B'00000001'                             0975
         BNO   @RF00975                                            0975
*                       IF SNTABNXT=F0 THEN/* AND NO MORE TABLES     */
         L     R1,SNTABPTR                                         0976
         L     R6,SNTABNXT(,R1)                                    0976
         LTR   R6,R6                                               0976
         BNZ   @RF00976                                            0976
*                         EXITC=YES;/* END COPY                      */
         OI    EXITC(COMONPTR),B'00000001'                         0977
*                       ELSE        /* RESET TO NEW TABLE            */
*                         DO;       /*                               */
         B     @RC00976                                            0978
@RF00976 DS    0H                                                  0979
*                           SNTABPTR=SNTABNXT;/* RESET BASE          */
         L     R1,SNTABPTR                                         0979
         L     R6,SNTABNXT(,R1)                                    0979
         ST    R6,SNTABPTR                                         0979
*                           SNTELPTR=ADDR(SNTELFST);/* RESET EL PTR  */
         LA    R7,SNTELFST(,R6)                                    0980
         ST    R7,SNTELPTR(,COMONPTR)                              0980
*                         END;      /*                               */
*                     ELSE          /* OTHERWISE                     */
*                       SNTELPTR=SNTELPTR+SNTLNG+LENGTH(SNTELEM);  0982
         B     @RC00975                                            0982
@RF00975 L     R14,SNTELPTR(,COMONPTR)                             0982
         LH    R15,SNTLNG(,R14)                                    0982
         ALR   R15,R14                                             0982
         AL    R15,FW8                                             0982
         ST    R15,SNTELPTR(,COMONPTR)                             0982
*                   END;            /*                               */
@RC00975 DS    0H                                                  0983
@DE00960 TM    EXITC(COMONPTR),B'00000001'                         0983
         BZ    @DL00960                                            0983
*                   RFY                                            0984
*                    (R2,                                          0984
*                     R3,                                          0984
*                     R4,                                          0984
*                     R5) UNRSTD;   /* RELEASE REGS                  */
*                   SNTELPTR=SNTSAVE;/* RESTORE SNTELPTR             */
         L     R1,SNTSAVE                                          0985
         ST    R1,SNTELPTR(,COMONPTR)                              0985
*                   SNTABPTR=SNTABFST;/* RESTORE TABLE POINTER       */
         L     R1,EXECDPTR(,COMONPTR)                              0986
         L     R1,SNTABFST(,R1)                                    0986
         ST    R1,SNTABPTR                                         0986
*
*           SNTVLPTR=SVTABPTR+SVTABUSE;/* ASSIGN NEW SLOT            */
@RF00927 EQU   *
         L     R2,SVTABPTR                                         0999
         L     R3,SVTABUSE(,R2)                                    0999
         L     R4,@PC00024+4
         L     R1,VALLEN(,R4)
         LR    R0,R3                                               0999
         ALR   R0,R1                                               0999
*        ST    R0,SNTVLPTR(,R1)                                    0999
         AL    R0,FW4
         C     R0,SVTABLNG(,R2)
         BH    LBL01EDE
         L     R4,SNTELPTR(,COMONPTR)
         ALR   R3,R2
         ST    R3,SNTVLPTR(,R4)
         STH   R1,SVTORIG(,R3)
         STH   R1,SVTLNG(,R3)
         ST    R0,SVTABUSE(,R2)
*           SVTORIG=VALLEN;         /* SET LENGTH OF VALUE           */
*        L     R1,@PC00024+4                                       1000
*        L     R1,VALLEN(,R1)                                      1000
*        LR    R7,R0                                               1000
*        STH   R1,SVTORIG(,R7)                                     1000
*           SVTLNG=VALLEN;          /*                               */
*        LR    R7,R0                                               1001
*        STH   R1,SVTLNG(,R7)                                      1001
*           SVTABUSE=SVTABUSE+VALLEN+LENGTH(SVTELEM);/*              */
*        ALR   R14,R1                                              1002
*        AL    R14,FW4                                             1002
*        ST    R14,SVTABUSE(,R15)                                  1002
*         END;                      /*                               */
*       SVTABFRE=SVTABFRE+SVTLNG-VALLEN;/* ADJUST FREE AREA          */
@RF00925 L     R5,SVTABPTR                                         1004
         L     R1,SNTELPTR(,COMONPTR)                              1004
         L     R4,SNTVLPTR(,R1)                                    1004
         LH    R6,SVTLNG(,R4)                                      1004
         AL    R6,SVTABFRE(,R5)                                    1004
         L     R7,@PC00024+4                                       1004
         SL    R6,VALLEN(,R7)                                      1004
         ST    R6,SVTABFRE(,R5)                                    1004
*       IF NODATA=YES THEN          /* IF NODATA SPECIFIED           */
         TM    NODATA(COMONPTR),B'01000000'                        1005
         BNO   @RF01005                                            1005
*         SVTLNG=F0;                /* CURRENT LENGTH IS ZERO        */
         SLR   R5,R5                                               1006
         STH   R5,SVTLNG(,R4)                                      1006
*       ELSE                        /* OTHERWISE                     */
*         SVTLNG=VALLEN;            /* SET NEW LENGTH                */
         B     @RC01005                                            1007
@RF01005 L     R1,SNTELPTR(,COMONPTR)                              1007
         L     R1,SNTVLPTR(,R1)                                    1007
         L     R2,@PC00024+4                                       1007
         L     R0,VALLEN(,R2)                                      1007
         STH   R0,SVTLNG(,R1)                                      1007
*       RFY                                                        1008
*        (R2,                                                      1008
*         R3,                                                      1008
*         R4,                                                      1008
*         R5) RSTD;                 /* RESTRICT REGS                 */
@RC01005 DS    0H                                                  1009
*       R2=ADDR(SVTDATA);           /*                               */
         L     R1,SNTELPTR(,COMONPTR)                              1009
         L     R6,SNTVLPTR(,R1)                                    1009
         LA    R2,SVTDATA(,R6)                                     1009
*       R3=SVTORIG;                 /* ALWAYS CLEAR OR MOVE TO ALL   */
         LH    R3,SVTORIG(,R6)                                     1010
*       R4=ADDR(VALUE);             /* POINT TO NEW DATA             */
         L     R4,@PC00024                                         1011
*       R5=SVTLNG BLANKS;           /* ONLY MOVE WHAT SVTLNG SAYS    */
         LH    R5,SVTLNG(,R6)                                      1012
         O     R5,HIBLANK                                          1012
*       MVCL(R2,R4);                /* MOVE NEW DATA                 */
         MVCL  R2,R4                                               1013
@RC00922 L      R1,SVTABPTR
         L      R2,SVTABNXT(,R1)
         ST     R2,SVTWOPTR
         B      LBL02164
*                   DO;             /* FREEMAIN                    0987
*                                      LV(SVTABNXT->SVTABLNG)      0987
*                                      A(SVTABNXT) SP(78)          0987
*                                      MF(E,FRELST)                  */
*                     RESPECIFY                                    0988
*                      (R1) RESTRICTED;                            0988
*                     FRELST02=SVTABNXT->SVTABLNG;/* LENGTH          */
LBL02138 L     R3,SVTWOPTR
         L     R2,SVTABNXT(,R3)
         ST    R2,SVONEPTR
         MVC   FRELST02(3),SVTABLNG+1(R3)                          0989
         LA    R0,SVTWOPTR
*                     FRELST04=ADDR(SVTABNXT);/* ADDR OF ADDR LIST   */
         STCM  R0,7,FRELST04                                       0990
*                     FRELST06=78;  /* SUBPOOL VALUE                 */
         MVI   FRELST06,X'4E'                                      0991
*                     R1=ADDR(FRELST);/* REG1 POINTS TO LIST         */
         LA    R1,FRELST                                           0992
*                     SVC(5);       /* STANDARD-FORM OF GETMAIN      */
         SVC   5                                                   0993
*                     RESPECIFY                                    0994
*                      (R1) UNRESTRICTED;                          0994
*                   END;            /* FREEMAIN                    0995
*                                      LV(SVTABNXT->SVTABLNG)      0995
*                                      A(SVTABNXT) SP(78)          0995
*                                      MF(E,FRELST)                  */
*                   SVTABNXT=F0;    /* BREAK CHAIN                   */
*        L     R1,SVTABPTR                                         0996
         L     R3,SVONEPTR
         ST    R3,SVTWOPTR
LBL02164 SLR   R4,R4                                               0996
         C     R4,SVTWOPTR
         BNE   LBL02138
         L     R5,SVTABPTR
         ST    R4,SVTABNXT(,R5)                                    0996
*       RFY                                                        1014
*        (R2,                                                      1014
*         R3,                                                      1014
*         R4,                                                      1014
*         R5) UNRSTD;               /* RELEASE REGS                  */
*     END;                          /*                               */
*   EXECDPTR=LSDEXEC;               /* RESET EXEC DATA POINTER       */
         L     R1,LSDPTR(,COMONPTR)                                1016
         L     R1,LSDEXEC-LSD(,R1)                                 1016
         ST    R1,EXECDPTR(,COMONPTR)                              1016
*   ERROR=ERCOM;                                                   1017
         L     R3,ERCOM(,COMONPTR)                                 1017
         ST    R3,ERROR                                            1017
*   END UPDATE;                     /* END OF UPDATE                 */
         B     @EL00024                                            1018
*
*                 END;              /*                               */
*             END;                  /*                               */
*           SNTVLPTR=SVTABPTR+SVTABUSE;/* ASSIGN NEW SLOT            */
*RF00927 L     R1,SNTELPTR(,COMONPTR)                              0999
*        L     R15,SVTABPTR                                        0999
*        L     R14,SVTABUSE(,R15)                                  0999
*        LR    R0,R15                                              0999
*        ALR   R0,R14                                              0999
*        ST    R0,SNTVLPTR(,R1)                                    0999
*           SVTORIG=VALLEN;         /* SET LENGTH OF VALUE           */
*        L     R1,@PC00024+4                                       1000
*        L     R1,VALLEN(,R1)                                      1000
*        LR    R7,R0                                               1000
*        STH   R1,SVTORIG(,R7)                                     1000
*           SVTLNG=VALLEN;          /*                               */
*        LR    R7,R0                                               1001
*        STH   R1,SVTLNG(,R7)                                      1001
*           SVTABUSE=SVTABUSE+VALLEN+LENGTH(SVTELEM);/*              */
*        ALR   R14,R1                                              1002
*        AL    R14,FW4                                             1002
*        ST    R14,SVTABUSE(,R15)                                  1002
*         END;                      /*                               */
*                                                                  1019
*   /*****************************************************************/
*   /*                                                               */
*   /* RETURN CODE UPDATE                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1019
*RCUPDT:                                                           1019
*   PROC;                                                          1019
RCUPDT   STM   R14,R12,@SA00025                                    1019
*   IF NOLASTCC=YES THEN            /* IF SKIP LASTCC UPDATE @ZA03879*/
         L     R4,EXECDPTR(,COMONPTR)                              1020
         TM    NOLASTCC(R4),B'01000000'                            1020
         BNO   @RF01020                                            1020
*     NOLASTCC=NO;                  /* TURN OFF FLAG         @ZA03879*/
         NI    NOLASTCC(R4),B'10111111'                            1021
*   ELSE                            /*                       @ZA03879*/
*     DO;                           /* NORMAL UPDATE         @ZA03879*/
         B     @RC01020                                            1022
@RF01020 DS    0H                                                  1023
*       IF RCABEND=YES&ERRSAV//F4096=F0 THEN/* IF SYSTEM ABEND CODE  */
         TM    RCABEND(COMONPTR),B'10000000'                       1023
         BNO   @RF01023                                            1023
         L     R5,ERRSAV                                           1023
         LR    R6,R5                                               1023
         SRDA  R6,32                                               1023
         D     R6,FW4096                                           1023
         LTR   R6,R6                                               1023
         BNZ   @RF01023                                            1023
*         DO;                       /* DETRIMINE TYPE                */
*           AREA(1:4)=ERRSAV;       /* PREPARE FOR UNPAK             */
         STCM  R5,15,AREA                                          1025
*           UNPK(OUTA1(2:8),AREA(1:5));/* UNPACK ABEND CODE          */
         UNPK  OUTA1+1(7),AREA(5)                                  1026
*           DO I=F7 TO F2 BY-F1;    /* TRANSLATE FA-FF TO C1-C5      */
         LA    R6,7                                                1027
         ST    R6,I(,COMONPTR)                                     1027
@DL01027 DS    0H                                                  1028
*             IF OUTFX(I)>F249 THEN /* DECIMAL OF F9 (FA-FF IS >)    */
         L     R7,I(,COMONPTR)                                     1028
         SLR   R6,R6                                               1028
         IC    R6,OUTFX-1(R7)                                      1028
         C     R6,FW249                                            1028
         BNH   @RF01028                                            1028
*               OUTFX(I)=OUTFX(I)-F57;/* SUBTRACT 39 (FA-39=C1)      */
         SL    R6,FW57                                             1029
         STC   R6,OUTFX-1(R7)                                      1029
*           END;                    /* DONE TRANSLATE                */
@RF01028 SLR   R6,R6                                               1030
         BCTR  R6,0                                                1030
         AL    R6,I(,COMONPTR)                                     1030
         ST    R6,I(,COMONPTR)                                     1030
         C     R6,FW2                                              1030
         BNL   @DL01027                                            1030
*           OUTA1(1)=CCS;           /* INSERT S FOR SYSTEM           */
         MVI   OUTA1,C'S'                                          1031
*           LEN=F4;                 /* LENGTH OF ANSWER              */
         MVC   LEN(4,COMONPTR),FW4                                 1032
*         END;                      /*                               */
*       ELSE                        /* NORMAL PROCESSING             */
*         DO;                       /*                               */
         B     @RC01023                                            1034
@RF01023 DS    0H                                                  1035
*           CVD(ERRSAV,WORKAREA);   /* CONVERT CODE TO PRINTABLE     */
         L     R7,ERRSAV                                           1035
         CVD   R7,WORKAREA                                         1035
*           UNPK(OUTA1(1:16),WORKAREA);/*                            */
         UNPK  OUTA1(16),WORKAREA(8)                               1036
*           OUTA1(16)=OUTA1(16) CC0;/* INSURE PRINTABLE CHARS        */
         OI    OUTA1+15,C'0'                                       1037
*           IF RCABEND=YES THEN     /* IF USER ABEND CODE            */
         TM    RCABEND(COMONPTR),B'10000000'                       1038
         BNO   @RF01038                                            1038
*             DO;                   /*                               */
*               LEN=F5;             /* LENGTH IS FIVE                */
         MVC   LEN(4,COMONPTR),FW5                                 1040
*               OUTA1(1)=CCU;       /* SET U TYPE                    */
         MVI   OUTA1,C'U'                                          1041
*               OUTA1(2:5)=OUTA1(13:16);/* MOVE OVER CHARS           */
         MVC   OUTA1+1(4),OUTA1+12                                 1042
*             END;                  /*                               */
*           ELSE                    /* OTHERWISE GET CODE            */
*             DO LEN=F16 TO F2 BY-F1 WHILE OUTA1(1)=CC0;/* LZ      1044
*                                      SUPPRESS                      */
         B     @RC01038                                            1044
@RF01038 LA    R14,16                                              1044
         ST    R14,LEN(,COMONPTR)                                  1044
@DL01044 CLI   OUTA1,C'0'                                          1044
         BNE   @DC01044                                            1044
*               OUTA1(1:15)=OUTA1(2:16);/* SHIFT DOWN BUFFER         */
         MVC   @TS00001(15),OUTA1+1                                1045
         MVC   OUTA1(15),@TS00001                                  1045
*             END;                  /*                               */
         SLR   R14,R14                                             1046
         BCTR  R14,0                                               1046
         AL    R14,LEN(,COMONPTR)                                  1046
         ST    R14,LEN(,COMONPTR)                                  1046
         C     R14,FW2                                             1046
         BNL   @DL01044                                            1046
@DC01044 DS    0H                                                  1047
*         END;                      /*                               */
@RC01038 DS    0H                                                  1048
*       CALL LOCATE(LASTCC,LENGTH(LASTCC),F0);/* LOCATE LASTCC       */
@RC01023 LA    R1,@AL01048                                         1048
         BAL   R14,LOCATE                                          1048
*       IF ERROR=F0 THEN            /* IF LOCATE OK                  */
         L     R15,ERROR                                           1049
         LTR   R15,R15                                             1049
         BNZ   @RF01049                                            1049
*         DO;                       /* PROCESS UPDATE                */
*           CALL UPDATE(OUTA1,LEN); /* UPDATE LASTCC                 */
         LA    R0,OUTA1                                            1051
         ST    R0,@AL00001                                         1051
         LA    R1,LEN(,COMONPTR)                                   1051
         ST    R1,@AL00001+4                                       1051
         LA    R1,@AL00001                                         1051
         BAL   R14,UPDATE                                          1051
*           CALL LOCATE(MAXCC,LENGTH(MAXCC),F0);/* LOCATE MAXCC      */
         LA    R1,@AL01052                                         1052
         BAL   R14,LOCATE                                          1052
*           IF ERROR=F0&SVTLNG<LEN (SVTLNG=/* MX SMALLER ?           */
*               LEN&SVTDATA(1:LEN)<OUTA1(1:LEN)) THEN/* UPDATE       */
         L     R2,ERROR                                            1053
         LTR   R2,R2                                               1053
         BNZ   @GL00065                                            1053
         L     R1,SNTELPTR(,COMONPTR)                              1053
         L     R1,SNTVLPTR(,R1)                                    1053
         LH    R2,SVTLNG(,R1)                                      1053
         C     R2,LEN(,COMONPTR)                                   1053
         BL    @RT01053                                            1053
@GL00065 L     R1,SNTELPTR(,COMONPTR)                              1053
         L     R2,SNTVLPTR(,R1)                                    1053
         L     R3,LEN(,COMONPTR)                                   1053
         CH    R3,SVTLNG(,R2)                                      1053
         BNE   @RF01053                                            1053
         BCTR  R3,0                                                1053
         EX    R3,@SC01113                                         1053
         BNL   @RF01053                                            1053
@RT01053 DS    0H                                                  1054
*             CALL UPDATE(OUTA1,LEN);/* UPDATE MAXCC                 */
         LA    R4,OUTA1                                            1054
         ST    R4,@AL00001                                         1054
         LA    R5,LEN(,COMONPTR)                                   1054
         ST    R5,@AL00001+4                                       1054
         LA    R1,@AL00001                                         1054
         BAL   R14,UPDATE                                          1054
*         END;                      /*                               */
@RF01053 DS    0H                                                  1056
*       IF ERROR^=F0&ERROR^=E16 THEN/* ERROR FINDIN OR UPDATIN CC S  */
@RF01049 L     R6,ERROR                                            1056
         LTR   R6,R6                                               1056
         BZ    @RF01056                                            1056
         C     R6,FW16                                             1056
         BE    @RF01056                                            1056
*         ERROR=E999;               /* SET INTERNAL CLIST ERROR      */
         MVC   ERROR(4),FW999                                      1057
*     END;                          /* END NORMAL UPDATE     @ZA03879*/
*   END RCUPDT;                                                    1059
@EL00025 DS    0H                                                  1059
@EF00025 DS    0H                                                  1059
@ER00025 LM    R14,R12,@SA00025                                    1059
         BR    R14                                                 1059
*                                                                  1060
*   /*****************************************************************/
*   /*                                                               */
*   /* PRINT SUB FUNCTION                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1060
*PRINT:                                                            1060
*   PROC(LINEADDR,TERMPUT) OPTIONS(SAVEAREA);                      1060
PRINT    STM   R14,R12,12(R13)                                     1060
         ST    R13,@SA00026+4                                      1060
         LA    R14,@SA00026                                        1060
         ST    R14,8(,R13)                                         1060
         LR    R13,R14                                             1060
         MVC   @PC00026(8),0(R1)                                   1060
*   DCL                                                            1061
*     TERMPUT FIXED(31),                                           1061
*     LINEADDR PTR(31),                                            1061
*     ASIS FIXED(31) CONSTANT(2);                                  1061
*   IOPL(4)=ADDR(PLBLK);            /* ADDR OF PARM BLOCK            */
         LA    R7,PLBLK                                            1062
         ST    R7,IOPL+12(,COMONPTR)                               1062
*   CLEN=LINEADDR->LL;              /* SAVE ORIGINAL LENGTH          */
         L     R14,@PC00026                                        1063
         L     R1,LINEADDR(,R14)                                   1063
         LH    R2,LL(,R1)                                          1063
         STH   R2,CLEN(,COMONPTR)                                  1063
*   LINEADDR->LL=LINEADDR->LL-FREEAMT;/* REDUCE TOTAL LENGTH         */
         SL    R2,FREEAMT(,COMONPTR)                               1064
         STH   R2,LL(,R1)                                          1064
*   IF LINEADDR->LL=F4 THEN         /* IF LL=4 THEN SET LL=5         */
         C     R2,FW4                                              1065
         BNE   @RF01065                                            1065
*     LINEADDR->LL=F5;              /* TO FOOL TCAM (FOR C/R)        */
         MVC   LL(2,R1),HW5                                        1066
*   RFY                                                            1067
*    (R1,                                                          1067
*     R4,                                                          1067
*     R15) RSTD;                    /* RESTRICT REGS                 */
@RF01065 DS    0H                                                  1068
*   R15=ADDR(IKJEFT40);             /* ADDR OF T40                   */
         L     R15,IKJEFT40                                        1068
*   R1=ADDR(IOPL);                  /* LOAD REG 1                    */
         LR    R1,COMONPTR                                         1069
*   R4=LINEADDR;                    /* POINTER TO LINE TO PRINT      */
         L     R0,@PC00026                                         1070
         LR    R14,R0                                              1070
         L     R4,LINEADDR(,R14)                                   1070
*   IF TERMPUT=ASIS THEN            /* PUTLINE ASIS                  */
         L     R5,@PC00026+4                                       1071
         CLC   TERMPUT(4,R5),FW2                                   1071
         BNE   @RF01071                                            1071
*     GEN                                                          1072
*(PUTLINE OUTPUT=((R4),DATA),TERMPUT=ASIS,MF=(E,(1)),ENTRY=(15));  1072
         PUTLINE OUTPUT=((R4),DATA),TERMPUT=ASIS,MF=(E,(1)),ENTRY=(15)
*   ELSE                            /* OTHERWISE PRINT EDIT          */
*     GEN                                                          1073
*(PUTLINE OUTPUT=((R4),DATA),TERMPUT=EDIT,MF=(E,(1)),ENTRY=(15));  1073
         B     @RC01071                                            1073
@RF01071 DS    0H                                                  1073
         PUTLINE OUTPUT=((R4),DATA),TERMPUT=EDIT,MF=(E,(1)),ENTRY=(15)
*   RFY                                                            1074
*    (R1,                                                          1074
*     R4,                                                          1074
*     R15) UNRSTD;                  /* FREE REGS                     */
@RC01071 DS    0H                                                  1075
*   LINEADDR->LL=CLEN;              /* RESTORE LENGTH                */
         L     R6,@PC00026                                         1075
         L     R1,LINEADDR(,R6)                                    1075
         LH    R0,CLEN(,COMONPTR)                                  1075
         STH   R0,LL(,R1)                                          1075
*   END PRINT;                                                     1076
@EL00026 L     R13,4(,R13)                                         1076
@EF00026 DS    0H                                                  1076
@ER00026 LM    R14,R12,12(R13)                                     1076
         BR    R14                                                 1076
*                                                                  1077
*   /*****************************************************************/
*   /*                                                               */
*   /* COMMAND LIST ROUTINE                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1077
*CMDLST:                                                           1077
*   PROC;                                                          1077
CMDLST   STM   R14,R12,@SA00027                                    1077
*   IF OPCODE^=IGOTO THEN           /* AS LONG AS NOT INTERNAL GOTO  */
         L     R1,OLDLINE(,COMONPTR)                               1078
         CLI   OPCODE(R1),15                                       1078
         BE    @RF01078                                            1078
*     DO;                           /* LIST COMMAND                  */
*       IF FOLD=NO THEN             /* FOLD INTO UPPER CASE ?        */
         TM    FOLD(COMONPTR),B'00010000'                          1080
         BNZ   @RF01080                                            1080
*         CALL PRINT(BUFBASE,F0);   /* NO- PRINT OK                  */
         LA    R2,BUFBASE(,COMONPTR)                               1081
         ST    R2,@AL00001                                         1081
         LA    R3,FW0                                              1081
         ST    R3,@AL00001+4                                       1081
         LA    R1,@AL00001                                         1081
         BAL   R14,PRINT                                           1081
*       ELSE                        /* YES- FOLD TO UPPER CASE       */
*         DO;                       /* BEFORE PRINTING               */
         B     @RC01080                                            1082
@RF01080 DS    0H                                                  1083
*           DO I=1 TO LL-(F4+FREEAMT);/* FOLD TO UPPER CASE          */
         LA    R4,1                                                1083
         B     @DE01083                                            1083
@DL01083 DS    0H                                                  1084
*             NEWC(I)=C(I);         /* COPY TO NEW BUFFER            */
         L     R5,I(,COMONPTR)                                     1084
         L     R4,NEWBASE(,COMONPTR)                               1084
         ALR   R5,R4                                               1084
         L     R6,I(,COMONPTR)                                     1084
         L     R7,BUFBASE(,COMONPTR)                               1084
         ALR   R7,R6                                               1084
         MVC   NEWC-1(1,R5),C-1(R7)                                1084
*             TR(NEWC(I),TRTABUP);  /* TRANSLATE TO UPPER CASE       */
         ALR   R4,R6                                               1085
         TR    NEWC-1(1,R4),TRTABUP                                1085
*           END;                    /*                               */
         LA    R4,1                                                1086
         AL    R4,I(,COMONPTR)                                     1086
@DE01083 ST    R4,I(,COMONPTR)                                     1086
         L     R5,BUFBASE(,COMONPTR)                               1086
         LA    R6,4                                                1086
         AL    R6,FREEAMT(,COMONPTR)                               1086
         LCR   R6,R6                                               1086
         AH    R6,LL(,R5)                                          1086
         CR    R4,R6                                               1086
         BNH   @DL01083                                            1086
*           CALL PRINT(NEWBASE,F0); /* PRINT FOLDED LINE             */
         LA    R7,NEWBASE(,COMONPTR)                               1087
         ST    R7,@AL00001                                         1087
         LA    R14,FW0                                             1087
         ST    R14,@AL00001+4                                      1087
         LA    R1,@AL00001                                         1087
         BAL   R14,PRINT                                           1087
*         END;                      /*                               */
*     END;                                                         1089
*   END CMDLST;                                                    1090
@EL00027 DS    0H                                                  1090
@EF00027 DS    0H                                                  1090
@ER00027 LM    R14,R12,@SA00027                                    1090
         BR    R14                                                 1090
*   /*****************************************************************/
*   /*                                                      ZP60014  */
*   /* &NRSTR BUILT IN FUNCTION                             ZP60014  */
*   /*                                                      ZP60014  */
*   /*****************************************************************/
*
NRSTRRTN OI    LCLFLAGS,$#NRSTR     SET FUNCTION ACTIVE FLAG    ZP60014
*                                   DROP THROUGH TO STRING FUNCTION
*                                                                  1091
*   /*****************************************************************/
*   /*                                                               */
*   /* STRING BUILT IN FUNCTION                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1091
*STRRTN:                                                           1091
*   PROC;                                                          1091
STRRTN   STM   R14,R12,@SA00028                                    1091
*   CALL WAITRTN;                   /* CHECK FOR WAIT                */
         BAL   R14,WAITRTN                                         1092
*   IF WAIT=NO&ERROR=F0 THEN        /* IF OK                         */
         TM    WAIT(COMONPTR),B'00010000'                          1093
         BNZ   @RF01093                                            1093
         L     R15,ERROR                                           1093
         LTR   R15,R15                                             1093
         BNZ   @RF01093                                            1093
*     DO;                           /* PROCESS                       */
*       PCTR=F1;                    /* INIT PCTR                     */
         LA    R0,1                                                1095
         ST    R0,PCTR                                             1095
*       INSRTDA=ADDR(C(I+1));       /* POINT TO VALUE                */
         L     R1,I(,COMONPTR)                                     1096
         L     R2,BUFBASE(,COMONPTR)                               1096
         LA    R3,C(R1,R2)                                         1096
         ST    R3,INSRTDA                                          1096
*       INSRTLN=ADDR(C(M))-INSRTDA; /* FIND LENGTH OF STRING         */
         L     R1,M                                                1097
         LA    R2,C-1(R1,R2)                                       1097
         SLR   R2,R3                                               1097
         ST    R2,INSRTLN                                          1097
*       DO I=1 TO INSRTLN;          /*                               */
         B     @DE01098                                            1098
@DL01098 DS    0H                                                  1099
*         TR(INSRTCHR(I),TRTABDN);  /* FOLD TO SPCL CHR              */
         L     R1,I(,COMONPTR)                                     1099
         L     R2,INSRTDA                                          1099
         ALR   R2,R1                                               1099
         BCTR  R2,0                                                1099
         TR    INSRTCHR(1,R2),TRTABDN                              1099
*       END;                                                       1100
         LA    R0,1                                                1100
         AL    R0,I(,COMONPTR)                                     1100
@DE01098 ST    R0,I(,COMONPTR)                                     1100
         C     R0,INSRTLN                                          1100
         BNH   @DL01098                                            1100
*       I=M+F1;                     /* POINT TO RESUME DATA          */
         LA    R1,1                                                1101
         AL    R1,M                                                1101
         ST    R1,I(,COMONPTR)                                     1101
*     END;                                                         1102
*   END STRRTN;                                                    1103
@EL00028 DS    0H                                                  1103
@EF00028 DS    0H                                                  1103
@ER00028 LM    R14,R12,@SA00028                                    1103
         BR    R14                                                 1103
*                                                                  1104
*   /*****************************************************************/
*   /*                                                               */
*   /* SEPARATOR FLUSH ROUTINE                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1104
*SKIPSEPS:                                                         1104
*   PROC;                                                          1104
SKIPSEPS STM   R14,R12,12(R13)                                     1104
*   SEPS=YES;                       /* SKIP ALL DELIMETERS           */
         OI    SEPS(COMONPTR),B'10000000'                          1105
*   WORDPTR=BUFBASE;                /* POINT TO BUFFER               */
         L     R3,BUFBASE(,COMONPTR)                               1106
         ST    R3,WORDPTR                                          1106
*   WI=I;                           /* GET I                         */
         L     R5,I(,COMONPTR)                                     1107
         ST    R5,WI                                               1107
*   DO WHILE SEPS=YES&WI<=WLL-(F4+FREEAMT);/*                        */
         B     @DE01108                                            1108
@DL01108 DS    0H                                                  1109
*     IF W(WI)^=BLANK&W(WI)^=COMMA&W(WI)^=TAB THEN/* NOT DELIM       */
         L     R6,WORDPTR                                          1109
         L     R7,WI                                               1109
         ALR   R7,R6                                               1109
         CLI   W-1(R7),C' '                                        1109
         BE    @RF01109                                            1109
         L     R7,WI                                               1109
         ALR   R7,R6                                               1109
         CLI   W-1(R7),C','                                        1109
         BE    @RF01109                                            1109
         L     R7,WI                                               1109
         ALR   R7,R6                                               1109
         CLI   W-1(R7),X'05'                                       1109
         BE    @RF01109                                            1109
*       IF WI<WLL-(F4+FREEAMT)&W(WI:WI+F1)=OPENCMT THEN/* CMT        */
         L     R7,WI                                               1110
         LA    R14,4                                               1110
         L     R15,FREEAMT(,COMONPTR)                              1110
         ALR   R15,R14                                             1110
         LCR   R15,R15                                             1110
         AH    R15,WLL(,R6)                                        1110
         CR    R7,R15                                              1110
         BNL   @RF01110                                            1110
         ALR   R6,R7                                               1110
         CLC   W-1(2,R6),SLSHASTR                                  1110
         BNE   @RF01110                                            1110
*         DO;                       /*                               */
*           DO WI=WI+F4 TO WLL-(F4+FREEAMT) WHILE/*                  */
*                 W(WI-F2:WI-F1)^=CLOSCMT;/*                         */
         ALR   R7,R14                                              1112
         B     @DE01112                                            1112
@DL01112 L     R1,WORDPTR                                          1112
         ALR   R1,R7                                               1112
         CLC   W-3(2,R1),ASTRSLSH                                  1112
         BE    @DC01112                                            1112
*           END;                    /* FIND CLOSE COMMENT            */
         AL    R7,FW1                                              1113
@DE01112 ST    R7,WI                                               1113
         LA    R6,4                                                1113
         AL    R6,FREEAMT(,COMONPTR)                               1113
         LCR   R6,R6                                               1113
         L     R1,WORDPTR                                          1113
         AH    R6,WLL(,R1)                                         1113
         CR    R7,R6                                               1113
         BNH   @DL01112                                            1113
@DC01112 DS    0H                                                  1114
*         END;                                                     1114
*       ELSE                        /* IF NOT A DELIMETER, END SKIP  */
*         SEPS=NO;                  /*                               */
         B     @RC01110                                            1115
@RF01110 NI    SEPS(COMONPTR),B'01111111'                          1115
*     ELSE                          /* IF A SEPARATOR, INCREMENT     */
*       WI=WI+F1;                   /* INDEX                         */
         B     @RC01109                                            1116
@RF01109 LA    R2,1                                                1116
         AL    R2,WI                                               1116
         ST    R2,WI                                               1116
*   END;                                                           1117
@RC01109 DS    0H                                                  1117
@DE01108 TM    SEPS(COMONPTR),B'10000000'                          1117
         BNO   @DC01108                                            1117
         LA    R3,4                                                1117
         AL    R3,FREEAMT(,COMONPTR)                               1117
         LCR   R3,R3                                               1117
         L     R2,WORDPTR                                          1117
         AH    R3,WLL(,R2)                                         1117
         C     R3,WI                                               1117
         BNL   @DL01108                                            1117
@DC01108 DS    0H                                                  1118
*   I=WI;                           /* SET I                         */
         L     R4,WI                                               1118
         ST    R4,I(,COMONPTR)                                     1118
*   END SKIPSEPS;                                                  1119
@EL00029 DS    0H                                                  1119
@EF00029 DS    0H                                                  1119
@ER00029 LM    R14,R12,12(R13)                                     1119
         BR    R14                                                 1119
*                                                                  1120
*   /*****************************************************************/
*   /*                                                               */
*   /* FIND A WORD ROUTINE                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1120
*FINDWORD:                                                         1120
*   PROC;                                                          1120
FINDWORD STM   R14,R12,@SA00030                                    1120
*   CALL SKIPSEPS;                  /* SKIP SEPARATORS               */
         BAL   R14,SKIPSEPS                                        1121
*SCANWORD:                                                         1122
*   ENTRY;                          /* SCANWORD ENTRY                */
         B     @EC01122                                            1122
SCANWORD STM   R14,R12,@SA00030                                    1122
@EC01122 DS    0H                                                  1123
*   BEGIN=I;                        /* BEGIN OF KYWWORD              */
         L     R5,I(,COMONPTR)                                     1123
         ST    R5,BEGIN(,COMONPTR)                                 1123
*   WI=I;                           /* GET I                         */
         ST    R5,WI                                               1124
*   ENDDLM=YES;                     /* INIT ENDDLM TO YES            */
         OI    ENDDLM(COMONPTR),B'01000000'                        1125
*   WORDPTR=BUFBASE;                /* SET BASE                      */
         L     R4,BUFBASE(,COMONPTR)                               1126
         ST    R4,WORDPTR                                          1126
*   IF SEPS=NO THEN                 /* IF ALL SEPARATORS             */
         TM    SEPS(COMONPTR),B'10000000'                          1127
         BNZ   @RF01127                                            1127
*     DO;                                                          1128
*       DO WI=WI TO LL-(F4+FREEAMT) WHILE/* CHECK FOR VALID CHARS    */
*             (W(WI)>=CCA&W(WI)<=CCI) /* A TO I                      */
*             (W(WI)>=CCJ&W(WI)<=CCR) /* J TO R                      */
*             (W(WI)>=CCS&W(WI)<=CCZ) /* S TO Z                      */
*             (WI^=BEGIN&W(WI)>=CC0&W(WI)<=CC9);/* 0 TO 9            */
         B     @DE01129                                            1129
@DL01129 L     R4,WORDPTR                                          1129
         ALR   R5,R4                                               1129
         CLI   W-1(R5),C'A'                                        1129
         BL    @GL00076                                            1129
         L     R5,WI                                               1129
         ALR   R4,R5                                               1129
         CLI   W-1(R4),C'I'                                        1129
         BNH   @DB01129                                            1129
@GL00076 L     R6,WORDPTR                                          1129
         L     R7,WI                                               1129
         ALR   R7,R6                                               1129
         CLI   W-1(R7),C'J'                                        1129
         BL    @GL00075                                            1129
         L     R7,WI                                               1129
         ALR   R6,R7                                               1129
         CLI   W-1(R6),C'R'                                        1129
         BNH   @DB01129                                            1129
@GL00075 L     R14,WORDPTR                                         1129
         L     R15,WI                                              1129
         ALR   R15,R14                                             1129
         CLI   W-1(R15),C'S'                                       1129
         BL    @GL00074                                            1129
         L     R15,WI                                              1129
         ALR   R14,R15                                             1129
         CLI   W-1(R14),C'Z'                                       1129
         BNH   @DB01129                                            1129
@GL00074 L     R0,WI                                               1129
         C     R0,BEGIN(,COMONPTR)                                 1129
         BE    @DC01129                                            1129
         L     R1,WORDPTR                                          1129
         LR    R2,R0                                               1129
         ALR   R2,R1                                               1129
         CLI   W-1(R2),C'0'                                        1129
         BL    @DC01129                                            1129
         ALR   R1,R0                                               1129
         CLI   W-1(R1),C'9'                                        1129
         BH    @DC01129                                            1129
@DB01129 DS    0H                                                  1130
*       END;                        /*                               */
         LA    R5,1                                                1130
         AL    R5,WI                                               1130
         ST    R5,WI                                               1130
@DE01129 L     R1,BUFBASE(,COMONPTR)                               1130
         LA    R4,4                                                1130
         AL    R4,FREEAMT(,COMONPTR)                               1130
         LCR   R4,R4                                               1130
         AH    R4,LL(,R1)                                          1130
         CR    R5,R4                                               1130
         BNH   @DL01129                                            1130
@DC01129 DS    0H                                                  1131
*       IF WI<=WLL-(F4+FREEAMT)&W(WI)^=BLANK&/* NOT END OF BFR AND NT*/
*           W(WI)^=COMMA&W(WI)^=TAB&(OPCODE^=SETCODE W(WI)^=EQUAL)&/**/
*           (WI=WLL-(F4+FREEAMT) W(WI:WI+F1)^=OPENCMT) THEN/* NOT CMT*/
         L     R5,WI                                               1131
         L     R4,WORDPTR                                          1131
         LA    R6,4                                                1131
         AL    R6,FREEAMT(,COMONPTR)                               1131
         LCR   R6,R6                                               1131
         AH    R6,WLL(,R4)                                         1131
         CR    R5,R6                                               1131
         BH    @RF01131                                            1131
         ALR   R5,R4                                               1131
         CLI   W-1(R5),C' '                                        1131
         BE    @RF01131                                            1131
         L     R5,WI                                               1131
         ALR   R5,R4                                               1131
         CLI   W-1(R5),C','                                        1131
         BE    @RF01131                                            1131
         L     R5,WI                                               1131
         ALR   R5,R4                                               1131
         CLI   W-1(R5),X'05'                                       1131
         BE    @RF01131                                            1131
         L     R1,OLDLINE(,COMONPTR)                               1131
         CLI   OPCODE(R1),13                                       1131
         BNE   @GL00082                                            1131
         L     R5,WI                                               1131
         ALR   R4,R5                                               1131
         CLI   W-1(R4),C'='                                        1131
         BE    @RF01131                                            1131
@GL00082 L     R6,WI                                               1131
         L     R7,WORDPTR                                          1131
         LA    R14,4                                               1131
         AL    R14,FREEAMT(,COMONPTR)                              1131
         LCR   R14,R14                                             1131
         AH    R14,WLL(,R7)                                        1131
         CR    R6,R14                                              1131
         BE    @RT01131                                            1131
         ALR   R7,R6                                               1131
         CLC   W-1(2,R7),SLSHASTR                                  1131
         BE    @RF01131                                            1131
@RT01131 DS    0H                                                  1132
*         ENDDLM=NO;                /* SET NOT VALID DELIMETER       */
         NI    ENDDLM(COMONPTR),B'10111111'                        1132
*     END;                          /*                               */
@RF01131 DS    0H                                                  1134
*   I=WI;                           /* RESTORE I                     */
@RF01127 L     R15,WI                                              1134
         ST    R15,I(,COMONPTR)                                    1134
*   LEN=I-BEGIN;                    /* GET LENGTH OF KYWWORD         */
         SL    R15,BEGIN(,COMONPTR)                                1135
         ST    R15,LEN(,COMONPTR)                                  1135
*   END FINDWORD;                                                  1136
@EL00030 DS    0H                                                  1136
@EF00030 DS    0H                                                  1136
@ER00030 LM    R14,R12,@SA00030                                    1136
         BR    R14                                                 1136
*                                                                  1137
*   /*****************************************************************/
*   /*                                                               */
*   /* FIND A FILE ROUTINE                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1137
*FINDFILE:                                                         1137
*   PROC;                           /*                       @ZA17843*/
FINDFILE STM   R14,R12,@SA00031                                    1137
*   CALL SKIPSEPS;                  /* SKIP SEPARATORS       @ZA17843*/
         BAL   R14,SKIPSEPS                                        1138
*   BEGIN=I;                        /* BEGIN OF KYWWORD      @ZA17843*/
         L     R0,I(,COMONPTR)                                     1139
         ST    R0,BEGIN(,COMONPTR)                                 1139
*   WI=I;                           /* GET I                 @ZA17843*/
         ST    R0,WI                                               1140
*   ENDDLM=YES;                     /* INIT ENDDLM TO YES    @ZA17843*/
         OI    ENDDLM(COMONPTR),B'01000000'                        1141
*   WORDPTR=BUFBASE;                /* SET BASE              @ZA17843*/
         L     R1,BUFBASE(,COMONPTR)                               1142
         ST    R1,WORDPTR                                          1142
*   IF SEPS=NO THEN                 /* IF ALL SEPARATORS     @ZA17843*/
         TM    SEPS(COMONPTR),B'10000000'                          1143
         BNZ   @RF01143                                            1143
*     DO;                           /*                       @ZA17843*/
*       DO WI=WI TO LL-(F4+FREEAMT) WHILE/* CHAR CHECK       @ZA17843*/
*             (W(WI)>=CCA&W(WI)<=CCI) /* A TO I              @ZA17843*/
*             (W(WI)>=CCJ&W(WI)<=CCR) /* J TO R              @ZA17843*/
*             (W(WI)>=CCS&W(WI)<=CCZ) /* S TO Z              @ZA17843*/
*             (W(WI)=CC$ W(WI)=CC@ W(WI)=CC#) /* NATIONALS   @ZA17843*/
*             (WI^=BEGIN&W(WI)>=CC0&W(WI)<=CC9);/* 0 TO 9    @ZA17843*/
         B     @DE01145                                            1145
@DL01145 L     R1,WORDPTR                                          1145
         LR    R2,R0                                               1145
         ALR   R2,R1                                               1145
         CLI   W-1(R2),C'A'                                        1145
         BL    @GL00092                                            1145
         ALR   R1,R0                                               1145
         CLI   W-1(R1),C'I'                                        1145
         BNH   @DB01145                                            1145
@GL00092 L     R3,WORDPTR                                          1145
         L     R2,WI                                               1145
         ALR   R2,R3                                               1145
         CLI   W-1(R2),C'J'                                        1145
         BL    @GL00091                                            1145
         L     R2,WI                                               1145
         ALR   R3,R2                                               1145
         CLI   W-1(R3),C'R'                                        1145
         BNH   @DB01145                                            1145
@GL00091 L     R3,WORDPTR                                          1145
         L     R2,WI                                               1145
         ALR   R2,R3                                               1145
         CLI   W-1(R2),C'S'                                        1145
         BL    @GL00090                                            1145
         L     R2,WI                                               1145
         ALR   R3,R2                                               1145
         CLI   W-1(R3),C'Z'                                        1145
         BNH   @DB01145                                            1145
@GL00090 L     R3,WORDPTR                                          1145
         L     R2,WI                                               1145
         ALR   R2,R3                                               1145
         CLI   W-1(R2),C'$'                                        1145
         BE    @DB01145                                            1145
         L     R2,WI                                               1145
         ALR   R2,R3                                               1145
         CLI   W-1(R2),C'@'                                        1145
         BE    @DB01145                                            1145
         L     R2,WI                                               1145
         ALR   R2,R3                                               1145
         CLI   W-1(R2),C'#'                                        1145
         BE    @DB01145                                            1145
         L     R2,WI                                               1145
         C     R2,BEGIN(,COMONPTR)                                 1145
         BE    @DC01145                                            1145
         ALR   R2,R3                                               1145
         CLI   W-1(R2),C'0'                                        1145
         BL    @DC01145                                            1145
         L     R2,WI                                               1145
         ALR   R3,R2                                               1145
         CLI   W-1(R3),C'9'                                        1145
         BH    @DC01145                                            1145
@DB01145 DS    0H                                                  1146
*       END;                        /*                       @ZA17843*/
         LA    R0,1                                                1146
         AL    R0,WI                                               1146
         ST    R0,WI                                               1146
@DE01145 L     R1,BUFBASE(,COMONPTR)                               1146
         LA    R2,4                                                1146
         AL    R2,FREEAMT(,COMONPTR)                               1146
         LCR   R2,R2                                               1146
         AH    R2,LL(,R1)                                          1146
         CR    R0,R2                                               1146
         BNH   @DL01145                                            1146
@DC01145 DS    0H                                                  1147
*       IF WI<=WLL-(F4+FREEAMT)&W(WI)^=BLANK&/* BUFFER END?  @ZA17843*/
*           W(WI)^=COMMA&W(WI)^=TAB&(OPCODE^=SETCODE W(WI)^=EQUAL)&/**/
*           (WI=WLL-(F4+FREEAMT) W(WI:WI+F1)^=OPENCMT) THEN/*      1147
*                                                            @ZA17843*/
         L     R3,WI                                               1147
         L     R2,WORDPTR                                          1147
         LA    R4,4                                                1147
         AL    R4,FREEAMT(,COMONPTR)                               1147
         LCR   R4,R4                                               1147
         AH    R4,WLL(,R2)                                         1147
         CR    R3,R4                                               1147
         BH    @RF01147                                            1147
         ALR   R3,R2                                               1147
         CLI   W-1(R3),C' '                                        1147
         BE    @RF01147                                            1147
         L     R3,WI                                               1147
         ALR   R3,R2                                               1147
         CLI   W-1(R3),C','                                        1147
         BE    @RF01147                                            1147
         L     R3,WI                                               1147
         ALR   R3,R2                                               1147
         CLI   W-1(R3),X'05'                                       1147
         BE    @RF01147                                            1147
         L     R1,OLDLINE(,COMONPTR)                               1147
         CLI   OPCODE(R1),13                                       1147
         BNE   @GL00100                                            1147
         L     R3,WI                                               1147
         ALR   R2,R3                                               1147
         CLI   W-1(R2),C'='                                        1147
         BE    @RF01147                                            1147
@GL00100 L     R4,WI                                               1147
         L     R5,WORDPTR                                          1147
         LA    R6,4                                                1147
         AL    R6,FREEAMT(,COMONPTR)                               1147
         LCR   R6,R6                                               1147
         AH    R6,WLL(,R5)                                         1147
         CR    R4,R6                                               1147
         BE    @RT01147                                            1147
         ALR   R5,R4                                               1147
         CLC   W-1(2,R5),SLSHASTR                                  1147
         BE    @RF01147                                            1147
@RT01147 DS    0H                                                  1148
*         ENDDLM=NO;                /* SET NOT VALID DELIMET @ZA17843*/
         NI    ENDDLM(COMONPTR),B'10111111'                        1148
*     END;                          /*                       @ZA17843*/
@RF01147 DS    0H                                                  1150
*   I=WI;                           /* RESTORE I             @ZA17843*/
@RF01143 L     R7,WI                                               1150
         ST    R7,I(,COMONPTR)                                     1150
*   LEN=I-BEGIN;                    /* GET LENGTH OF KYWWORD @ZA17843*/
         SL    R7,BEGIN(,COMONPTR)                                 1151
         ST    R7,LEN(,COMONPTR)                                   1151
*   END FINDFILE;                   /*                       @ZA17843*/
@EL00031 DS    0H                                                  1152
@EF00031 DS    0H                                                  1152
@ER00031 LM    R14,R12,@SA00031                                    1152
         BR    R14                                                 1152
@DATA    DS    0H
*SM01094 MVC   STFLUSH(0),STACKL                                ZP60014
@SM01100 MVC   OUTCD(0),SVTDATA(R2)
@SM01102 MVC   0(0,R1),SVTDATA(R2)
@SM01104 MVC   0(0,R2),ANSWER(R1)
@SC01106 CLC   0(0,R3),C(R1)
@SC01109 CLC   NAME(0,R15),SNTDATA(R6)
@SM01111 MVC   SNTDATA(0,R4),NAME(R6)
@SC01113 CLC   SVTDATA(0,R2),OUTA1
         DS    0F
@AL00155 DC    A($SYSSCAN)             LIST WITH   3 ARGUMENT(S)
         DC    A(FW7)
         DC    A(FW0)
@AL00411 EQU   *                       LIST WITH   3 ARGUMENT(S)
@AL01048 DC    A($LASTCC)              LIST WITH   3 ARGUMENT(S)
         DC    A(FW6)
         DC    A(FW0)
@AL01052 DC    A($MAXCC)               LIST WITH   3 ARGUMENT(S)
         DC    A(FW5)
         DC    A(FW0)
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     R15 FIXED(31) REG(15),                                       1153
*     R1 PTR(31) REG(1);                                           1153
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       1154
*     I031F FIXED(31) BASED,                                       1154
*     I031P PTR(31) BASED,                                         1154
*     I015F FIXED(15) BASED,                                       1154
*     I015P PTR(15) BASED,                                         1154
*     I008P PTR(8) BASED,                                          1154
*     I001C CHAR(1) BASED;                                         1154
*   END IKJCT433                                                   1155
*                                                                  1155
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IKJUPT  )                                       */
         IKJUPT
*/*%INCLUDE SYSLIB  (IKJECT  )                                       */
         IKJECT
*/*%INCLUDE SYSLIB  (IKJLSD  )                                       */
         IKJLSD
*/*%INCLUDE SYSLIB  (IKJEXEC )                                       */
*                                                                  1155
*       ;                                                          1155
         IHAPSA
         IHAASCB
         IEFZB4D0
         IEFZB4D2
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    6F
@SA00028 DS    15F
@SA00015 DS    15F
@SA00008 DS    18F
@SA00012 DS    15F
@SA00013 DS    15F
@SA00014 DS    15F
@SA00016 DS    15F
@SA00030 DS    15F
@SA00026 DS    18F
@PC00026 DS    2F
@SA00021 DS    15F
@PC00021 DS    3F
@PC00024 DS    2F
@SA00031 DS    15F
@PC00007 DS    1F
@SA00025 DS    15F
@PC00005 DS    1F
@SA00027 DS    15F
@SA00004 DS    15F
@SA00003 DS    18F
@SA00011 DS    15F
@SA00020 DS    18F
@AL00001 DS    5A
@AFTEMPS DS    3F
IKJCT433 CSECT
         DS    0F
FW0      DC    F'0'
FW1      DC    F'1'
HW1      EQU   FW1+2
FW2      DC    F'2'
FW3      DC    F'3'
FW4      DC    F'4'
HW4      EQU   FW4+2
FW5      DC    F'5'
HW5      EQU   FW5+2
FW6      DC    F'6'
FW7      DC    F'7'
FW8      DC    F'8'
HW8      EQU   FW8+2
FW10     DC    F'10'
INDX#MAX DC    A(BILTINCT)             ORIGINALLY 10            ZP60014
FW12     DC    F'12'
HW12     EQU   FW12+2
FW16     DC    F'16'
FW20     DC    F'20'
FW31     DC    F'31'
FW57     DC    F'57'
FW200    DC    F'200'
FW220    DC    F'220'
FW249    DC    F'249'
FW252    DC    F'252'
FW300    DC    F'300'
FW312    DC    F'312'
FW900    DC    F'900'
FW904    DC    F'904'
FW908    DC    F'908'
FW912    DC    F'912'
FW916    DC    F'916'
FW920    DC    F'920'
FW924    DC    F'924'
FW932    DC    F'932'
FW936    DC    F'936'
FW940    DC    F'940'
FW944    DC    F'944'
FW960    DC    F'960'
FW999    DC    F'999'
FW4096   DC    F'4096'
FW10K    DC    F'10000'                                         ZP60014
FWNEG10  DC    F'-10'
FWNEG8   DC    F'-8'
FWNEG6   DC    F'-6'
FWNEG5   DC    F'-5'
HIGHBIT  DC    XL4'80000000'
HIBLANK  DC    XL4'40000000'
YRS1900  DC    PL4'1900000'
@DATD    DSECT
         DS    0D
ECTPTR   DS    A
WORDPTR  DS    A
SNTSAVE  DS    A
KPTR     DS    A
K        DS    A
UPTPTR   DS    A
INSRTDA  DS    A
RETURNCD DS    F
ERROR    DS    F
INDEX    DS    F
NEWLNG   DS    F
LEN1     DS    F
WI       DS    F
M        DS    F
N        DS    F
Z        DS    F
ERRSAV   DS    F
INSRTLN  DS    F
V1       DS    F
V2       DS    F
YEAR     DS    F
MONTH    DS    F
DAYS     DS    F
PCTR     DS    F
V        DS    F
SCANLIM  DS    F
HOWMUCH  DS    F
SVONEPTR DS    F
SVTWOPTR DS    F
ECDACBLK DS    AL4
         ORG   ECDACBLK
@NM00003 DS    AL1
ECDACBK2 DS    AL3
         ORG   ECDACBLK+4
SNTABPTR DS    A
SVTABPTR DS    A
NDX      DS    F
@TS00001 DS    CL15
OUTA1    DS    CL17
AREA     DS    CL16
TEMPA    EQU   AREA
TIMEOUT  EQU   AREA+4
HRS      EQU   TIMEOUT
MINUTES  EQU   TIMEOUT+2
SEC      EQU   TIMEOUT+4
DATEOUT  EQU   TIMEOUT
YR       EQU   DATEOUT
DYS      EQU   DATEOUT+4               YR IS 4 BYTES (WAS 2)    ZP60014
CSAVE    DS    CL2
         DS    CL2
WORKAREA DS    D
FRELST   DS    CL10
         ORG   FRELST
FRELST01 DS    AL1
FRELST02 DS    AL3
FRELST03 DS    AL1
FRELST04 DS    AL3
FRELST05 DS    BL1
FRELST06 DS    AL1
         ORG   FRELST+10
LCLFLAGS DS    CL2                     FLAGS IN SPARE BYTE      ZP60014
$#NRSTR  EQU   X'80'                   &NRSTR SPECIFIED         ZP60014
GETLST   DS    CL10
         ORG   GETLST
GETLST01 DS    AL4
GETLST02 DS    CL1
GETLST03 DS    AL3
GETLST04 DS    CL1
GETLST05 DS    AL1
         ORG   GETLST+10
         DS    CL2
MYSEG    DS    CL35
         ORG   MYSEG
@NM00001 DS    FL4
@NM00002 DS    CL26
OUTCD    DS    CL5
         ORG   MYSEG+35+33
TIMEDATE DS    CL8
         ORG   TIMEDATE
OUT1     DS    CL2
DELIM1   DS    CL1
OUT2     DS    CL2
DELIM2   DS    CL1
OUT3     DS    CL2
         ORG   TIMEDATE+8
OLD      DS    5A
OLD2     DS    4A
FREEADDR DS    2F
FREELEN  DS    2F
IKJCT433 CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
IKJCT434 DC    V(IKJCT434)
IKJCT436 DC    V(IKJCT436)
IKJEFT30 DC    V(IKJEFT30)
IKJEFT40 DC    V(IKJEFT40)
@ALSO    DC    A(ALSO)
@MSTRLV2 DC    A(MSTRLV2)
@MSTRLV3 DC    A(MSTRLV3)
@MSGTABL DC    A(MSGTABL)
         DS    0D
ED15     DC    X'40202020202020202020202020202120'              ZP60014
$16ZEROS DC    C'0000000000000000'
$SYSSCAN DC    C'SYSSCAN'
$LASTCC  DC    C'LASTCC'
$MAXCC   DC    C'MAXCC'
$THEN    DC    C'THEN'
SLSHASTR DC    C'/*'
ASTRSLSH DC    C'*/'
$XEQUALS DC    C'X='
$DBLAMPR DC    C'&&&&'
$HEX1010 DC    X'1010'
CHR      DC    CL4'CHAR'
NUM      DC    CL3'NUM'
TRTABUP  DC    X'40,4D,5D,50,04,05,06,07,08,09,0A,0B,4C,4D,4E,4F'
         DC    X'50,11,12,13,14,15,16,17,18,19,1A,1B,5C,5D,1E,5F'
         DC    X'60,61,22,23,24,25,26,27,28,29,2A,6B,2C,2D,6E,2F'
         DC    X'30,31,32,33,34,35,36,37,38,39,3A,3B,3C,3D,7E,3F'
         DC    X'40,41,42,43,44,45,46,47,48,49,4A,4B,4C,4D,4E,4F'
         DC    X'50,51,52,53,54,55,56,57,58,59,5A,5B,5C,5D,5E,5F'
         DC    X'60,61,62,63,64,65,66,67,68,69,6A,6B,6C,6D,6E,6F'
         DC    X'70,71,72,73,74,75,76,77,78,79,7A,7B,7C,7D,7E,7F'
         DC    X'80,C1,C2,C3,C4,C5,C6,C7,C8,C9,8A,8B,8C,8D,8E,8F'
         DC    X'90,D1,D2,D3,D4,D5,D6,D7,D8,D9,9A,9B,9C,9D,9E,9F'
         DC    X'A0,A1,E2,E3,E4,E5,E6,E7,E8,E9,AA,AB,AC,AD,AE,AF'
         DC    X'F0,F1,F2,F3,F4,F5,F6,F7,F8,F9,BA,BB,BC,BD,BE,BF'
         DC    X'C0,C1,C2,C3,C4,C5,C6,C7,C8,C9,CA,CB,CC,CD,CE,CF'
         DC    X'D0,D1,D2,D3,D4,D5,D6,D7,D8,D9,DA,DB,DC,DD,DE,DF'
         DC    X'E0,E1,E2,E3,E4,E5,E6,E7,E8,E9,EA,EB,EC,ED,EE,EF'
         DC    X'F0,F1,F2,F3,F4,F5,F6,F7,F8,F9,FA,FB,FC,FD,FE,FF'
TRTABDN  DC    X'00,01,02,03,04,05,06,07,08,09,0A,0B,0C,0D,0E,0F'
         DC    X'10,11,12,13,14,15,16,17,18,19,1A,1B,1C,1D,1E,1F'
         DC    X'20,21,22,23,24,25,26,27,28,29,2A,2B,2C,2D,2E,2F'
         DC    X'30,31,32,33,34,35,36,37,38,39,3A,3B,3C,3D,3E,3F'
         DC    X'00,41,42,43,44,45,46,47,48,49,4A,4B,0C,0D,0E,0F'
         DC    X'10,51,52,53,54,55,56,57,58,59,5A,5B,1C,1D,5E,1F'
         DC    X'20,21,62,63,64,65,66,67,68,69,6A,2B,6C,6D,2E,6F'
         DC    X'70,71,72,73,74,75,76,77,78,79,7A,7B,7C,7D,3E,7F'
         DC    X'80,81,82,83,84,85,86,87,88,89,8A,8B,8C,8D,8E,8F'
         DC    X'90,91,92,93,94,95,96,97,98,99,9A,9B,9C,9D,9E,9F'
         DC    X'A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,AA,AB,AC,AD,AE,AF'
         DC    X'B0,B1,B2,B3,B4,B5,B6,B7,B8,B9,BA,BB,BC,BD,BE,BF'
         DC    X'C0,81,82,83,84,85,86,87,88,89,CA,CB,CC,CD,CE,CF'
         DC    X'D0,91,92,93,94,95,96,97,98,99,DA,DB,DC,DD,DE,DF'
         DC    X'E0,E1,A2,A3,A4,A5,A6,A7,A8,A9,EA,EB,EC,ED,EE,EF'
         DC    X'B0,B1,B2,B3,B4,B5,B6,B7,B8,B9,FA,FB,FC,FD,FE,FF'
         DC    CL1' '
         DS    0F
IMMLEN   DC    AL2(3)
IMMDATA  DC    CL10'STR'
VECTOR   DC    AL4(STRRTN)
         DC    AL2(4)
         DC    CL10'EVAL'
         DC    AL4(EVALRTN)
         DC    AL2(6)
         DC    CL10'SUBSTR'
         DC    AL4(SUBSTRTN)
         DC    AL2(7)
         DC    CL10'SYSTIME'
         DC    AL4(TIMERTN)
         DC    AL2(7)
         DC    CL10'SYSDATE'
         DC    AL4(DATERTN)
         DC    AL2(6)
         DC    CL10'LENGTH'
         DC    AL4(LENGRTN)
         DC    AL2(8)
         DC    CL10'DATATYPE'
         DC    AL4(DATYRTN)
         DC    AL2(7)
         DC    CL10'SYSPREF'
         DC    AL4(PREFRTN)
         DC    AL2(7)
         DC    CL10'SYSPCMD'
         DC    AL4(SYSPRTN)
         DC    AL2(7)
         DC    CL10'SYSSCMD'
         DC    AL4(SYSSRTN)
         DC    AL2(8)                                           ZP60014
         DC    CL10'SYSSTIME'                                   ZP60014
         DC    AL4(TIMERTN)                                     ZP60014
         DC    AL2(8)                                           ZP60014
         DC    CL10'SYSSDATE'                                   ZP60014
         DC    AL4(DATERTN)                                     ZP60014
         DC    AL2(8)                                           ZP60014
         DC    CL10'SYSJDATE'                                   ZP60014
         DC    AL4(DATERTN)                                     ZP60014
         DC    AL2(8)                                           ZP60014
         DC    CL10'SYS4DATE'                                   ZP60014
         DC    AL4(DATERTN)                                     ZP60014
         DC    AL2(9)                                           ZP60014
         DC    CL10'SYS4SDATE'                                  ZP60014
         DC    AL4(DATERTN)                                     ZP60014
         DC    AL2(9)                                           ZP60014
         DC    CL10'SYS4JDATE'                                  ZP60014
         DC    AL4(DATERTN)                                     ZP60014
         DC    AL2(9)                                           ZP60014
         DC    CL10'SYS4IDATE'                                  ZP60014
         DC    AL4(DATERTN)                                     ZP60014
         DC    AL2(8)                                           ZP60014
         DC    CL10'SYSLTERM'                                   ZP60014
         DC    AL4(TERMRTN)                                     ZP60014
         DC    AL2(8)                                           ZP60014
         DC    CL10'SYSWTERM'                                   ZP60014
         DC    AL4(TERMRTN)                                     ZP60014
         DC    AL2(6)                                           ZP60014
         DC    CL10'SYSCPU'                                     ZP60014
         DC    AL4(CPURTN)                                      ZP60014
         DC    AL2(6)                                           ZP60014
         DC    CL10'SYSSRV'                                     ZP60014
         DC    AL4(SRVRTN)                                      ZP60014
         DC    AL2(6)                                           ZP60014
         DC    CL10'SYSDSN'                                     ZP60014
         DC    AL4(DSNRTN)                                      ZP60014
         DC    AL2(5)                                           ZP60014
$NRSTR   DC    CL10'NRSTR'                                      ZP60014
         DC    AL4(NRSTRRTN)                                    ZP60014
BILTINCT EQU   (*-IMMLEN)/16           ORIGINALLY 10            ZP60014
DAYIN    DC    H'31'         JAN
         DC    H'28'         FEB
         DC    H'31'         MAR
         DC    H'30'         APR
         DC    H'31'         MAY
         DC    H'30'         JUN
         DC    H'31'         JUL
         DC    H'31'         AUG
         DC    H'30'         SEP
         DC    H'31'         OCT
         DC    H'30'         NOV
         DC    H'31'         DEC
ROUTINES DC    A(FINDWORD)
         DC    A(SCANWORD)
         DC    A(SKIPSEPS)
         DC    A(PRINT)
         DC    A(LOCATE)
         DC    A(GLOCATE)
         DC    A(CONVERT)
         DC    A(UPDATE)
         DC    A(FINDFILE)
IKJCT433 CSECT
STACKL   STACK   DELETE=ALL,MF=L
         PUTLINE MF=L
         PUTLINE MF=L
         STAX    DEFER=NO,MF=L
         STAX    DEFER=YES,MF=L
*MACLEN  DC      A(MACLEN-STACKL)                               ZP60014
MACLEN   EQU     *-STACKL                                       ZP60014
@DATD    DSECT
STFLUSH  STACK   DELETE=ALL,MF=L
PLBLK    PUTLINE MF=L
PUTMLVL  PUTLINE MF=L
DEFERNO  STAX    DEFER=NO,MF=L
DEFERYES STAX    DEFER=YES,MF=L
         DS      0F                                             ZP60014
DSNBUFER DS      CL80                                           ZP60014
IKJCT433 CSECT
         DS    0H
PATCH    DC    ((@DATA-@PSTART)/20)X'00'
*
*   /*****************************************************************/
*   /*                                                      ZP60014  */
*   /* SYSDSN BUILT IN FUNCTION                             ZP60014  */
*   /*                                                      ZP60014  */
*   /*****************************************************************/
*
         USING DSNRTN,R7
DSNRTN   STM   R14,R12,12(R13)
         LR    R7,R15
         LA    R0,DSNWKLEN
         GETMAIN RC,LV=(0),SP=1
         LTR   R15,R15
         BNZ   DSNERR16
         LR    R14,R1
         LA    R15,DSNWKLEN
         SR    R5,R5
         MVCL  R14,R4                  CLEAR NEW WORKING STORAGE
         ST    R13,4(,R1)
         ST    R1,8(,R13)
         LR    R13,R1
         USING DSNWK,R13
         BAL   R14,WAITRTN
         TM    WAIT(COMONPTR),B'00010000'
         BNZ   DSNEXIT
         L     R15,ERROR
         LTR   R15,R15
         BNZ   DSNEXIT
         L     R1,I(,COMONPTR)
         L     R3,BUFBASE(,COMONPTR)
         LA    R2,C(R1,R3)             POINT TO VALUE
         L     R1,M
         LA    R3,C-1(R1,R3)
         SR    R3,R2                   GET LENGTH OF VALUE
         STM   R2,R3,DSNDTLS           SAVE VALUE DETAILS
         LA    R0,1
         ALR   R1,R0                   GET M + 1
         ST    R1,I(,COMONPTR)         POINT TO RESUME DATA
         LTR   R3,R3                   ANY VALUE TO PROCESS?
         BNP   DSNMISS                 NO, IT IS MISSING
         LA    R4,DSNAME               POINT TO DSNAME AREA
         LA    R5,DSNAME+44            POINT PAST DSNAME FIELD
         CLI   0(R2),X'7D'             LEADING QUOTE?
         BE    FULLDSN                 YES
         L     R14,@PC00001            NO, POINT TO THE UPT
         USING UPT,R14
         SLR   R0,R0
         ICM   R0,1,UPTPREFL           GET PREFIX LENGTH
         BZ    LOADDSN                 NO PERIOD IF PROFILE NOPREFIX
         MVC   0(7,R4),UPTPREFX        COPY THE PREFIX
         AR    R4,R0                   POINT PAST COPIED PREFIX
         MVI   0(R4),C'.'              SUPPLY A PERIOD
         LA    R4,1(,R4)               POINT PAST PERIOD
         B     LOADDSN
         DROP  R14                     UPT
FULLDSN  LA    R2,1(,R2)               POINT PAST LEADING QUOTE
         BCTR  R3,0                    DECREMENT LENGTH
         BCTR  R3,0                    DROP OFF TRAILING QUOTE
         LTR   R3,R3
         BNP   DSNBAD                  NO DATA TO PROCESS
LOADDSN  CLI   0(R2),C'('              MEMBER NAME COMING UP?
         BE    DOMEMBER                YES
         CR    R4,R5                   RUN OUT OF ROOM?
         BNL   DSNBAD                  YES, NAME TOO LONG
         MVC   0(1,R4),0(R2)           NO, COPY NAME CHARACTER
         LA    R4,1(,R4)               POINT TO NEXT TARGET BYTE
         LA    R2,1(,R2)               POINT TO NEXT SOURCE BYTE
         BCT   R3,LOADDSN
         B     FOLDNAME                REACHED END OF SUPPLIED NAME
DOMEMBER LA    R4,DSMEMBER             POINT TO MEMBER AREA
         LA    R5,DSMEMBER+8           POINT PAST MEMBER AREA
         LA    R2,1(,R2)               POINT PAST '('
         BCT   R3,LOADMEM              DECREMENT LENGTH FOR '('
         B     DSNBAD                  '(' WAS LAST CHARACTER
LOADMEM  CLI   0(R2),C')'              END OF NAME REACHED?
         BE    CHECKEND                YES
         CR    R4,R5                   RUN OUT OF ROOM?
         BNL   DSNBAD                  YES, NAME TOO LONG
         MVC   0(1,R4),0(R2)           NO, COPY NAME CHARACTER
         LA    R4,1(,R4)               POINT TO NEXT TARGET BYTE
         LA    R2,1(,R2)               POINT TO NEXT SOURCE BYTE
         BCT   R3,LOADMEM
         B     DSNBAD                  NO ')' FOUND
CHECKEND BCTR  R3,0                    DECREMENT LENGTH FOR ')'
         LTR   R3,R3                   LAST CHARACTER?
         BNZ   DSNBAD                  NO
FOLDNAME TR    DSMEMBER(8+44),TRTABUP  FOLD OUT NULLS AND LOWER CASE
         LA    R6,$S99RB
         ST    R6,$S99RBP              SET PARAMETER ADDRESS
         OI    $S99RBP,S99RBPND        MARK AS LAST
         USING S99RB,R6
         MVI   S99RBLN,S99RBEND-S99RB  SET LENGTH
         MVI   S99VERB,S99VRBAL        REQUEST ALLOCATION
         MVI   S99FLG11,S99ONCNV+S99NOCNV+S99NOMNT
         LA    R0,$TUPTR1
         ST    R0,S99TXTPP             POINT TO T.U. POINTERS
         LA    R2,TXTUNITS
         MVC   0(2,R2),KEYRTDDN        KEY
         MVC   2(2,R2),HW1             COUNT
         MVC   4(2,R2),HW8             LENGTH
         TR    6(8,R2),TRTABUP         BLANK OUT DDNAME SLOT
         ST    R2,$TUPTR1
         LA    R2,14(,R2)              POINT PAST DDNAME SLOT
         MVC   0(2,R2),KEYDSNAM        KEY
         MVC   2(2,R2),HW1             COUNT
         MVC   4(2,R2),HW44            LENGTH
         MVC   6(44,R2),DSNAME         VALUE
         ST    R2,$TUPTR2
         LA    R2,50(,R2)              POINT PAST DSNAME SPEC
         MVC   0(2,R2),KEYSTATS        KEY
         MVC   2(2,R2),HW1             COUNT
         MVC   4(2,R2),HW1             LENGTH
         MVI   6(R2),X'08'             VALUE (SHR)
         ST    R2,$TUPTR3
         OI    $TUPTR3,S99TUPLN        FLAG AS LAST
         LA    R1,$S99RBP              POINT TO PLIST
         DYNALLOC
         LTR   R15,R15                 SUCCESS?
         BNZ   DSNNTALC                NO, NOT ALLOCATED
         L     R14,PSATOLD             POINT TO TCB
         L     R14,12(,R14)            POINT TO TIOT
         LA    R14,24(,R14)            POINT TO FIRST DD ENTRY
DSNDDLP  CLI   0(R14),0                END OF TIOT?
         BE    DSNERROR                YES, SHOULD NOT HAPPEN
         CLC   4(8,R14),TXTUNITS+6     FOUND THE NEW DD ENTRY?
         BE    DSNGOTDD                YES
         IC    R15,0(,R14)             NO, GET LENGTH OF THIS ENTRY
         AR    R14,R15                 POINT TO NEXT ENTRY
         B     DSNDDLP                 KEEP LOOKING
DSNGOTDD L     R15,16(,R14)            POINT TO THE (FIRST) UCB
         LA    R0,X'C1'                GET FLAGS FOR OBTAIN SEARCH
         SLL   R0,24                   PROMOTE TO FIRST BYTE
         LA    R1,DSNAME               POINT TO DATA SET NAME
         LA    R2,28(,R15)             POINT TO UCBVOLI
         LA    R3,DSDSCB1              POINT TO OUTPUT AREA
         STM   R0,R3,DSNBUFER          CREATE OBTAIN PLIST
         OBTAIN DSNBUFER               FETCH THE VTOC ENTRY
         STC   R15,DSNFLAGS            SAVE OBTAIN RETURN CODE
         LTR   R15,R15                 SUCCESS?
         BNZ   DSNDEALC                NO, NO DSCB SO WIND IT UP
         CLI   DSMEMBER,C' '           ANY MEMBER SPECIFIED?
         BE    DSNDEALC                NO, ALL DONE
         MVI   DSNFLAGS+1,X'FF'        PREPARE FOR NOT DSORG=PO
         TM    DS1DSORG,DS1DSGPO       PARTITIONED ORG?
         BNO   DSNDEALC                NO
         MVI   DSNFLAGS+1,0            YES, NO OPEN PROBLEM YET
         MVC   DSDYNDCB,DSPDSDCB       LOAD DCB AND DDNAME
         MVC   DSDYNDCB+40(8),TXTUNITS+6
         MVI   DSOPENWK,X'80'          PREPARE TO OPEN ONE DCB
         OPEN  (DSDYNDCB,INPUT),MF=(E,DSOPENWK)
         CLI   DSNFLAGS+1,C'A'         OPEN ABEND?
         BE    DSNDEALC                YES
         STC   R15,DSNFLAGS+1          NO, SAVE OPEN RETURN CODE
         LTR   R15,R15                 DID THE OPEN WORK?
         BNZ   DSNDEALC                NO
         XC    DSNBUFER,DSNBUFER       YES
         MVI   DSNBUFER+1,1
         MVI   DSNBUFER+3,76
         MVC   DSNBUFER+4(8),DSMEMBER  PREPARE FOR BLDL
         BLDL  DSDYNDCB,DSNBUFER
         STC   R15,DSNFLAGS+2          SAVE BLDL RETURN CODE
         MVI   DSOPENWK,X'80'          PREPARE TO CLOSE ONE DCB
         CLOSE DSDYNDCB,MF=(E,DSOPENWK)
DSNDEALC MVI   S99VERB,S99VRBUN        REQUEST UNALLOCATION
         OI    $TUPTR1,S99TUPLN        FLAG FIRST TEXT UNIT AS LAST
         MVC   TXTUNITS(2),KEYDDNAM    SET CORRECT KEY
         LA    R1,$S99RBP              POINT TO PLIST
         DYNALLOC
         CLI   DSNFLAGS,0              CHECK OBTAIN RESULT
         BE    DSNOBTOK                VTOC ENTRY FOUND
         CLI   DSNFLAGS,8              CHECK OBTAIN RESULT
         BE    DSNNTFND                NOT ON VOLUME
         B     DSNERROR                I/O OR OTHER ERROR
DSNOBTOK CLI   DSNFLAGS+1,X'FF'        MEMBER FOR NON-PDS?
         BE    DSNNTPDS                YES
         CLI   DSNFLAGS+1,0            OPEN PROBLEM?
         BNE   DSNERROR                YES
         CLI   DSNFLAGS+2,4            CHECK BLDL RESULT
         BE    DSNNOMEM                MEMBER NOT IN PDS
         BH    DSNERROR                I/O ERROR
         LA    R3,$OK
         LA    R2,L'$OK
         B     DSNEXIT$                RETURN RESULT STRING
DSNNTALC CLC   DSNX35C(4),S99ERROR     INVALID DSNAME?
         BE    DSNBAD                  YES (S99INFO HAS T.U.)
         TM    S99ERROR,X'07'          CATALOGED?
         BO    DSNNTFND                NO
         CLI   S99ERROR,X'02'          SYSTEM ERROR?
         BNE   DSNERROR                YES
         CLI   S99ERROR+1,X'10'        DATA SET IN USE?
         BE    DSNINUSE                YES
         BH    DSNOFFLN                NO, NOT ON SYSTEM
DSNERROR LA    R3,$ERRPROC
         LA    R2,L'$ERRPROC
         B     DSNEXIT$                RETURN RESULT STRING
DSNINUSE LA    R3,$UNAVAIL
         LA    R2,L'$UNAVAIL
         B     DSNEXIT$                RETURN RESULT STRING
DSNNTFND LA    R3,$NTFOUND
         LA    R2,L'$NTFOUND
         B     DSNEXIT$                RETURN RESULT STRING
DSNOFFLN LA    R3,$NOTVOL
         LA    R2,L'$NOTVOL
         B     DSNEXIT$                RETURN RESULT STRING
DSNNTPDS LA    R3,$MEMSPEC
         LA    R2,L'$MEMSPEC
         B     DSNEXIT$                RETURN RESULT STRING
DSNNOMEM LA    R3,$NOMEM
         LA    R2,L'$NOMEM
         B     DSNEXIT$                RETURN RESULT STRING
DSNBAD   MVC   DSNBUFER(L'$BADNAME),$BADNAME
         LA    R14,DSNBUFER+L'$BADNAME
         LA    R15,L'DSNBUFER-L'$BADNAME
         LM    R0,R1,DSNDTLS
         ICM   R1,8,TRTABUP            SET PAD AS BLANK
         MVCL  R14,R0                  CONSTRUCT FINAL STRING
         LA    R3,DSNBUFER
         LA    R2,L'DSNBUFER
         B     DSNEXIT$                RETURN RESULT STRING
DSNMISS  LA    R3,$MISSDSN
         LA    R2,L'$MISSDSN
DSNEXIT$ ST    R3,INSRTDA
         ST    R2,INSRTLN
DSNEXIT  LA    R0,DSNWKLEN
         ICM   R0,8,HW1+1              SP=1
         LR    R1,R13
         L     R13,4(,R13)
         FREEMAIN R,LV=(0),A=(1)
         LM    R14,R12,12(R13)
         BR    R14
DSNERR16 MVC   ERROR(4),FW16           GETMAIN FAILED
         LM    R14,R12,12(R13)
         BR    R14
*                                      DCB ABEND EXIT
DSNABEND TM    3(R1),B'00001110'       ANY PROCESSING ALLOWED?
         BZR   R14                     NO
         MVI   DSNBUFER+1,C'A'         INDICATE OPEN ABENDED
         MVI   3(R1),4                 IGNORE THE ABEND
         BR    R14
         DROP  R7,R13                  DSNRTN, DSNWK
HW44     DC    H'44'
DSNX35C  DC    X'035C'                 THESE 2
KEYDSNAM DC    Y(DALDSNAM)             TOGETHER
KEYRTDDN DC    Y(DALRTDDN)
KEYSTATS DC    Y(DALSTATS)
KEYDDNAM DC    Y(DALDDNAM)
$OK      DC    C'OK'
$UNAVAIL DC    C'UNAVAILABLE DATASET'
$NTFOUND DC    C'DATASET NOT FOUND'
$NOMEM   DC    C'MEMBER NOT FOUND'
$MEMSPEC DC    C'MEMBER SPECIFIED, BUT DATASET IS NOT PARTITIONED'
$NOTVOL  DC    C'VOLUME NOT ON SYSTEM'
$MISSDSN DC    C'MISSING DATASET NAME'
$ERRPROC DC    C'ERROR PROCESSING REQUESTED DATASET'
$BADNAME DC    C'INVALID DATASET NAME, '
         DC    0F'0'
DSNEXLST DC    AL1(128+X'11'),AL3(DSNABEND)
DSPDSDCB DCB   DSORG=PO,MACRF=(R),EXLST=DSNEXLST
$DSDCBL  EQU   *-DSPDSDCB
         DC    0D'0'                   ALIGN END OF CSECT       ZP60014
DSNWK    DSECT
         DS    18F                     REGISTER SAVE AREA
DSOPENWK DS    F                       OPEN/CLOSE PLIST
DSNFLAGS DS    XL4                     FLAG BYTES
DSDYNDCB DS    XL($DSDCBL)             DCB AREA
DSNDTLS  DS    2F                      ADDRESS AND LENGTH OF NAME
DSMEMBER DS    CL8                     MEMBER NAME AREA
DSNAME   DS    CL44                    DATA SET NAME AREA
DSDSCB1  DS    CL140                   FORMAT-1 DSCB AREA
$S99RBP  DS    F                       PARAMETER LIST
$S99RB   DS    XL(S99RBEND-S99RB)      REQUEST BLOCK
$TUPTR1  DS    A                       POINTERS TO TEXT UNITS
$TUPTR2  DS    A
$TUPTR3  DS    A
$TUPTR4  DS    A
$TUPTR5  DS    A
TXTUNITS DS    0D,XL256                TEXT UNITS
         DS    0D                      ALIGN END OF DSECT
DSNWKLEN EQU   *-DSNWK
         ORG   DSNAME
         IECSDSL1 (1)
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
         DS    0D
@ENDDATD EQU   *
IKJCT433 CSECT
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
@00      EQU   R0                      EQUATES FOR REGISTERS 0-15
@01      EQU   R1
@02      EQU   R2
@03      EQU   R3
@04      EQU   R4
@05      EQU   R5
@06      EQU   R6
@07      EQU   R7
@08      EQU   R8
@09      EQU   R9
@10      EQU   R10
@11      EQU   R11
@12      EQU   R12
@13      EQU   R13
@14      EQU   R14
@15      EQU   R15
COMONPTR EQU   R8
         ENTRY ROUTINES
         ENTRY TRTABUP
         EXTRN ALSO
         EXTRN MSTRLV2
         EXTRN MSTRLV3
         EXTRN MSGTABL
INSRTCHR EQU   0
ANSWER   EQU   0
BUF      EQU   0
ROUTINE  EQU   0
WLL      EQU   0
W        EQU   WLL+4
UPVAL    EQU   0
LCVAL    EQU   0
EXECDATA EQU   0
SNTABFST EQU   EXECDATA
SVTABFST EQU   EXECDATA+4
GEXECDAT EQU   EXECDATA+8
LASTTSO  EQU   EXECDATA+12
ERACTSTR EQU   EXECDATA+20
ERACTEND EQU   EXECDATA+24
RETPTR   EQU   EXECDATA+28
EXDATFLG EQU   EXECDATA+32
STAECNT  EQU   EXECDATA+34
CONLST   EQU   EXDATFLG                B'10000000'
ERRCMD   EQU   EXDATFLG                B'01000000'
NOFLUSH  EQU   EXDATFLG                B'00100000'
SYMLST   EQU   EXDATFLG                B'00010000'
ERINCNTL EQU   EXDATFLG                B'00001000'
CMAIN    EQU   EXDATFLG                B'00000100'
NOMSG    EQU   EXDATFLG                B'00000010'
ATTNCMD  EQU   EXDATFLG                B'00000001'  UNREFD
ATINCNTL EQU   EXDATFLG+1              B'10000000'
NOLASTCC EQU   EXDATFLG+1              B'01000000'
ATACTSTR EQU   EXECDATA+44
ATACTEND EQU   EXECDATA+48
RETPTR2  EQU   EXECDATA+52
COMPROC  EQU   0
COMPRPTR EQU   COMPROC
COMPRID  EQU   COMPRPTR
COMPRNXT EQU   COMPRPTR+1
COMPRLNG EQU   COMPROC+4
SNTAB    EQU   0
SNTABNXT EQU   SNTAB
SNTABLNG EQU   SNTAB+4
SNTABUSE EQU   SNTAB+8
SNTELFST EQU   SNTAB+12
SNTELEM  EQU   0
SNTVLPTR EQU   SNTELEM
SNTGVAL  EQU   SNTVLPTR
SNTFLAGS EQU   SNTELEM+4
SNTPOSIT EQU   SNTFLAGS                B'10000000'  UNREFD
SNTKEY   EQU   SNTFLAGS                B'01000000'  UNREFD
SNTKEYW  EQU   SNTFLAGS                B'00100000'
SNTLABEL EQU   SNTFLAGS                B'00010000'
SNTNOSCN EQU   SNTFLAGS                B'00001000'
SNTNAUTH EQU   SNTFLAGS                B'00000100'
SNTEVAL  EQU   SNTFLAGS                B'00000010'
SNTLAST  EQU   SNTFLAGS                B'00000001'
SNTGLOB  EQU   SNTFLAGS+1              B'10000000'
SNTLNG   EQU   SNTELEM+6
SNTDATA  EQU   SNTELEM+8
SVTAB    EQU   0
SVTABNXT EQU   SVTAB
SVTABLNG EQU   SVTAB+4
SVTABUSE EQU   SVTAB+8
SVTABFRE EQU   SVTAB+12
SVTELFST EQU   SVTAB+16
SVTELEM  EQU   0
SVTLNG   EQU   SVTELEM
SVTORIG  EQU   SVTELEM+2
SVTDATA  EQU   SVTELEM+4
@NM00026 EQU   0
LL       EQU   @NM00026
OO       EQU   @NM00026+2
O2       EQU   @NM00026+4
C        EQU   O2
@NM00027 EQU   0
NEWLL    EQU   @NM00027
NEWOO    EQU   @NM00027+2
NEWC     EQU   @NM00027+4
@NM00029 EQU   0
INSCODE  EQU   @NM00029
INSLIST  EQU   INSCODE
INSADLSD EQU   @NM00029+1
@NM00032 EQU   0
IOSTELM  EQU   @NM00032
@NM00034 EQU   0
OPCODE   EQU   @NM00034+6
COMAREA  EQU   0
IOPL     EQU   COMAREA
BUFPTR   EQU   COMAREA+16
SNTELPTR EQU   COMAREA+20
EXECDPTR EQU   COMAREA+24
OLDLINE  EQU   COMAREA+28
BUFBASE  EQU   COMAREA+32
NEWBASE  EQU   COMAREA+36
LSDPTR   EQU   COMAREA+40
TYPE     EQU   COMAREA+44
CNVTANS  EQU   COMAREA+48
CLEN     EQU   COMAREA+52
MYO2     EQU   COMAREA+56
BEGIN    EQU   COMAREA+60
I        EQU   COMAREA+64
LEN      EQU   COMAREA+68
FREEAMT  EQU   COMAREA+72
ERCOM    EQU   COMAREA+76
REGAREA  EQU   COMAREA+80
SWSAREA  EQU   COMAREA+112
SW2AREA  EQU   COMAREA+117
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
MSGDIM   EQU   MSGTABL
@NM00009 EQU   MSGTABL+2
IDA      EQU   @NM00009
IDC      EQU   @NM00009+2
@NM00010 EQU   @NM00009+4
SECLEVEL EQU   @NM00010
MSGSEG1  EQU   @NM00009+5
SEGNUM   EQU   @NM00009+8
MSGSEG2  EQU   @NM00009+9
ECB      EQU   0
ECBCBIT  EQU   ECB
GTPB     EQU   0
GTPBLINE EQU   GTPB+4
PARM433  EQU   0
PARMDEFR EQU   PARM433
EOCLIST  EQU   PARM433
UPLIST   EQU   0
LCVALPTR EQU   UPLIST
LCVALLEN EQU   UPLIST+4
UPVALPTR EQU   UPLIST+8
UPVALLEN EQU   UPLIST+12
MINIMUM  EQU   0
NEXTCMD  EQU   0
NAME     EQU   0
NAML     EQU   0
FUNC     EQU   0
VALUE    EQU   0
VALLEN   EQU   0
LINEADDR EQU   0
TERMPUT  EQU   0
OUTFX    EQU   OUTA1
NULELEM  EQU   SVTELFST
ANSPTR   EQU   TYPE
CURID    EQU   LSDANEXT-LSD
CURADDR  EQU   LSDANEXT-LSD+1
SWS      EQU   SWSAREA
EXITA    EQU   SWS                     B'10000000'
EXITB    EQU   SWS                     B'01000000'
FREESW   EQU   SWS                     B'00100000'
WAIT     EQU   SWS                     B'00010000'
RANGE    EQU   SWS                     B'00001000'
LEAP     EQU   SWS                     B'00000100'
ALPHA    EQU   SWS                     B'00000010'
EXITC    EQU   SWS                     B'00000001'
SEPS     EQU   SWS+1                   B'10000000'
ENDDLM   EQU   SWS+1                   B'01000000'
QUIT     EQU   SWS+1                   B'00100000'
MATCH    EQU   SWS+1                   B'00010000'
SKPCOMMA EQU   SWS+1                   B'00001000'  UNREFD
SYSUPDTE EQU   SWS+1                   B'00000100'
NOAMPER  EQU   SWS+1                   B'00000010'
INSTHEN  EQU   SWS+1                   B'00000001'
SENTINAL EQU   SWS+2                   B'10000000'
SKIP1    EQU   SWS+2                   B'01000000'  UNREFD
LISTONLY EQU   SWS+2                   B'00100000'
FOLD     EQU   SWS+2                   B'00010000'
LISTED   EQU   SWS+2                   B'00001000'
ERRRANGE EQU   SWS+2                   B'00000100'
ATRANGE  EQU   SWS+2                   B'00000010'
BACKUP   EQU   SWS+2                   B'00000001'
RCABEND  EQU   SWS+3                   B'10000000'
NODATA   EQU   SWS+3                   B'01000000'
STAECNTL EQU   SWS+3                   B'00100000'  UNREFD
STABND   EQU   SWS+3                   B'00010000'  UNREFD
SW2      EQU   SW2AREA
CORE     EQU   SW2                     B'10000000'
CONTINU  EQU   SW2                     B'01000000'
RECURSE  EQU   SW2                     B'00100000'
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
SUSPENDI EQU   PARM433+4
EXITSTMT EQU   PARM433
DYNAREA  EQU   COMAREA+300
SYNREGS  EQU   COMAREA+182
STAEREGS EQU   COMAREA+118
REGAREA2 EQU   COMAREA+96
FLSEPATH EQU   @NM00034+7
INSPROM  EQU   INSCODE
INSEXEC  EQU   INSCODE
INSTERM  EQU   INSCODE
COMRCDS  EQU   COMPROC+12
COMPRUSE EQU   COMPROC+8
FILEDCBS EQU   EXECDATA+56
EXDLMPTR EQU   EXECDATA+40
GEXECCNT EQU   EXECDATA+36
EXINSAVE EQU   EXECDATA+16
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00148 EQU   FASTEXIT
@RF00162 EQU   @RC00156
@RC00181 EQU   @RC00174
@RC00255 EQU   @RC00254
@RC00289 EQU   @RC00282
@RC00283 EQU   @RC00282
@RF00412 EQU   @RC00404
@RC00415 EQU   @RC00404
@RF00440 EQU   @EL00004
@RC00459 EQU   @EL00004
@RC00536 EQU   @EL00005
@RF00565 EQU   @EL00008
@RF00580 EQU   @EL00008
@RF00590 EQU   @EL00008
@RC00618 EQU   @EL00008
@RF00617 EQU   @EL00008
@RF00651 EQU   @RC00648
@RF00659 EQU   @RC00656
@RF00668 EQU   @EL00009
@RC00699 EQU   @EL00011
@RF00753 EQU   @EL00014
@RF00768 EQU   @EL00015
@RF00778 EQU   @EL00016
@RF00813 EQU   @EL00020
@RC00839 EQU   @RC00838
@RC00873 EQU   @RC00860
@RF00886 EQU   @EL00022
@PB00022 EQU   @EL00021
@RC00909 EQU   @RC00908
@RC00976 EQU   @RC00975
@RC01020 EQU   @EL00025
@RF01056 EQU   @EL00025
@RF01078 EQU   @EL00027
@RC01080 EQU   @EL00027
@RF01093 EQU   @EL00028
@RC01110 EQU   @RC01109
@RF00464 EQU   @RC00459
@RC00490 EQU   @RC00459
@RC00840 EQU   @RC00839
@ENDDATA EQU   *
         END   IKJCT433,(C'PLS-III',0300,88013)
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
  IDENTIFY IKJCT433('ZP60014')
++MOD(IKJEFT56) DISTLIB(AOST4).
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT),RENT'
//SYSPRINT DD  SYSOUT=*
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE 'IKJEFT56, TERMINAL OUTPUT ROUTINE                    '
*
*   MODIFIED BY GREG PRICE SEPTEMBER 2005 FOR USERMOD ZP60014
*
IKJEFT56 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(24)                                             0001
         DC    C'IKJEFT56  73.151'                                 0001
         DC    C' ZP60014 '
         DROP  R15
@PROLOG  STM   R14,R12,12(R13)                                     0001
         BALR  R12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,R12                                         0001
         L     R0,@SIZDATD                                         0001
         GETMAIN R,LV=(0)
         LR    R11,R1                                              0001
         USING @DATD,R11                                           0001
         ST    R13,@SA00001+4                                      0001
         LM    R0,R1,20(R13)                                       0001
         ST    R11,8(,R13)                                         0001
         LR    R13,R11                                             0001
         MVC   @PC00001(16),0(R1)                                  0001
*                                                                  0017
*   /*****************************************************************/
*   /*                                                               */
*   /* START EXECUTABLE CODE                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0017
*   SAVEREG1=R1;                    /* SAVE REGISTER ONE             */
         LR    SAVEREG1,R1                                         0017
*   PTPBPTR=PTPBPTRX;               /* ESTABLISH REG POINTER         */
         L     PTPBPTR,PTPBPTRX(,R1)                               0018
*   IF TPUTTGET='1'B THEN           /* IF TGET IS INDICATED          */
         TM    TPUTTGET(PTPBPTR),B'10000000'                       0019
         BO    INVALID                                             0019
*     GOTO INVALID;                                                0020
*   TPUTOPTN=PARMOPTN;              /* FILL IN TPUT OPTON BYTE       */
         MVC   TPUTOPTN(1),PARMOPTN(PTPBPTR)                       0021
*   APOINTR=0;                      /* ZERO OUT TEMP POINTER         */
         SR    R14,R14                                             0022
         ST    R14,APOINTR                                         0022
*   IF PARMMLIN='1'B THEN           /* IS MULTILINE BIT ON ?         */
         TM    PARMMLIN(PTPBPTR),B'00001000'                       0023
         BNO   @RF00023                                            0023
*     DO;                                                          0024
*MULTLINE:                                                         0025
*       APOINTR=CHAINPTR;           /* POINT TO NEXT LINE            */
MULTLINE L     R14,PARMAOUT(,PTPBPTR)                              0025
         MVC   APOINTR(4),CHAINPTR(R14)                            0025
*       IF PARMDTMS='1'B THEN       /* IF THIS IS A DATA             */
         TM    PARMDTMS(PTPBPTR),B'00100000'                       0026
         BO    MDATA                                               0026
*         GOTO MDATA;                                              0027
*       MSGLEN=PARMAOUT->CHAINLL-4; /* CALCULATE TEXT LENGTH         */
         LH    MSGLEN,CHAINLL(,R14)                                0028
         SH    MSGLEN,HW4                                          0028
*       DO MSGIDLEN=1 TO MSGLEN;    /* SEARCH FOR FIRST BLANK        */
         LA    MSGIDLEN,1                                          0029
         B     @DE00029                                            0029
@DL00029 DS    0H                                                  0030
*         IF PARMAOUT->CHAINTXT(MSGIDLEN)=' ' THEN                 0030
         L     R14,PARMAOUT(,PTPBPTR)                              0030
         ALR   R14,MSGIDLEN                                        0030
         CLI   CHAINTXT-1(R14),C' '                                0030
         BE    CONTINUE                                            0030
*           GOTO CONTINUE;          /* IF BLANK IS FOUND EXIT        */
*       END;                        /* END MSG-ID LENGTH LOOP        */
         AH    MSGIDLEN,HW1                                        0032
@DE00029 CR    MSGIDLEN,MSGLEN                                     0032
         BNH   @DL00029                                            0032
*       GOTO INVALID;               /* IF NO BLANK FOUND             */
         B     INVALID                                             0033
*CONTINUE:                                                         0034
*       IF MSGIDLEN=1 THEN          /* IF NO MSG ID INDICATION       */
CONTINUE CH    MSGIDLEN,HW1                                        0034
         BE    STRIPID1                                            0034
*         GOTO STRIPID1;                                           0035
*       IF UPTMID='1'B THEN         /* IF NO MESSAGE I.D.            */
         L     R14,UPTPTR(,R1)                                     0036
         TM    UPTSWS-UPT(R14),UPTMID                              0036
         BNO   @RF00036                                            0036
*         DO;                       /* STRIPPING IS REQUESTED.       */
*MDATA:                                                            0038
*           LENGTH=CHAINLL-4;       /* USE LENGTH IN HEADER-4        */
MDATA    L     R14,PARMAOUT(,PTPBPTR)                              0038
         LH    R10,CHAINLL(,R14)                                   0038
         SH    R10,HW4                                             0038
         ST    R10,LENGTH                                          0038
*           TBUFADR=PARMAOUT+(4+4); /* TEXT BEGINS 8 BYTES BEGINNING
*                                      OF CHAINELEM                  */
         AH    R14,HW8                                             0039
         STCM  R14,7,TBUFADR                                       0039
*           GOTO SETUPPUT;                                         0040
         B     SETUPPUT                                            0040
*         END;                      /* END NO-STRIP PROCESSING       */
*STRIPID1:                                                         0042
*       LENGTH=CHAINLL-(4+MSGIDLEN);/* LENGTH OF OUTPUT LINE = THE 0042
*                                      LENGTH OF ENTIRE RECORD - THE
*                                      THE LENGTH OF THE MSG-ID + 4  */
@RF00036 DS    0H                                                  0042
STRIPID1 L     R14,PARMAOUT(,PTPBPTR)                              0042
         LA    R10,4                                               0042
         AR    R10,MSGIDLEN                                        0042
         LCR   R10,R10                                             0042
         AH    R10,CHAINLL(,R14)                                   0042
         ST    R10,LENGTH                                          0042
*       TBUFADR=PARMAOUT+(4+4+MSGIDLEN);/* THE ADDRESS OF THE OUT PUT
*                                      LINE = THE ADDRESS OF THE   0043
*                                      CHAIN ELEMENT + THE LENGTH OF
*                                      THE CHAIN FORWARD POINTER + 0043
*                                      THE LENGTH OF THE MSG-ID + 4
*                                      (HEADR OF VRIABLE RCRD        */
         LA    R10,8                                               0043
         AR    R10,MSGIDLEN                                        0043
         AR    R14,R10                                             0043
         STCM  R14,7,TBUFADR                                       0043
*       GOTO SETUPPUT;                                             0044
*                                                                  0044
         B     SETUPPUT                                            0044
*       /*************************************************************/
*       /*                                                           */
*       /* END STRIP ID PROCESSING                                   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0045
*     END;                          /* END MULT-LINE PROCESING       */
*   IF PARMDTMS='1'B THEN           /* IF THIS IS A DATA LINE        */
@RF00023 TM    PARMDTMS(PTPBPTR),B'00100000'                       0046
         BO    DATALINE                                            0046
*     GOTO DATALINE;                                               0047
*                                                                  0047
*   /*****************************************************************/
*   /*                                                               */
*   /* SINGLE LEVEL MESSAGE PROCESSING                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0048
*   MSGLEN=PARMAOUT->MSGLL-4;                                      0048
         L     R14,PARMAOUT(,PTPBPTR)                              0048
         LH    MSGLEN,MSGLL(,R14)                                  0048
         SH    MSGLEN,HW4                                          0048
*   DO MSGIDLEN=1 TO MSGLEN;        /* FIND FIRST BLANK              */
         LA    MSGIDLEN,1                                          0049
         B     @DE00049                                            0049
@DL00049 DS    0H                                                  0050
*     IF PARMAOUT->MSGTEXT(MSGIDLEN)=' ' THEN/* BLANK FOUND BRANCH   */
         L     R14,PARMAOUT(,PTPBPTR)                              0050
         ALR   R14,MSGIDLEN                                        0050
         CLI   MSGTEXT-1(R14),C' '                                 0050
         BE    CONTINU2                                            0050
*       GOTO CONTINU2;                                             0051
*   END;                            /* END DETERMINE LENGTH LOOP     */
         AH    MSGIDLEN,HW1                                        0052
@DE00049 CR    MSGIDLEN,MSGLEN                                     0052
         BNH   @DL00049                                            0052
*   GOTO INVALID;                   /* IF NO BLANK IS FOUND          */
         B     INVALID                                             0053
*CONTINU2:                                                         0054
*   IF MSGIDLEN=1 THEN                                             0054
CONTINU2 CH    MSGIDLEN,HW1                                        0054
         BE    STRIPID                                             0054
*     GOTO STRIPID;                                                0055
*   IF UPTMID='0'B THEN             /* DISPLAY ID BIT OFF            */
         L     R14,UPTPTR(,R1)                                     0056
         TM    UPTSWS-UPT(R14),UPTMID                              0056
         BNZ   @RF00056                                            0056
*     DO;                                                          0057
*STRIPID:                                                          0058
*       LENGTH=MSGLL-(4+MSGIDLEN);  /* LENGTH OF OUTPUT LINE = LENGHT
*                                      OF MESSAGE BUFFER - THE LENGTH
*                                      OF THE MSG ID + 4             */
STRIPID  L     R14,PARMAOUT(,PTPBPTR)                              0058
         LA    R10,4                                               0058
         AR    R10,MSGIDLEN                                        0058
         LH    R4,MSGLL(,R14)                                      0058
         SR    R4,R10                                              0058
         ST    R4,LENGTH                                           0058
*       TBUFADR=PARMAOUT+(4+MSGIDLEN);/* ADDRESS OF THE OUTPUT LINE =
*                                      ADDRESS OF MSG BUFFER + THE 0059
*                                      LENGTH OF THE MSGID + 4       */
         AR    R14,R10                                             0059
         STCM  R14,7,TBUFADR                                       0059
*       GOTO SETUPPUT;                                             0060
         B     SETUPPUT                                            0060
*     END;                                                         0061
*                                                                  0061
*   /*****************************************************************/
*   /*                                                               */
*   /* NO MESSAGE I.D. STRIPPING REQUIRED                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0062
*   ELSE                                                           0062
*     DO;                                                          0062
@RF00056 DS    0H                                                  0063
*DATALINE:                                                         0063
*       LENGTH=MSGLL-4;             /* LENGTH OF OUTPUT LINE = LENGTH
*                                      OF OUTPUT RECORD - 4          */
DATALINE LA    R14,4                                               0063
         L     R10,PARMAOUT(,PTPBPTR)                              0063
         LH    R4,MSGLL(,R10)                                      0063
         SR    R4,R14                                              0063
         ST    R4,LENGTH                                           0063
*       TBUFADR=PARMAOUT+4;         /* ADDRESS OF OUTPUT LINE =    0064
*                                      ADDRESS OF OUTPUT RECORD + 4  */
         AR    R10,R14                                             0064
         STCM  R10,7,TBUFADR                                       0064
*     END;                                                         0065
*SETUPPUT:                                                         0066
*   IF ECBCBIT='1'B THEN            /* FLUSH BIT ON                  */
SETUPPUT L     R14,@PC00001+8                                      0066
         TM    ECBCBIT(R14),B'01000000'                            0066
         BNO   @RF00066                                            0066
*     DO;                                                          0067
*       RETURNCD=4;                 /* SET RETURN CODE               */
         LA    RETURNCD,4                                          0068
*       GOTO EXIT;                                                 0069
         B     EXIT                                                0069
*     END;                                                         0070
@RF00066 EQU   *                                                ZP60014
         L     R14,ECTPTR(,R1)         --> ECT                  ZP60014
         L     R14,ECTIOWA-ECT(,R14)   --> STPB                 ZP60014
         L     R14,IOSTELM(,R14)       --> STACK ELEMENT        ZP60014
         ICM   R0,7,1(R14)             --> LSD                  ZP60014
         BZ    CHEKGRND                NOT IN CLIST             ZP60014
         TM    IOSTELM(R14),X'08'      INSEXEC SET?             ZP60014
         BZ    CHEKGRND                NO, NOT IN CLIST         ZP60014
         LA    R0,SOUTTRAP             POINT TO NAME            ZP60014
         ST    R0,LCVALPTR             SET NAME ADDRESS         ZP60014
         LA    R0,10                   GET NAME LENGTH          ZP60014
         ST    R0,LCVALLEN             SET NAME LENGTH          ZP60014
         MVC   @AL00001(12),@PC00001   UPT,ECT,ECB ADDRESSES    ZP60014
         LA    R0,UPLIST                                        ZP60014
         ST    R0,@AL00001+12          COMPLETE PLIST           ZP60014
         LA    R1,@AL00001             POINT TO PLIST           ZP60014
         L     R15,IKJGET#                                      ZP60014
         BALR  R14,R15                 GET SYSOUTTRAP VALUE     ZP60014
         LR    R1,SAVEREG1             RESTORE PARM REG         ZP60014
         L     R14,ECTPTR(,R1)         --> ECT                  ZP60014
         LTR   R15,R15                 POSITIVE VALUE?          ZP60014
         BP    TRAPLINE                YES                      ZP60014
         SR    R0,R0                   NO                       ZP60014
         ST    R0,44(,R14)             RESET ECTNUM             ZP60014
         B     CHEKGRND                GO OUTPUT DISPLAY LINE   ZP60014
TRAPLINE L     R0,44(,R14)             GET LATEST OUTLINE       ZP60014
         CR    R0,R15                  TRAPPING THIS LINE?      ZP60014
         BNL   CHEKGRND                NO, GO DISPLAY IT        ZP60014
         A     R0,FW1                  YES, INCREMENT COUNT     ZP60014
         ST    R0,44(,R14)             UPDATE ECTNUM            ZP60014
         CVD   R0,DECDBL               GET NEW COUNT IN DECIMAL ZP60014
         OI    DECDBL+7,X'0F'          PREPARE FOR UNPACK       ZP60014
         MVC   LINENAME(10),SOUTLINE   LOAD NAME BASE           ZP60014
         UNPK  LINENAME+10(10),DECDBL  ADD NUMERIC PART         ZP60014
         LA    R0,20                   GET NAME LENGTH          ZP60014
NAME0LP  CLI   LINENAME+10,C'0'        LEADING ZERO?            ZP60014
         BNE   NAMERDY                 NO, FINISHED NAME EDIT   ZP60014
         MVC   LINENAME+10(9),LINENAME+11                       ZP60014
         BCT   R0,NAME0LP              SUPPRESS LEADING ZERO    ZP60014
NAMERDY  ST    R0,LCVALLEN             SET NAME LENGTH          ZP60014
         LA    R1,LINENAME             POINT TO NAME            ZP60014
         ST    R1,LCVALPTR             SET NAME ADDRESS         ZP60014
         L     R0,LENGTH               GET DATA LENGTH          ZP60014
         ST    R0,UPVALLEN             SET DATA LENGTH          ZP60014
         L     R1,TPUTPARM             GET DATA ADDRESS         ZP60014
         LA    R1,0(,R1)               CLEAR FLAG BYTE          ZP60014
         ST    R1,UPVALPTR             SET DATA ADDRESS         ZP60014
         LA    R1,@AL00001             POINT TO PLIST           ZP60014
         L     R15,IKJINIT                                      ZP60014
         BALR  R14,R15                 CREATE SYSOUTLINE####    ZP60014
         LR    R1,SAVEREG1             RESTORE PARM REG         ZP60014
         LTR   R15,R15                 SUCCESS?                 ZP60014
         BNZ   CHEKGRND                NO, BETTER SHOW LINE     ZP60014
         L     R14,LCVALLEN            GET NAME LENGTH          ZP60014
         LA    R0,10                                            ZP60014
         SR    R14,R0                  GET LENGTH OF NUMBER     ZP60014
         ST    R14,UPVALLEN            SET NEW DATA LENGTH      ZP60014
         ST    R0,LCVALLEN             SET NAME LENGTH          ZP60014
         LA    R1,LINENAME+10          POINT TO NUMBER          ZP60014
         ST    R1,UPVALPTR             SET NEW DATA ADDRESS     ZP60014
         LA    R1,@AL00001             POINT TO PLIST           ZP60014
         L     R15,IKJUPDT                                      ZP60014
         BALR  R14,R15                 UPDATE SYSOUTLINE        ZP60014
         LR    R1,SAVEREG1             RESTORE PARM REG         ZP60014
         LTR   R15,R15                 SUCCESS?                 ZP60014
         BZ    @RF00080                YES, LINE PROCESSED OK   ZP60014
CHEKGRND EQU   *                                                ZP60014
*   IF INSOTDD='1'B THEN            /* IF IN BACKGROUND MODE         */
         L     R14,ECTPTR(,R1)                                     0071
         L     R10,ECTIOWA-ECT(,R14)                               0071
         L     R10,IOSTELM(,R10)                                   0071
         TM    INSOTDD(R10),B'00010000'                            0071
         BNO   @RF00071                                            0071
*     CALL IKJRBBMC(TBUFADR,LENGTH,ECT,1);                         0072
         LA    R10,TBUFADR                                         0072
         ST    R10,@AL00001                                        0072
         LA    R10,LENGTH                                          0072
         ST    R10,@AL00001+4                                      0072
         ST    R14,@AL00001+8                                      0072
         LA    R14,FW1                                             0072
         ST    R14,@AL00001+12                                     0072
         L     R15,IKJRBBMC                                        0072
         LA    R1,@AL00001                                         0072
         BALR  R14,R15                                             0072
*   ELSE                                                           0073
*     DO;                                                          0073
         B     @RC00071                                            0073
@RF00071 DS    0H                                                  0074
*       R0=LENGTH;                  /* FILL IN PARM REGISTERS        */
         L     R0,LENGTH                                           0074
*       R1=TPUTPARM;                                               0075
         L     R1,TPUTPARM                                         0075
*       GEN(TPUT (1),(0),R);        /* TPUT LINE TO TERMINAL         */
         TPUT (1),(0),R
*     END;                                                         0077
*   TPUTCODE=R15;                   /* SAVE RETURN CODE              */
@RC00071 LR    TPUTCODE,R15                                        0078
*   R1=SAVEREG1;                    /* RESTORE PARM REG              */
         LR    R1,SAVEREG1                                         0079
*   IF TPUTCODE^=0                  /* IF ERROR FROM TPUT      Y02996*/
*     THEN                                                         0080
         LTR   TPUTCODE,TPUTCODE                                   0080
         BZ    @RF00080                                            0080
*     DO;                                                          0081
*       IF TPUTCODE=8               /* ATTN INTERRUPT          Y02996*/
*         THEN                                                     0082
         CH    TPUTCODE,HW8                                        0082
         BNE   @RF00082                                            0082
*         DO;                                                      0083
*           RETURNCD=4;             /* SET ATTN RETURNCD       Y02996*/
         LA    RETURNCD,4                                          0084
*           GO TO EXIT;             /* END                     Y02996*/
         B     EXIT                                                0085
*         END;                                                     0086
*       IF TPUTCODE=4 THEN          /* NO WAIT ERROR                 */
@RF00082 CH    TPUTCODE,HW4                                        0087
         BNE   @RF00087                                            0087
*         DO;                                                      0088
*           RETURNCD=8;             /* INDICATE NOWAIT ERROR         */
         LA    RETURNCD,8                                          0089
*           GOTO EXIT;                                             0090
         B     EXIT                                                0090
*         END;                                                     0091
*       IF TPUTCODE=20              /* IF LINEDROP SET         Y02996*/
*         THEN                                                     0092
@RF00087 LA    R14,20                                              0092
         CR    TPUTCODE,R14                                        0092
         BNE   @RF00092                                            0092
*         RETURNCD=20;              /* LINEDROP RC             Y02996*/
         LR    RETURNCD,R14                                        0093
*       ELSE                        /* ELSE SET INVAL          Y02996*/
*INVALID:                                                          0094
*         RETURNCD=12;              /* PARMS RC                Y02996*/
         B     EXIT                                                0094
@RF00092 DS    0H                                                  0094
INVALID  LA    RETURNCD,12                                         0094
*       GOTO EXIT;                  /* END                     Y02996*/
         B     EXIT                                                0095
*     END;                                                         0096
*   IF APOINTER^=0 THEN             /* END OF MULTI-LINE CHAIN       */
@RF00080 ICM   R14,7,APOINTER                                      0097
         BZ    @RF00097                                            0097
*     DO;                                                          0098
*       PARMAOUT=APOINTR;           /* POINT TO NEXT LINE            */
         MVC   PARMAOUT(4,PTPBPTR),APOINTR                         0099
*       GOTO MULTLINE;                                             0100
         B     MULTLINE                                            0100
*     END;                                                         0101
*   RETURNCD=0;                     /* INDICATE NORMAL END           */
@RF00097 SR    RETURNCD,RETURNCD                                   0102
*EXIT:                                                             0103
*   RETURN CODE(RETURNCD);                                         0103
EXIT     L     R13,4(,R13)                                         0103
         L     R0,@SIZDATD                                         0103
         LR    R1,R11                                              0103
         FREEMAIN R,LV=(0),A=(1)
         LR    R15,RETURNCD                                        0103
         L     R14,12(,R13)                                        0103
         LM    R0,R12,20(R13)                                      0103
         BR    R14                                                 0103
*   END IKJEFT56                                                   0104
@DATA    DS    0H
HW4      DC    H'4'
HW8      DC    H'8'
         DS    0F
FW1      DC    F'1'
HW1      EQU   FW1+2
SOUTLINE DC    CL10'SYSOUTLINE'                                 ZP60014
SOUTTRAP DC    CL10'SYSOUTTRAP'                                 ZP60014
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
IKJRBBMC DC    V(IKJRBBMC)
IKJUPDT  DC    V(IKJUPDT)                                       ZP60014
IKJINIT  DC    V(IKJINIT)                                       ZP60014
IKJGET#  DC    V(IKJGET#)                                       ZP60014
PATCH    DC    5D'0'
*                                                                  0104
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IKJUPT  )                                       */
         IKJUPT
*/*%INCLUDE SYSLIB  (IKJECT  )                                       */
         IKJECT
*                                                                  0104
*       ;                                                          0104
@DATD    DSECT
@SA00001 DS    18F
@PC00001 DS    4F
@AL00001 DS    4A
         DS    0D
TPUTPARM DS    AL4
         ORG   TPUTPARM
TPUTOPTN DS    AL1
TBUFADR  DS    AL3
         ORG   TPUTPARM+4
APOINTR  DS    AL4
         ORG   APOINTR
@NM00007 DS    AL1
APOINTER DS    AL3
         ORG   APOINTR+4
LENGTH   DS    F
UPLIST   EQU   *                                                ZP60014
LCVALPTR DS    A                                                ZP60014
LCVALLEN DS    F                                                ZP60014
UPVALPTR DS    A                                                ZP60014
UPVALLEN DS    F                                                ZP60014
LINENAME DS    CL20                                             ZP60014
DECDBL   DS    D                                                ZP60014
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
RETURNCD EQU   R2
SAVEREG1 EQU   R5
MSGIDLEN EQU   R3
MSGLEN   EQU   R4
TPUTCODE EQU   R3
PTPBPTR  EQU   R2
XPRMLIST EQU   0
UPTPTR   EQU   XPRMLIST
ECTPTR   EQU   XPRMLIST+4
ECBPTR   EQU   XPRMLIST+8
PTPBPTRX EQU   XPRMLIST+12
PTPB     EQU   0
PARMCNTL EQU   PTPB
PARMDTMS EQU   PARMCNTL
PARMMLIN EQU   PARMCNTL
PARMTPUT EQU   PTPB+2
PARMOPTN EQU   PARMTPUT
TPUTTGET EQU   PARMOPTN
PARMAOUT EQU   PTPB+4
CHAIN    EQU   0
CHAINPTR EQU   CHAIN
CHAINLL  EQU   CHAIN+4
CHAINTXT EQU   CHAIN+8
MESSAGE  EQU   0
MSGLL    EQU   MESSAGE
MSGTEXT  EQU   MESSAGE+4
IOSRL    EQU   0
IOSTELM  EQU   IOSRL
INSTACK  EQU   0
INSCODE  EQU   INSTACK
INSOTDD  EQU   INSCODE
UPTX     EQU   0
ECTX     EQU   0
ECB      EQU   0
ECBCBIT  EQU   ECB
PTPBX    EQU   0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
ECBCOMPC EQU   ECB
ECBWBIT  EQU   ECB
INSADLSD EQU   INSTACK+1
INSLIST  EQU   INSCODE
INSPROC  EQU   INSCODE
INSPROM  EQU   INSCODE
INSRSVD  EQU   INSCODE
INSINDD  EQU   INSCODE
INSSTOR  EQU   INSCODE
INSTERM  EQU   INSCODE
IOSUNUSD EQU   IOSRL+12
IOSNELM  EQU   IOSRL+10
IOSTLEN  EQU   IOSRL+8
IOSBELM  EQU   IOSRL+4
MSGOO    EQU   MESSAGE+2
CHAINOO  EQU   CHAIN+6
@NM00006 EQU   PARMTPUT+1
PARMFORM EQU   PARMCNTL+1
PARMDMND EQU   PARMCNTL+1
PARMMODE EQU   PARMCNTL+1
PARMPRMT EQU   PARMCNTL
PARMIFOR EQU   PARMCNTL
PARMMLEV EQU   PARMCNTL
PARMSNGL EQU   PARMCNTL
PARMPUT  EQU   PARMCNTL
PARMPBT0 EQU   PARMCNTL
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@ENDDATA EQU   *
         END   IKJEFT56
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
  IDENTIFY IKJEFT56('ZP60014')
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//RECV19   EXEC SMPREC
//SMPPTFIN DD  DSN=&&SMPMCS,DISP=(OLD,DELETE)
//SMPCNTL  DD  *
  RECEIVE SELECT(ZP60014).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV19
//*
//APPLY19  EXEC SMPAPP
//SMPCNTL  DD  *
  APPLY S(UY01186 UY13091 UY16532 UY17021 UZ48765
          ZP60014) DIS(WRITE).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY19
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//*********************************************************************
//* Install USERMOD ZP60015 (source: Greg Price) - extend the JOB     *
//* search by JES2 for TSO STATUS without operands.                   *
//*********************************************************************
//*
//RECV20   EXEC SMPREC
//SMPPTFIN DD  *
++USERMOD(ZP60015)          /* EXTEND JES2 TSO STATUS SEARCH */  .
++VER(Z038) FMID(EJE1103)
  PRE(UZ31176,UZ33158,UZ35334,UZ37263,UZ52543,UZ54837,UZ57911,
      UZ63374,UZ65742,UZ68537,UZ71437,UZ76165)
 /*
   PROBLEM DESCRIPTION:
     TSO STATUS ONLY LOOKS FOR JOB NAMES OF USERID PLUS ONE CHARACTER.
       WHEN THE TSO STATUS COMMAND IS ISSUED WITHOUT ANY OPERAND
       THE SYSTEM LOOKS FOR ALL JOBS WITH NAMES BEGINNING WITH THE
       USERID PLUS ONE CHARACTER.  IF THE USERID IS SHORTER THAN
       SEVEN CHARACTERS THEN OTHER JOBS WITH NAMES BEGINNING WITH
       THE USERID BUT HAVING MORE THAN ONE EXTRA CHARACTER ARE NOT
       REPORTED BY THE STATUS COMMAND.

       THIS USERMOD ALTERS JES2 SO THAT ANY JOB WITH A NAME WHICH
       STARTS WITH THE REQUESTING USERID IS REPORTED.

   SPECIAL CONDITIONS:
     ACTION:
       JES2 MUST BE RESTARTED FOR THIS ZAP TO BECOME ACTIVE.
       A HOT START IS SUFFICIENT.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NO. 15.

     USERMODS ZP60015 AND ZP60016 ARE INTENDED TO BE OPERATIONAL
     CONCURRENTLY.  NOTE THE FOLLOWING BEHAVIOUR TABLE:

       WHICH USERMODS ACTIVE      I  STATUS DEFAULT SEARCH
       ==========================================================
       NEITHER 15 NOR 16 APPLIED  I  FIND USERID+1 ONLY
       ----------------------------------------------------------
       15 APPLIED BUT NOT 16      I  FIND USERID+0,1,2,3 BUT
                                  I  NAME REPORTED AS USERID+1
       ----------------------------------------------------------
       16 APPLIED BUT NOT 15      I  FIND USERID+1 ONLY BUT
                                  I  MESSAGE HAS NULLS AFTER NAME
       ----------------------------------------------------------
       BOTH 15 AND 16 APPLIED     I  FIND USERID+0,1,2,3
       ----------------------------------------------------------

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       HASPXEQ
 */.
++ SRCUPD   (HASPXEQ)  DISTLIB(HASPSRC ).
./ CHANGE NAME=HASPXEQ
         CLM   WD,1,=AL1(L'JQEJNAME-2) TEST FOR FULL NAME SCAN  ZP60015 U5596000
         SLR   R15,R15             CLEAR FOR INSERT             ZP60015 U5599000
         IC    R15,SJBTULEN        GET USER NAME LENGTH         ZP60015 U5599500
         LA    R15,JQEJNAME(R15)   POINT TO LAST CHARACTER + 1  ZP60015 U5600000
         CLM   WD,1,=AL1(L'JQEJNAME-5)  NEED TRAILER CHECK?     ZP60015 U5602000
         BH    XTJSCNA             NO, NAME LONG ENOUGH TO NOT  ZP60015 U5603000
         CLI   3(R15),C' '         INSURE NAME NOT >3 LONGER    ZP60015 U5604000
         NOP   XTJSCN     (BE)     LOOP IF NOT (TSO ID OKAY)    ZP60015 U5612000
         ICM   WD,14,0(R15)        PICK UP CHARACTER(S)         ZP60015 U5614000
         STCM  WD,14,SSCSUJOB      SET LAST CHARS IF PRESENT    ZP60015 U5684000
/*
//SMPCNTL  DD  *
  RECEIVE SELECT(ZP60015).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV20
//*
//APPLY20  EXEC SMPAPP
//HMASMP.SYSUT1 DD UNIT=&WORK,SPACE=(1700,(1000,200))
//HMASMP.SYSUT2 DD UNIT=&WORK,SPACE=(1700,(1000,200))
//HMASMP.SYSUT3 DD UNIT=&WORK,SPACE=(1700,(1000,200))
//HMASMP.SYSLIB DD
//         DD
//         DD
//         DD
//         DD
//         DD DSN=SYS1.HASPSRC,DISP=SHR
//SMPCNTL  DD  *
  APPLY S(UZ57911 UZ60375 UZ63374 UZ65742 UZ68537 UZ71437 UZ76165
          ZP60015) DIS(WRITE).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV20
//*
//
//SYSGEN06 JOB 'USERMODS 21-25',
//             CLASS=A,
//             MSGCLASS=A,
//             MSGLEVEL=(1,1),
//             REGION=4096K
/*JOBPARM LINES=100
//JOBCAT   DD  DSN=SYS1.VSAM.MASTER.CATALOG,DISP=SHR
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//*********************************************************************
//* Install USERMOD ZP60016 (source: Greg Price) - report extended    *
//* results from JES2 TSO STATUS default search.                      *
//*********************************************************************
//*
//RECV21   EXEC SMPREC
//SMPPTFIN DD  *
++USERMOD(ZP60016)     /* REPORT JES2 STATUS SEARCH RESULTS */  .
++VER(Z038) FMID(EBB1102) PRE(UZ48744)
 /*
   PROBLEM DESCRIPTION:
     TSO STATUS ONLY LOOKS FOR JOB NAMES OF USERID PLUS ONE CHARACTER.
       WHEN THE TSO STATUS COMMAND IS ISSUED WITHOUT ANY OPERAND
       THE SYSTEM LOOKS FOR ALL JOBS WITH NAMES BEGINNING WITH THE
       USERID PLUS ONE CHARACTER.  IF THE USERID IS SHORTER THAN
       SEVEN CHARACTERS THEN OTHER JOBS WITH NAMES BEGINNING WITH
       THE USERID BUT HAVING MORE THAN ONE EXTRA CHARACTER ARE NOT
       REPORTED BY THE STATUS COMMAND.

       THIS USERMOD ALTERS THE STATUS COMMAND TO REPORT UP TO
       THREE EXTRA CHARACTERS AFTER THE USERID IN THE JOB NAME.
       THESE JOBS WILL HAVE BEEN RETURNED BY JES2 PROCESSING AFTER
       THE ACTIVATION OF ZP60015.  WITHOUT THIS SYSMOD SUCH JOBS
       WILL BE REPORTED WITHOUT THE UP TO TWO EXTRA CHARACTERS
       IN THE JOB NAME.

   SPECIAL CONDITIONS:
     NONE.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NO. 16.

     USERMODS ZP60015 AND ZP60016 ARE INTENDED TO BE OPERATIONAL
     CONCURRENTLY.  NOTE THE FOLLOWING BEHAVIOUR TABLE:

       WHICH USERMODS ACTIVE      I  STATUS DEFAULT SEARCH
       ==========================================================
       NEITHER 15 NOR 16 APPLIED  I  FIND USERID+1 ONLY
       ----------------------------------------------------------
       15 APPLIED BUT NOT 16      I  FIND USERID+0,1,2,3 BUT
                                  I  NAME REPORTED AS USERID+1
       ----------------------------------------------------------
       16 APPLIED BUT NOT 15      I  FIND USERID+1 ONLY BUT
                                  I  MESSAGE HAS NULLS AFTER NAME
       ----------------------------------------------------------
       BOTH 15 AND 16 APPLIED     I  FIND USERID+0,1,2,3
       ----------------------------------------------------------

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IKJEFF52
 */.
++ZAP(IKJEFF52) DISTLIB(AOST4).
 NAME IKJEFF52
 IDRDATA ZP60016
VER 0348 9180,3002             TM    SSCSFLGS,SSCSUSID
VER 034C 47E0,C344             BO    JBNAMEOK
VER 0350 1F22                  SLR   R2,R2
VER 0352 4320,3003             IC    R2,SSCSULEN
VER 0356 4132,B320             LA    R3,JOBNINST(R2)
VER 035A D200,3000,4021        MVC   0(1,R3),SSCSUJOB
VER 068A E9C1,D7E9,C1D7        DC    C'ZAPZAP'
REP 0356 41E2,B320             LA    R14,JOBNINST(R2)
REP 035A 47F0,C66E,0700        B     PATCH
REP 068A D200,E000,4021  PATCH MVC   0(1,R14),SSCSUJOB
REP 0690 9506,3003             CLI   SSCSULEN,6
REP 0694 4720,C344             BH    JBNAMEOK
REP 0698 D200,E001,4022        MVC   1(1,R14),SSCSUJOB+1
REP 069E 4780,C344             BE    JBNAMEOK
REP 06A2 D200,E002,4023        MVC   2(1,R14),SSCSUJOB+2
REP 06A8 47F0,C344             B     JBNAMEOK
/*
//SMPCNTL  DD  *
  RECEIVE SELECT(ZP60016).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV21
//*
//APPLY21  EXEC SMPAPP
//SMPCNTL  DD  *
  APPLY S(UZ48744 ZP60016) DIS(WRITE).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY21
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//*********************************************************************
//* Install USERMOD ZP60019 (source: Greg Price) - record CPU time    *
//* used by jobs with TIME=1440 in JCL.                               *
//*********************************************************************
//*
//RECV22   EXEC SMPREC
//SMPPTFIN DD  *
++USERMOD(ZP60019)       /* RECORD CPU TIME WHEN TIME=1440 */  .
++VER(Z038) FMID(FBB1221) PRE(UZ67391)
 /*
   PROBLEM DESCRIPTION:
     NO RECORD IS KEPT OF THE CPU TIME USED WHEN TIME=1440 IS USED.
       SPECIFYING TIME=1440 ON THE JOB OR EXEC JCL STATEMENT IS
       A METHOD OF INDICATING TO THE SYSTEM THAT THERE IS NO LIMIT
       TO BE APPLIED BY THE SYSTEM TO THE STEP'S ACCUMULATION OF
       CPU TIME OR WAIT TIME.  THIS FACILITY WAS CONCEPTUALLY
       EXTENDED TO MEAN THAT SUCH JOBS WERE NOT TO BE SUBJECT TO
       CHARGEBACK, AND SO CPU TIME USED BY SUCH JOBS WAS "FREE".
       AS A RESULT, THE CPU TIME USED BY JOB STEPS WHEN TIME=1440
       IN EFFECT IS NOT RECORDED, AND ZERO TIME IS REPORTED IN THE
       STEP (IEF374I) AND JOB (IEF376I) END MESSAGES, AND IN SMF
       (RECORD TYPES 4, 5, 34 AND 35) THUS EFFECTIVELY FAILING TO
       CAPTURE SIGNIFICANT JOB AND SYSTEM PERFORMANCE DATA.

       THIS USERMOD UPDATES THE INITIATOR ATTACH ROUTINE TO MOVE
       THE TEST TO SEE IF JOB/STEP TIMING LIMITS ARE IN EFFECT
       UNTIL AFTER THE TCB AND SRB CPU TIMES USED BY THE STEP HAVE
       BEEN SAVED.

   SPECIAL CONDITIONS:
     ACTION:
       A "CLPA" MUST BE PERFORMED AT IPL TIME FOR THIS SYSMOD TO
       BECOME ACTIVE.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NO. 19.

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IEFSD263
 */.
++ZAP(IEFSD263) DISTLIB(AOSB3).
 NAME IEFSD263
 IDRDATA ZP60019
VER 062A 1277                  LTR   R7,R7
VER 062C 4720,C692             BC    2,NOTEST
VER 0630 9823,A040             LM    R2,R3,ASCBEJST
VER 0634 8C20,000C             SRDL  R2,12
VER 0638 5D20,C90A             D     R2,TEN1000
VER 063C 5920,C916             C     R2,FIVE1000
VER 0640 4740,C646             BL    NOROUND2
VER 0644 5A30,C912             A     R3,ROUNDUP
VER 0648 5030,405C    NOROUND2 ST    R3,LCTTSTU4
VER 064C 9823,A0C8             LM    R2,R3,ASCBSRBT
VER 0650 8C20,000C             SRDL  R2,12
VER 0654 5D20,C90A             D     R2,TEN1000
VER 0658 5920,C916             C     R2,FIVE1000
VER 065C 4740,C662             BL    NOROUND3
VER 0660 5A30,C912             A     R3,ROUNDUP
VER 0664 5030,415C    NOROUND3 ST    R3,LCTTSRB4
REP 062A 9823,A040             LM    R2,R3,ASCBEJST
REP 062E 8C20,000C             SRDL  R2,12
REP 0632 5D20,C90A             D     R2,TEN1000
REP 0636 5920,C916             C     R2,FIVE1000
REP 063A 4740,C640             BL    NOROUND2
REP 063E 5A30,C912             A     R3,ROUNDUP
REP 0642 5030,405C    NOROUND2 ST    R3,LCTTSTU4
REP 0646 9823,A0C8             LM    R2,R3,ASCBSRBT
REP 064A 8C20,000C             SRDL  R2,12
REP 064E 5D20,C90A             D     R2,TEN1000
REP 0652 5920,C916             C     R2,FIVE1000
REP 0656 4740,C65C             BL    NOROUND3
REP 065A 5A30,C912             A     R3,ROUNDUP
REP 065E 5030,415C    NOROUND3 ST    R3,LCTTSRB4
REP 0662 1277                  LTR   R7,R7
REP 0664 4720,C692             BC    2,NOTEST
/*
//SMPCNTL  DD  *
  RECEIVE SELECT(ZP60019).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV22
//*
//APPLY22  EXEC SMPAPP
//SMPCNTL  DD  *
  APPLY SELECT(ZP60019) DIS(WRITE).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY22
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//*********************************************************************
//* Install USERMOD ZP60026 (source: Greg Price) - add the REUSE      *
//* operand to the ALLOCATE TSO command.                              *
//*********************************************************************
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
++USERMOD(ZP60026)       /* ADD REUSE OPERAND TO ALLOCATE */  .
++VER(Z038) FMID(EBB1102) PRE(UZ80347,UZ69512,UZ58132,UZ65229,UZ52701)
 /*
   PROBLEM DESCRIPTION:
     THERE IS NO WAY TO INFORM ALLOCATE TO REUSE A DDNAME IN USE.
       AN ALLOCATE COMMAND IS SOMETIMES ISSUED WHICH SPECIFIES A
       FILE OR DD NAME OF AN EXISTING ALLOCATION.  THERE IS NO
       METHOD OF SPECIFYING IN THE INITIAL REQUEST THAT ALLOCATE
       SHOULD FREE THE EXISTING ALLOCATION BEFORE PROCEDING WITH
       THE REQUESTED ALLOCATION.  SUCH A SCENARIO TRIGGERS A
       PROMPT FOR 'FREE' (TO PROCEED) OR 'END' (TO TERMINATE).
       CLISTS WHICH ALLOCATE SPECIFIC DDNAMES SHOULD ISSUE FREE
       COMMANDS FOR THOSE DDNAMES BEFORE THE ALLOCATE COMMANDS,
       WHICH CAN THEN TRIGGER UNWANTED MESSAGES WHICH ARE OFTEN
       SUPPRESSED WITH CLIST 'CONTROL NOMSG' STATEMENTS.

       THIS USERMOD ADDS A 'REUSE' KEYWORD OPERAND TO THE TSO
       ALLOCATE COMMAND.  THE USE OF THIS OPERAND ON AN ALLOCATE
       COMMAND CAUSES ALLOCATE TO BYPASS THE PROMPT FOR 'FREE' OR
       'END' AND TO PROCEED AS IF 'FREE' HAS BEEN ENTERED.

       THIS OPERAND IS COMPATIBLE WITH TSO/E.  CLISTS FROM TSO/E
       ENVIRONMENTS WILL NOT NEED EXTRA CONTROL/FREE/CONTROL
       STATEMENTS ADDED AND ALLOCATE 'REUSE' OPERANDS REMOVED IN
       ORDER TO RUN IN AN ENVIRONMENT WITH THIS USERMOD APPLIED.

   SPECIAL CONDITIONS:
     NONE.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NUMBER 26.

     REWORK HISTORY:
       2010-02-27: UPDATE ALLOCATE TSO HELP MEMBER.

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MODULES:
       IKJEFD30
       IKJEFD31
       IKJEFD32
       IKJEFD33
       IKJEFD34
       IKJEFD35
       IKJEFD36
       IKJEFD37
     MACROS:
       ALLOCATE
 */.
++MACUPD(ALLOCATE) DISTLIB(AHELP).
./ CHANGE NAME=ALLOCATE
                    VSEQ('VOL-SEQ-NUMBER') ROUND  REUSE                 21250002
))REUSE     -     FILE BEING ALLOCATED IS TO BE FREED AND RE-ALLOCATED  76274004
                  IF CURRENTLY IN USE.                                  76275004
++MOD(IKJEFD30) DISTLIB(AOST4).
/*
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(NEW,PASS),UNIT=SYSDA,SPACE=(CYL,3),
//             DCB=(DSORG=PS,RECFM=FB,LRECL=80,BLKSIZE=4080)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT)'
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE 'ALLOCATE COMMAND PROCESSOR                             *
                        '
***********************************************************************
*  $26   ZP60026  2010-01-23 GREG PRICE: ADD 'REUSE' OPERAND.         *
*                            CHANGES APPLIED TO UZ80347 LEVEL.        *
***********************************************************************
IKJEFD30 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(33)                                             @26C
         DC    C'IKJEFD30  85.049'                                 0001
         DC    CL17' ZP60026 2010.023'                             @26A
         DROP  R15
@PROLOG  ST    R14,12(,R13)                                        0001
         STM   R0,R12,20(R13)                                      0001
         BALR  R12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,R12                                         0001
         L     R0,@SIZDATD                                         0001
         GETMAIN  R,LV=(0)
         LR    R11,R1                                              0001
         USING @DATD,R11                                           0001
         ST    R13,@SA00001+4                                      0001
         LM    R0,R1,20(R13)                                       0001
         ST    R11,8(,R13)                                         0001
         LR    R13,R11                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
         MVC   @PC00001(4),0(R1)                                   0001
*        AWAPTR = ADDR(WACORE);         /* PTR TO WORK AREA          */
         LA    R2AWAPTR,WACORE                                     0067
*        WACORE = WACORE && WACORE;     /* ZERO OUT WORKAREA         */
         XC    WACORE(192),WACORE                                  0068
*        CPPLPTR = R1;                  /* GET INPUT PARAMETERS      */
         ST    R1,CPPLPTR(,R2AWAPTR)                               0069
*        CALL INITIAL;                  /* PERFORM INITIALIZATION    */
         BAL   R14,INITIAL                                         0070
*        CALL COMMSCAN;                 /* SYNTAX CHECK THE COMMAND  */
*                                                                  0071
         BAL   R14,COMMSCAN                                        0071
*        IF RBCODE12 = '0'B THEN        /* IF SUCCESSFUL,            */
         TM    RBCODE12(R2AWAPTR),B'10000000'                      0072
         BNZ   @RF00072                                            0072
*          CALL REQTYPE;                /* PROCESS REQUEST           */
*                                                                  0073
         BAL   R14,REQTYPE                                         0073
*        CALL EXIT1;                    /* PERFORM CLEAN-UP          */
@RF00072 BAL   R14,EXIT1                                           0074
*        RETURN CODE(RTRNCODE);         /* RETURN TO CALLER          */
         L     R10,RGSVAREA(,R13)                                  0075
         L     R10,RTRNCODE(,R10)                                  0075
         L     R13,4(,R13)                                         0075
         L     R0,@SIZDATD                                         0075
         LR    R1,R11                                              0075
         FREEMAIN R,LV=(0),A=(1)
         LR    R15,R10                                             0075
         L     R14,12(,R13)                                        0075
         LM    R0,R12,20(R13)                                      0075
         BR    R14                                                 0075
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      INITIAL                                                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE INITIALIZES THE ALLOCATE WORKAREA              */
*/*      AND THE GENTRANS PARAMETER LIST.                            */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      KNOWN FIELDS IN THE WORKAREA ARE FILLED IN AT THIS TIME.    */
*/*      THE GENTRANS PARAMETER LIST IS FILLED IN AS MUCH AS         */
*/*      POSSIBLE.                                                   */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      CPPL                                                        */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      WORKAREA AND GENTRANS PARAMETER LIST                        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0076
*    INITIAL: PROC;                                                0076
INITIAL  STM   R14,R12,12(R13)                                     0076
*        TXT = ADDR(ADDUNIT);          /* INIT ADDBLOCK PTR          */
         LA    R10,ADDUNIT                                         0077
         ST    R10,TXT(,R2AWAPTR)                                  0077
*        PTRMSGS = ADDR(IKJEFD31);     /* PTR TO MESSAGE MODULE      */
         L     R10,VCONSD31                                        0078
         ST    R10,PTRMSGS(,R2AWAPTR)                              0078
*        MSGPTR = ADDR(MSGAREA);       /* PTR TO MSG AREA            */
         LA    R10,MSGAREA                                         0079
         ST    R10,MSGPTR(,R2AWAPTR)                               0079
*        MSGAREA = ''X;                /* ZERO MSG AREA      @YM05479*/
         XC    MSGAREA(64),MSGAREA                                 0080
*    /* SET UP GENTRANS PARAMETER LIST                               */
*        GTPLPTR = ADDR(GTPLAREA);     /* PTR TO PARM LIST           */
         LA    R10,GTPLAREA                                        0081
         ST    R10,GTPLPTR(,R2AWAPTR)                              0081
*        KEY2 = KEY1;                  /* COPY KEYLIST               */
         MVC   KEY2(80),KEY1                                       0082
*        GTPLKLST = ADDR(KEYLIST);     /* KEYLIST ADDRESS            */
         LA    R3,KEYLIST                                          0083
         ST    R3,GTPLKLST(,R10)                                   0083
*        GTPLTBLE = ADDR(KEYWDTAB);    /* KEYWORD TABLE ADDRESS      */
         LA    R3,KEYWDTAB                                         0084
         ST    R3,GTPLTBLE(,R10)                                   0084
*        GTPLABLK = ADDR(TEXTCORE);    /* ADDBLOCK ADDRESS           */
         LA    R3,TEXTCORE                                         0085
         ST    R3,GTPLABLK(,R10)                                   0085
*        GTPLOUTA = 0;                 /* OUTPUT ADDRESS -SET TO 0   */
         SLR   R3,R3                                               0086
         ST    R3,GTPLOUTA(,R10)                                   0086
*        ADDNUM = 0;                   /* INIT ADDBLOCK COUNTER      */
         STH   R3,ADDNUM                                           0087
*    END INITIAL;                                                  0088
@EL00002 DS    0H                                                  0088
@EF00002 DS    0H                                                  0088
@ER00002 LM    R14,R12,12(R13)                                     0088
         BR    R14                                                 0088
*                                                                  0089
*                                                                  0089
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      COMMSCAN                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE INVOKES THE PARSE SERVICE ROUTINE AND EXAMINES */
*/*      THE RETURN CODE FROM PARSE.                                 */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE PARSE PARAMETER LIST IS SET UP, AND PARSE IS INVOKED.   */
*/*      IF THE RETURN CODE FROM PARSE IS 0, ROUTINE REQTYPE IS      */
*/*      INVOKED. IF THE RETURN CODE IS 4 (NO PROMPT MODE),          */
*/*      TERMINATE. IF RETURN CODE IS 16, ISSUE MESSAGE INDICATING   */
*/*      NOT ENOUGH MAIN STORAGE TO EXECUTE COMMAND, AND TERMINATE.  */
*/*      FOR ANY OTHER NON-ZERO RETURN CODE, ISSUE A MESSAGE GIVING  */
*/*      THE RETURN CODE, AND TERMINATE.                             */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      WORKAREA                                                    */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      COMMAND PROCESSED OR                                        */
*/*      ERROR MESSAGE                                               */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*   COMMSCAN:  PROC;                                               0089
COMMSCAN STM   R14,R12,@SA00003                                    0089
*        PPLPTR = ADDR(PPLCORE);       /* PTR TO PPL                 */
         LA    R10,PPLCORE                                         0090
         ST    R10,PPLPTR(,R2AWAPTR)                               0090
*        PPLUPT = CPPLUPT;             /* UPT IN PPL                 */
         L     R3,CPPLPTR(,R2AWAPTR)                               0091
         MVC   PPLUPT(4,R10),CPPLUPT(R3)                           0091
*        PPLECT = CPPLECT;             /* ECT IN PPL                 */
         MVC   PPLECT(4,R10),CPPLECT(R3)                           0092
*        PPLECB = ADDR(COMMECB);       /* ECB IN PPL                 */
         LA    R3,COMMECB(,R2AWAPTR)                               0093
         ST    R3,PPLECB(,R10)                                     0093
*        COMMECB = 0;                  /* SET ECB TO 0               */
         SLR   R10,R10                                             0094
         ST    R10,COMMECB(,R2AWAPTR)                              0094
*        ENTRYCD = 1;                  /* INDICATE MAIN CALL TO PARSE*/
         MVC   ENTRYCD(2,R2AWAPTR),@HW1                            0095
*        R1 = AWAPTR;                  /* WORKAREA PTR IN REG 1      */
         LR    R1,R2AWAPTR                                         0096
*        CALL IKJEFD37;                /* INVOKE PARSE               */
         L     R15,VCONSD37                                        0097
         BALR  R14,R15                                             0097
*        IF RCODESV > 0 THEN           /* IF PARSE FAILED,           */
         L     R10,RCODESV(,R2AWAPTR)                              0098
         LTR   R10,R10                                             0098
         BNP   @RF00098                                            0098
*          DO;                         /* THEN                       */
*            IF AWARSV1 = '1'B THEN    /* IF MSG ALREADY ISSUED,     */
         TM    AWARSV1(R2AWAPTR),B'00000010'                       0100
         BNO   @RF00100                                            0100
*              DO;                     /*                    @YM05479*/
*                AWARSV1 = '0'B;       /* TURN OFF INDICATOR         */
*                RBCODE12 = '1'B;      /* INDICATE ALLOC ERR @YM05479*/
         OI    RBCODE12(R2AWAPTR),B'10000000'                      0103
         NI    AWARSV1(R2AWAPTR),B'11111101'                       0103
*              END;                    /*                    @YM05479*/
*            ELSE                                                  0105
*              DO;                     /* OTHERWISE,                 */
         B     @RC00100                                            0105
@RF00100 DS    0H                                                  0106
*            ENTRYCD = 2;              /* INDICATE PARSE ERROR       */
         MVC   ENTRYCD(2,R2AWAPTR),@HW2                            0106
*            R1 = AWAPTR;              /* PTR TO WORKAREA IN REG 1   */
         LR    R1,R2AWAPTR                                         0107
*            CALL IKJEFD35;            /* ISSUE ERROR MESSAGE        */
         L     R15,VCONSD35                                        0108
         BALR  R14,R15                                             0108
*              END;                                                0109
*          END;                                                    0110
*        ELSE                          /* IF PARSE SUCCESSFUL,       */
*          DO;                                                     0111
         B     @RC00098                                            0111
@RF00098 DS    0H                                                  0112
*            GTPLPDL = PTRPDL;         /* PDL ADDRESS IN GTPL        */
         L     R10,GTPLPTR(,R2AWAPTR)                              0112
         MVC   GTPLPDL(4,R10),PTRPDL(R2AWAPTR)                     0112
*            IF REUSEPDE = 1 THEN                                  #26A
*              REUSE = '1'B;                                       #26A
         L     R3,PTRPDL(,R2AWAPTR)                                @26A
         CLC   REUSEPDE(2,R3),@HW1                                 @26A
         BNE   *+8                                                 @26A
         OI    REUSE(R2AWAPTR),B'00000010'                         @26A
*            GTPLPCL = PPLPCL;         /* PCL ADDRESS IN GTPL        */
         L     R3,PPLPTR(,R2AWAPTR)                                0113
         MVC   GTPLPCL(4,R10),PPLPCL(R3)                           0113
*          END;                                                    0114
*   END  COMMSCAN;                                                 0115
@EL00003 DS    0H                                                  0115
@EF00003 DS    0H                                                  0115
@ER00003 LM    R14,R12,@SA00003                                    0115
         BR    R14                                                 0115
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      REQTYPE                                                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE DETERMINES THE TYPE OF ALLOCATION REQUEST      */
*/*      BEING MADE, AND ROUTES CONTROL TO THE APPROPRIATE           */
*/*      PROCESSOR.                                                  */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      IF STATUS WAS NOT ENTERED, BUT SPACE PARAMETERS ARE ENTERED */
*/*      THEN THE STATUS IS DEFAULTED TO NEW. IF STATUS NOT ENTERED  */
*/*      BUT DATASET NAME SPECIFIED, STATUS IS DEFAULTED TO OLD.     */
*/*      OTHERWISE, THE USER IS PROMPTED TO ENTER STATUS.  IF THE    */
*/*      REQUEST IS FOR A DUMMY DATA SET, INVOKE DMMYREQ. IF REQUEST */
*/*      IS FOR DATA SET CONCATENATION, INVOKE CONCATRQ. IF REQUEST  */
*/*      IS FOR TERMINAL, INVOKE TERMREQ. IF REQUEST IS FOR SYSOUT   */
*/*      DATA SET, INVOKE SYSOTREQ.  OTHERWISE, DETERMINE DATA SET   */
*/*      STATUS.                                                     */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDL                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      REQUEST PROCESSED                                           */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*REQTYPE: PROC;                                                    0116
REQTYPE  STM   R14,R12,@SA00004                                    0116
*   IF VLISTCTR > 255 THEN             /* IF OVER 255 VOLSERS        */
         LH    R10,VLISTCTR(,R2AWAPTR)                             0117
         CH    R10,@HW255                                          0117
         BNH   @RF00117                                            0117
*     DO;                              /* THEN                       */
*       MSGID = '112A';                /* SET MESSAGE ID             */
         L     R10,MSGPTR(,R2AWAPTR)                               0119
         MVC   MSGID(4,R10),@CC00805                               0119
*       CALL PUTMSG;                   /* ISSUE ERROR MESSAGE        */
         BAL   R14,PUTMSG                                          0120
*     END;                                                         0121
*   ELSE                               /* ELSE                       */
*     IF MBRPRES = '1'B &              /* IF MEMBER NAME SPECIFIED   */
*        DSNNEXT = PDECMPRE &          /* AND NOT CONCAT REQUEST     */
*        DISPPDE = 2 THEN              /* AND DELETE SPECIFIED       */
         B     @RC00117                                            0122
@RF00117 L     R10,PTRPDL(,R2AWAPTR)                               0122
         TM    MBRPRES(R10),B'10000000'                            0122
         BNO   @RF00122                                            0122
         CLC   DSNNEXT(4,R10),PDECMPRE                             0122
         BNE   @RF00122                                            0122
         CLC   DISPPDE(2,R10),@HW2                                 0122
         BNE   @RF00122                                            0122
*       DO;                            /* THEN                       */
*         ENTRYCD = 5;                 /* SET ENTRY CODE             */
         MVC   ENTRYCD(2,R2AWAPTR),@HW5                            0124
*         R1 = AWAPTR;                 /* WORKAREA PTR IN REG 1      */
         LR    R1,R2AWAPTR                                         0125
*         CALL IKJEFD35;               /* ISSUE ERROR MESSAGE        */
         L     R15,VCONSD35                                        0126
         BALR  R14,R15                                             0126
*       END;                                                       0127
*     ELSE                             /* ELSE                       */
*       DO;                                                        0128
         B     @RC00122                                            0128
@RF00122 DS    0H                                                  0129
*         S99RB = S99RB && S99RB;      /* INIT REQUEST BLOCK         */
         XC    S99RB(20),S99RB                                     0129
*         S99RBLN = LENGTH(S99RB);     /* LENGTH OF RB IN RB         */
         MVI   S99RBLN,X'14'                                       0130
*         S99VERB = S99VRBAL;          /* VERB CODE IN RB            */
         MVI   S99VERB,X'01'                                       0131
*         S99RBPTR = ADDR(S99RB);      /* PTR TO REQUEST BLOCK       */
         LA    R10,S99RB                                           0132
         ST    R10,S99RBPTR                                        0132
*         PTRS99RB = S99RBPTR;         /* PTR TO RB IN WORKAREA      */
         ST    R10,PTRS99RB(,R2AWAPTR)                             0133
*         IF STATSPDE = 0 THEN         /* IF STATUS NOT SPECIFIED,   */
         SLR   R10,R10                                             0134
         L     R3,PTRPDL(,R2AWAPTR)                                0134
         CH    R10,STATSPDE(,R3)                                   0134
         BNE   @RF00134                                            0134
*           DO;                        /* THEN                       */
*             IF BLOKPDE > 0 |         /* IF BLOCK,                  */
*                SPACEPDE > 0 |        /* SPACE, OR                  */
*                DIRPDE > 0 THEN       /* DIR PARAMETERS SPECIFIED,  */
         CH    R10,BLOKPDE(,R3)                                    0136
         BL    @RT00136                                            0136
         CH    R10,SPACEPDE(,R3)                                   0136
         BL    @RT00136                                            0136
         CH    R10,DIRPDE(,R3)                                     0136
         BNL   @RF00136                                            0136
@RT00136 DS    0H                                                  0137
*               STATSPDE = 4;          /* DEFAULT STATUS TO NEW      */
         L     R10,PTRPDL(,R2AWAPTR)                               0137
         MVC   STATSPDE(2,R10),@HW4                                0137
*             ELSE                     /* ELSE                       */
*               IF DSPDE > 0 THEN      /* IF DSNAME SPECIFIED,       */
         B     @RC00136                                            0138
@RF00136 L     R10,PTRPDL(,R2AWAPTR)                               0138
         LH    R3,DSPDE(,R10)                                      0138
         LTR   R3,R3                                               0138
         BNP   @RF00138                                            0138
*                 STATSPDE = 1;        /* DEFAULT STATUS TO OLD      */
         MVC   STATSPDE(2,R10),@HW1                                0139
*               ELSE                   /* ELSE                       */
*                 CALL PRMPTSTS;       /* PROMPT FOR STATUS          */
         B     @RC00138                                            0140
@RF00138 BAL   R14,PRMPTSTS                                        0140
*           END;                                                   0141
@RC00138 DS    0H                                                  0141
@RC00136 DS    0H                                                  0142
*         IF RBCODE12 = '0'B THEN      /* IF STATUS PROMPT SUCCESSFUL*/
@RF00134 TM    RBCODE12(R2AWAPTR),B'10000000'                      0142
         BNZ   @RF00142                                            0142
*           DO;                        /* THEN                       */
*             IF DSPDE = 1 &           /* IF CONCATENATION REQUEST   */
*                DSNNEXT ^= PDECMPRE THEN                          0144
         L     R10,PTRPDL(,R2AWAPTR)                               0144
         CLC   DSPDE(2,R10),@HW1                                   0144
         BNE   @RF00144                                            0144
         CLC   DSNNEXT(4,R10),PDECMPRE                             0144
         BE    @RF00144                                            0144
*               DO;                                                0145
*               R1 = AWAPTR;           /* WORKAREA PTR IN REG 1      */
         LR    R1,R2AWAPTR                                         0146
*                                      /* CALL CONCAT ROUTINE        */
*               CALL IKJEFD34;                                     0147
         L     R15,VCONSD34                                        0147
         BALR  R14,R15                                             0147
*               END;                                               0148
*             ELSE                     /* ELSE                       */
*               DO;                                                0149
         B     @RC00144                                            0149
@RF00144 DS    0H                                                  0150
*               R1 = AWAPTR;           /* WORKAREA PTR IN REG 1      */
         LR    R1,R2AWAPTR                                         0150
*                                      /* CALL OTHER REQUEST ROUTINE */
*               CALL IKJEFD32;                                     0151
         L     R15,VCONSD32                                        0151
         BALR  R14,R15                                             0151
*               END;                                               0152
*           END;                                                   0153
*       END;                                                       0154
*END REQTYPE;                                                      0155
@EL00004 DS    0H                                                  0155
@EF00004 DS    0H                                                  0155
@ER00004 LM    R14,R12,@SA00004                                    0155
         BR    R14                                                 0155
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      EXIT1                                                       */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE PERFORMS CLEAN-UP BEFORE RETURNING TO TMP.     */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      IF THE POINTER TO THE PDL IS NON-ZERO, THEN THE PDL STORAGE */
*/*      IS RELEASED. IF ALLOCATE WAS UNSUCCESSFUL, THE STACK IS     */
*/*      FLUSHED AND THE RETURN CODE IS SET TO 12.                   */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDL                                                  */
*/*      RBCODE12 = 1 - ALLOCATE UNSUCCESSFUL                        */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      PDL STORAGE RELEASED, AND                                   */
*/*      STACK FLUSHED,IF NECESSARY                                  */
*/*      RETURN CODE = 0 - SUCCESSFUL                                */
*/*                   12 - UNSUCCESSFUL                              */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INLCUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/*                                                                  */
*/********************************************************************/
*    EXIT1: PROC;                                                  0156
EXIT1    STM   R14,R12,@SA00005                                    0156
*        IF PTRPDL ^= 0 THEN           /* IF PDL CREATED,            */
         L     R10,PTRPDL(,R2AWAPTR)                               0157
         LTR   R10,R10                                             0157
         BZ    @RF00157                                            0157
*          DO;                                                     0158
*            R3 = ADDR(PTRPDL);        /* PUT ADDRESS IN REG 3       */
         LA    R3,PTRPDL(,R2AWAPTR)                                0159
*            GEN (IKJRLSA (3));        /* RELEASE THE PDL            */
         IKJRLSA (3)
*          END;                                                    0161
*        IF GTPLOUTA ^= 0 THEN         /* IF TEXT CORE TO FREE,      */
@RF00157 L     R10,GTPLPTR(,R2AWAPTR)                              0162
         L     R10,GTPLOUTA(,R10)                                  0162
         LTR   R10,R10                                             0162
         BZ    @RF00162                                            0162
*          DO;                                                     0163
*            R0 = SBPLSIZE;            /* SUPBOOL AND SIZE IN REG 0  */
         L     R0,SBPLSIZE(,R10)                                   0164
*            R1 = GTPLOUTA;            /* ADDRESS IN REG 1           */
         LR    R1,R10                                              0165
*            GEN (FREEMAIN R,LV=(0),A=(1));  /* ISSUE FREEMAIN       */
         FREEMAIN R,LV=(0),A=(1)
*          END;                                                    0167
*        IF RBCODE12 = '1'B THEN       /* IF ALLOCATE FAILED,        */
@RF00162 TM    RBCODE12(R2AWAPTR),B'10000000'                      0168
         BNO   @RF00168                                            0168
*          DO;                         /* FLUSH THE STACK            */
*        GEN DATA;                                                 0170
*/* MOVE LIST FORM INTO GEN DATA AREA                                */
*            GEN (MVC STACKLSD(LISTE-LISTB),STACKLST);             0171
         MVC STACKLSD(LISTE-LISTB),STACKLST
*            STPLPTR = ADDR(STPLAREA);                             0172
         LA    STPLPTR,STPLAREA                                    0172
*            STPLUPT = CPPLUPT;                                    0173
         L     R10,CPPLPTR(,R2AWAPTR)                              0173
         MVC   STPLUPT(4,STPLPTR),CPPLUPT(R10)                     0173
*            STPLECT = CPPLECT;                                    0174
         MVC   STPLECT(4,STPLPTR),CPPLECT(R10)                     0174
*            STPLECB = ADDR(COMMECB);                              0175
         LA    R10,COMMECB(,R2AWAPTR)                              0175
         ST    R10,STPLECB(,STPLPTR)                               0175
*            COMMECB = 0;                                          0176
         SLR   R10,R10                                             0176
         ST    R10,COMMECB(,R2AWAPTR)                              0176
*            R3 = ADDR(STACKLSD);                                  0177
         LA    R3,STACKLSD                                         0177
*            R1 = STPLPTR;                                         0178
         LR    R1,STPLPTR                                          0178
*            GEN (STACK PARM=(R3),DELETE=ALL,MF=(E,(1)));          0179
         STACK PARM=(R3),DELETE=ALL,MF=(E,(1))
*            GEN (TCLEARQ INPUT);                                  0180
         TCLEARQ INPUT
*            RTRNCODE = 12;            /* SET RETURN CODE TO 12      */
         L     R10,RGSVAREA(,R13)                                  0181
         MVC   RTRNCODE(4,R10),@FW12                               0181
*          END;                                                    0182
*        ELSE                          /* ELSE,                      */
*          RTRNCODE = 0;               /* SET RETURN CODE TO 0       */
         B     @RC00168                                            0183
@RF00168 L     R10,RGSVAREA(,R13)                                  0183
         SLR   R15,R15                                             0183
         ST    R15,RTRNCODE(,R10)                                  0183
*   END EXIT1;                                                     0184
@EL00005 DS    0H                                                  0184
@EF00005 DS    0H                                                  0184
@ER00005 LM    R14,R12,@SA00005                                    0184
         BR    R14                                                 0184
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      PRMPTSTS                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE PROMPTS THE USER FOR A STATUS WHEN IT IS       */
*/*      REQUIRED.                                                   */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      PARSE IS INVOKED WITH A SECONDARY PCL AND PDL ADDRESS.  IF  */
*/*      PARSE SUCCESSFUL, SAVE THE PARAMETER ENTERED AND RELEASE    */
*/*      THE SECONDARY PDL.                                          */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDL                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      PDL OVERLAID WITH PROMPT DATA                               */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCITON AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*     PRMPTSTS: PROC;                                              0185
PRMPTSTS STM   R14,R12,@SA00006                                    0185
*        ENTRYCD = 2;                  /* INDICATE PROMPT FOR STATUS */
         MVC   ENTRYCD(2,R2AWAPTR),@HW2                            0186
*        R1 = AWAPTR;                  /* WORKAREA PTR IN REG 1      */
         LR    R1,R2AWAPTR                                         0187
*        CALL IKJEFD37;                /* INVOKE PARSE               */
         L     R15,VCONSD37                                        0188
         BALR  R14,R15                                             0188
*        IF RCODESV > 0 THEN           /* IF PARSE FAILED,           */
         L     R10,RCODESV(,R2AWAPTR)                              0189
         LTR   R10,R10                                             0189
         BNP   @RF00189                                            0189
*          DO;                         /* THEN                       */
*            ENTRYCD = 2;              /* INDICATE PARSE ERROR       */
         MVC   ENTRYCD(2,R2AWAPTR),@HW2                            0191
*            R1 = AWAPTR;              /* WROKAREA PTR IN REG 1      */
         LR    R1,R2AWAPTR                                         0192
*            CALL IKJEFD35;            /* ISSUE ERROR MESSAGE        */
         L     R15,VCONSD35                                        0193
         BALR  R14,R15                                             0193
*          END;                                                    0194
*        ELSE                                                      0195
*          DO;                         /* ELSE,                      */
         B     @RC00189                                            0195
@RF00189 DS    0H                                                  0196
*            RFY R5 RSTD;              /* RESTRICT REG 5             */
*            R5 = ADDR(PMPTPDL);       /* PDL ADDRESS IN REG 5       */
         LA    R5,PMPTPDL(,R2AWAPTR)                               0197
*            GEN (IKJRLSA (5));        /* RELEASE PDL                */
         IKJRLSA (5)
*            RFY R5 UNRSTD;            /* UNRESTRICT REG 5           */
*          END;                                                    0200
*    END PRMPTSTS;                                                 0201
@EL00006 DS    0H                                                  0201
@EF00006 DS    0H                                                  0201
@ER00006 LM    R14,R12,@SA00006                                    0201
         BR    R14                                                 0201
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      PUTMSG                                                      */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE INVOKES IKJEFF02 TO ISSUE MESSAGES             */
*/*                                                                  */
*/* OPERATION -                                                       *
*/*      THE PARAMETER LIST FOR THE MESSAGE PROCESSOR IKJEFF02 IS    */
*/*      COMPLETED. IKJEFF02 IS LINKED TO. AN INDICATOR IS SET       */
*/*      SHOWING ALLOCATE HAS FAILED.                                */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      IKJEFF02 PARAMETER LIST                                     */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      MESSAGE ISSUED                                              */
*/*                                                                  */
*/********************************************************************/
*PUTMSG: PROC;                                                     0202
PUTMSG   STM   R14,R12,@SA00007                                    0202
*   LISTPTR = ADDR(MSGCSECT);                                      0203
         L     R10,MSGPTR(,R2AWAPTR)                               0203
         LA    R3,MSGCSECT(,R10)                                   0203
         ST    R3,LISTPTR(,R10)                                    0203
*   MTCPPL = CPPLPTR;                                              0204
         MVC   MTCPPL(4,R10),CPPLPTR(R2AWAPTR)                     0204
*   ECBPTR = ADDR(COMMECB);            /* POINTER TO ECB             */
         LA    R3,COMMECB(,R2AWAPTR)                               0205
         ST    R3,ECBPTR(,R10)                                     0205
*   COMMECB = 0;                       /* INIT ECB TO 0              */
         SLR   R3,R3                                               0206
         ST    R3,COMMECB(,R2AWAPTR)                               0206
*   MTHIGH = '1'B;                     /* HIGH ORDER BIT ON          */
         OI    MTHIGH(R10),B'10000000'                             0207
*   MTPUTLSW = '1'B;                   /* INDICATE PUTLINE           */
         OI    MTPUTLSW(R10),B'01000000'                           0208
*   MSGCSECT = PTRMSGS;                /* ADDRESS OF MSG CSECT       */
*                                                                  0209
         MVC   MSGCSECT(4,R10),PTRMSGS(R2AWAPTR)                   0209
*   VAR1 = DSNPTR;                     /* PTR TO DSNAME VARIABLE     */
         L     R3,PTRPDL(,R2AWAPTR)                                0210
         MVC   VAR1(3,R10),DSNPTR+1(R3)                            0210
*   L1 = DSNLENGH;                     /* LENGTH OF DSNAME VARIABLE  */
         MVC   L1(1,R10),DSNLENGH+1(R3)                            0211
*   R1 = ADDR(MSGTABLE);                                           0212
         LR    R1,R10                                              0212
*   GEN (LINK EP=IKJEFF02);                                        0213
*                                                                  0213
         LINK EP=IKJEFF02
*   RBCODE12 = '1'B;                   /* INDICATE ALLOC FAILED      */
         OI    RBCODE12(R2AWAPTR),B'10000000'                      0214
*END PUTMSG;                                                       0215
@EL00007 DS    0H                                                  0215
@EF00007 DS    0H                                                  0215
@ER00007 LM    R14,R12,@SA00007                                    0215
         BR    R14                                                 0215
*        GENERATE;                                                 0216
         DS 0F
LISTB    EQU *
STACKLST STACK MF=L
LISTE    EQU *
*    END IKJEFD30                                                  0217
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJZT430)                                        *
*/*%INCLUDE SYSLIB  (IKJEFFMT)                                        *
*/*%INCLUDE SYSLIB  (IKJCPPL )                                        *
*/*%INCLUDE SYSLIB  (IKJPPL  )                                        *
*/*%INCLUDE SYSLIB  (IKJSTPL )                                        *
*/*%INCLUDE SYSLIB  (IEFZB4D0)                                        *
*/*%INCLUDE SYSLIB  (IEFZB4D2)                                        *
*/*%INCLUDE SYSLIB  (IKJZB831)                                        *
*;                                                                 0217
@EL00001 L     R13,4(,R13)                                         0217
@EF00001 L     R0,@SIZDATD                                         0217
         LR    R1,R11                                              0217
         FREEMAIN R,LV=(0),A=(1)
@ER00001 L     R14,12(,R13)                                        0217
         LM    R0,R12,20(R13)                                      0217
         BR    R14                                                 0217
@DATA    DC    0H'0'
@HW1     DC    H'1'
@HW2     DC    H'2'
@HW4     DC    H'4'
@HW5     DC    H'5'
@HW255   DC    H'255'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SA00004 DS    15F
@SA00005 DS    15F
@SA00007 DS    15F
@SA00006 DS    15F
@SA00003 DS    0F
         DS    15F
@ZTEMPS  DS    C
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
IKJEFD30 CSECT
         DC    0F'0'
@FW12    DC    F'12'
@DATD    DSECT
         DS    0D
S99RBPTR DS    AL4
         ORG   S99RBPTR
S99RBPND DS    BL1
         ORG   S99RBPTR+4
S99TUFP  DS    A
WACORE   DS    CL192
MSGAREA  DS    CL64
PPLCORE  DS    CL28
STPLAREA DS    CL16
TEXTCORE DS    CL96
         ORG   TEXTCORE
ADDNUM   DS    FL2
@NM00012 DS    FL2
ADDTEXT  DS    8AL4
ADDUNIT  DS    CL60
         ORG   TEXTCORE+96
S99RB    DS    CL20
         ORG   S99RB
S99RBLN  DS    CL1
S99VERB  DS    CL1
S99FLAG1 DS    CL2
         ORG   S99FLAG1
S99FLG11 DS    CL1
         ORG   S99FLG11
S99ONCNV DS    BL1
S99NOCNV EQU   S99FLG11+0
S99NOMNT EQU   S99FLG11+0
S99JBSYS EQU   S99FLG11+0
         ORG   S99FLAG1+1
S99FLG12 DS    CL1
         ORG   S99RB+4
S99RSC   DS    CL4
         ORG   S99RSC
S99ERROR DS    CL2
S99INFO  DS    CL2
         ORG   S99RB+8
S99TXTPP DS    AL4
S99RSV01 DS    FL4
S99FLAG2 DS    CL4
         ORG   S99FLAG2
S99FLG21 DS    CL1
         ORG   S99FLG21
S99WTVOL DS    BL1
S99WTDSN EQU   S99FLG21+0
S99NORES EQU   S99FLG21+0
S99WTUNT EQU   S99FLG21+0
S99OFFLN EQU   S99FLG21+0
S99TIONQ EQU   S99FLG21+0
S99CATLG EQU   S99FLG21+0
S99MOUNT EQU   S99FLG21+0
         ORG   S99FLAG2+1
S99FLG22 DS    CL1
         ORG   S99FLG22
S99UDEVT DS    BL1
S99PCINT EQU   S99FLG22+0
         ORG   S99FLAG2+2
S99FLG23 DS    CL1
S99FLG24 DS    CL1
         ORG   S99RB+20
GTPLAREA DS    CL24
KEYLIST  DS    40H
IKJEFD30 CSECT
         DC    0F'0'
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
VCONSD31 DC    V(IKJEFD31)
VCONSD32 DC    V(IKJEFD32)
VCONSD34 DC    V(IKJEFD34)
VCONSD37 DC    V(IKJEFD37)
VCONSD35 DC    V(IKJEFD35)
         DC    0D'0'
@CC00805 DC    C'112A'
PDECMPRE DC    X'FF000000'
KEYWDTAB DS    CL77
         ORG   KEYWDTAB
STATSTB  DS    CL8
         ORG   STATSTB
STSKEY   DC    X'0004'
STSCNT   DC    AL2(4)
STATS1   DC    X'01'
STATS2   DC    X'08'
STATS3   DC    X'02'
STATS4   DC    X'04'
         ORG   KEYWDTAB+8
DISPTB   DS    CL8
         ORG   DISPTB
DSPKEY   DC    X'0005'
DSPCNT   DC    AL2(4)
DISP1    DC    X'08'
DISP2    DC    X'04'
DISP3    DC    X'02'
DISP4    DC    X'01'
         ORG   KEYWDTAB+16
TRKSTB   DS    CL7
         ORG   TRKSTB
TRKSKEY  DC    X'0007'
TRKSCNT  DC    AL2(3)
TRKS1    DC    X'FF'
TRKS2    DC    X'FF'
TRKS3    DC    X'00'
         ORG   KEYWDTAB+23
CYLSTB   DS    CL8
         ORG   CYLSTB
CYLSKEY  DC    X'0008'
CYLSCNT  DC    AL2(4)
CYLS1    DC    X'FF'
CYLS2    DC    X'FF'
CYLS3    DC    X'FF'
CYLS4    DC    X'00'
         ORG   KEYWDTAB+31
RLSETB   DS    CL5
         ORG   RLSETB
RLSEKEY  DC    X'000D'
RLSECNT  DC    AL2(1)
RLSE1    DC    X'00'
         ORG   KEYWDTAB+36
RNDTB    DS    CL5
         ORG   RNDTB
RNDKEY   DC    X'000F'
RNDCNT   DC    AL2(1)
RND1     DC    X'00'
         ORG   KEYWDTAB+41
PRIVTB   DS    CL5
         ORG   PRIVTB
PRIVKEY  DC    X'0011'
PRIVCNT  DC    AL2(1)
PRIV1    DC    X'00'
         ORG   KEYWDTAB+46
PARLTB   DS    CL6
         ORG   PARLTB
PARLKEY  DC    X'0017'
PARLCNT  DC    AL2(2)
PARL1    DC    X'FF'
PARL2    DC    X'00'
         ORG   KEYWDTAB+52
LABLTB   DS    CL12
         ORG   LABLTB
LABLKEY  DC    X'001E'
LABLCNT  DC    AL2(8)
LABL1    DC    X'02'
LABL2    DC    X'0A'
LABL3    DC    X'40'
LABL4    DC    X'48'
LABL5    DC    X'01'
LABL6    DC    X'04'
LABL7    DC    X'21'
LABL8    DC    X'10'
         ORG   KEYWDTAB+64
DUMMYTB  DS    CL6
         ORG   DUMMYTB
DMYKEY   DC    X'0024'
CMYCNT   DC    AL2(2)
DMY1     DC    X'FF'
DMY2     DC    X'00'
         ORG   KEYWDTAB+70
HOLDTB   DS    CL5
         ORG   HOLDTB
HOLDKEY  DC    X'0059'
HOLDCNT  DC    AL2(1)
HOLD1    DC    X'00'
         ORG   KEYWDTAB+75
ENDTB    DS    CL2
         ORG   ENDTB
ENDKEY   DC    X'FFFF'
         ORG   KEYWDTAB+77
         DC    0H'0'
KYLIST   DC    XL2'0024'
         DC    XL2'0002'
         DC    XL2'0000'
         DC    XL2'0001'
         DC    XL2'0004'
         DC    XL2'0018'
         DC    XL2'0000'
         DC    XL2'0010'
         DC    XL2'0000'
         DC    XL2'0009'
         DC    XL2'0000'
         DC    XL2'000A'
         DC    XL2'0000'
         DC    XL2'000C'
         DC    XL2'0000'
         DC    XL2'002D'
         DC    XL2'0000'
         DC    XL2'0058'
         DC    XL2'0059'
         DC    XL2'0000'
         DC    XL2'0000'
         DC    XL2'0015'
         DC    XL2'0017'
         DC    XL2'0016'
         DC    XL2'0000'
         DC    XL2'001E'
         DC    XL2'0000'
         DC    XL2'001F'
         DC    XL2'0000'
         DC    XL2'0013'
         DC    XL2'0011'
         DC    XL2'0000'
         DC    XL2'0000'
         DC    XL2'0012'
         DC    XL2'000D'
         DC    XL2'0000'
         DC    XL2'000F'
         DC    XL2'0000'
         DC    XL2'0005'
         DC    XL2'0000'
         DC    0F'0'
PATCH    DC    25F'0'
         DC    0D'0'                   END OF CSECT                @26A
@DATD    DSECT
         DS    0F
STACKLSD STACK MF=L
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) ENSURE DSECT DATA
@ENDDATD EQU   *
IKJEFD30 CSECT
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
STPLPTR  EQU   R4
R2AWAPTR EQU   R2
ALLOCWA  EQU   0
CPPLPTR  EQU   ALLOCWA
PTRPDL   EQU   ALLOCWA+4
GTPLPTR  EQU   ALLOCWA+8
SWITCH   EQU   ALLOCWA+12
RBCODE12 EQU   SWITCH
AWARSV1  EQU   SWITCH
SWITCH2  EQU   ALLOCWA+13
REUSE    EQU   SWITCH2                                             @26A
ENTRYCD  EQU   ALLOCWA+14
TXT      EQU   ALLOCWA+16
PTRS99RB EQU   ALLOCWA+20
RCODESV  EQU   ALLOCWA+24
VLISTCTR EQU   ALLOCWA+28
PTRMSGS  EQU   ALLOCWA+32
VCFLAGS  EQU   ALLOCWA+36
PMPTPDL  EQU   ALLOCWA+40
MSGPTR   EQU   ALLOCWA+48
CMDTWO   EQU   ALLOCWA+60
COMMECB  EQU   ALLOCWA+160
PPLPTR   EQU   ALLOCWA+172
ALLOCPDL EQU   0
DSPDE    EQU   ALLOCPDL+8
STATSPDE EQU   ALLOCPDL+12
BLOKPDE  EQU   ALLOCPDL+16
SPACEPDE EQU   ALLOCPDL+18
DIRPDE   EQU   ALLOCPDL+20
DISPPDE  EQU   ALLOCPDL+46
REUSEPDE EQU   ALLOCPDL+48             (16-BIT NUMBER)             @26A
DSNPDE   EQU   ALLOCPDL+48+4           (WORD ALIGNED)              @26C
DSNPTR   EQU   DSNPDE
DSNLENGH EQU   DSNPDE+4
DSNFLAGS EQU   DSNPDE+6
MBRPTR   EQU   DSNPDE+8
MBRFLAGS EQU   DSNPDE+14
MBRPRES  EQU   MBRFLAGS
PASSPTR  EQU   DSNPDE+16
PASSFLAG EQU   DSNPDE+22
DSNNEXT  EQU   DSNPDE+24
DDNMEPDE EQU   ALLOCPDL+76+4                                       @26C
DDNPTR   EQU   DDNMEPDE
DDNFLAGS EQU   DDNMEPDE+6
CLASPDE  EQU   ALLOCPDL+84+4                                       @26C
CLASPTR  EQU   CLASPDE
CLASFLG  EQU   CLASPDE+6
SERPDE   EQU   ALLOCPDL+92+4                                       @26C
SERPTR   EQU   SERPDE
SERFLAGS EQU   SERPDE+6
BLKPDE   EQU   ALLOCPDL+104+4                                      @26C
BLKPTR   EQU   BLKPDE
BLKFLAGS EQU   BLKPDE+6
ABLKPDE  EQU   ALLOCPDL+112+4                                      @26C
ABLKPTR  EQU   ABLKPDE
ABLKFLG  EQU   ABLKPDE+6
SPACPDE  EQU   ALLOCPDL+120+4                                      @26C
SPACEPTR EQU   SPACPDE
SPACEFLG EQU   SPACPDE+6
SPACPDE2 EQU   ALLOCPDL+128+4                                      @26C
SPACPTR2 EQU   SPACPDE2
SPACFLG2 EQU   SPACPDE2+6
DIRECPDE EQU   ALLOCPDL+136+4                                      @26C
DIRPTR   EQU   DIRECPDE
DIRFLAGS EQU   DIRECPDE+6
ATTRPDE  EQU   ALLOCPDL+144+4                                      @26C
ATTRPTR  EQU   ATTRPDE
ATTRFLAG EQU   ATTRPDE+6
USIDPDE  EQU   ALLOCPDL+152+4                                      @26C
USIDPTR  EQU   USIDPDE
USIDFLAG EQU   USIDPDE+6
UTYPPDE  EQU   ALLOCPDL+160+4                                      @26C
UTYPPTR  EQU   UTYPPDE
UTYPFLAG EQU   UTYPPDE+6
UNCNTPDE EQU   ALLOCPDL+168+4                                      @26C
UCNTPTR  EQU   UNCNTPDE
UCNTFLAG EQU   UNCNTPDE+6
POSTPDE  EQU   ALLOCPDL+180+4                                      @26C
POSPTR   EQU   POSTPDE
POSFLAG  EQU   POSTPDE+6
MXVOLPDE EQU   ALLOCPDL+188+4                                      @26C
MXVOLPTR EQU   MXVOLPDE
MXVOLFLG EQU   MXVOLPDE+6
VOLSQPDE EQU   ALLOCPDL+196+4                                      @26C
VOLSQPTR EQU   VOLSQPDE
VOLSQFLG EQU   VOLSQPDE+6
MSVGPDE  EQU   ALLOCPDL+204+4                                      @26C
MSVGPTR  EQU   MSVGPDE
MSVGFLG  EQU   MSVGPDE+6
DSNBUF   EQU   0
MSGTABLE EQU   0
LISTPTR  EQU   MSGTABLE
TMCTPTR  EQU   MSGTABLE+4
MTCPPL   EQU   TMCTPTR
ECBPTR   EQU   MSGTABLE+8
@NM00007 EQU   MSGTABLE+12
MTHIGH   EQU   @NM00007
MSGCSECT EQU   MSGTABLE+16
SW       EQU   MSGTABLE+20
MTPUTLSW EQU   SW
RETMSG   EQU   MSGTABLE+21
SW2      EQU   MSGTABLE+24
MSGID    EQU   MSGTABLE+40
MTINSRTS EQU   MSGTABLE+44
L1       EQU   MTINSRTS
VAR1     EQU   MTINSRTS+1
L2       EQU   MTINSRTS+4
L3       EQU   MTINSRTS+8
L4       EQU   MTINSRTS+12
RET      EQU   0
CPPL     EQU   0
CPPLUPT  EQU   CPPL+4
CPPLECT  EQU   CPPL+12
RGSVAREA EQU   4
RTRNCODE EQU   16
PPL      EQU   0
PPLUPT   EQU   PPL
PPLECT   EQU   PPL+4
PPLECB   EQU   PPL+8
PPLPCL   EQU   PPL+12
STPL     EQU   0
STPLUPT  EQU   STPL
STPLECT  EQU   STPL+4
STPLECB  EQU   STPL+8
TEXTRET  EQU   0
SBPLSIZE EQU   TEXTRET
S99TUPL  EQU   0
S99TUPTR EQU   S99TUPL
S99TUP   EQU   0
S99TUNIT EQU   0
S99TUENT EQU   S99TUNIT+4
S99TUFLD EQU   0
GTPL     EQU   0
GTPLPDL  EQU   GTPL
GTPLPCL  EQU   GTPL+4
GTPLKLST EQU   GTPL+8
GTPLTBLE EQU   GTPL+12
GTPLABLK EQU   GTPL+16
GTPLOUTA EQU   GTPL+20
ABLKBUF  EQU   0
ATTRBUF  EQU   0
BLKBUF   EQU   0
CLASSBUF EQU   0
DDNBUF   EQU   0
DIRBUF   EQU   0
MBRBUF   EQU   0
MSGECB   EQU   0
MSGTMCT  EQU   0
MSVGBUF  EQU   0
MXVOLBUF EQU   0
PASSBUF  EQU   0
POSTBUF  EQU   0
SERBUF   EQU   0
SPACBUF2 EQU   0
SPACEBUF EQU   0
UCNTBUF  EQU   0
USIDBUF  EQU   0
UTYPBUF  EQU   0
VSEQBUF  EQU   0
TMCTPARM EQU   0
KEY2     EQU   KEYLIST
KEY1     EQU   KYLIST
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
S99TUPRM EQU   S99TUFLD+2
S99TULEN EQU   S99TUFLD
S99TUPAR EQU   S99TUENT+2
S99TULNG EQU   S99TUENT
S99TUNUM EQU   S99TUNIT+2
S99TUKEY EQU   S99TUNIT
S99TUPND EQU   S99TUP
S99TUPLN EQU   S99TUPTR
STPLSTPB EQU   STPL+12
PPLUWA   EQU   PPL+24
PPLCBUF  EQU   PPL+20
PPLANS   EQU   PPL+16
CPPLPSCB EQU   CPPL+8
CPPLCBUF EQU   CPPL
RETCHAR  EQU   RET+2
RETSIZE  EQU   RET
MSGRTN   EQU   MSGTABLE+60
VAR4     EQU   MTINSRTS+13
HIGHL4   EQU   L4
VAR3     EQU   MTINSRTS+9
HIGHL3   EQU   L3
VAR2     EQU   MTINSRTS+5
HIGHL2   EQU   L2
HIGHL1   EQU   L1
@NM00011 EQU   MSGTABLE+36
@NM00010 EQU   MSGTABLE+32
MTOLDPTR EQU   MSGTABLE+28
@NM00009 EQU   MSGTABLE+25
@NM00008 EQU   SW2
MTPGMSW  EQU   SW2
MTNPLMSW EQU   SW2
MTNOXQSW EQU   SW2
MTDOMSW  EQU   SW2
MT2OLDSW EQU   SW2
MTNHEXSW EQU   SW
MTWTPSW  EQU   SW
MTJOBISW EQU   SW
MTKEY1SW EQU   SW
MTHEXSW  EQU   SW
MTWTOSW  EQU   SW
MTNOIDSW EQU   SW
DSNTERM  EQU   DSNBUF
MSVGRSV2 EQU   MSVGPDE+7
MSVGRSV1 EQU   MSVGFLG
MSVGPRES EQU   MSVGFLG
MSVGLEN  EQU   MSVGPDE+4
VOLRSV2  EQU   VOLSQPDE+7
VOLRSV1  EQU   VOLSQFLG
VOLPRES  EQU   VOLSQFLG
VOLSQLEN EQU   VOLSQPDE+4
MXVRSV2  EQU   MXVOLPDE+7
MXVRSV1  EQU   MXVOLFLG
MXVPRES  EQU   MXVOLFLG
MXVOLLEN EQU   MXVOLPDE+4
POSRSV2  EQU   POSTPDE+7
POSRSV1  EQU   POSFLAG
POSPRES  EQU   POSFLAG
POSLEN   EQU   POSTPDE+4
LABLRSV1 EQU   ALLOCPDL+178+4                                      @26C
LABELPDE EQU   ALLOCPDL+176+4                                      @26C
UCNTRSV2 EQU   UNCNTPDE+7
UCNTRSV1 EQU   UCNTFLAG
UCNTPRES EQU   UCNTFLAG
UCNTLEN  EQU   UNCNTPDE+4
UTYPRSV2 EQU   UTYPPDE+7
UTYPRSV1 EQU   UTYPFLAG
UTYPPRES EQU   UTYPFLAG
UTYPLEN  EQU   UTYPPDE+4
USIDRSV2 EQU   USIDPDE+7
USIDRSV1 EQU   USIDFLAG
USIDPRES EQU   USIDFLAG
USIDLEN  EQU   USIDPDE+4
ATTRRSV2 EQU   ATTRPDE+7
ATTRRSV1 EQU   ATTRFLAG
ATTRPRES EQU   ATTRFLAG
ATTRLEN  EQU   ATTRPDE+4
DIRRSV2  EQU   DIRECPDE+7
DIRRSV1  EQU   DIRFLAGS
DIRPRES  EQU   DIRFLAGS
DIRLEN   EQU   DIRECPDE+4
SPCRSV22 EQU   SPACPDE2+7
SPCRSV12 EQU   SPACFLG2
SPCPRES2 EQU   SPACFLG2
SPACLEN2 EQU   SPACPDE2+4
SPACRSV2 EQU   SPACPDE+7
SPACRSV1 EQU   SPACEFLG
SPACPRES EQU   SPACEFLG
SPACELEN EQU   SPACPDE+4
ABLKRSV2 EQU   ABLKPDE+7
ABLKRSV1 EQU   ABLKFLG
ABLKPRES EQU   ABLKFLG
ABLKLEN  EQU   ABLKPDE+4
BLKRSV2  EQU   BLKPDE+7
BLKRSV1  EQU   BLKFLAGS
BLKPRES  EQU   BLKFLAGS
BLKLEN   EQU   BLKPDE+4
SERNEXT  EQU   SERPDE+8
SERRSV2  EQU   SERPDE+7
SERRSV1  EQU   SERFLAGS
SERPRES  EQU   SERFLAGS
SERLEN   EQU   SERPDE+4
CLASRSV2 EQU   CLASPDE+7
CLASRSV1 EQU   CLASFLG
CLASPRES EQU   CLASFLG
CLASLEN  EQU   CLASPDE+4
DDNRSV2  EQU   DDNMEPDE+7
DDNRSV1  EQU   DDNFLAGS
DDNPRES  EQU   DDNFLAGS
DDNLEN   EQU   DDNMEPDE+4
PASSRSV2 EQU   DSNPDE+23
PASSRSV1 EQU   PASSFLAG
PASSPRES EQU   PASSFLAG
PASSLEN  EQU   DSNPDE+20
MBRRSV2  EQU   DSNPDE+15
MBRRSV1  EQU   MBRFLAGS
MBRLEN   EQU   DSNPDE+12
DSNRSV2  EQU   DSNPDE+7
DSNRSV1  EQU   DSNFLAGS
DSNQUOT  EQU   DSNFLAGS
DSNPRES  EQU   DSNFLAGS
RNDPDE   EQU   ALLOCPDL+44
RLSEPDE  EQU   ALLOCPDL+42
VSEQPDE  EQU   ALLOCPDL+40
PRIVPDE  EQU   ALLOCPDL+38
MAXVPDE  EQU   ALLOCPDL+36
POSPDE   EQU   ALLOCPDL+34
LABLPDE  EQU   ALLOCPDL+32
UCNTPDE  EQU   ALLOCPDL+30
UNITPDE  EQU   ALLOCPDL+28
HOLDPDE  EQU   ALLOCPDL+26
DESTPDE  EQU   ALLOCPDL+24
USINGPDE EQU   ALLOCPDL+22
VOLPDE   EQU   ALLOCPDL+14
FILEPDE  EQU   ALLOCPDL+10
@NM00006 EQU   ALLOCPDL+4
@NM00005 EQU   ALLOCPDL
FIRSTPTR EQU   ALLOCWA+176
NBLKBUF1 EQU   ALLOCWA+164
PDLADDR3 EQU   ALLOCWA+156
PPLTWO   EQU   ALLOCWA+128
CMDTWOBF EQU   CMDTWO+4
CMDTWOOF EQU   CMDTWO+2
CMDTWOLN EQU   CMDTWO
Q        EQU   ALLOCWA+56
P        EQU   ALLOCWA+52
PRCODE   EQU   ALLOCWA+44
@NM00004 EQU   ALLOCWA+38
NCLASBUF EQU   ALLOCWA+37
@NM00003 EQU   VCFLAGS
SPACE2   EQU   VCFLAGS
SPACE1   EQU   VCFLAGS
AVBLK    EQU   VCFLAGS
DSNCTR   EQU   ALLOCWA+30
@NM00002 EQU   SWITCH2
DSEXISTS EQU   SWITCH2
@NM00001 EQU   SWITCH2
FIRSTPDE EQU   SWITCH
ASTRSK   EQU   SWITCH
TERMOPT  EQU   SWITCH
CONT     EQU   SWITCH
PROMPT   EQU   SWITCH
DSOVRLAY EQU   SWITCH
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00098 EQU   @EL00003
@RC00122 EQU   @EL00004
@RC00117 EQU   @EL00004
@RF00142 EQU   @EL00004
@RC00144 EQU   @EL00004
@RC00168 EQU   @EL00005
@RC00189 EQU   @EL00006
@RC00100 EQU   @RC00098
@ENDDATA EQU   *
         END   IKJEFD30,(C'PLS1113',0902,85049)
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
  IDENTIFY IKJEFD30('ZP60026')
++MOD(IKJEFD31) DISTLIB(AOST4).
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT)'
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
**********************************************************************
*                                                                    *
* MODULE -                                                           *
*        IKJEFD31 - MESSAGE CSECT                                    *
*                                                                    *
* FUNCTION -                                                         *
*        THIS MODULE CONTAINS ALL OF THE MESSAGES TO BE ISSUED BY    *
*        THE ALLOCATE CP.  THE MESSAGES ARE CODED USING THE IKJTSMSG *
*        MACRO, AND ARE PROCESSED BY MODULE IKJEFF02.                *
*                                                                    *
* ENTRY POINT -                                                      *
*        IKJEFD31 - IKJEFF02 SEARCHES FOR THE MESSAGE TEXT TO BE     *
*                   PUT OUT TO THE TERMINAL.                         *
*                                                                    *
* INPUT -                                                            *
*        NONE                                                        *
*                                                                    *
* OUTPUT -                                                           *
*        NONE                                                        *
*                                                                    *
* EXTERNAL REFERENCES -                                              *
*        NONE                                                        *
*                                                                    *
* EXITS, NORMAL -                                                    *
*        NONE                                                        *
*                                                                    *
* EXITS, ERROR -                                                     *
*        NONE                                                        *
*                                                                    *
* TABLES/WORKAREAS -                                                 *
*        NONE                                                        *
*                                                                    *
* ATTRIBUTES -                                                       *
*        REENTRANT AND REFRESHABLE                                   *
*                                                                    *
* CHARACTER CODE DEPENDENCY -                                        *
*        EBCDIC CHARACTER SET USED IN ASSEMBLING.  MODULE MUST BE    *
*        REASSEMBLED IF A DIFFERENT CHARACTER SET IS USED.           *
**********************************************************************
IKJEFD31 CSECT
M100A    IKJTSMSG ('IKJ56101I NOT ENOUGH MAIN STORAGE TO EXECUTE COMMANX
               D'),100A
M101A    IKJTSMSG ('IKJ56104I COMMAND SYSTEM ERROR+'),101A
M102A    IKJTSMSG ('IKJ56104I ',,' ERROR CODE ',),102A,101A
M103A    IKJTSMSG ('IKJ56107I ',,' QUANTITY EXCEEDS MAXIMUM ALLOWABLE+'X
               ),103A
M104A    IKJTSMSG ('IKJ56107I MAXIMUM OF 65535 FOR BLOCK AND AVBLOCK, MX
               AXIMUM OF 16777215 FOR SPACE, SPACE INCREMENT AND DIR'),X
               104A,103A
M105A    IKJTSMSG ('IKJ56109I DATA SETS NOT CONCATENATED+'),105A
M106A    IKJTSMSG ('IKJ56109I COMBINING UNLIKE DATA SET ORGANIZATIONS IX
               S INVALID'),106A,105A
M107A    IKJTSMSG ('IKJ56109I NUMBER OF DATA SETS EXCEEDS MAXIMUM, MAXIX
               MUM IS 16 PARTITIONED OR 255 SEQUENTIAL DATA SETS'),107AX
               ,105A
M108A    IKJTSMSG ('IKJ56109I ',,' INVALID WITH CONCATENATION REQUEST')X
               ,108A,105A
M109A    IKJTSMSG ('IKJ56109I FAILURE TO ALLOCATE DATA SET ',),109A,105X
               A
M110A    IKJTSMSG ('IKJ56109I DATA SET ORGANIZATION NOT SEQUENTIAL OR PX
               ARTITIONED'),110A,105A
M111A    IKJTSMSG ('IKJ56109I DATA SET NAME ASTERISK (*) INVALID WITH CX
               ONCATENATION REQUEST'),111A,105A
M112A    IKJTSMSG ('IKJ56110I DATA SET ',,' NOT ALLOCATED, MORE THAN 25X
               5 VOLUME SERIAL NUMBERS SPECIFIED'),112A
M113A    IKJTSMSG ('IKJ56112A ENTER ''FREE'' OR ''END''+-'),113A,114A
M114A    IKJTSMSG ('IKJ56112A ENTER ''FREE'' TO FREE AND RE-ALLOCATE THX
               E FILE ',,', OR ''END'' TO TERMINATE THE COMMAND-'),114A
M115A    IKJTSMSG ('IKJ56113I INVALID RESPONSE, ',),115A
M115B    IKJTSMSG ('IKJ56113I INVALID RESPONSE'),115B
M116A    IKJTSMSG ('IKJ56113A REENTER+-'),116A,117A
M117A    IKJTSMSG ('IKJ56113A ENTER ''FREE'' TO FREE AND RE-ALLOCATE THX
               E FILE ',,', OR ''END'' TO TERMINATE THE COMMAND-'),117A
M118A    IKJTSMSG ('IKJ56111I DATA SET ',,' NOT ALLOCATED, DELETE INVALX
               ID FOR MEMBERS OF PARTITIONED DATA SETS'),118A
         IKJTSMSG
         DC    0D'0'                   END OF CSECT                @26A
         END
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
  IDENTIFY IKJEFD31('ZP60026')
++MOD(IKJEFD32) DISTLIB(AOST4).
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT)'
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE 'ALLOCATION REQUEST PROCESSOR                           *
                        '
***********************************************************************
*  $26   ZP60026  2010-01-23 GREG PRICE: ADD 'REUSE' OPERAND.         *
*                            CHANGES APPLIED TO UZ69512 LEVEL.        *
***********************************************************************
IKJEFD32 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    AL1(33)                                             @26C
         DC    C'IKJEFD32  83.336'                                 0001
         DC    CL17' ZP60026 2010.023'                             @26A
         DROP  R15
@PROLOG  STM   R14,R12,12(R13)                                     0001
         BALR  R12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,R12                                         0001
         L     R0,@SIZDATD                                         0001
         GETMAIN  R,LV=(0)
         LR    R11,R1                                              0001
         USING @DATD,R11                                           0001
         ST    R13,@SA00001+4                                      0001
         LM    R0,R1,20(R13)                                       0001
         ST    R11,8(,R13)                                         0001
         LR    R13,R11                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
         MVC   @PC00001(4),0(R1)                                   0001
*                                                                  0093
*                                                                  0093
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      REQTYPE                                                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE DETERMINES THE TYPE OF ALLOCATION REQUEST      */
*/*      BEING MADE, AND ROUTES CONTROL TO THE APPROPRIATE           */
*/*      PROCESSOR.                                                  */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      IF THE REQUEST IS FOR A DUMMY DATA SET, INVOKE DMMYREQ.     */
*/*      IF REQUEST IF FOR A TERMINAL, INVOKE TERMREQ.  IF REQUEST   */
*/*      IF FOR SYSOUT DATA SET, INVOKE SYSOTREQ. OTHERWISE,         */
*/*      DETERMINE DATA SET STATUS AND INVOKE APPROPRIATE ROUTINE.   */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDL                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      REQUEST PROCESSED                                           */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*                                                                  0093
*REQTYPE:                                                          0093
*   R3AWAPTR=R1;                    /* PTR TO WORKAREA               */
REQTYPE  LR    R3AWAPTR,R1                                         0093
*   INC=ADDNUM+1;                   /* ADDBLOCK SUBSCRIPT            */
         L     R10,GTPLPTR(,R3AWAPTR)                              0094
         L     R10,GTPLABLK(,R10)                                  0094
         LA    R4INC,1                                             0094
         MVC   @TF00001(2),ADDNUM(R10)                             0094
         AH    R4INC,@TF00001                                      0094
*   IF DSPDE=2 THEN                 /* IF DUMMY SPECIFIED,           */
         L     R10,PTRPDL(,R3AWAPTR)                               0095
         CLC   DSPDE(2,R10),@HW2                                   0095
         BNE   @RF00095                                            0095
*     CALL DMMYREQ;                 /* INVOKE DUMMY PROCESSOR        */
         BAL   R14,DMMYREQ                                         0096
*   ELSE                                                           0097
*     IF DSPDE=1&                   /* IF * ENTERED AS               */
*         DSNPRES='1'B&             /* DSNAME,                       */
*         DSNTERM='*' THEN          /* INVOKE TERMINAL               */
         B     @RC00095                                            0097
@RF00095 L     R10,PTRPDL(,R3AWAPTR)                               0097
         CLC   DSPDE(2,R10),@HW1                                   0097
         BNE   @RF00097                                            0097
         TM    DSNPRES(R10),B'10000000'                            0097
         BNO   @RF00097                                            0097
         L     R10,DSNPTR(,R10)                                    0097
         CLI   DSNTERM(R10),C'*'                                   0097
         BNE   @RF00097                                            0097
*       CALL TERMREQ;               /* PROCESSOR                     */
         BAL   R14,TERMREQ                                         0098
*     ELSE                                                         0099
*       IF STATSPDE=5 THEN          /* IF SYSOUT ENTERED,            */
         B     @RC00097                                            0099
@RF00097 L     R10,PTRPDL(,R3AWAPTR)                               0099
         CLC   STATSPDE(2,R10),@HW5                                0099
         BNE   @RF00099                                            0099
*         CALL SYSOTREQ;            /* INVOKE SYSOUT PROC.           */
         BAL   R14,SYSOTREQ                                        0100
*       ELSE                                                       0101
*         DO;                       /*                       @Y30LPKH*/
         B     @RC00099                                            0101
@RF00099 DS    0H                                                  0102
*           IF VOLPDE=2 THEN        /* IF MSVGP SPEC         @Y30LPKH*/
         L     R10,PTRPDL(,R3AWAPTR)                               0102
         CLC   VOLPDE(2,R10),@HW2                                  0102
         BNE   @RF00102                                            0102
*             KEYLIST(8)=DALMSVGP;  /* SET KEY               @Y30LPKH*/
         L     R10,GTPLPTR(,R3AWAPTR)                              0103
         L     R10,GTPLKLST(,R10)                                  0103
         MVC   KEYLIST+14(2,R10),@HWMSVGP                          0103
*           IF STATSPDE=<2 THEN     /* IF STATUS OLD OR SHR          */
@RF00102 L     R10,PTRPDL(,R3AWAPTR)                               0104
         LH    R10,STATSPDE(,R10)                                  0104
         C     R10,@FW2                                            0104
         BH    @RF00104                                            0104
*             CALL OLDDS;           /* INVOKE PROCESSOR              */
         BAL   R14,OLDDS                                           0105
*           ELSE                                                   0106
*             IF STATSPDE=3 THEN    /* STATUS MOD,                   */
         B     @RC00104                                            0106
@RF00104 L     R10,PTRPDL(,R3AWAPTR)                               0106
         CLC   STATSPDE(2,R10),@HW3                                0106
         BNE   @RF00106                                            0106
*               CALL MODDS;         /* INVOKE MOD PROCESSOR          */
         BAL   R14,MODDS                                           0107
*             ELSE                  /* ELSE,                         */
*               CALL NEWDS;         /* INVOKE NEW PROCESSOR          */
         B     @RC00106                                            0108
@RF00106 BAL   R14,NEWDS                                           0108
*         END;                                                     0109
@RC00106 DS    0H                                                  0109
@RC00104 DS    0H                                                  0110
*   IF RBCODE12='1'B THEN           /* IF ERROR OCCURRED,            */
@RC00099 DS    0H                                                  0110
@RC00097 DS    0H                                                  0110
@RC00095 TM    RBCODE12(R3AWAPTR),B'10000000'                      0110
         BNO   @RF00110                                            0110
*     RETCODE=12;                   /* SET RETURN CODE TO 12         */
         L     R10,REGSAVE(,R13)                                   0111
         MVC   RETCODE(4,R10),@FW12                                0111
*   ELSE                            /* ELSE                          */
*     RETCODE=0;                    /* RETURN CODE 0                 */
         B     @RC00110                                            0112
@RF00110 L     R10,REGSAVE(,R13)                                   0112
         SLR   R15,R15                                             0112
         ST    R15,RETCODE(,R10)                                   0112
*   RETURN;                                                        0113
@EL00001 L     R13,4(,R13)                                         0113
@EF00001 L     R0,@SIZDATD                                         0113
         LR    R1,R11                                              0113
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    R14,R12,12(R13)                                     0113
         BR    R14                                                 0113
*                                                                  0114
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      NEWDS                                                       */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE ALLOCATES A DATA SET HAVING A STATUS OF NEW.   */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      EXTRANEOUS PARAMETERS ARE IGNORED. IF DISPOSITION WAS NOT   */
*/*      SPECIFIED, AND DSNAME WAS NOT SPECIFIED, SET DISPOSITION TO */
*/*      DELETE. ELSE, SET DISPOSITION TO CATALOG. INVOKE IKJEFD33   */
*/*      TO PROCESS SPACE PARAMETERS. SET TRACKS OR CYLINDERS KEY IN */
*/*      KEY LIST, WHICHEVER IS APPROPRIATE. INVOKE GENTRANS. IF     */
*/*      GENTRANS SUCCESSFUL, INVOKE DYNAMIC ALLOCATION.             */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDL                                                  */
*/*      GENTRANS PARAMETER LIST                                     */
*/*      DYNAMIC ALLOCATION REQUEST BLOCK                            */
*/* OUTPUT -                                                         */
*/*      RBCODE12 = 0 - ALLOCATION SUCCESSFUL                        */
*/*                 1 - FAILURE IN GENTRANS OR ALLOCATION            */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/*                                                                  */
*/*        IF TRACKS WAS SPECIFIED, THE KEY PASSED TO GENTRANS IS    */
*/*        THE TRACKS KEY. OTHERWISE, THE KEY IS FOR CYLINDERS. IF   */
*/*        BLOCK OR AVBLOCK WAS ENTERED, THE CYLINDERS KEY WILL NOT  */
*/*        BE LOOKED AT.                                             */
*/********************************************************************/
*                                                                  0114
*NEWDS:                                                            0114
*   PROC;                                                          0114
         B     @EL00001                                            0114
NEWDS    STM   R14,R12,@SA00002                                    0114
*   I=1;                            /* INITIALIZE SUBSCRIPT          */
*                                                                  0115
         LA    R2I,1                                               0115
*   /*****************************************************************/
*   /*                                                               */
*   /* MARK EXTRANEOUS PARAMETERS NOT ENTERED IN PDL                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0116
*   DO WHILE(CONT='0'B);                                           0116
         B     @DE00116                                            0116
@DL00116 DS    0H                                                  0117
*     IF NEWEXT(I)='00'X THEN       /* IF END OF LIST,               */
         LA    R10,NEWEXT-1(R2I)                                   0117
         CLI   0(R10),X'00'                                        0117
         BNE   @RF00117                                            0117
*       CONT='1'B;                  /* EXIT DO-WHILE                 */
         OI    CONT(R3AWAPTR),B'00010000'                          0118
*     ELSE                          /* ELSE,                         */
*       DO;                         /* GET ADDRESS OF PDE            */
         B     @RC00117                                            0119
@RF00117 DS    0H                                                  0120
*         EXTRAN=ADDR(ALLOCPDL)+NEWEXT(I);                         0120
         SLR   R5EXTRAN,R5EXTRAN                                   0120
         IC    R5EXTRAN,NEWEXT-1(R2I)                              0120
         AL    R5EXTRAN,PTRPDL(,R3AWAPTR)                          0120
*         PDEEXT=0;                 /* SET PDE TO 0                  */
         SLR   R10,R10                                             0121
         STH   R10,PDEEXT(,R5EXTRAN)                               0121
*         I=I+1;                    /* INCREMENT SUBSCRIPT           */
         AL    R2I,@FW1                                            0122
*       END;                                                       0123
*   END;                            /* END DO-WHILE                  */
@RC00117 DS    0H                                                  0124
@DE00116 TM    CONT(R3AWAPTR),B'00010000'                          0124
         BZ    @DL00116                                            0124
*   CONT='0'B;                      /* RE-SET SWITCH                 */
         NI    CONT(R3AWAPTR),B'11101111'                          0125
*   IF DISPPDE=0 THEN               /* IF DISP NOT SPECIFIED         */
         L     R10,PTRPDL(,R3AWAPTR)                               0126
         LH    R7,DISPPDE(,R10)                                    0126
         LTR   R7,R7                                               0126
         BNZ   @RF00126                                            0126
*     DO;                           /* AND                           */
*       IF DSPDE=1 THEN             /* IF DSNAME ENTERED,            */
         CLC   DSPDE(2,R10),@HW1                                   0128
         BNE   @RF00128                                            0128
*         DISPPDE=3;                /* DEFAULT CATALOG               */
         MVC   DISPPDE(2,R10),@HW3                                 0129
*       ELSE                        /* IF DSNAME NOT ENTERED         */
*         DISPPDE=2;                /* DEFAULT DELETE                */
         B     @RC00128                                            0130
@RF00128 L     R10,PTRPDL(,R3AWAPTR)                               0130
         MVC   DISPPDE(2,R10),@HW2                                 0130
*     END;                                                         0131
@RC00128 DS    0H                                                  0132
*   R1=R3AWAPTR;                    /* WORKAREA PTR IN REG 1         */
@RF00126 LR    R1,R3AWAPTR                                         0132
*   CALL IKJEFD33;                  /* PROCESS SPACE PARAMETERS      */
         L     R15,VCONSD33                                        0133
         BALR  R14,R15                                             0133
*   IF RBCODE12='0'B THEN           /* IF ERROR OCCURRED,            */
         TM    RBCODE12(R3AWAPTR),B'10000000'                      0134
         BNZ   @RF00134                                            0134
*     DO;                                                          0135
*       INC=ADDNUM+1;               /* SET ADDBLOCK SUBSCRIPT        */
         L     R10,GTPLPTR(,R3AWAPTR)                              0136
         L     R7,GTPLABLK(,R10)                                   0136
         LA    R4INC,1                                             0136
         MVC   @TF00001(2),ADDNUM(R7)                              0136
         AH    R4INC,@TF00001                                      0136
*       IF BLOKPDE=3 THEN           /* IF TRK ENTERED, GET           */
         L     R7,PTRPDL(,R3AWAPTR)                                0137
         CLC   BLOKPDE(2,R7),@HW3                                  0137
         BNE   @RF00137                                            0137
*         KEYLIST(9)=DALTRK;        /* KEY IN KEYLIST                */
         L     R10,GTPLKLST(,R10)                                  0138
         MVC   KEYLIST+16(2,R10),@HWTRK                            0138
*       ELSE                        /* ELSE                          */
*         KEYLIST(9)=DALCYL;        /* CYL KEY IN KEYLIST            */
         B     @RC00137                                            0139
@RF00137 L     R10,GTPLPTR(,R3AWAPTR)                              0139
         L     R10,GTPLKLST(,R10)                                  0139
         MVC   KEYLIST+16(2,R10),@HWCYL                            0139
*       CALL TRANSRTN;              /* TRANSLATE PARAMETERS          */
@RC00137 BAL   R14,TRANSRTN                                        0140
*       IF RBCODE12='0'B THEN       /* IF SUCCESSFUL,                */
         TM    RBCODE12(R3AWAPTR),B'10000000'                      0141
         BNZ   @RF00141                                            0141
*         DO;                                                      0142
*           S99NOCNV='1'B;          /* REQUIRE NEW ALLOCATION        */
         L     R10,PTRS99RB(,R3AWAPTR)
         OI    S99NOCNV(R10),B'01000000'
*           CALL DYNSVC;            /* INVOKE ALLOCATION             */
         BAL   R14,DYNSVC                                          0143
*           IF RCODESV>0 THEN       /* IF ALLOC FAILED,              */
         L     R10,RCODESV(,R3AWAPTR)                              0144
         LTR   R10,R10                                             0144
         BNP   @RF00144                                            0144
*             DO;                   /* AND                           */
*               IF S99ERROR='0410'X THEN/* IF FILE IN USE,           */
         L     R10,PTRS99RB(,R3AWAPTR)                             0146
         CLC   S99ERROR(2,R10),@HEX0410                            0146
         BNE   @RF00146                                            0146
*                 DO;                                              0147
*                   R1=R3AWAPTR;    /* WORKAREA PTR IN REG 1         */
         LR    R1,R3AWAPTR                                         0148
*                   CALL IKJEFD36;  /* PROMPT FOR OPTION             */
         L     R15,VCONSD36                                        0149
         BALR  R14,R15                                             0149
*                 END;                                             0150
*               ELSE                /* OTHER ERROR,                  */
*                 DO;                                              0151
         B     @RC00146                                            0151
@RF00146 DS    0H                                                  0152
*                   RBCODE12='1'B;  /* INDICATE ALLOC FAILED         */
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0152
*                   ENTRYCD=1;      /* CODE FOR DYNALLOC ERR         */
         MVC   ENTRYCD(2,R3AWAPTR),@HW1                            0153
*                   R1=R3AWAPTR;    /* WORKAREA PTR IN REG 1         */
         LR    R1,R3AWAPTR                                         0154
*                   CALL IKJEFD35;  /* ISSUE ERROR MESSAGE           */
         L     R15,VCONSD35                                        0155
         BALR  R14,R15                                             0155
*                 END;                                             0156
*             END;                                                 0157
*         END;                                                     0158
*     END;                                                         0159
*   END NEWDS;                                                     0160
@EL00002 DS    0H                                                  0160
@EF00002 DS    0H                                                  0160
@ER00002 LM    R14,R12,@SA00002                                    0160
         BR    R14                                                 0160
*                                                                  0161
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      TERMREQ                                                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE HANDLES REQUESTS FOR TERMINAL DATA SET         */
*/*      ALLOCATION.                                                 */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      EXTRANEOUS PARAMETERS ARE MARKED NOT ENTERED IN THE PDL.    */
*/*      IF BLOCK WAS ENTERED INVOKE IKJEFD33 TO SET UP DCB BLOCK    */
*/*      SIZE TEXT UNIT.  SET UP THE TEXT UNIT WHICH                 */
*/*      INDICATES TERMINAL ALLOCATION, AND MARK DATASET NOT         */
*/*      ENTERED IN THE PDL. INVOKE GENTRANS. IF GENTRANS SUCCESSFUL */
*/*      INVOKE DYNAMIC ALLOCATION.                                  */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDL                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RBCODE12 = 0 - ALLOCATION SUCCESSFUL                        */
*/*                 1 - FAILURE IN GENTRANS OR ALLOCATION            */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/*                                                                  */
*/*        THE TEXT UNIT SPECIFYING TERMINAL ALLOCATION MUST BE SET  */
*/*        UP SINCE GENTRANS DOES NOT RECOGNIZE A DATA SET NAME OF   */
*/*        ASTERISK (*).                                             */
*/********************************************************************/
*                                                                  0161
*TERMREQ:                                                          0161
*   PROC;                                                          0161
TERMREQ  STM   R14,R12,@SA00003                                    0161
*   I=1;                            /* INITIALIZE SUBSCRIPT          */
*                                                                  0162
         LA    R2I,1                                               0162
*   /*****************************************************************/
*   /*                                                               */
*   /* MARK EXTRANEOUS PARAMETERS NOT ENTERED IN PDL                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0163
*   DO WHILE(CONT='0'B);                                           0163
         B     @DE00163                                            0163
@DL00163 DS    0H                                                  0164
*     IF TERMEXT(I)='00'X THEN      /* IF END OF LIST,               */
         LA    R10,TERMEXT-1(R2I)                                  0164
         CLI   0(R10),X'00'                                        0164
         BNE   @RF00164                                            0164
*       CONT='1'B;                  /* EXIT DO-WHILE                 */
         OI    CONT(R3AWAPTR),B'00010000'                          0165
*     ELSE                          /* ELSE,                         */
*       DO;                         /* GET ADDRESS OF PDE            */
         B     @RC00164                                            0166
@RF00164 DS    0H                                                  0167
*         EXTRAN=ADDR(ALLOCPDL)+TERMEXT(I);                        0167
         SLR   R5EXTRAN,R5EXTRAN                                   0167
         IC    R5EXTRAN,TERMEXT-1(R2I)                             0167
         AL    R5EXTRAN,PTRPDL(,R3AWAPTR)                          0167
*         PDEEXT=0;                 /* SET PDE TO 0                  */
         SLR   R10,R10                                             0168
         STH   R10,PDEEXT(,R5EXTRAN)                               0168
*         I=I+1;                    /* INCREMENT SUBSCRIPT           */
         AL    R2I,@FW1                                            0169
*       END;                                                       0170
*   END;                                                           0171
@RC00164 DS    0H                                                  0171
@DE00163 TM    CONT(R3AWAPTR),B'00010000'                          0171
         BZ    @DL00163                                            0171
*   CONT='0'B;                                                     0172
         NI    CONT(R3AWAPTR),B'11101111'                          0172
*   IF BLOKPDE=1 THEN               /* IF BLOCK ENTERED,             */
         L     R10,PTRPDL(,R3AWAPTR)                               0173
         CLC   BLOKPDE(2,R10),@HW1                                 0173
         BNE   @RF00173                                            0173
*     DO;                                                          0174
*       R1=R3AWAPTR;                /* WORKAREA PTR IN REG 1         */
         LR    R1,R3AWAPTR                                         0175
*       CALL IKJEFD33;              /* PROCESS PARM                  */
         L     R15,VCONSD33                                        0176
         BALR  R14,R15                                             0176
*       INC=ADDNUM+1;               /* SET ADDBLOCK SUBSCRIPT        */
         L     R10,GTPLPTR(,R3AWAPTR)                              0177
         L     R10,GTPLABLK(,R10)                                  0177
         LA    R4INC,1                                             0177
         MVC   @TF00001(2),ADDNUM(R10)                             0177
         AH    R4INC,@TF00001                                      0177
*     END;                                                         0178
*   BLOKPDE=0;                      /* MARK BLOCK NOT ENTERED        */
@RF00173 SLR   R10,R10                                             0179
         L     R7,PTRPDL(,R3AWAPTR)                                0179
         STH   R10,BLOKPDE(,R7)                                    0179
*   ADDNUM=ADDNUM+1;                /* INCREMENT ENTRY CTR           */
         L     R5,GTPLPTR(,R3AWAPTR)                               0180
         L     R5,GTPLABLK(,R5)                                    0180
         LA    R2,1                                                0180
         MVC   @TF00001(2),ADDNUM(R5)                              0180
         LH    R15,@TF00001                                        0180
         ALR   R15,R2                                              0180
         ST    R15,@TF00001                                        0180
         MVC   ADDNUM(2,R5),@TF00001+2                             0180
*   ADLKEY=DALTERM;                 /* TERMINAL KEY IN TEXT          */
         L     R15,TXT(,R3AWAPTR)                                  0181
         MVC   ADLKEY(2,R15),@HWTERM                               0181
*   ADLNBR=0;                       /* SET NUMBER ZERO               */
         STH   R10,ADLNBR(,R15)                                    0182
*   ADDTEXT(INC)=TXT;               /* TEXT PTR IN ADDRESS LIST      */
         LR    R14,R4INC                                           0183
         SLA   R14,2                                               0183
         ST    R15,@TF00001                                        0183
         ALR   R5,R14                                              0183
         MVC   ADDTEXT-4(4,R5),@TF00001                            0183
*   TXT=TXT+4;                      /* INCREMENT TEXT PTR            */
         AL    R15,@FW4                                            0184
         ST    R15,TXT(,R3AWAPTR)                                  0184
*   INC=INC+1;                      /* INCREMENT SUBSCRIPT           */
         ALR   R4INC,R2                                            0185
*   DSPDE=0;                        /* MARK DATASET NOT ENTERED      */
         STH   R10,DSPDE(,R7)                                      0186
*   CALL TRANSRTN;                  /* TRANSLATE PARAMETERS          */
         BAL   R14,TRANSRTN                                        0187
*   IF RBCODE12='0'B THEN           /* IF TRANSLATE SUCCESSFUL,      */
         TM    RBCODE12(R3AWAPTR),B'10000000'                      0188
         BNZ   @RF00188                                            0188
*     DO;                           /* THEN                          */
*       CALL DYNSVC;                /* INVOKE DYN ALLOCATION         */
         BAL   R14,DYNSVC                                          0190
*       IF RCODESV>0 THEN           /* IF ALLOCATION FAILED,         */
         L     R10,RCODESV(,R3AWAPTR)                              0191
         LTR   R10,R10                                             0191
         BNP   @RF00191                                            0191
*         DO;                       /* DETERMINE IF FILE IN USE      */
*           IF S99ERROR='0410'X THEN                               0193
         L     R10,PTRS99RB(,R3AWAPTR)                             0193
         CLC   S99ERROR(2,R10),@HEX0410                            0193
         BNE   @RF00193                                            0193
*             DO;                   /* YES -                         */
*               R1=R3AWAPTR;        /* WORKAREA PTR IN REG 1         */
         LR    R1,R3AWAPTR                                         0195
*               CALL IKJEFD36;      /* PROMPT FOR OPTION             */
         L     R15,VCONSD36                                        0196
         BALR  R14,R15                                             0196
*             END;                                                 0197
*           ELSE                    /* NO -                          */
*             DO;                   /* THEN,                         */
         B     @RC00193                                            0198
@RF00193 DS    0H                                                  0199
*               RBCODE12='1'B;      /* INDICATE ALLOCATE FAILED      */
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0199
*               ENTRYCD=1;          /* CODE FOR DYNALLOC ERR         */
         MVC   ENTRYCD(2,R3AWAPTR),@HW1                            0200
*               R1=R3AWAPTR;        /* WORKAREA PTR IN REG 1 ISSUE 0201
*                                      ERROR MESSAGE                 */
         LR    R1,R3AWAPTR                                         0201
*               CALL IKJEFD35;                                     0202
         L     R15,VCONSD35                                        0202
         BALR  R14,R15                                             0202
*             END;                                                 0203
*         END;                                                     0204
*     END;                                                         0205
*   END TERMREQ;                                                   0206
@EL00003 DS    0H                                                  0206
@EF00003 DS    0H                                                  0206
@ER00003 LM    R14,R12,@SA00003                                    0206
         BR    R14                                                 0206
*                                                                  0207
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      SYSOTREQ                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE PROCESSES REQUESTS FOR A SYSOUT DATA SET.      */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      EXTRANEOUS PARAMETERS ARE MARKED NOT ENTERED IN THE PDL.    */
*/*      IF BLOCK IS ENTERED INVOKE IKJEFD33 TO SET UP               */
*/*      THE TEXT UNIT FOR DCB BLOCK SIZE FROM THE BLOCK VALUE       */
*/*      IF NOHOLD WAS ENTERED, MARK THE HOLD PARAMETER              */
*/*      NOT ENTERED IN THE PDL. IF SYSOUT CLASS WAS NOT SPECIFIED,  */
*/*      SET UP THE TEXT UNIT TO INDICATE CLASS DEFAULT AND MARK     */
*/*      THE SYSOUT PARAMETER NOT ENTERED IN THE PDL. INVOKE         */
*/*      GENTRANS TO TRANSLATE THE PARAMETERS. IF GENTRANS SUCCESSFUL*/
*/*      INVOKE DYNAMIC ALLOCATION. IF ALLOCATION FAILED BECAUSE     */
*/*      OF FILE IN USE, INVOKE IKJEFD36 TO PROMPT THE USER FOR      */
*/*      THE OPTION. ELSE, INVOKE IKJEFD35 TO ISSUE AN ERROR MESSAGE */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDL                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RBCODE12 = 0 - ALLOCATION SUCCESSFUL                        */
*/*                 1 - ERROR IN GENTRANS OR ALLOCATION              */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/*                                                                  */
*/*        IF THE CLASS SUBFIELD WAS NOT ENTERED, THE TEXT UNIT FOR  */
*/*        SYSOUT MUST BE SET UP SINCE GENTRANS EXPECTS THE SUBFIELD */
*/*        TO BE PRESENT, AND WILL FLAG IT AS AN ERROR IF IT IS NOT. */
*/********************************************************************/
*                                                                  0207
*SYSOTREQ:                                                         0207
*   PROC;                                                          0207
SYSOTREQ STM   R14,R12,@SA00004                                    0207
*   I=1;                            /* INITIALIZE SUBSCRIPT          */
*                                                                  0208
         LA    R2I,1                                               0208
*   /*****************************************************************/
*   /*                                                               */
*   /* MARK EXTRANEOUS PARAMETERS NOT ENTERED IN PDL                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0209
*   DO WHILE(CONT='0'B);                                           0209
         B     @DE00209                                            0209
@DL00209 DS    0H                                                  0210
*     IF SYSOTEXT(I)='00'X THEN     /* IF END OF LIST,               */
         LA    R10,SYSOTEXT-1(R2I)                                 0210
         CLI   0(R10),X'00'                                        0210
         BNE   @RF00210                                            0210
*       CONT='1'B;                  /* EXIT DO-WHILE                 */
         OI    CONT(R3AWAPTR),B'00010000'                          0211
*     ELSE                          /* ELSE,                         */
*       DO;                         /* GET ADDRESS OF PDE            */
         B     @RC00210                                            0212
@RF00210 DS    0H                                                  0213
*         EXTRAN=ADDR(ALLOCPDL)+SYSOTEXT(I);                       0213
         SLR   R5EXTRAN,R5EXTRAN                                   0213
         IC    R5EXTRAN,SYSOTEXT-1(R2I)                            0213
         AL    R5EXTRAN,PTRPDL(,R3AWAPTR)                          0213
*         PDEEXT=0;                 /* SET PDE TO 0                  */
         SLR   R10,R10                                             0214
         STH   R10,PDEEXT(,R5EXTRAN)                               0214
*         I=I+1;                    /* INCREMENT SUBSCRIPT           */
         AL    R2I,@FW1                                            0215
*       END;                                                       0216
*   END;                            /* END DO-WHILE                  */
@RC00210 DS    0H                                                  0217
@DE00209 TM    CONT(R3AWAPTR),B'00010000'                          0217
         BZ    @DL00209                                            0217
*   CONT='0'B;                      /* RESET SWITCH                  */
         NI    CONT(R3AWAPTR),B'11101111'                          0218
*   IF SPACEPDE>0|                  /* IF SPACE OR                   */
*       BLOKPDE>0 THEN              /* BLOCK ENTERED THEN            */
         SLR   R10,R10                                             0219
         L     R7,PTRPDL(,R3AWAPTR)                                0219
         CH    R10,SPACEPDE(,R7)                                   0219
         BL    @RT00219                                            0219
         CH    R10,BLOKPDE(,R7)                                    0219
         BNL   @RF00219                                            0219
@RT00219 DS    0H                                                  0220
*     DO;                                                          0220
*       R1=R3AWAPTR;                /* WORKAREA PTR IN REG 1         */
         LR    R1,R3AWAPTR                                         0221
*       CALL IKJEFD33;              /* PROCESS SPACE                 */
         L     R15,VCONSD33                                        0222
         BALR  R14,R15                                             0222
*       INC=ADDNUM+1;               /* SET ADDBLOCK SUBSCRIPT        */
         L     R10,GTPLPTR(,R3AWAPTR)                              0223
         L     R7,GTPLABLK(,R10)                                   0223
         LA    R4INC,1                                             0223
         MVC   @TF00001(2),ADDNUM(R7)                              0223
         AH    R4INC,@TF00001                                      0223
*       IF BLOKPDE=3 THEN                                          0224
         L     R7,PTRPDL(,R3AWAPTR)                                0224
         CLC   BLOKPDE(2,R7),@HW3                                  0224
         BNE   @RF00224                                            0224
*         KEYLIST(9)=DALTRK;                                       0225
         L     R10,GTPLKLST(,R10)                                  0225
         MVC   KEYLIST+16(2,R10),@HWTRK                            0225
*       ELSE                                                       0226
*         KEYLIST(9)=DALCYL;                                       0226
         B     @RC00224                                            0226
@RF00224 L     R10,GTPLPTR(,R3AWAPTR)                              0226
         L     R10,GTPLKLST(,R10)                                  0226
         MVC   KEYLIST+16(2,R10),@HWCYL                            0226
*     END;                                                         0227
@RC00224 DS    0H                                                  0228
*   IF RBCODE12='0'B THEN                                          0228
@RF00219 TM    RBCODE12(R3AWAPTR),B'10000000'                      0228
         BNZ   @RF00228                                            0228
*     DO;                                                          0229
*       IF HOLDPDE=2 THEN           /* IF NOHOLD SPECIFIED,          */
         L     R10,PTRPDL(,R3AWAPTR)                               0230
         CLC   HOLDPDE(2,R10),@HW2                                 0230
         BNE   @RF00230                                            0230
*         HOLDPDE=0;                /* MARK NOT ENTERED              */
         SLR   R7,R7                                               0231
         STH   R7,HOLDPDE(,R10)                                    0231
*       IF CLASPRES='0'B THEN       /* IF CLASS NOT ENTERED,         */
@RF00230 L     R10,PTRPDL(,R3AWAPTR)                               0232
         TM    CLASPRES(R10),B'10000000'                           0232
         BNZ   @RF00232                                            0232
*         DO;                       /* THEN                          */
*           ADDNUM=ADDNUM+1;        /* INCREMENT TEXT COUNTER        */
         L     R7,GTPLPTR(,R3AWAPTR)                               0234
         L     R7,GTPLABLK(,R7)                                    0234
         LA    R5,1                                                0234
         MVC   @TF00001(2),ADDNUM(R7)                              0234
         LH    R2,@TF00001                                         0234
         ALR   R2,R5                                               0234
         ST    R2,@TF00001                                         0234
         MVC   ADDNUM(2,R7),@TF00001+2                             0234
*           ADLKEY=DALSYSOU;        /* SET UP TEXT - KEY,            */
         L     R2,TXT(,R3AWAPTR)                                   0235
         MVC   ADLKEY(2,R2),@HWSYSOU                               0235
*           ADLNBR=0;               /* AND NUMBER                    */
         SLR   R15,R15                                             0236
         STH   R15,ADLNBR(,R2)                                     0236
*           ADDTEXT(INC)=TXT;       /* PUT ADDRESS IN LIST           */
         LR    R14,R4INC                                           0237
         SLA   R14,2                                               0237
         ST    R2,@TF00001                                         0237
         ALR   R7,R14                                              0237
         MVC   ADDTEXT-4(4,R7),@TF00001                            0237
*           TXT=TXT+4;              /* INCREMENT TEXT PTR            */
         AL    R2,@FW4                                             0238
         ST    R2,TXT(,R3AWAPTR)                                   0238
*           INC=INC+1;              /* INCREMENT ADDR SUBSCRIPT      */
         ALR   R4INC,R5                                            0239
*           STATSPDE=0;             /* MARK SYSOUT NOT ENTERED       */
         STH   R15,STATSPDE(,R10)                                  0240
*         END;                                                     0241
*       CALL TRANSRTN;              /* TRANSLATE PARAMETERS          */
@RF00232 BAL   R14,TRANSRTN                                        0242
*       IF RBCODE12='0'B THEN       /* IF TRANSLATE SUCCESSFUL,      */
         TM    RBCODE12(R3AWAPTR),B'10000000'                      0243
         BNZ   @RF00243                                            0243
*         DO;                       /* THEN                          */
*           CALL DYNSVC;            /* INVOKE DYN ALLOCATION         */
         BAL   R14,DYNSVC                                          0245
*           IF RCODESV>0 THEN       /* IF ALLOCATION FAILED,         */
         L     R10,RCODESV(,R3AWAPTR)                              0246
         LTR   R10,R10                                             0246
         BNP   @RF00246                                            0246
*             DO;                   /* AND IF FILE IN USE,           */
*               IF S99ERROR='0410'X THEN                           0248
         L     R10,PTRS99RB(,R3AWAPTR)                             0248
         CLC   S99ERROR(2,R10),@HEX0410                            0248
         BNE   @RF00248                                            0248
*                 DO;                                              0249
*                   R1=R3AWAPTR;    /* WORKAREA PTR IN REG 1         */
         LR    R1,R3AWAPTR                                         0250
*                   CALL IKJEFD36;  /* PROMPT USER FOR OPTION        */
         L     R15,VCONSD36                                        0251
         BALR  R14,R15                                             0251
*                 END;                                             0252
*               ELSE                                               0253
*                 DO;               /* OTHERWISE,                    */
         B     @RC00248                                            0253
@RF00248 DS    0H                                                  0254
*                   RBCODE12='1'B;  /* INDICATE ALLOC FAILED         */
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0254
*                   ENTRYCD=1;      /* CODE FOR DYNALLOC ERR         */
         MVC   ENTRYCD(2,R3AWAPTR),@HW1                            0255
*                   R1=R3AWAPTR;    /* WORKAREA PTR IN REG 1         */
         LR    R1,R3AWAPTR                                         0256
*                   CALL IKJEFD35;  /* INVOKE DAIRFAIL               */
         L     R15,VCONSD35                                        0257
         BALR  R14,R15                                             0257
*                 END;                                             0258
*             END;                                                 0259
*         END;                                                     0260
*     END;                                                         0261
*   END SYSOTREQ;                                                  0262
@EL00004 DS    0H                                                  0262
@EF00004 DS    0H                                                  0262
@ER00004 LM    R14,R12,@SA00004                                    0262
         BR    R14                                                 0262
*                                                                  0263
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      DMMYREQ                                                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE ALLOCATES A DUMMY DATA SET.                    */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      EXTRANEOUS PARAMETERS ARE MARKED NOT ENTERED IN THE PDL.    */
*/*      IF BLOCK WAS ENTERED INVOKE IKJEFD33 TO SET UP THE          */
*/*      TEXT UNIT FOR DCB BLOCK SIZE. INVOKE GENTRANS. IF GENTRANS  */
*/*      SUCCESSFUL, INVOKE DYNAMIC ALLOCATION. IF DYNAMIC           */
*/*      ALLOCATION FAILED BECAUSE OF FILE IN USE, CALL ROUTINE      */
*/*      IKJEFD36 TO PROMPT FOR OPTION. ELSE, INVOKE IKJEFD35        */
*/*      TO ISSUE ERROR MESSAGE.                                     */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDL                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RBCODE12 = 0 - ALLOCATION SUCCESSFUL                        */
*/*                 1 - FAILURE IN GENTRANS OR ALLOCATION            */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*                                                                  0263
*DMMYREQ:                                                          0263
*   PROC;                                                          0263
DMMYREQ  STM   R14,R12,@SA00005                                    0263
*   I=1;                            /* INITIALIZE SUBSCRIPT          */
*                                                                  0264
         LA    R2I,1                                               0264
*   /*****************************************************************/
*   /*                                                               */
*   /* MARK EXTRANEOUS PARAMETERS NOT ENTERED IN PDL                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0265
*   DO WHILE(CONT='0'B);                                           0265
         B     @DE00265                                            0265
@DL00265 DS    0H                                                  0266
*     IF DMMYEXT(I)='00'X THEN      /* IF END OF LIST,               */
         LA    R10,DMMYEXT-1(R2I)                                  0266
         CLI   0(R10),X'00'                                        0266
         BNE   @RF00266                                            0266
*       CONT='1'B;                  /* EXIT DO-WHILE                 */
         OI    CONT(R3AWAPTR),B'00010000'                          0267
*     ELSE                          /* ELSE,                         */
*       DO;                         /* GET ADDRESS OF PDE            */
         B     @RC00266                                            0268
@RF00266 DS    0H                                                  0269
*         EXTRAN=ADDR(ALLOCPDL)+DMMYEXT(I);                        0269
         SLR   R5EXTRAN,R5EXTRAN                                   0269
         IC    R5EXTRAN,DMMYEXT-1(R2I)                             0269
         AL    R5EXTRAN,PTRPDL(,R3AWAPTR)                          0269
*         PDEEXT=0;                 /* SET PDE TO 0                  */
         SLR   R10,R10                                             0270
         STH   R10,PDEEXT(,R5EXTRAN)                               0270
*         I=I+1;                    /* INCREMENT SUBSCRIPT           */
         AL    R2I,@FW1                                            0271
*       END;                                                       0272
*   END;                            /* END DO-WHILE                  */
@RC00266 DS    0H                                                  0273
@DE00265 TM    CONT(R3AWAPTR),B'00010000'                          0273
         BZ    @DL00265                                            0273
*   CONT='0'B;                      /* RESET SWITCH                  */
         NI    CONT(R3AWAPTR),B'11101111'                          0274
*   IF BLOKPDE=1 THEN               /* IF BLOCK ENTERED,             */
         L     R10,PTRPDL(,R3AWAPTR)                               0275
         CLC   BLOKPDE(2,R10),@HW1                                 0275
         BNE   @RF00275                                            0275
*     DO;                                                          0276
*       R1=R3AWAPTR;                /* WORKAREA PTR IN REG 1         */
         LR    R1,R3AWAPTR                                         0277
*       CALL IKJEFD33;              /* PROCESS PARAMETER             */
         L     R15,VCONSD33                                        0278
         BALR  R14,R15                                             0278
*       INC=ADDNUM+1;               /* SET ADDBLOCK SUBSCRIPT        */
         L     R10,GTPLPTR(,R3AWAPTR)                              0279
         L     R10,GTPLABLK(,R10)                                  0279
         LA    R4INC,1                                             0279
         MVC   @TF00001(2),ADDNUM(R10)                             0279
         AH    R4INC,@TF00001                                      0279
*     END;                                                         0280
*   IF RBCODE12='0'B THEN           /* IF NO ERROR OCCURRED,         */
@RF00275 TM    RBCODE12(R3AWAPTR),B'10000000'                      0281
         BNZ   @RF00281                                            0281
*     DO;                           /* THEN,                         */
*       BLOKPDE=0;                  /* MARK BLOCK NOT ENTERED        */
         L     R10,PTRPDL(,R3AWAPTR)                               0283
         SLR   R7,R7                                               0283
         STH   R7,BLOKPDE(,R10)                                    0283
*       CALL TRANSRTN;              /* TRANSLATE PARAMETERS          */
         BAL   R14,TRANSRTN                                        0284
*       IF RBCODE12='0'B THEN       /* IF TRANSLATE SUCCESSFUL,      */
         TM    RBCODE12(R3AWAPTR),B'10000000'                      0285
         BNZ   @RF00285                                            0285
*         DO;                       /* THEN                          */
*           CALL DYNSVC;            /* INVOKE DYN ALLOCATION         */
         BAL   R14,DYNSVC                                          0287
*           IF RCODESV>0 THEN       /* IF ALLOCATION FAILED,         */
         L     R10,RCODESV(,R3AWAPTR)                              0288
         LTR   R10,R10                                             0288
         BNP   @RF00288                                            0288
*             DO;                   /* THEN IF FILE IN USE,          */
*               IF S99ERROR='0410'X THEN                           0290
         L     R10,PTRS99RB(,R3AWAPTR)                             0290
         CLC   S99ERROR(2,R10),@HEX0410                            0290
         BNE   @RF00290                                            0290
*                 DO;                                              0291
*                   R1=R3AWAPTR;    /* WORKAREA PTR IN REG 1 PROMPT
*                                      FOR OPTION                    */
         LR    R1,R3AWAPTR                                         0292
*                   CALL IKJEFD36;                                 0293
         L     R15,VCONSD36                                        0293
         BALR  R14,R15                                             0293
*                 END;                                             0294
*               ELSE                                               0295
*                 DO;               /* OTHER ERROR -                 */
         B     @RC00290                                            0295
@RF00290 DS    0H                                                  0296
*                   RBCODE12='1'B;  /* SET ALLOC FAILED INDICATOR    */
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0296
*                   ENTRYCD=1;      /* SET ENTRY CODE                */
         MVC   ENTRYCD(2,R3AWAPTR),@HW1                            0297
*                   R1=R3AWAPTR;    /* WORKAREA PTR IN REG 1 ISSUE 0298
*                                      ERROR MESSAGE                 */
         LR    R1,R3AWAPTR                                         0298
*                   CALL IKJEFD35;                                 0299
         L     R15,VCONSD35                                        0299
         BALR  R14,R15                                             0299
*                 END;                                             0300
*             END;                                                 0301
*         END;                                                     0302
*     END;                                                         0303
*   END DMMYREQ;                                                   0304
@EL00005 DS    0H                                                  0304
@EF00005 DS    0H                                                  0304
@ER00005 LM    R14,R12,@SA00005                                    0304
         BR    R14                                                 0304
*                                                                  0305
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      MODDS                                                       */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE HANDLES REQUESTS FOR ALLOCATION OF MOD DATA    */
*/*      SETS.                                                       */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      IF DATA SET NAME NOT ENTERED, PROMPT THE USER. MARK         */
*/*      EXTRANEOUS PARAMETERS NOT ENTERED IN PDL. IF DISPOSITION    */
*/*      NOT ENTERED, DETERMINE WHETHER DEFAULT SHOULD BE KEEP OR    */
*/*      CATALOG.  IF SPACE PARAMETERS HAVE BEEN ENTERED,            */
*/*      INVOKE IKJEFD33 TO PROCESS THEM. SET APPROPRIATE            */
*/*      TRACKS OR CYLINDERS KEY IN KEY LIST. INVOKE GENTRANS        */
*/*      TO TRANSLATE PARAMETERS. IF GENTRANS SUCCESSFUL, INVOKE     */
*/*      DYNAMIC ALLOCATION. IF ALLOCATION FAILED, DETERMINE         */
*/*      IF FILE IN USE. IF SO, PROMPT THE USER TO SPECIFY THE       */
*/*      OPTION. ELSE, ISSUE ERROR MESSAGE.                          */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDL                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RBCODE12 = 0 - ALLOCATION SUCCESSFUL                        */
*/*                 1 - ERROR IN GENTRANS OR ALLOCATION              */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*                                                                  0305
*MODDS:                                                            0305
*   PROC;                                                          0305
MODDS    STM   R14,R12,@SA00006                                    0305
*   IF DSPDE=0 THEN                 /* IF DSN NOT ENTERED,           */
         L     R10,PTRPDL(,R3AWAPTR)                               0306
         LH    R10,DSPDE(,R10)                                     0306
         LTR   R10,R10                                             0306
         BNZ   @RF00306                                            0306
*     DO;                           /* THEN                          */
*       CALL PRMPDSN;               /* PROMPT FOR DSNAME             */
         BAL   R14,PRMPDSN                                         0308
*       IF RBCODE12='0'B THEN                                      0309
         TM    RBCODE12(R3AWAPTR),B'10000000'                      0309
         BNZ   @RF00309                                            0309
*         DO;                                                      0310
*           DSPDE=1;                /* MARK DS KEYWORD ENTERED       */
         L     R10,PTRPDL(,R3AWAPTR)                               0311
         MVC   DSPDE(2,R10),@HW1                                   0311
*           DSOVRLAY='1'B;          /* INDICATE PDL TO BE FREED      */
         OI    DSOVRLAY(R3AWAPTR),B'01000000'                      0312
*           SAVDSPDL=PMPTPDL;       /* SAVE PDL PTR          @YM04998*/
*                                                                  0313
         L     R7,PMPTPDL(,R3AWAPTR)                               0313
         ST    R7,SAVDSPDL                                         0313
*           /*********************************************************/
*           /*                                                       */
*           /* DETERMINE LENGTH OF PDE TO BE COPIED, AND OVERLAY     */
*           /* ORIGINAL PDE WITH PROMPT PDE.                         */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0314
*           MOVELEN=ADDR(DDNMEPDE)-ADDR(DSNPDE);                   0314
         LA    MOVELEN,28                                          0314
*           DSNPDE(1:MOVELEN)=DSNAMPDE(1:MOVELEN);                 0315
         LR    R15,MOVELEN                                         0315
         BCTR  R15,0                                               0315
         EX    R15,@SM01509                                        0315
*         END;                                                     0316
*     END;                                                         0317
@RF00309 DS    0H                                                  0318
*   IF RBCODE12='0'B THEN           /* IF NO ERROR FOUND,            */
@RF00306 TM    RBCODE12(R3AWAPTR),B'10000000'                      0318
         BNZ   @RF00318                                            0318
*     DO;                           /* CONTINUE -                    */
*       I=1;                        /* INITIALIZE SUBSCRIPT          */
*                                                                  0320
         LA    R2I,1                                               0320
*       /*************************************************************/
*       /*                                                           */
*       /* MARK EXTRANEOUS PARAMETERS NOT ENTERED IN PDL             */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0321
*       DO WHILE(CONT='0'B);                                       0321
         B     @DE00321                                            0321
@DL00321 DS    0H                                                  0322
*         IF NEWEXT(I)='00'X THEN   /* IF END OF LIST,               */
         LA    R10,NEWEXT-1(R2I)                                   0322
         CLI   0(R10),X'00'                                        0322
         BNE   @RF00322                                            0322
*           CONT='1'B;              /* EXIT DO-WHILE                 */
         OI    CONT(R3AWAPTR),B'00010000'                          0323
*         ELSE                      /* ELSE,                         */
*           DO;                     /* GET ADDRESS OF PDE            */
         B     @RC00322                                            0324
@RF00322 DS    0H                                                  0325
*             EXTRAN=ADDR(ALLOCPDL)+NEWEXT(I);                     0325
         SLR   R5EXTRAN,R5EXTRAN                                   0325
         IC    R5EXTRAN,NEWEXT-1(R2I)                              0325
         AL    R5EXTRAN,PTRPDL(,R3AWAPTR)                          0325
*             PDEEXT=0;             /* SET PDE TO 0                  */
         SLR   R10,R10                                             0326
         STH   R10,PDEEXT(,R5EXTRAN)                               0326
*             I=I+1;                /* INCREMENT SUBSCRIPT           */
         AL    R2I,@FW1                                            0327
*           END;                                                   0328
*       END;                        /* END DO-WHILE                  */
@RC00322 DS    0H                                                  0329
@DE00321 TM    CONT(R3AWAPTR),B'00010000'                          0329
         BZ    @DL00321                                            0329
*       CONT='0'B;                  /* RESET SWITCH                  */
         NI    CONT(R3AWAPTR),B'11101111'                          0330
*       CALL CHKDISP;               /* DEFAULT               @YM02616*/
         BAL   R14,CHKDISP                                         0331
*       IF RBCODE12='0'B THEN                                      0332
         TM    RBCODE12(R3AWAPTR),B'10000000'                      0332
         BNZ   @RF00332                                            0332
*         DO;                                                      0333
*           R1=R3AWAPTR;            /* WORKAREA PTR IN REG 1         */
         LR    R1,R3AWAPTR                                         0334
*           CALL IKJEFD33;          /* PROCESS SPACE PARAMETERS      */
         L     R15,VCONSD33                                        0335
         BALR  R14,R15                                             0335
*           INC=ADDNUM+1;           /* SET ADDBLOCK SUBSCRIPT        */
         L     R10,GTPLPTR(,R3AWAPTR)                              0336
         L     R7,GTPLABLK(,R10)                                   0336
         LA    R4INC,1                                             0336
         MVC   @TF00001(2),ADDNUM(R7)                              0336
         AH    R4INC,@TF00001                                      0336
*           IF BLOKPDE=3 THEN       /* IF TRACKS ENTERED,            */
         L     R7,PTRPDL(,R3AWAPTR)                                0337
         CLC   BLOKPDE(2,R7),@HW3                                  0337
         BNE   @RF00337                                            0337
*             KEYLIST(9)=DALTRK;    /* INDICATE IN KEYLIST           */
         L     R10,GTPLKLST(,R10)                                  0338
         MVC   KEYLIST+16(2,R10),@HWTRK                            0338
*           ELSE                    /* ELSE                          */
*             KEYLIST(9)=DALCYL;    /* INDICATE CYL IN KEYLIST       */
         B     @RC00337                                            0339
@RF00337 L     R10,GTPLPTR(,R3AWAPTR)                              0339
         L     R10,GTPLKLST(,R10)                                  0339
         MVC   KEYLIST+16(2,R10),@HWCYL                            0339
*           CALL TRANSRTN;          /* TRANSLATE PARAMETERS          */
@RC00337 BAL   R14,TRANSRTN                                        0340
*           IF RBCODE12='0'B THEN   /* IF TRANSLATE SUCCESSFUL       */
         TM    RBCODE12(R3AWAPTR),B'10000000'                      0341
         BNZ   @RF00341                                            0341
*             DO;                   /* THEN                          */
*               CALL DYNSVC;        /* INVOKE DYN ALLOCATION         */
         BAL   R14,DYNSVC                                          0343
*               IF RCODESV>0 THEN   /* IF RETURN CODE NON-ZERO       */
         L     R10,RCODESV(,R3AWAPTR)                              0344
         LTR   R10,R10                                             0344
         BNP   @RF00344                                            0344
*                 DO;               /* THEN DETERMINE IF FILE IN USE */
*                   IF S99ERROR='0410'X THEN                       0346
         L     R10,PTRS99RB(,R3AWAPTR)                             0346
         CLC   S99ERROR(2,R10),@HEX0410                            0346
         BNE   @RF00346                                            0346
*                     DO;           /* YES -                         */
*                       R1=R3AWAPTR; /* WORKAREA PTR IN REG 1 PROMPT
*                                      FOR OPTION                    */
         LR    R1,R3AWAPTR                                         0348
*                       CALL IKJEFD36;                             0349
         L     R15,VCONSD36                                        0349
         BALR  R14,R15                                             0349
*                     END;                                         0350
*                   ELSE                                           0351
*                     DO;           /* NO -                          */
         B     @RC00346                                            0351
@RF00346 DS    0H                                                  0352
*                       RBCODE12='1'B;/* INDICATE ALLOC FAILED       */
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0352
*                       ENTRYCD=1;  /* SET ENTRY CODE                */
         MVC   ENTRYCD(2,R3AWAPTR),@HW1                            0353
*                       R1=R3AWAPTR;  /* WORKAREA PTR IN REG 1     0354
*                                      ISSUE ERROR MESSAGE           */
         LR    R1,R3AWAPTR                                         0354
*                       CALL IKJEFD35;                             0355
         L     R15,VCONSD35                                        0355
         BALR  R14,R15                                             0355
*                     END;                                         0356
*                 END;                                             0357
@RC00346 DS    0H                                                  0358
*             END;                                                 0358
@RF00344 DS    0H                                                  0359
*           IF DSOVRLAY='1'B THEN   /* IF PDL TO FREE,               */
@RF00341 TM    DSOVRLAY(R3AWAPTR),B'01000000'                      0359
         BNO   @RF00359                                            0359
*             DO;                   /* THEN                          */
*               DSOVRLAY='0'B;      /* TURN OFF INDICATOR            */
         NI    DSOVRLAY(R3AWAPTR),B'10111111'                      0361
*               RFY                                                0362
*                 R5 RSTD;          /* RESTRICT REG 5                */
*               R5=ADDR(SAVDSPDL);  /* PDL ADDR IN REG 5     @YM04998*/
         LA    R5,SAVDSPDL                                         0363
*               GEN(IKJRLSA (5));   /* RELEASE PDL                   */
         IKJRLSA (5)
*               RFY                                                0365
*                 R5 UNRSTD;        /* UNRESTRICT REG 5              */
*             END;                                                 0366
*         END;                                                     0367
*     END;                                                         0368
*   END MODDS;                                                     0369
@EL00006 DS    0H                                                  0369
@EF00006 DS    0H                                                  0369
@ER00006 LM    R14,R12,@SA00006                                    0369
         BR    R14                                                 0369
*                                                                  0370
*/********************************************************************
*                                                                    */
*/*                                                           @YM02616
*                                                                    */
*/* SEGMENT NAME -                                            @YM02616
*                                                                    */
*/*      CHKDISP                                              @YM02616
*                                                                    */
*/*                                                           @YM02616
*                                                                    */
*/* FUNCTION -                                                @YM02616
*                                                                    */
*/*      THIS ROUTINE DETERMINES THE DEFAULT DISPOSITION      @YM02616
*                                                                    */
*/*      FOR MOD DATA SETS.                                   @YM02616
*                                                                    */
*/*                                                           @YM02616
*                                                                    */
*/* OPERATION -                                               @YM02616
*                                                                    */
*/*      IF VOLUME WAS SPECIFIED, THE DEFAULT DISPOSITION IS  @YM02616
*                                                                    */
*/*      KEEP. OTHERWISE, INVOKE DAIR WITH ENTRY CODE '04' TO @YM02616
*                                                                    */
*/*      DETERMINE IF THE DATA SET EXISTS. IF SO, THE DEFAULT @YM02616
*                                                                    */
*/*      DISPOSITION IS KEEP. IF NOT, THE DEFAULT DISPOSITION @YM02616
*                                                                    */
*/*      IS CATALOG.                                          @YM02616
*                                                                    */
*/*                                                           @YM02616
*                                                                    */
*/* INPUT -                                                   @YM02616
*                                                                    */
*/*      PTR TO PDL                                           @YM02616
*                                                                    */
*/*                                                           @YM02616
*                                                                    */
*/* OUTPUT -                                                  @YM02616
*                                                                    */
*/*      DEFUALT DISPOSITION SET IN PDL                       @YM02616
*                                                                    */
*/*                                                           @YM02616
*                                                                    */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION     @YM02616
*                                                                    */
*/*        AND CAN BE INCORPORATED AS AN INCLUDED CODE        @YM02616
*                                                                    */
*/*        SEGMENT WHEN THE INCLUDE FUNCTION HAS RECEIVED A   @YM02616
*                                                                    */
*/*        STANDARD DEFINITION.                               @YM02616
*                                                                    */
*/********************************************************************
*                                                                    */
*                                                                  0370
*CHKDISP:                                                          0370
*   PROC;                                                          0370
CHKDISP  STM   R14,R12,@SA00007                                    0370
*   DAPLPTR=ADDR(DAPLAREA);         /* PTR TO DAPL           @YM02616*/
         LA    DAPLPTR,DAPLAREA                                    0371
*   DAPLUPT=CPPLUPT;                /* UPT IN DAPL           @YM02616*/
         L     R10,CPPLPTR(,R3AWAPTR)                              0372
         L     R15,CPPLUPT(,R10)                                   0372
         ST    R15,DAPLUPT(,DAPLPTR)                               0372
*   DAPLECT=CPPLECT;                /* ECT IN DAPL           @YM02616*/
         L     R15,CPPLECT(,R10)                                   0373
         ST    R15,DAPLECT(,DAPLPTR)                               0373
*   DAPLECB=ADDR(COMMECB);          /* ECB IN DAPL           @YM02616*/
         LA    R15,COMMECB(,R3AWAPTR)                              0374
         ST    R15,DAPLECB(,DAPLPTR)                               0374
*   DAPLPSCB=CPPLPSCB;              /* PSCB IN DAPL          @YM02616*/
         L     R10,CPPLPSCB(,R10)                                  0375
         ST    R10,DAPLPSCB(,DAPLPTR)                              0375
*   DAPB0PTR=ADDR(DAIRAREA);        /* PTR TO DAPB04         @YM02616
*                                      ZERO DAPB04           @YM02616*/
         LA    DAPB0PTR,DAIRAREA                                   0376
*   DAIRAREA=DAIRAREA&&DAIRAREA;                                   0377
         XC    DAIRAREA(16),DAIRAREA                               0377
*   DAIRDSBF=' ';                   /* BLANK DSN BUFFER      @YM02616*/
         MVI   DAIRDSBF+1,C' '                                     0378
         MVC   DAIRDSBF+2(44),DAIRDSBF+1                           0378
         MVI   DAIRDSBF,C' '                                       0378
*   DA04CD='0004'X;                 /* FUNCTION CODE         @YM02616*/
         MVC   DA04CD(2,DAPB0PTR),@HEX0004                         0379
*   DAIRDSLN=DSNLENGH;              /* LENGTH OF DSNAME      @YM02616
*                                      MOVE DSN TO BUFFER    @YM02616*/
         L     R10,PTRPDL(,R3AWAPTR)                               0380
         LH    R15,DSNLENGH(,R10)                                  0380
         ST    R15,@TF00001                                        0380
         MVC   DAIRDSLN(2),@TF00001+2                              0380
*   DAIRDSN(1:DSNLENGH)=DSNBUF(1:DSNLENGH);                        0381
         BCTR  R15,0                                               0381
         L     R10,DSNPTR(,R10)                                    0381
         EX    R15,@SM01512                                        0381
*   DAIRDSPT=ADDR(DAIRDSBF);        /* GET DSNAME ADDRESS    @YM02616*/
         LA    DAIRDSPT,DAIRDSBF                                   0382
*   DA04PDSN=DAIRDSPT;              /* PTR TO DSNAME         @YM02616*/
         ST    DAIRDSPT,DA04PDSN(,DAPB0PTR)                        0383
*   DAPLDAPB=DAPB0PTR;              /* PTR TO DAPB04         @YM02616*/
         ST    DAPB0PTR,DAPLDAPB(,DAPLPTR)                         0384
*   R1=DAPLPTR;                     /* PTR IN REG 1          @YM02616
*                                      INVOKE DAIR           @Y30LPKH*/
         LR    R1,DAPLPTR                                          0385
*   DO;                             /* CALLTSSR EP(IKJDAIR)          */
*     RESPECIFY                                                    0387
*       GPR01P RSTD;                                               0387
*     IF CVTDAIR=0 THEN                                            0388
         L     R10,CVTPTR                                          0388
         L     R10,CVTDAIR-CVT(,R10)                               0388
         LTR   R10,R10                                             0388
         BNZ   @RF00388                                            0388
*       GEN(LINK EP=IKJDAIR);                                      0389
         LINK EP=IKJDAIR
*     ELSE                                                         0390
*       CALL CVTDAIR;                                              0390
         B     @RC00388                                            0390
@RF00388 L     R10,CVTPTR                                          0390
         L     R15,CVTDAIR-CVT(,R10)                               0390
         BALR  R14,R15                                             0390
*     RESPECIFY                                                    0391
*       GPR01P UNRSTD;                                             0391
@RC00388 DS    0H                                                  0392
*   END;                                                           0392
*   RCODESV=R15;                    /* SAVE DAIR RETURN COD@YM02616  */
         ST    R15,RCODESV(,R3AWAPTR)                              0393
*   IF RCODESV=0 THEN               /* IF DAIR SUCCESSFUL    @OZ05962*/
         L     R10,RCODESV(,R3AWAPTR)                              0394
         LTR   R10,R10                                             0394
         BNZ   @RF00394                                            0394
*     DO;                           /* THEN                  @OZ05962*/
*       IF DA04CAT='1'B|            /* IF DS IN CATALOG      @YM02616*/
*           DA04DSE='1'B THEN       /* OR IN DSE THEN        @YM02616*/
         TM    DA04CAT(DAPB0PTR),B'00000110'                       0396
         BZ    @RF00396                                            0396
*         DSEXISTS='1'B;            /* SHOW DATASET EXISTS   @OZ05962*/
         OI    DSEXISTS(R3AWAPTR),B'00100000'                      0397
*       IF DISPPDE=0 THEN           /* IF DISP NOT SPEC      @OZ05962*/
@RF00396 L     R10,PTRPDL(,R3AWAPTR)                               0398
         LH    R2,DISPPDE(,R10)                                    0398
         LTR   R2,R2                                               0398
         BNZ   @RF00398                                            0398
*         DO;                       /* THEN                  @OZ05962*/
*           IF VOLPDE=1|            /* IF VOL SPECIFIED      @OZ05962*/
*               DSEXISTS='1'B THEN  /* OR DATASET OLD        @OZ05962*/
         CLC   VOLPDE(2,R10),@HW1                                  0400
         BE    @RT00400                                            0400
         TM    DSEXISTS(R3AWAPTR),B'00100000'                      0400
         BNO   @RF00400                                            0400
@RT00400 DS    0H                                                  0401
*             DISPPDE=1;            /* DEFAULT DISP TO KEEP  @OZ05962*/
         L     R10,PTRPDL(,R3AWAPTR)                               0401
         MVC   DISPPDE(2,R10),@HW1                                 0401
*           ELSE                    /* OTHERWISE             @OZ05962*/
*             DISPPDE=3;            /* DEFAULT DISP CATLG    @OZ05962*/
         B     @RC00400                                            0402
@RF00400 L     R10,PTRPDL(,R3AWAPTR)                               0402
         MVC   DISPPDE(2,R10),@HW3                                 0402
*         END;                      /*                       @OZ05962*/
*     END;                          /*                       @OZ05962*/
*   ELSE                            /* IF DAIR FAILED        @OZ05962*/
*     DO;                           /* THEN                  @OZ05962*/
         B     @RC00394                                            0405
@RF00394 DS    0H                                                  0406
*       IF(RCODESV^=8)|             /* IF NOT CATLG ERROR    @OZ05962*/
*           (RCODESV=8&DA04CTRC^=8) THEN/*                   @OZ05962*/
         LA    R10,8                                               0406
         L     R5,RCODESV(,R3AWAPTR)                               0406
         CR    R5,R10                                              0406
         BNE   @RT00406                                            0406
         CR    R5,R10                                              0406
         BNE   @RF00406                                            0406
         CH    R10,DA04CTRC(,DAPB0PTR)                             0406
         BE    @RF00406                                            0406
@RT00406 DS    0H                                                  0407
*         DO;                       /* INVOKE DAIRFAIL       @OZ05962*/
*           RBCODE12='1'B;          /* INDICATE ERROR        @YM02616
*                                      GET ADDR OF DAPB      @YM02616*/
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0408
*           DFDAPLP=ADDR(DAPB04);   /* GET ADDR OF RET CODE@YM02616  */
****     ST    DAPB0PTR,DFDAPLP                                    0409
         LA    R10,DAPLAREA                                        0409
         ST    R10,DFDAPLP                                         0409
*           DFRCP=ADDR(RCODESV);    /* GET ADDR OF MSG RTN   @YM02616*/
         LA    R10,RCODESV(,R3AWAPTR)                              0410
         ST    R10,DFRCP                                           0410
*           DFJEFF02=ADDR(ADMSG);   /* GET ADDR OF ID        @YM02616*/
         LA    R10,ADMSG                                           0411
         ST    R10,DFJEFF02                                        0411
*           DFIDP=ADDR(CALLERNO);                                  0412
         LA    R10,CALLERNO                                        0412
         ST    R10,DFIDP                                           0412
*           GENERATE;                                              0413
*                                      /* LOAD DAIRFAIL RTN   @YM02616*
                     LOAD EP=IKJEFF18
*           R1=ADDR(DFPARMS);                                      0414
         LA    R1,DFPARMS                                          0414
*           CALL R0;                /* INVOKE DAIRFAIL       @YM02616*/
         LR    R15,R0                                              0415
         BALR  R14,R15                                             0415
*           GENERATE;                                              0416
*                                      /* DELETE DAIRFAIL RTN @YM02616*
                     DELETE EP=IKJEFF18
*         END;                      /*                       @YM02616*/
****    ELSE                        /* DS NOT CATALOGED      @ZA10491*/
*         DISPPDE=3;                /* DEFAULT DISP=CATLG    @ZA10491*/
****     B     @RC00406                                            0418
@RF00406 L     R10,PTRPDL(,R3AWAPTR)                               0418
         LH    R2,DISPPDE(,R10)     LOAD CURRENT DISPOSITION
         LTR   R2,R2                ALREADY SET?
         BNZ   @EL00007             YES, DO NOT OVERLAY
         MVC   DISPPDE(2,R10),@HW3                                 0418
*     END;                                                         0419
*   END CHKDISP;                                                   0420
@EL00007 DS    0H                                                  0420
@EF00007 DS    0H                                                  0420
@ER00007 LM    R14,R12,@SA00007                                    0420
         BR    R14                                                 0420
*                                                                  0421
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      OLDDS                                                       */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE PROCESSES REQUESTS FOR AN OLD DATA SET.        */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      IF DSNAME IS NOT SPECIFIED, THE USER IS PROMPTED TO ENTER   */
*/*      A DSNAME. EXTRANEOUS PARAMETERS ARE MARKED NOT ENTERED IN   */
*/*      THE PDL. IF DISPOSITION WAS OMITTED, INDICATE KEEP IN THE   */
*/*      PDL. INVOKE GENTRANS TO TRANSLATE THE PARAMETERS. IF        */
*/*      GENTRANS SUCCESSFUL, INVOKE DYNAMIC ALLOCATION. IF DYNAMIC  */
*/*      ALLOCATION INDICATES FILE IN USE, GO TO PROMPT THE USER     */
*/*      FOR THE OPTION. IF DATA SET COULD NOT BE FOUND, PROMPT FOR  */
*/*      A NEW DSNAME, AND RE-INVOKE DYNAMIC ALLOCATION.             */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDL                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RBCODE12 = 0 - ALLOCATION SUCCESSFUL                        */
*/*                 1 - ERROR IN GENTRANS OR ALLOCATION              */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*                                                                  0421
*OLDDS:                                                            0421
*   PROC;                                                          0421
OLDDS    STM   R14,R12,@SA00008                                    0421
*   IF DSPDE=0 THEN                 /* IF DSN NOT ENTERED,           */
         L     R10,PTRPDL(,R3AWAPTR)                               0422
         LH    R10,DSPDE(,R10)                                     0422
         LTR   R10,R10                                             0422
         BNZ   @RF00422                                            0422
*     DO;                           /* THEN                          */
*       CALL PRMPDSN;               /* PROMPT FOR NEW DSNAME         */
         BAL   R14,PRMPDSN                                         0424
*       IF RBCODE12='0'B THEN       /* IF PROMPT SUCCESSFUL,         */
         TM    RBCODE12(R3AWAPTR),B'10000000'                      0425
         BNZ   @RF00425                                            0425
*         DO;                       /* THEN,                         */
*           DSPDE=1;                /* INDICATE DSN ENTERED          */
         L     R10,PTRPDL(,R3AWAPTR)                               0427
         MVC   DSPDE(2,R10),@HW1                                   0427
*           DSOVRLAY='1'B;          /* INDICATE PDE OVERLAID         */
*                                                                  0428
         OI    DSOVRLAY(R3AWAPTR),B'01000000'                      0428
*           /*********************************************************/
*           /*                                                       */
*           /* DETERMINE LENGTH OF PDE TO BE COPIED, AND OVERLAY     */
*           /* ORIGINAL PDE WITH PROMPT PDE.                         */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0429
*           MOVELEN=ADDR(DDNMEPDE)-ADDR(DSNPDE);                   0429
         LA    MOVELEN,28                                          0429
*           DSNPDE(1:MOVELEN)=DSNAMPDE(1:MOVELEN);                 0430
         LR    R7,MOVELEN                                          0430
         BCTR  R7,0                                                0430
         L     R5,PMPTPDL(,R3AWAPTR)                               0430
         EX    R7,@SM01515                                         0430
*         END;                                                     0431
*     END;                                                         0432
@RF00425 DS    0H                                                  0433
*   IF RBCODE12='0'B THEN           /* IF NO ERROR FOUND,            */
@RF00422 TM    RBCODE12(R3AWAPTR),B'10000000'                      0433
         BNZ   @RF00433                                            0433
*     DO;                           /* CONTINUE                      */
*       I=1;                        /* INITIALIZE SUBSCRIPT          */
*                                                                  0435
         LA    R2I,1                                               0435
*       /*************************************************************/
*       /*                                                           */
*       /* MARK EXTRANEOUS PARAMETERS NOT ENTERED IN PDL             */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0436
*       DO WHILE(CONT='0'B);                                       0436
         B     @DE00436                                            0436
@DL00436 DS    0H                                                  0437
*         IF OLDEXT(I)='00'X THEN   /* IF END OF LIST,               */
         LA    R10,OLDEXT-1(R2I)                                   0437
         CLI   0(R10),X'00'                                        0437
         BNE   @RF00437                                            0437
*           CONT='1'B;              /* EXIT DO-WHILE                 */
         OI    CONT(R3AWAPTR),B'00010000'                          0438
*         ELSE                      /* ELSE,                         */
*           DO;                     /* GET ADDRESS OF PDE            */
         B     @RC00437                                            0439
@RF00437 DS    0H                                                  0440
*             EXTRAN=ADDR(ALLOCPDL)+OLDEXT(I);                     0440
         SLR   R5EXTRAN,R5EXTRAN                                   0440
         IC    R5EXTRAN,OLDEXT-1(R2I)                              0440
         AL    R5EXTRAN,PTRPDL(,R3AWAPTR)                          0440
*             PDEEXT=0;             /* SET PDE TO 0                  */
         SLR   R10,R10                                             0441
         STH   R10,PDEEXT(,R5EXTRAN)                               0441
*             I=I+1;                /* INCREMENT SUBSCRIPT           */
         AL    R2I,@FW1                                            0442
*           END;                                                   0443
*       END;                        /* END DO-WHILE                  */
@RC00437 DS    0H                                                  0444
@DE00436 TM    CONT(R3AWAPTR),B'00010000'                          0444
         BZ    @DL00436                                            0444
*       CONT='0'B;                  /* RESET SWITCH                  */
         NI    CONT(R3AWAPTR),B'11101111'                          0445
*       IF DISPPDE=0 THEN           /* IF DISP NOT ENTERED,          */
         L     R10,PTRPDL(,R3AWAPTR)                               0446
         LH    R7,DISPPDE(,R10)                                    0446
         LTR   R7,R7                                               0446
         BNZ   @RF00446                                            0446
*         DISPPDE=1;                /* INDICATE DEFAULT OF KEEP      */
         MVC   DISPPDE(2,R10),@HW1                                 0447
*       CALL TRANSRTN;              /* TRANSLATE PARAMETERS          */
@RF00446 BAL   R14,TRANSRTN                                        0448
*       IF RBCODE12='0'B THEN       /* IF TRANSLATE SUCCESSFUL       */
         TM    RBCODE12(R3AWAPTR),B'10000000'                      0449
         BNZ   @RF00449                                            0449
*         DO;                       /* THEN                          */
*           IF DSOVRLAY='1'B THEN   /* IF 2ND PDL TO FREE,           */
         TM    DSOVRLAY(R3AWAPTR),B'01000000'                      0451
         BNO   @RF00451                                            0451
*             DO;                   /* THEN                          */
*               DSOVRLAY='0'B;      /* TURN OFF INDICATOR            */
         NI    DSOVRLAY(R3AWAPTR),B'10111111'                      0453
*               RFY                                                0454
*                 R5 RSTD;          /* RESTRICT REG 5                */
*               R5=ADDR(PMPTPDL);   /* PDL ADDRESS IN REG 5          */
         LA    R5,PMPTPDL(,R3AWAPTR)                               0455
*               GEN(IKJRLSA (5));   /* RELEASE PDL                   */
         IKJRLSA (5)
*               RFY                                                0457
*                 R5 UNRSTD;        /* UNRESTRICT REG 5              */
*             END;                                                 0458
*           CALL DYNSVC;            /* INVOKE DYNAMIC ALLOCATION     */
@RF00451 BAL   R14,DYNSVC                                          0459
*           IF RCODESV>0 THEN       /* IF RETURN CODE NON-ZERO       */
         L     R10,RCODESV(,R3AWAPTR)                              0460
         LTR   R10,R10                                             0460
         BNP   @RF00460                                            0460
*             DO;                   /* CHECK IF FILE IN USE          */
*               IF S99ERROR='0410'X THEN                           0462
         L     R10,PTRS99RB(,R3AWAPTR)                             0462
         CLC   S99ERROR(2,R10),@HEX0410                            0462
         BNE   @RF00462                                            0462
*                 DO;               /* YES -                         */
*                   R1=R3AWAPTR;    /* WORKAREA PTR IN REG 1         */
         LR    R1,R3AWAPTR                                         0464
*                   CALL IKJEFD36;  /* PROMPT FOR OPTION             */
         L     R15,VCONSD36                                        0465
         BALR  R14,R15                                             0465
*                 END;                                             0466
*               ELSE                /* NO - CHECK IF DSN NOT FOUND   */
*                 IF S99ERROR='1708'X THEN                         0467
         B     @RC00462                                            0467
@RF00462 L     R10,PTRS99RB(,R3AWAPTR)                             0467
         CLC   S99ERROR(2,R10),@HEX1708                            0467
         BNE   @RF00467                                            0467
*                   DO;             /* YES -                         */
*                     ENTRYCD=1;    /* SET ENTRY CODE                */
         MVC   ENTRYCD(2,R3AWAPTR),@HW1                            0469
*                     R1=R3AWAPTR;  /* WORKAREA PTR IN REG 1 ISSUE 0470
*                                      NOT FOUND MSG                 */
         LR    R1,R3AWAPTR                                         0470
*                     CALL IKJEFD35;                               0471
         L     R15,VCONSD35                                        0471
         BALR  R14,R15                                             0471
*                     CALL PRMPDSN; /* PROMPT FOR DSNAME             */
         BAL   R14,PRMPDSN                                         0472
*                     IF RBCODE12='0'B THEN                        0473
         TM    RBCODE12(R3AWAPTR),B'10000000'                      0473
         BNZ   @RF00473                                            0473
*                       CALL DSNADDT;/* PROCESS NEW DSNAME           */
         BAL   R14,DSNADDT                                         0474
*                   END;                                           0475
*                 ELSE                                             0476
*                   DO;             /* OTHERWISE,                    */
         B     @RC00467                                            0476
@RF00467 DS    0H                                                  0477
*                     RBCODE12='1'B;/* INDICATE ALLOC FAILED         */
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0477
*                     ENTRYCD=1;    /* SET ENTRY CODE                */
         MVC   ENTRYCD(2,R3AWAPTR),@HW1                            0478
*                     R1=R3AWAPTR;  /* WORKAREA PTR IN REG 1 ISSUE 0479
*                                      ERROR MESSAGE                 */
         LR    R1,R3AWAPTR                                         0479
*                     CALL IKJEFD35;                               0480
         L     R15,VCONSD35                                        0480
         BALR  R14,R15                                             0480
*                   END;                                           0481
*             END;                                                 0482
*         END;                                                     0483
*     END;                                                         0484
*   END OLDDS;                                                     0485
@EL00008 DS    0H                                                  0485
@EF00008 DS    0H                                                  0485
@ER00008 LM    R14,R12,@SA00008                                    0485
         BR    R14                                                 0485
*                                                                  0486
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      DSNADDT                                                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE BUILDS THE TEXT UNIT FOR THE DSNAME ENTERED    */
*/*      ON THE PROMPT AND RE-INVOKES DYNAMIC ALLOCATION.            */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      INVOKE GENTRANS, PASSING THE SECONDARY PCL AND PDL. IF      */
*/*      GENTRANS FAILED, ISSUE ERROR MESSAGE. ELSE, FREE THE        */
*/*      SECONDARY PDL. COPY THE POINTERS TO THE NEW TEXT UNITS      */
*/*      INTO THE ORIGINAL ADDRESS LIST. INVOKE DYNAMIC ALLOCATION.  */
*/*      IF ALLOCATION INDICATES FILE IN USE, GO TO PROMPT FOR       */
*/*      OPTION. IF DSNAME NOT FOUND, PROMPT FOR NEW DSNAME AND      */
*/*      REPEAT ABOVE PROCEDURE. ELSE, ISSUE ERROR MSG. FREE THE     */
*/*      STORAGE USED TO BUILD THE SECONDARY TEXT UNITS.             */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PROMPT PCL                                           */
*/*      PTR TO PROMPT PDL                                           */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RBCODE12 = 0 - ALLOCATION SUCCESSFUL                        */
*/*                 1 - ERROR IN GENTRANS OR ALLOCATION              */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/*                                                                  */
*/*        IF THE DSNAME COULD NOT BE FOUND, AND THE USER IS         */
*/*        PROMPTED TO REENTER DSNAME, THEN THE TEXT UNITS FOR THE   */
*/*        OTHER PARAMETERS HAVE ALREADY BEEN BUILT. GENTRANS IS     */
*/*        INVOKED TO TRANSLATE ONLY THE DSNAME ENTERED ON THE       */
*/*        PROMPT. THE TEXT UNITS BUILT ARE PUT INTO THE ORIGINAL    */
*/*        LIST OF TEXT UNITS.                                       */
*/********************************************************************/
*                                                                  0486
*DSNADDT:                                                          0486
*   PROC;                                                          0486
DSNADDT  STM   R14,R12,@SA00009                                    0486
*DSNAD1:                                                           0487
*   S99ERROR=S99ERROR&&S99ERROR;    /* ZERO ERROR FIELD              */
DSNAD1   L     R10,PTRS99RB(,R3AWAPTR)                             0487
         XC    S99ERROR(2,R10),S99ERROR(R10)                       0487
*   GTPLPDL=PMPTPDL;                /* SET PDL PTR                   */
         L     R10,GTPLPTR(,R3AWAPTR)                              0488
         L     R7,PMPTPDL(,R3AWAPTR)                               0488
         ST    R7,GTPLPDL(,R10)                                    0488
*   GTPLPCL=PPLPCL;                 /* SET PCL PTR                   */
         L     R7,PPLPTR(,R3AWAPTR)                                0489
         L     R7,PPLPCL(,R7)                                      0489
         ST    R7,GTPLPCL(,R10)                                    0489
*   GTPLKLST=ADDR(DSNKLIST);        /* PTR TO KEYLIST                */
         LA    R7,DSNKLIST                                         0490
         ST    R7,GTPLKLST(,R10)                                   0490
*   GTPLTBLE=0;                     /* NO KEYWORD TABLE              */
         SLR   R7,R7                                               0491
         ST    R7,GTPLTBLE(,R10)                                   0491
*   GTPLABLK=0;                     /* NO ADDITIONAL BLOCK           */
         ST    R7,GTPLABLK(,R10)                                   0492
*   GTPLOUTA=0;                     /* ZERO PTR TO TEXT              */
         ST    R7,GTPLOUTA(,R10)                                   0493
*   R1=GTPLPTR;                     /* GTPL ADDR IN REG 1            */
         LR    R1,R10                                              0494
*   GEN(LINK EP=IKJCB831);          /* INVOKE GENTRANS               */
         LINK EP=IKJCB831
*   RCODESV=R15;                    /* SAVE RETURN CODE              */
         ST    R15,RCODESV(,R3AWAPTR)                              0496
*   IF RCODESV>0 THEN               /* IF GENTRANS FAILED            */
         L     R10,RCODESV(,R3AWAPTR)                              0497
         LTR   R10,R10                                             0497
         BNP   @RF00497                                            0497
*     DO;                           /* THEN                          */
*       RBCODE12='1'B;              /* INDICATE ALLOC FAILED         */
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0499
*       ENTRYCD=3;                  /* SET ENTRY CODE                */
         MVC   ENTRYCD(2,R3AWAPTR),@HW3                            0500
*       R1=R3AWAPTR;                /* WORKAREA PTR IN REG 1         */
         LR    R1,R3AWAPTR                                         0501
*       CALL IKJEFD35;              /* ISSUE SYSTEM ERROR MSG        */
         L     R15,VCONSD35                                        0502
         BALR  R14,R15                                             0502
*     END;                                                         0503
*   ELSE                                                           0504
*     DO;                           /* IF GENTRANS SUCCESSFUL,       */
         B     @RC00497                                            0504
@RF00497 DS    0H                                                  0505
*       RFY                                                        0505
*         R5 RSTD;                  /* RESTRICT REG 5                */
*       R5=ADDR(PMPTPDL);           /* PDL PTR IN REG 5              */
         LA    R5,PMPTPDL(,R3AWAPTR)                               0506
*       GEN(IKJRLSA (5));           /* RELEASE 2ND PDL               */
         IKJRLSA (5)
*       RFY                                                        0508
*         R5 UNRSTD;                /* UNRESTRICT REG 5              */
*       TEXTPTR2=GTPLOUTA;          /* SAVE PTR TO TEXT              */
         L     R10,GTPLPTR(,R3AWAPTR)                              0509
         L     TEXTPTR2,GTPLOUTA(,R10)                             0509
*       TUDSN=ADDRLST2(3);          /* NEW DSN TEXT POINTER          */
         L     R10,ADDRLST2+8(,TEXTPTR2)                           0510
         ST    R10,TUDSN(,GTPLOUT1)                                0510
*       TUMBR=ADDRLST2(4);          /* NEW MEMBER TEXT POINTER       */
         L     R10,ADDRLST2+12(,TEXTPTR2)                          0511
         ST    R10,TUMBR(,GTPLOUT1)                                0511
*       TUPSWD=ADDRLST2(5);         /* NEW PSWORD TEXT POINTER       */
         L     R10,ADDRLST2+16(,TEXTPTR2)                          0512
         ST    R10,TUPSWD(,GTPLOUT1)                               0512
*       TUPSWDND='0'B;              /* ZERO HIGH ORDER BIT           */
         NI    TUPSWDND(GTPLOUT1),B'01111111'                      0513
*       CALL DYNSVC;                /* INVOKE DYN ALLOCATION         */
         BAL   R14,DYNSVC                                          0514
*       IF RCODESV>0 THEN           /* IF ALLOCATION FAILED,         */
         L     R10,RCODESV(,R3AWAPTR)                              0515
         LTR   R10,R10                                             0515
         BNP   @RF00515                                            0515
*         DO;                       /* THEN CHECK IF FILE IN USE,    */
*           IF S99ERROR='0410'X THEN                               0517
         L     R10,PTRS99RB(,R3AWAPTR)                             0517
         CLC   S99ERROR(2,R10),@HEX0410                            0517
         BNE   @RF00517                                            0517
*             DO;                   /* YES -                         */
*               R1=R3AWAPTR;        /* WORKAREA PTR IN REG 1 PROMPT
*                                      FOR OPTION                    */
         LR    R1,R3AWAPTR                                         0519
*               CALL IKJEFD36;                                     0520
         L     R15,VCONSD36                                        0520
         BALR  R14,R15                                             0520
*             END;                                                 0521
*           ELSE                    /* NO - CHECK IF DSN NOT FOUND   */
*             IF S99ERROR='1708'X THEN                             0522
         B     @RC00517                                            0522
@RF00517 L     R10,PTRS99RB(,R3AWAPTR)                             0522
         CLC   S99ERROR(2,R10),@HEX1708                            0522
         BNE   @RF00522                                            0522
*               DO;                 /* YES -                         */
*                 ENTRYCD=1;        /* SET ENTRY CODE                */
         MVC   ENTRYCD(2,R3AWAPTR),@HW1                            0524
*                 R1=R3AWAPTR;      /* WORKAREA PTR IN REG 1 ISSUE 0525
*                                      NOT FOUND MSG                 */
         LR    R1,R3AWAPTR                                         0525
*                 CALL IKJEFD35;                                   0526
         L     R15,VCONSD35                                        0526
         BALR  R14,R15                                             0526
*                 CALL PRMPDSN;     /* PROMPT FOR NEW DSNAME         */
         BAL   R14,PRMPDSN                                         0527
*                 IF RBCODE12='0'B THEN                            0528
         TM    RBCODE12(R3AWAPTR),B'10000000'                      0528
         BZ    @RT00528                                            0528
*                   GO TO DSNAD1;   /* PROCESS NEW DSNAME            */
*               END;                                               0530
*             ELSE                                                 0531
*               DO;                 /* NO -                          */
         B     @RC00522                                            0531
@RF00522 DS    0H                                                  0532
*                 RBCODE12='1'B;    /* INDICATE ALLOC FAILED         */
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0532
*                 ENTRYCD=1;        /* SET ENTRY CODE                */
         MVC   ENTRYCD(2,R3AWAPTR),@HW1                            0533
*                 R1=R3AWAPTR;      /* WORKAREA PTR IN REG 1 ISSUE 0534
*                                      ERROR MSG                     */
         LR    R1,R3AWAPTR                                         0534
*                 CALL IKJEFD35;                                   0535
         L     R15,VCONSD35                                        0535
         BALR  R14,R15                                             0535
*               END;                                               0536
*         END;                                                     0537
@RC00522 DS    0H                                                  0537
@RC00517 DS    0H                                                  0538
*       R0=ADDRLST2(1);             /* GET SUBPOOL AND LENGTH        */
@RF00515 L     R0,ADDRLST2(,TEXTPTR2)                              0538
*       R1=TEXTPTR2;                /* AND ADDR OF TEXT STORAGE      */
         LR    R1,TEXTPTR2                                         0539
*       GEN(FREEMAIN R,LV=(0),A=(1));/* FREE TEXT STORAGE            */
         FREEMAIN R,LV=(0),A=(1)
*       GTPLOUTA=GTPLOUT1;          /* RESET TEXT PTR                */
         L     R10,GTPLPTR(,R3AWAPTR)                              0541
         ST    GTPLOUT1,GTPLOUTA(,R10)                             0541
*     END;                                                         0542
*   END DSNADDT;                                                   0543
@EL00009 DS    0H                                                  0543
@EF00009 DS    0H                                                  0543
@ER00009 LM    R14,R12,@SA00009                                    0543
         BR    R14                                                 0543
*                                                                  0544
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      PRMPDSN                                                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE INVOKES PARSE TO PROMPT THE USER FOR A         */
*/*      DATA SET NAME.                                              */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      SET UP PARSE PARAMETER LIST. INVOKE PARSE. IF PARSE         */
*/*      FAILED, ISSUE ERROR MESSAGE.                                */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PCL                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      PTR TO PROMPT PDL                                           */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*                                                                  0544
*PRMPDSN:                                                          0544
*   PROC;                                                          0544
PRMPDSN  STM   R14,R12,@SA00010                                    0544
*   ENTRYCD=3;                      /* INDICATE PROMPT FOR DSN       */
         MVC   ENTRYCD(2,R3AWAPTR),@HW3                            0545
*   R1=R3AWAPTR;                    /* WORKAREA PTR IN REG 1         */
         LR    R1,R3AWAPTR                                         0546
*   CALL IKJEFD37;                  /* INVOKE PARSE                  */
         L     R15,VCONSD37                                        0547
         BALR  R14,R15                                             0547
*   IF RCODESV>0 THEN               /* IF PARSE FAILED,              */
         L     R10,RCODESV(,R3AWAPTR)                              0548
         LTR   R10,R10                                             0548
         BNP   @RF00548                                            0548
*     DO;                           /* THEN,                         */
*       IF AWARSV1='1'B THEN        /* IF MSG ALREADY ISSUED,        */
         TM    AWARSV1(R3AWAPTR),B'00000010'                       0550
         BNO   @RF00550                                            0550
*         AWARSV1='0'B;             /* TURN OFF INDICATOR            */
         NI    AWARSV1(R3AWAPTR),B'11111101'                       0551
*       ELSE                                                       0552
*         DO;                       /* OTHERWISE,                    */
         B     @RC00550                                            0552
@RF00550 DS    0H                                                  0553
*           ENTRYCD=2;              /* SET ENTRY CODE                */
         MVC   ENTRYCD(2,R3AWAPTR),@HW2                            0553
*           R1=R3AWAPTR;            /* WORKAREA PTR IN REG 1         */
         LR    R1,R3AWAPTR                                         0554
*           CALL IKJEFD35;          /* ISSUE ERROR MESSAGE           */
         L     R15,VCONSD35                                        0555
         BALR  R14,R15                                             0555
*         END;                                                     0556
*     END;                                                         0557
*   ELSE                                                           0558
*     DO;                                                          0558
         B     @RC00548                                            0558
@RF00548 DS    0H                                                  0559
*       IF MBRPRES1='1'B&           /* IF MEMBER SPECIFIED           */
*           DISPPDE=2 THEN          /* AND DISP OF DELETE            */
         L     R10,PMPTPDL(,R3AWAPTR)                              0559
         TM    MBRPRES1(R10),B'10000000'                           0559
         BNO   @RF00559                                            0559
         L     R2,PTRPDL(,R3AWAPTR)                                0559
         CLC   DISPPDE(2,R2),@HW2                                  0559
         BNE   @RF00559                                            0559
*         DO;                                                      0560
*           ENTRYCD=5;              /* SET ENTRY CODE COPY NEW DSNAME
*                                      INTO PDE                      */
         MVC   ENTRYCD(2,R3AWAPTR),@HW5                            0561
*           MOVELEN=ADDR(DDNMEPDE)-ADDR(DSNPDE);                   0562
         LA    MOVELEN,28                                          0562
*           DSNPDE(1:MOVELEN)=DSNAMPDE(1:MOVELEN);                 0563
         L     R15,PTRPDL(,R3AWAPTR)                               0563
         LR    R14,MOVELEN                                         0563
         BCTR  R14,0                                               0563
         EX    R14,@SM01519                                        0563
*           R1=R3AWAPTR;            /* WORKAREA PTR IN REG 1 ISSUE 0564
*                                      ERROR MESSAGE                 */
         LR    R1,R3AWAPTR                                         0564
*           CALL IKJEFD35;                                         0565
         L     R15,VCONSD35                                        0565
         BALR  R14,R15                                             0565
*           RFY                                                    0566
*             R5 RSTD;              /* RESTRICT REG 5                */
*           R5=ADDR(PMPTPDL);       /* PDL ADDRESS IN REG 5          */
         LA    R5,PMPTPDL(,R3AWAPTR)                               0567
*           GEN(IKJRLSA (5));       /* RELEASE PDL                   */
         IKJRLSA (5)
*           RFY                                                    0569
*             R5 UNRSTD;            /* UNRESTRICT REG 5              */
*         END;                                                     0570
*     END;                                                         0571
*   END PRMPDSN;                                                   0572
@EL00010 DS    0H                                                  0572
@EF00010 DS    0H                                                  0572
@ER00010 LM    R14,R12,@SA00010                                    0572
         BR    R14                                                 0572
*                                                                  0573
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      TRANSRTN                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE INVOKES THE GENERALIZED TRANSLATE ROUTINE AND  */
*/*      CHECKS ITS RETURN CODE.                                     */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE TEXT UNIT FOR PERMANENT ALLOCATION IS SET UP IN THE     */
*/*      ADDITIONAL BLOCK OF TEXT TO BE PASSED.  THE POINTER TO THE  */
*/*      GENTRANS PARAMETER LIST IS PUT IN REGISTER 1 AND GENTRANS   */
*/*      IS INVOKED.  IF THE RETURN CODE FROM GENTRANS IS NON-ZERO,  */
*/*      AN INDICATOR IS SET. ELSE, THE TEXT POINTER RETURNED BY     */
*/*      GENTRANS IS PUT INTO THE DYNAMIC ALLOCATION REQUEST BLOCK.  */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO GENTRANS PARAMETER LIST                              */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RBCODE12 = 0 - GENTRANS SUCCESSFUL                          */
*/*               = 1 - GENTRANS FAILED                              */
*/*                                                                  */
*/********************************************************************/
*                                                                  0573
*TRANSRTN:                                                         0573
*   PROC;                                                          0573
TRANSRTN STM   R14,R5,@SA00011                                     0573
         STM   R7,R12,@SA00011+32                                  0573
*   ADLKEY=DALPERMA;                /* PERM ALLOC TEXT - KEY         */
         L     R10,TXT(,R3AWAPTR)                                  0574
         MVC   ADLKEY(2,R10),@HWPERMA                              0574
*   ADLNBR=0;                       /* NUMBER                        */
         SLR   R7,R7                                               0575
         STH   R7,ADLNBR(,R10)                                     0575
*   ADDTEXT(INC)=TXT;               /* ADDRESS IN LIST               */
         LR    R7,R4INC                                            0576
         SLA   R7,2                                                0576
         L     R5,GTPLPTR(,R3AWAPTR)                               0576
         L     R2,GTPLABLK(,R5)                                    0576
         ST    R10,@TF00001                                        0576
         ALR   R7,R2                                               0576
         MVC   ADDTEXT-4(4,R7),@TF00001                            0576
*   ADDNUM=ADDNUM+1;                /* INCREMENT ENTRIES CTR         */
         LA    R7,1                                                0577
         MVC   @TF00001(2),ADDNUM(R2)                              0577
         LH    R15,@TF00001                                        0577
         ALR   R15,R7                                              0577
         ST    R15,@TF00001                                        0577
         MVC   ADDNUM(2,R2),@TF00001+2                             0577
*   INC=INC+1;                      /* INCREMENT SUBSCRIPT           */
         ALR   R4INC,R7                                            0578
*   TXT=TXT+4;                      /* INCREMENT TEXT PTR            */
         AL    R10,@FW4                                            0579
         ST    R10,TXT(,R3AWAPTR)                                  0579
*   ADLKEY=DALRTORG;                /* RETURN DSORG KEY              */
         MVC   ADLKEY(2,R10),@HWRTORG                              0580
*   ADLNBR=1;                       /* RETURN DSORG NUMBER           */
         STH   R7,ADLNBR(,R10)                                     0581
*   ADLLEN=2;                       /* RETURN DSORG LENGTH           */
         MVC   ADLLEN(2,R10),@HW2                                  0582
*   ADDTEXT(INC)=TXT;               /* ADDRESS IN LIST               */
         LR    R14,R4INC                                           0583
         SLA   R14,2                                               0583
         ST    R10,@TF00001                                        0583
         ALR   R14,R2                                              0583
         MVC   ADDTEXT-4(4,R14),@TF00001                           0583
*   TXT=TXT+8;                      /* INCREMENT TEXT PTR            */
         AL    R10,@FW8                                            0584
         ST    R10,TXT(,R3AWAPTR)                                  0584
*   INC=INC+1;                      /* INCREMENT SUBSCRIPT           */
         ALR   R4INC,R7                                            0585
*   ADDNUM=ADDNUM+1;                /* INCREMENT ENTRIES CTR         */
         ALR   R15,R7                                              0586
         ST    R15,@TF00001                                        0586
         MVC   ADDNUM(2,R2),@TF00001+2                             0586
*   R1=GTPLPTR;                     /* PARM LIST IN REG 1            */
         LR    R1,R5                                               0587
*   GEN(LINK EP=IKJCB831);          /* INVOKE GENTRANS               */
         LINK EP=IKJCB831
*   RCODESV=R15;                    /* SAVE RETURN CODE              */
         ST    R15,RCODESV(,R3AWAPTR)                              0589
*   IF RCODESV>0 THEN               /* IF GENTRANS FAILED,           */
         L     R10,RCODESV(,R3AWAPTR)                              0590
         LTR   R10,R10                                             0590
         BNP   @RF00590                                            0590
*     DO;                                                          0591
*       ENTRYCD=3;                  /* SET ENTRY CODE                */
         MVC   ENTRYCD(2,R3AWAPTR),@HW3                            0592
*       R1=R3AWAPTR;                /* WORKAREA PTR IN REG 1         */
         LR    R1,R3AWAPTR                                         0593
*       CALL IKJEFD35;              /* ISSUE ERROR MSG               */
         L     R15,VCONSD35                                        0594
         BALR  R14,R15                                             0594
*     END;                                                         0595
*   ELSE                            /* OTHERWISE,                    */
*     DO;                                                          0596
         B     @RC00590                                            0596
@RF00590 DS    0H                                                  0597
*       S99TXTPP=GTPLOUTA+8;        /* PUT TEXT PTR IN RB            */
         L     R10,PTRS99RB(,R3AWAPTR)                             0597
         L     R7,GTPLPTR(,R3AWAPTR)                               0597
         L     R7,GTPLOUTA(,R7)                                    0597
         LA    R2,8                                                0597
         ALR   R2,R7                                               0597
         ST    R2,S99TXTPP(,R10)                                   0597
*       GTPLOUT1=GTPLOUTA;          /* SAVE TEXT PTR                 */
         LR    GTPLOUT1,R7                                         0598
*     END;                                                         0599
*   END TRANSRTN;                                                  0600
@EL00011 DS    0H                                                  0600
@EF00011 DS    0H                                                  0600
@ER00011 LM    R14,R5,@SA00011                                     0600
         LM    R7,R12,@SA00011+32                                  0600
         BR    R14                                                 0600
*                                                                  0601
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      DYNSVC                                                      */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE ISSUES SVC 99 TO INVOKE DYNAMIC ALLOCATION.    */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE DYNALLOC MACRO IS ISSUED. ON RETURN, THE RETURN CODE IN */
*/*      REGISTER 15 IS SAVED.                                       */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      WORKAREA                                                    */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE = 0 - ALLOCATION SUCCESSFUL                     */
*/*                 ^= 0 - ERROR                                     */
*/*                                                                  */
*/********************************************************************/
*                                                                  0601
*DYNSVC:                                                           0601
*   PROC;                                                          0601
DYNSVC   STM   R14,R12,12(R13)                                     0601
*   R1=ADDR(S99RBPTR);              /* REQ BLOCK PTR IN REG1         */
         LA    R1,S99RBPTR                                         0602
*   S99RBPTR=PTRS99RB;              /* PTR TO REQUEST BLOCK          */
         L     R10,PTRS99RB(,R3AWAPTR)                             0603
         ST    R10,S99RBPTR                                        0603
*   S99RBPND='1'B;                  /* LAST REQ BLOCK                */
*                                                                  0604
         OI    S99RBPND,B'10000000'                                0604
*   /*****************************************************************/
*   /*                                                               */
*   /* MACDATE Y-2 73082                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0605
*   SVC(99);                        /* INVOKE DYN ALLOCATION         */
         SVC   99                                                  0605
*   RCODESV=R15;                    /* SAVE RETURN CODE              */
         ST    R15,RCODESV(,R3AWAPTR)                              0606
*   END DYNSVC;                                                    0607
@EL00012 DS    0H                                                  0607
@EF00012 DS    0H                                                  0607
@ER00012 LM    R14,R12,12(R13)                                     0607
         BR    R14                                                 0607
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00P PTR(31) REG(0),                                       0608
*     GPR01P PTR(31) REG(1),                                       0608
*     GPR02P PTR(31) REG(2),                                       0608
*     GPR03P PTR(31) REG(3),                                       0608
*     GPR04P PTR(31) REG(4),                                       0608
*     GPR05P PTR(31) REG(5),                                       0608
*     GPR06P PTR(31) REG(6),                                       0608
*     GPR07P PTR(31) REG(7),                                       0608
*     GPR08P PTR(31) REG(8),                                       0608
*     GPR09P PTR(31) REG(9),                                       0608
*     GPR14P PTR(31) REG(14),                                      0608
*     GPR15P PTR(31) REG(15);                                      0608
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0609
*     I031F FIXED(31) BASED,                                       0609
*     I031P PTR(31) BASED,                                         0609
*     I015F FIXED(15) BASED,                                       0609
*     I015P PTR(15) BASED,                                         0609
*     I008P PTR(8) BASED,                                          0609
*     I001C CHAR(1) BASED;          /*                       @Y30LPKH*/
@DATA    DS    0H
@HW3     DC    H'3'
@HW5     DC    H'5'
@HWTRK   DC    XL2'0007'
@HWCYL   DC    XL2'0008'
@HWSYSOU DC    XL2'0018'
@HWTERM  DC    XL2'0028'
@HWPERMA DC    XL2'0052'
@HWRTORG DC    XL2'0057'
@HWMSVGP DC    XL2'005E'
@SM01509 MVC   DSNPDE(0,R10),DSNAMPDE(R7)
@SM01512 MVC   DAIRDSN(0),DSNBUF(R10)
@SM01515 MVC   DSNPDE(0,R10),DSNAMPDE(R5)
@SM01519 MVC   DSNPDE(0,R15),DSNAMPDE(R10)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SAV001  EQU   @SA00001
@SA00005 DS    15F
@SA00003 DS    15F
@SA00004 DS    15F
@SA00008 DS    15F
@SA00006 DS    15F
@SA00002 DS    15F
@SA00011 DS    14F
@SA00010 DS    15F
@SA00007 DS    15F
@SA00009 DS    15F
@TF00001 DS    F
@ZTEMPS  DS    C
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
@TEMPS   EQU   @ZTEMPS
@L       EQU   @ZLEN
IKJEFD32 CSECT
         DS    0F
@FW1     DC    F'1'
@HW1     EQU   @FW1+2
@FW2     DC    F'2'
@HW2     EQU   @FW2+2
@FW4     DC    F'4'
@FW8     DC    F'8'
@FW12    DC    F'12'
@DATD    DSECT
         DS    0D
SAVDSPDL DS    A
S99TUFP  DS    A
S99RBPTR DS    AL4
         ORG   S99RBPTR
S99RBPND DS    BL1
         ORG   S99RBPTR+4
DAPLAREA DS    CL20
DAIRAREA DS    CL16
DFPARMS  DS    CL20
         ORG   DFPARMS
DFS99RBP DS    AL4
         ORG   DFS99RBP
DFDAPLP  DS    AL4
         ORG   DFPARMS+4
DFRCP    DS    AL4
DFJEFF02 DS    AL4
DFIDP    DS    AL4
DFCPPLP  DS    AL4
         ORG   DFPARMS+24              ****
DAIRDSBF DS    CL46
         ORG   DAIRDSBF
DAIRDSLN DS    FL2
DAIRDSN  DS    CL44
         ORG   DAIRDSBF+46
         ORG   *+1-(*-@DATD)/(*-@DATD) ENSURE DSECT DATA
@ENDDATD EQU   *
@DATEND  EQU   *
IKJEFD32 CSECT
         DC    0F'0'
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
@SIZ001  EQU   @SIZDATD
VCONSD33 DC    V(IKJEFD33)
VCONSD35 DC    V(IKJEFD35)
VCONSD37 DC    V(IKJEFD37)
VCONSD36 DC    V(IKJEFD36)
         DC    0D'0'
ADMSG    DC    F'0'
CALLERNO DC    H'1'
@HEX0004 DC    X'0004'
@HEX0410 DC    X'0410'
@HEX1708 DC    X'1708'
PATCH32  DC    25F'0'
DSNKLIST DC    XL2'0002'
         DC    XL2'0000'
TERMEXT  DC    X'0C'
         DC    X'0E'
         DC    X'12'
         DC    X'14'
         DC    X'18'
         DC    X'1A'
         DC    X'1C'
         DC    X'1E'
         DC    X'20'
         DC    X'22'
         DC    X'24'
         DC    X'26'
         DC    X'28'
         DC    X'2A'
         DC    X'2C'
         DC    X'2E'
         DC    X'30'                                               @26A
         DC    X'00'
SYSOTEXT DC    X'08'
         DC    X'0E'
         DC    X'14'
         DC    X'26'
         DC    X'20'
         DC    X'22'
         DC    X'24'
         DC    X'28'
         DC    X'2E'
         DC    X'30'                                               @26A
         DC    X'00'
OLDEXT   DC    X'10'
         DC    X'12'
         DC    X'14'
         DC    X'18'
         DC    X'1A'
         DC    X'2C'
         DC    X'30'                                               @26A
         DC    X'00'
NEWEXT   DC    X'18'
         DC    X'1A'
         DC    X'30'                                               @26A
         DC    X'00'
DMMYEXT  DC    X'0C'
         DC    X'0E'
         DC    X'12'
         DC    X'14'
         DC    X'18'
         DC    X'1A'
         DC    X'1C'
         DC    X'1E'
         DC    X'20'
         DC    X'22'
         DC    X'24'
         DC    X'26'
         DC    X'28'
         DC    X'2A'
         DC    X'2C'
         DC    X'2E'
         DC    X'30'                                               @26A
         DC    X'00'
         DC    0D'0'                   END OF CSECT                @26A
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
R4INC    EQU   R4
GTPLOUT1 EQU   R6
DAIRDSPT EQU   R2
DAPLPTR  EQU   R5
DAPB0PTR EQU   R4
R5EXTRAN EQU   R5
MOVELEN  EQU   R2
TEXTPTR2 EQU   R4
R3AWAPTR EQU   R3
R2I      EQU   R2
REGSAVE  EQU   4
RETCODE  EQU   16
ALLOCWA  EQU   0
CPPLPTR  EQU   ALLOCWA
PTRPDL   EQU   ALLOCWA+4
GTPLPTR  EQU   ALLOCWA+8
SWITCH   EQU   ALLOCWA+12
RBCODE12 EQU   SWITCH
DSOVRLAY EQU   SWITCH
CONT     EQU   SWITCH
AWARSV1  EQU   SWITCH
SWITCH2  EQU   ALLOCWA+13
DSEXISTS EQU   SWITCH2
ENTRYCD  EQU   ALLOCWA+14
TXT      EQU   ALLOCWA+16
PTRS99RB EQU   ALLOCWA+20
RCODESV  EQU   ALLOCWA+24
VCFLAGS  EQU   ALLOCWA+36
PMPTPDL  EQU   ALLOCWA+40
CMDTWO   EQU   ALLOCWA+60
COMMECB  EQU   ALLOCWA+160
PPLPTR   EQU   ALLOCWA+172
ALLOCPDL EQU   0
DSPDE    EQU   ALLOCPDL+8
STATSPDE EQU   ALLOCPDL+12
VOLPDE   EQU   ALLOCPDL+14
BLOKPDE  EQU   ALLOCPDL+16
SPACEPDE EQU   ALLOCPDL+18
HOLDPDE  EQU   ALLOCPDL+26
DISPPDE  EQU   ALLOCPDL+46
DSNPDE   EQU   ALLOCPDL+48+4                                       @26C
DSNPTR   EQU   DSNPDE
DSNLENGH EQU   DSNPDE+4
DSNFLAGS EQU   DSNPDE+6
DSNPRES  EQU   DSNFLAGS
MBRPTR   EQU   DSNPDE+8
MBRFLAGS EQU   DSNPDE+14
PASSPTR  EQU   DSNPDE+16
PASSFLAG EQU   DSNPDE+22
DDNMEPDE EQU   ALLOCPDL+76+4                                       @26C
DDNPTR   EQU   DDNMEPDE
DDNFLAGS EQU   DDNMEPDE+6
CLASPDE  EQU   ALLOCPDL+84+4                                       @26C
CLASPTR  EQU   CLASPDE
CLASFLG  EQU   CLASPDE+6
CLASPRES EQU   CLASFLG
SERPDE   EQU   ALLOCPDL+92+4                                       @26C
SERPTR   EQU   SERPDE
SERFLAGS EQU   SERPDE+6
BLKPDE   EQU   ALLOCPDL+104+4                                      @26C
BLKPTR   EQU   BLKPDE
BLKFLAGS EQU   BLKPDE+6
ABLKPDE  EQU   ALLOCPDL+112+4                                      @26C
ABLKPTR  EQU   ABLKPDE
ABLKFLG  EQU   ABLKPDE+6
SPACPDE  EQU   ALLOCPDL+120+4                                      @26C
SPACEPTR EQU   SPACPDE
SPACEFLG EQU   SPACPDE+6
SPACPDE2 EQU   ALLOCPDL+128+4                                      @26C
SPACPTR2 EQU   SPACPDE2
SPACFLG2 EQU   SPACPDE2+6
DIRECPDE EQU   ALLOCPDL+136+4                                      @26C
DIRPTR   EQU   DIRECPDE
DIRFLAGS EQU   DIRECPDE+6
ATTRPDE  EQU   ALLOCPDL+144+4                                      @26C
ATTRPTR  EQU   ATTRPDE
ATTRFLAG EQU   ATTRPDE+6
USIDPDE  EQU   ALLOCPDL+152+4                                      @26C
USIDPTR  EQU   USIDPDE
USIDFLAG EQU   USIDPDE+6
UTYPPDE  EQU   ALLOCPDL+160+4                                      @26C
UTYPPTR  EQU   UTYPPDE
UTYPFLAG EQU   UTYPPDE+6
UNCNTPDE EQU   ALLOCPDL+168+4                                      @26C
UCNTPTR  EQU   UNCNTPDE
UCNTFLAG EQU   UNCNTPDE+6
POSTPDE  EQU   ALLOCPDL+180+4                                      @26C
POSPTR   EQU   POSTPDE
POSFLAG  EQU   POSTPDE+6
MXVOLPDE EQU   ALLOCPDL+188+4                                      @26C
MXVOLPTR EQU   MXVOLPDE
MXVOLFLG EQU   MXVOLPDE+6
VOLSQPDE EQU   ALLOCPDL+196+4                                      @26C
VOLSQPTR EQU   VOLSQPDE
VOLSQFLG EQU   VOLSQPDE+6
MSVGPDE  EQU   ALLOCPDL+204+4                                      @26C
MSVGPTR  EQU   MSVGPDE
MSVGFLG  EQU   MSVGPDE+6
DSNBUF   EQU   0
DSNTERM  EQU   DSNBUF
CPPL     EQU   0
CPPLUPT  EQU   CPPL+4
CPPLPSCB EQU   CPPL+8
CPPLECT  EQU   CPPL+12
PPL      EQU   0
PPLPCL   EQU   PPL+12
DSNPDE1  EQU   0
DSNAMPDE EQU   DSNPDE1+8
DSNPTR1  EQU   DSNAMPDE
DSNFLG1  EQU   DSNAMPDE+6
MBRPTR1  EQU   DSNAMPDE+8
MBRFLG1  EQU   DSNAMPDE+14
MBRPRES1 EQU   MBRFLG1
PSWDPTR1 EQU   DSNAMPDE+16
@NM00013 EQU   DSNAMPDE+22
ADDRLST2 EQU   0
PDEEXT   EQU   0
DAPL     EQU   0
DAPLUPT  EQU   DAPL
DAPLECT  EQU   DAPL+4
DAPLECB  EQU   DAPL+8
DAPLPSCB EQU   DAPL+12
DAPLDAPB EQU   DAPL+16
DFID     EQU   0
@NM00017 EQU   DFID
DAPB04   EQU   0
DA04CD   EQU   DAPB04
DA04FLG  EQU   DAPB04+2
DA04CAT  EQU   DA04FLG
DA04DSE  EQU   DA04FLG
DA04CTRC EQU   DAPB04+6
DA04PDSN EQU   DAPB04+8
DA04CTL  EQU   DAPB04+12
TEXTRET  EQU   0
TUDSN    EQU   TEXTRET+8
TUMBR    EQU   TEXTRET+12
TUPSWD   EQU   TEXTRET+16
TUPSWDND EQU   TUPSWD
KEYLIST  EQU   0
TEXTCORE EQU   0
ADDNUM   EQU   TEXTCORE
ADDTEXT  EQU   TEXTCORE+4
ADLTEXT  EQU   0
ADLKEY   EQU   ADLTEXT
ADLNBR   EQU   ADLTEXT+2
ADLLEN   EQU   ADLTEXT+4
GTPL     EQU   0
GTPLPDL  EQU   GTPL
GTPLPCL  EQU   GTPL+4
GTPLKLST EQU   GTPL+8
GTPLTBLE EQU   GTPL+12
GTPLABLK EQU   GTPL+16
GTPLOUTA EQU   GTPL+20
S99RB    EQU   0
S99FLAG1 EQU   S99RB+2
S99FLG11 EQU   S99FLAG1
S99RSC   EQU   S99RB+4
S99ERROR EQU   S99RSC
S99TXTPP EQU   S99RB+8
S99FLAG2 EQU   S99RB+16
S99FLG21 EQU   S99FLAG2
S99FLG22 EQU   S99FLAG2+1
S99TUPL  EQU   0
S99TUPTR EQU   S99TUPL
S99TUP   EQU   0
S99TUNIT EQU   0
S99TUENT EQU   S99TUNIT+4
S99TUFLD EQU   0
ABLKBUF  EQU   0
ATTRBUF  EQU   0
BLKBUF   EQU   0
BUFRDSN  EQU   0
BUFRMBR  EQU   0
BUFRPASS EQU   0
CLASSBUF EQU   0
DDNBUF   EQU   0
DFMSGWTP EQU   0
DFRC     EQU   0
DIRBUF   EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
MBRBUF   EQU   0
MSVGBUF  EQU   0
MXVOLBUF EQU   0
PASSBUF  EQU   0
POSTBUF  EQU   0
SERBUF   EQU   0
SPACBUF2 EQU   0
SPACEBUF EQU   0
UCNTBUF  EQU   0
USIDBUF  EQU   0
UTYPBUF  EQU   0
VSEQBUF  EQU   0
INPARMS  EQU   0
*                                      START UNREFERENCED COMPONENTS
S99TUPRM EQU   S99TUFLD+2
S99TULEN EQU   S99TUFLD
S99TUPAR EQU   S99TUENT+2
S99TULNG EQU   S99TUENT
S99TUNUM EQU   S99TUNIT+2
S99TUKEY EQU   S99TUNIT
S99TUPND EQU   S99TUP
S99TUPLN EQU   S99TUPTR
S99FLG24 EQU   S99FLAG2+3
S99FLG23 EQU   S99FLAG2+2
S99PCINT EQU   S99FLG22
S99UDEVT EQU   S99FLG22
S99MOUNT EQU   S99FLG21
S99CATLG EQU   S99FLG21
S99TIONQ EQU   S99FLG21
S99OFFLN EQU   S99FLG21
S99WTUNT EQU   S99FLG21
S99NORES EQU   S99FLG21
S99WTDSN EQU   S99FLG21
S99WTVOL EQU   S99FLG21
S99RSV01 EQU   S99RB+12
S99INFO  EQU   S99RSC+2
S99FLG12 EQU   S99FLAG1+1
S99JBSYS EQU   S99FLG11
S99NOMNT EQU   S99FLG11
S99NOCNV EQU   S99FLG11
S99ONCNV EQU   S99FLG11
S99VERB  EQU   S99RB+1
S99RBLN  EQU   S99RB
ADLPARM  EQU   ADLTEXT+6
ADDUNIT  EQU   TEXTCORE+36
@NM00034 EQU   TEXTCORE+2
TURTDSO  EQU   TEXTRET+100
TURTDDN  EQU   TEXTRET+96
TUDISP   EQU   TEXTRET+92
TURND    EQU   TEXTRET+88
TURLSE   EQU   TEXTRET+84
TUVSEQ   EQU   TEXTRET+80
TUPRIV   EQU   TEXTRET+76
TUMAXV   EQU   TEXTRET+72
TUPOS    EQU   TEXTRET+68
TULABL   EQU   TEXTRET+64
TUUCNT   EQU   TEXTRET+60
TUUNIT   EQU   TEXTRET+56
TUHOLD   EQU   TEXTRET+52
TUDEST   EQU   TEXTRET+48
TUUSING  EQU   TEXTRET+44
TUDIR    EQU   TEXTRET+40
TUSPACE  EQU   TEXTRET+36
TUBLOK   EQU   TEXTRET+32
TUVOL    EQU   TEXTRET+28
TUSTATS  EQU   TEXTRET+24
TUFILE   EQU   TEXTRET+20
ENTRYNBR EQU   TEXTRET+4
SBPLSIZE EQU   TEXTRET
DA04DSO  EQU   DAPB04+15
@NM00033 EQU   DAPB04+13
@NM00032 EQU   DA04CTL
@NM00031 EQU   DA04CTL
@NM00030 EQU   DA04CTL
@NM00029 EQU   DA04CTL
@NM00028 EQU   DA04CTL
DA04UID  EQU   DA04CTL
@NM00027 EQU   DA04CTL
@NM00026 EQU   DA04CTL
@NM00025 EQU   DAPB04+4
@NM00024 EQU   DA04FLG
@NM00023 EQU   DA04FLG
@NM00022 EQU   DA04FLG
@NM00021 EQU   DA04FLG
@NM00020 EQU   DA04FLG
@NM00019 EQU   DA04FLG
IDNUM    EQU   DFID+1
@NM00018 EQU   @NM00017
DFWTP    EQU   @NM00017
@NM00016 EQU   DSNAMPDE+24
@NM00015 EQU   DSNAMPDE+23
@NM00014 EQU   @NM00013
PSWDPRS1 EQU   @NM00013
PSWDLEN1 EQU   DSNAMPDE+20
@NM00012 EQU   DSNAMPDE+15
@NM00011 EQU   MBRFLG1
MBRLEN1  EQU   DSNAMPDE+12
@NM00010 EQU   DSNAMPDE+7
@NM00009 EQU   DSNFLG1
QUALIF   EQU   DSNFLG1
ONPRESDS EQU   DSNFLG1
DSNLEN1  EQU   DSNAMPDE+4
@NM00008 EQU   DSNPDE1+4
@NM00007 EQU   DSNPDE1
PPLUWA   EQU   PPL+24
PPLCBUF  EQU   PPL+20
PPLANS   EQU   PPL+16
PPLECB   EQU   PPL+8
PPLECT   EQU   PPL+4
PPLUPT   EQU   PPL
CPPLCBUF EQU   CPPL
MSVGRSV2 EQU   MSVGPDE+7
MSVGRSV1 EQU   MSVGFLG
MSVGPRES EQU   MSVGFLG
MSVGLEN  EQU   MSVGPDE+4
VOLRSV2  EQU   VOLSQPDE+7
VOLRSV1  EQU   VOLSQFLG
VOLPRES  EQU   VOLSQFLG
VOLSQLEN EQU   VOLSQPDE+4
MXVRSV2  EQU   MXVOLPDE+7
MXVRSV1  EQU   MXVOLFLG
MXVPRES  EQU   MXVOLFLG
MXVOLLEN EQU   MXVOLPDE+4
POSRSV2  EQU   POSTPDE+7
POSRSV1  EQU   POSFLAG
POSPRES  EQU   POSFLAG
POSLEN   EQU   POSTPDE+4
LABLRSV1 EQU   ALLOCPDL+178+4                                      @26C
LABELPDE EQU   ALLOCPDL+176+4                                      @26C
UCNTRSV2 EQU   UNCNTPDE+7
UCNTRSV1 EQU   UCNTFLAG
UCNTPRES EQU   UCNTFLAG
UCNTLEN  EQU   UNCNTPDE+4
UTYPRSV2 EQU   UTYPPDE+7
UTYPRSV1 EQU   UTYPFLAG
UTYPPRES EQU   UTYPFLAG
UTYPLEN  EQU   UTYPPDE+4
USIDRSV2 EQU   USIDPDE+7
USIDRSV1 EQU   USIDFLAG
USIDPRES EQU   USIDFLAG
USIDLEN  EQU   USIDPDE+4
ATTRRSV2 EQU   ATTRPDE+7
ATTRRSV1 EQU   ATTRFLAG
ATTRPRES EQU   ATTRFLAG
ATTRLEN  EQU   ATTRPDE+4
DIRRSV2  EQU   DIRECPDE+7
DIRRSV1  EQU   DIRFLAGS
DIRPRES  EQU   DIRFLAGS
DIRLEN   EQU   DIRECPDE+4
SPCRSV22 EQU   SPACPDE2+7
SPCRSV12 EQU   SPACFLG2
SPCPRES2 EQU   SPACFLG2
SPACLEN2 EQU   SPACPDE2+4
SPACRSV2 EQU   SPACPDE+7
SPACRSV1 EQU   SPACEFLG
SPACPRES EQU   SPACEFLG
SPACELEN EQU   SPACPDE+4
ABLKRSV2 EQU   ABLKPDE+7
ABLKRSV1 EQU   ABLKFLG
ABLKPRES EQU   ABLKFLG
ABLKLEN  EQU   ABLKPDE+4
BLKRSV2  EQU   BLKPDE+7
BLKRSV1  EQU   BLKFLAGS
BLKPRES  EQU   BLKFLAGS
BLKLEN   EQU   BLKPDE+4
SERNEXT  EQU   SERPDE+8
SERRSV2  EQU   SERPDE+7
SERRSV1  EQU   SERFLAGS
SERPRES  EQU   SERFLAGS
SERLEN   EQU   SERPDE+4
CLASRSV2 EQU   CLASPDE+7
CLASRSV1 EQU   CLASFLG
CLASLEN  EQU   CLASPDE+4
DDNRSV2  EQU   DDNMEPDE+7
DDNRSV1  EQU   DDNFLAGS
DDNPRES  EQU   DDNFLAGS
DDNLEN   EQU   DDNMEPDE+4
DSNNEXT  EQU   DSNPDE+24
PASSRSV2 EQU   DSNPDE+23
PASSRSV1 EQU   PASSFLAG
PASSPRES EQU   PASSFLAG
PASSLEN  EQU   DSNPDE+20
MBRRSV2  EQU   DSNPDE+15
MBRRSV1  EQU   MBRFLAGS
MBRPRES  EQU   MBRFLAGS
MBRLEN   EQU   DSNPDE+12
DSNRSV2  EQU   DSNPDE+7
DSNRSV1  EQU   DSNFLAGS
DSNQUOT  EQU   DSNFLAGS
RNDPDE   EQU   ALLOCPDL+44
RLSEPDE  EQU   ALLOCPDL+42
VSEQPDE  EQU   ALLOCPDL+40
PRIVPDE  EQU   ALLOCPDL+38
MAXVPDE  EQU   ALLOCPDL+36
POSPDE   EQU   ALLOCPDL+34
LABLPDE  EQU   ALLOCPDL+32
UCNTPDE  EQU   ALLOCPDL+30
UNITPDE  EQU   ALLOCPDL+28
DESTPDE  EQU   ALLOCPDL+24
USINGPDE EQU   ALLOCPDL+22
DIRPDE   EQU   ALLOCPDL+20
FILEPDE  EQU   ALLOCPDL+10
@NM00006 EQU   ALLOCPDL+4
@NM00005 EQU   ALLOCPDL
FIRSTPTR EQU   ALLOCWA+176
NBLKBUF1 EQU   ALLOCWA+164
PDLADDR3 EQU   ALLOCWA+156
PPLTWO   EQU   ALLOCWA+128
CMDTWOBF EQU   CMDTWO+4
CMDTWOOF EQU   CMDTWO+2
CMDTWOLN EQU   CMDTWO
Q        EQU   ALLOCWA+56
P        EQU   ALLOCWA+52
MSGPTR   EQU   ALLOCWA+48
PRCODE   EQU   ALLOCWA+44
@NM00004 EQU   ALLOCWA+38
NCLASBUF EQU   ALLOCWA+37
@NM00003 EQU   VCFLAGS
SPACE2   EQU   VCFLAGS
SPACE1   EQU   VCFLAGS
AVBLK    EQU   VCFLAGS
PTRMSGS  EQU   ALLOCWA+32
DSNCTR   EQU   ALLOCWA+30
VLISTCTR EQU   ALLOCWA+28
@NM00002 EQU   SWITCH2
@NM00001 EQU   SWITCH2
FIRSTPDE EQU   SWITCH
ASTRSK   EQU   SWITCH
TERMOPT  EQU   SWITCH
PROMPT   EQU   SWITCH
*                                      END UNREFERENCED COMPONENTS
@RC00110 EQU   @EL00001
@RF00134 EQU   @EL00002
@RF00141 EQU   @EL00002
@RF00144 EQU   @EL00002
@RC00146 EQU   @EL00002
@RF00188 EQU   @EL00003
@RF00191 EQU   @EL00003
@RC00193 EQU   @EL00003
@RF00228 EQU   @EL00004
@RF00243 EQU   @EL00004
@RF00246 EQU   @EL00004
@RC00248 EQU   @EL00004
@RF00281 EQU   @EL00005
@RF00285 EQU   @EL00005
@RF00288 EQU   @EL00005
@RC00290 EQU   @EL00005
@RF00318 EQU   @EL00006
@RF00332 EQU   @EL00006
@RF00359 EQU   @EL00006
@RC00394 EQU   @EL00007
@RC00406 EQU   @EL00007
@RF00433 EQU   @EL00008
@RF00449 EQU   @EL00008
@RF00460 EQU   @EL00008
@RC00467 EQU   @EL00008
@RC00462 EQU   @EL00008
@RT00528 EQU   DSNAD1
@RC00497 EQU   @EL00009
@RC00548 EQU   @EL00010
@RF00559 EQU   @EL00010
@RC00590 EQU   @EL00011
@RF00398 EQU   @RC00394
@RC00400 EQU   @RC00394
@RF00473 EQU   @RC00467
@RC00550 EQU   @RC00548
@EL01    EQU   @EL00001
@ENDDATA EQU   *
*   END IKJEFD32                                                   0610
*                                                                  0610
         PRINT NOGEN
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IKJZT430)                                       */
*/*%INCLUDE SYSLIB  (IKJCPPL )                                       */
*/*%INCLUDE SYSLIB  (IKJPPL  )                                       */
*/*%INCLUDE SYSLIB  (IKJDAPL )                                       */
*/*%INCLUDE SYSLIB  (IKJEFFDF)                                       */
*/*%INCLUDE SYSLIB  (IKJDAP04)                                       */
*/*%INCLUDE SYSLIB  (IKJZB831)                                       */
*/*%INCLUDE SYSLIB  (IEFZB4D0)                                       */
*/*%INCLUDE SYSLIB  (IEFZB4D2)                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*                                                                  0610
         CVT   DSECT=YES
*       ;                                                          0610
         END   IKJEFD32,(C'PLS1647',0702,83336)
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
  IDENTIFY IKJEFD32('ZP60026')
++MOD(IKJEFD33) DISTLIB(AOST4).
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT)'
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE 'ALLOCATE SPACE PROCESSOR                               *
                        '
***********************************************************************
*  $26   ZP60026  2010-01-23 GREG PRICE: ADD 'REUSE' OPERAND.         *
*                            CHANGES APPLIED TO UZ58132 LEVEL.        *
***********************************************************************
IKJEFD33 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(33)                                             @26C
         DC    C'IKJEFD33  82.173'                                 0001
         DC    CL17' ZP60026 2010.023'                             @26A
         DROP  R15
@PROLOG  STM   R14,R12,12(R13)                                     0001
         BALR  R12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,R12                                         0001
         L     R0,@SIZDATD                                         0001
         GETMAIN  R,LV=(0)
         LR    R11,R1                                              0001
         USING @DATD,R11                                           0001
         ST    R13,@SA00001+4                                      0001
         LM    R0,R1,20(R13)                                       0001
         ST    R11,8(,R13)                                         0001
         LR    R13,R11                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
         MVC   @PC00001(4),0(R1)                                   0001
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      SPACERTE                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE HANDLES ALL SPACE PARAMETERS (SPACE, SPACE     */
*/*      INCREMENT, BLOCK, AVBLOCK, TRACKS, CYLINDERS, AND DIR).     */
*/*      PROMPTING AND BUILDING TEXT UNITS IS DONE WHERE NECESSARY.  */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      IF BLOCK ENTERED, AND USING NOT, BUILD TEXT UNIT FOR DCB    */
*/*      PARAMETER BLOCKSIZE. IF BLOCK IS ENTERED AND SPACE IS NOT,  */
*/*      MARK BLOCK NOT ENTERED - TO BE USED ONLY AS DCB BLOCKSIZE.  */
*/*      IF BLOCK IS ENTERED, AND SPACE IS ENTERED, INVOKE SPCTEXT   */
*/*      TO PROCESS SPACE. IF BLOCK NOT ENTERED, BUT AVBLOCK, TRACKS */
*/*      OR CYLINDERS IS ENTERED AND SPACE IS ENTERED, INVOKE        */
*/*      SPCTEXT TO PROCESS SPACE. IF SPACE IS NOT ENTERED, PROMPT   */
*/*      FOR SPACE PARAMETER. IF NEITHER OF THE BLOCK, AVBLOCK,      */
*/*      TRACKS OR CYLINDERS IS ENTERED, AND SPACE IS ENTERED,       */
*/*      PROMPT FOR BLOCK PARAMETER AND REPEAT ABOVE PROCESS. IF     */
*/*      DIR IS NOT ENTERED AND A MEMBER NAME IS SPECIFIED, PROMPT   */
*/*      FOR DIR VALUE.                                              */
*/*      IF RLSE OR ROUND ARE ENTERED BUT SPACE AND UNIT OF  @ZA08703*/
*/*      SPACE WERE NOT ENTERED SPACE AND UNIT OF SPACE WILL @ZA08703*/
*/*      BE DEFAULTED.                                       @ZA08703*/
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO SPACE PDE                                            */
*/*      PTR TO USING PDE                                            */
*/*      PTR TO DSNAME PDE                                           */
*/*      PTR TO BLOCK/AVBLOCK/TRACKS/CYLINDERS PDE                   */
*/*      PTR TO DIR PDE                                              */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      NECESSARY PROMPTING DONE                                    */
*/*      TEXT UNITS BUILT WHERE NEEDED                               */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*    SPACERTE:                                                     0061
*        AWAPTR = R1;                  /* PTR TO WORKAREA            */
SPACERTE LR    R3AWAPTR,R1                                         0061
*        CNVRTYPE = '00'X;             /* INITIALIZE FLAGS           */
         MVI   CNVRTYPE,X'00'                                      0062
*        INC = ADDNUM + 1;             /* INITIALIZE SUBSCRIPT       */
         L     R10,GTPLPTR(,R3AWAPTR)                              0063
         L     R10,GTPLABLK(,R10)                                  0063
         LA    R4INC,1                                             0063
         AH    R4INC,ADDNUM(,R10)                                  0063
*        IF DIRPDE = 0 THEN            /* IF DIR NOT ENTERED,        */
         L     R10,PTRPDL(,R3AWAPTR)                               0064
         LH    R2,DIRPDE(,R10)                                     0064
         LTR   R2,R2                                               0064
         BNZ   @RF00064                                            0064
*          DO;                         /* AND                        */
*            IF MBRPRES = '1'B &       /* IF MEMBER SPEC AND @OZ05962*/
*              DSEXISTS = '0'B THEN   /* DATA SET NEW       @OZ05962*/
         TM    MBRPRES(R10),B'10000000'                            0066
         BNO   @RF00066                                            0066
         TM    DSEXISTS(R3AWAPTR),B'00100000'                      0066
         BNZ   @RF00066                                            0066
*              CALL PRMPTDIR;          /* POINT FOR DIRECTORY        */
         BAL   R14,PRMPTDIR                                        0067
*          END;                                                    0068
@RF00066 DS    0H                                                  0069
*        DO WHILE (CONT ='0'B);        /* CHECK CONTROL SWITCH       */
@RF00064 B     @DE00069                                            0069
@DL00069 DS    0H                                                  0070
*        IF BLOKPDE = 1 THEN           /* IF BLOCK ENTERED,          */
         L     R10,PTRPDL(,R3AWAPTR)                               0070
         CLC   BLOKPDE(2,R10),@HW1                                 0070
         BNE   @RF00070                                            0070
*          DO;                                                     0071
*            CONT= '1'B;               /* INDICATE TO EXIT DO-WHILE  */
         OI    CONT(R3AWAPTR),B'00010000'                          0072
*            IF USINGPDE = 0 THEN      /* IF USING NOT ENTERED,      */
         LH    R10,USINGPDE(,R10)                                  0073
         LTR   R10,R10                                             0073
         BNZ   @RF00073                                            0073
*              DO;                                                 0074
*                BLKCNVRT = '1'B;      /* INDICATE TO CONVERT BLOCK  */
         OI    BLKCNVRT,B'10000000'                                0075
*                CALL CONVERT;         /* INVOKE CONVERSION RTN      */
         BAL   R14,CONVERT                                         0076
*                CALL DCBTEXT;         /* SET UP DCB TEXT            */
         BAL   R14,DCBTEXT                                         0077
*              END;                                                0078
*            IF SPACEPDE = 0 & DIRPDE=0 THEN /* IF SPACE NOT       0079
*                                               ENTERED,     @YM06119*/
@RF00073 SLR   R10,R10                                             0079
         L     R2,PTRPDL(,R3AWAPTR)                                0079
         CH    R10,SPACEPDE(,R2)                                   0079
         BNE   @RF00079                                            0079
         CH    R10,DIRPDE(,R2)                                     0079
         BNE   @RF00079                                            0079
*              BLOKPDE = 0;            /* MARK BLOCK IGNORED         */
         STH   R10,BLOKPDE(,R2)                                    0080
*            ELSE                      /* IF SPACE ENTERED,          */
*              DO;                                   /*      @YM06119*/
         B     @RC00079                                            0081
@RF00079 DS    0H                                                  0082
*                IF SPACEPDE = 0 & DIRPDE = 1 THEN   /*      @YM06119*/
         L     R10,PTRPDL(,R3AWAPTR)                               0082
         LH    R2,SPACEPDE(,R10)                                   0082
         LTR   R2,R2                                               0082
         BNZ   @RF00082                                            0082
         CLC   DIRPDE(2,R10),@HW1                                  0082
         BNE   @RF00082                                            0082
*                  CALL PRMPTSPC;                    /*      @YM06119*/
         BAL   R14,PRMPTSPC                                        0083
*                CALL SPCTEXT;                       /*      @YM06119*/
@RF00082 BAL   R14,SPCTEXT                                         0084
*              END;                                  /*      @YM06119*/
*          END;                                                    0086
*        ELSE                                                      0087
*          DO;                         /* IF BLOCK NOT ENTERED,      */
         B     @RC00070                                            0087
@RF00070 DS    0H                                                  0088
*            IF BLOKPDE > 1 THEN       /* BUT AVBLOCK, TRK OR CYL    */
         LA    R10,1                                               0088
         L     R2,PTRPDL(,R3AWAPTR)                                0088
         CH    R10,BLOKPDE(,R2)                                    0088
         BNL   @RF00088                                            0088
*              DO;                     /* ENTERED,                   */
*                CONT = '1'B;          /* INDICATE TO EXIT DO-WHILE  */
         OI    CONT(R3AWAPTR),B'00010000'                          0090
*                IF SPACEPDE = 1 THEN  /* IF SPACE ENTERED,          */
         CH    R10,SPACEPDE(,R2)                                   0091
         BNE   @RF00091                                            0091
*                  CALL SPCTEXT;       /* GO TO PROCESS              */
         BAL   R14,SPCTEXT                                         0092
*                ELSE                  /* IF SPACE NOT ENTERED,      */
*                  DO;                 /* THEN                       */
         B     @RC00091                                            0093
@RF00091 DS    0H                                                  0094
*                    CALL PRMPTSPC;    /* PROMPT FOR SPACE VALUE     */
         BAL   R14,PRMPTSPC                                        0094
*                    IF RBCODE12 = '0'B THEN                       0095
         TM    RBCODE12(R3AWAPTR),B'10000000'                      0095
         BNZ   @RF00095                                            0095
*                      CALL SPCTEXT;   /* PROCESS SPACE PARMS        */
         BAL   R14,SPCTEXT                                         0096
*                  END;                                            0097
*              END;                                                0098
*            ELSE                      /* IF NEITHER BLOCK,AVBLOCK,  */
*              DO;                     /* TRK OR CYL ENTERED,        */
         B     @RC00088                                            0099
@RF00088 DS    0H                                                  0100
*                IF SPACEPDE = 1 | DIRPDE=1 THEN /* AND SPACE IS   0100
*                                                   ENTERED, @YM06119*/
         LA    R10,1                                               0100
         L     R2,PTRPDL(,R3AWAPTR)                                0100
         CH    R10,SPACEPDE(,R2)                                   0100
         BE    @RT00100                                            0100
         CH    R10,DIRPDE(,R2)                                     0100
         BNE   @RF00100                                            0100
@RT00100 DS    0H                                                  0101
*                  DO;                                             0101
*                  CALL PRMPTBLK;      /* PROMPT FOR BLOCK PARM      */
         BAL   R14,PRMPTBLK                                        0102
*                  IF RBCODE12 = '1'B THEN                         0103
         TM    RBCODE12(R3AWAPTR),B'10000000'                      0103
         BNO   @RF00103                                            0103
*                    CONT = '1'B;                                  0104
         OI    CONT(R3AWAPTR),B'00010000'                          0104
*                  END;                                            0105
*                ELSE                  /* OTHERWISE,                 */
*                  IF RLSEPDE ^= 0 |   /* IF ANY OTHER SPACE @ZA08703*/
*                     RNDPDE ^= 0      /* TYPE INFO SPECIFIED@ZA08703*/
*                    THEN              /* SPACE AND UNIT OF  @ZA08703*/
         B     @RC00100                                            0106
@RF00100 SLR   R10,R10                                             0106
         L     R2,PTRPDL(,R3AWAPTR)                                0106
         CH    R10,RLSEPDE(,R2)                                    0106
         BNE   @RT00106                                            0106
         CH    R10,RNDPDE(,R2)                                     0106
         BE    @RF00106                                            0106
@RT00106 DS    0H                                                  0107
*                      CALL SPCDEFLT;  /* SPACE GET DEFAULTED@ZA08703*/
         BAL   R14,SPCDEFLT                                        0107
*                    ELSE              /* OTHERWISE          @ZA08703*/
*                      CONT = '1'B;    /* GET OUT OF LOOP    @ZA08703*/
         B     @RC00106                                            0108
@RF00106 OI    CONT(R3AWAPTR),B'00010000'                          0108
*              END;                                                0109
@RC00106 DS    0H                                                  0109
@RC00100 DS    0H                                                  0110
*          END;                                                    0110
@RC00088 DS    0H                                                  0111
*        END;                          /* END DO-WHILE               */
@RC00070 DS    0H                                                  0111
@DE00069 TM    CONT(R3AWAPTR),B'00010000'                          0111
         BZ    @DL00069                                            0111
*        RETURN;                                                   0112
@EL00001 L     R13,4(,R13)                                         0112
@EF00001 L     R0,@SIZDATD                                         0112
         LR    R1,R11                                              0112
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    R14,R12,12(R13)                                     0112
         BR    R14                                                 0112
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      SPCTEXT                                                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE CONVERTS THE PRIMARY AND SECONDARY SPACE       */
*/*      PARAMETERS TO BINARY, AND BUILDS THE TEXT UNITS FOR SPACE.  */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE PRIMARY SPACE QUANTITY IS CONVERTED TO BINARY. THE TEXT */
*/*      UNIT IS BUILT. IF A SECONDARY SPACE VALUE IS SPECIFIED, IT  */
*/*      IS CONVERTED TO BINARY. THE TEXT UNIT IS BUILT. THE SPACE   */
*/*      PDE IS MARKED NOT ENTERED - SO THAT GENTRANS WILL NOT TRY   */
*/*      TO TRANSLATE IT.                                            */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      SPACE PDE                                                   */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      SPACE TEXT UNITS IN LIST                                    */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/*                                                                  */
*/*        THE GENTRANS ROUTINE CANNOT HANDLE THE SPACE PARAMETER    */
*/*        BECAUSE OF THE FORMAT - A KEYWORD WITH A SUBFIELD LIST,   */
*/*        WHERE EACH ELEMENT IN THE LIST HAS A DIFFERENT KEY.  IF   */
*/*        THE FORMAT CHANGES, OR GENTRANS CHANGES, THESE TEXT UNITS */
*/*        MAY BE HANDLED BY GENTRANS.                               */
*/********************************************************************/
*    SPCTEXT: PROC;                                                0113
SPCTEXT  STM   R14,R3,@SA00002                                     0113
         STM   R6,R12,@SA00002+24                                  0113
*        SPCCNVRT = '1'B;              /* INDICATE TO CONVERT SPACE  */
         OI    SPCCNVRT,B'01000000'                                0114
*        CALL CONVERT;                 /* INVOKE CONVERSION RTN      */
         BAL   R14,CONVERT                                         0115
*        ADDNUM = ADDNUM + 1;          /* INCREMENT TEXT COUNTER     */
         L     R10,GTPLPTR(,R3AWAPTR)                              0116
         L     R10,GTPLABLK(,R10)                                  0116
         LA    R2,1                                                0116
         LH    R15,ADDNUM(,R10)                                    0116
         ALR   R15,R2                                              0116
         STH   R15,ADDNUM(,R10)                                    0116
*        ADLKEY = DALPRIME;            /* SET KEY,                   */
         L     R15,TXT(,R3AWAPTR)                                  0117
         MVC   ADLKEY(2,R15),@HWPRIME                              0117
*        ADLNBR = 1;                   /* NUMBER,                    */
         STH   R2,ADLNBR(,R15)                                     0118
*        ADLLEN = 3;                   /* LENGTH AND PARM IN TEXT    */
         LA    R14,3                                               0119
         STH   R14,ADLLEN(,R15)                                    0119
*        ADLPARM(1:ADLLEN)=SAVPARM(2:4);                           0120
         LR    R9,R14                                              0120
         BCTR  R9,0                                                0120
         EX    R9,@SM00677                                         0120
*        ADDTEXT(INC) = TXT;           /* PTR TO TEXT IN LIST        */
         LR    R9,R4INC                                            0121
         SLA   R9,2                                                0121
         ST    R15,ADDTEXT-4(R9,R10)                               0121
*        TXT=TXT+6 + ADLLEN;           /* INCREMNT TEXT PTR          */
         AL    R15,@FW6                                            0122
         ALR   R15,R14                                             0122
         ST    R15,TXT(,R3AWAPTR)                                  0122
*        INC=INC+1;                    /* INCREMENT SUBSCRIPT        */
         ALR   R4INC,R2                                            0123
*        IF SPCPRES2 = '1'B THEN       /* IF SECONDARY SPACE ENTERED */
         L     R10,PTRPDL(,R3AWAPTR)                               0124
         TM    SPCPRES2(R10),B'10000000'                           0124
         BNO   @RF00124                                            0124
*          DO;                                                     0125
*            INCCNVRT = '1'B;          /* INDICATE TO CONVERT SECND  */
         OI    INCCNVRT,B'00100000'                                0126
*            CALL CONVERT;             /* INVOKE CONVERSION RTN      */
         BAL   R14,CONVERT                                         0127
*            ADDNUM = ADDNUM + 1;      /* INCREMENT TEXT COUNTER     */
         L     R10,GTPLPTR(,R3AWAPTR)                              0128
         L     R10,GTPLABLK(,R10)                                  0128
         LA    R2,1                                                0128
         LH    R15,ADDNUM(,R10)                                    0128
         ALR   R15,R2                                              0128
         STH   R15,ADDNUM(,R10)                                    0128
*            ADLKEY = DALSECND;        /* SET KEY,                   */
         L     R15,TXT(,R3AWAPTR)                                  0129
         MVC   ADLKEY(2,R15),@HWSECND                              0129
*            ADLNBR = 1;               /* NUMBER,                    */
         STH   R2,ADLNBR(,R15)                                     0130
*            ADLLEN = 3;               /* LENGTH AND PARM IN TEXT    */
         LA    R14,3                                               0131
         STH   R14,ADLLEN(,R15)                                    0131
*            ADLPARM(1:ADLLEN)=SAVPARM(2:4);                       0132
         LR    R9,R14                                              0132
         BCTR  R9,0                                                0132
         EX    R9,@SM00677                                         0132
*            ADDTEXT(INC)= TXT;        /* PTR TO TEXT IN LIST        */
         LR    R9,R4INC                                            0133
         SLA   R9,2                                                0133
         ST    R15,ADDTEXT-4(R9,R10)                               0133
*            TXT=TXT+6 + ADLLEN;       /* INCREMENT TEXT PTR         */
         AL    R15,@FW6                                            0134
         ALR   R15,R14                                             0134
         ST    R15,TXT(,R3AWAPTR)                                  0134
*            INC=INC+1;                /* INCREMENT SUBSCRIPT        */
         ALR   R4INC,R2                                            0135
*          END;                                                    0136
*        SPACEPDE = 0;                 /* MARK SPACE NOT ENTERED     */
@RF00124 L     R10,PTRPDL(,R3AWAPTR)                               0137
         SLR   R2,R2                                               0137
         STH   R2,SPACEPDE(,R10)                                   0137
* END SPCTEXT;                                                     0138
@EL00002 DS    0H                                                  0138
@EF00002 DS    0H                                                  0138
@ER00002 LM    R14,R3,@SA00002                                     0138
         LM    R6,R12,@SA00002+24                                  0138
         BR    R14                                                 0138
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      CONVERT                                                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE CONVERTS THE NUMERIC VALUES FOR BLOCK, SPACE   */
*/*      AND SPACE INCREMNT TO BINARY.                               */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE PACK AREA IS CLEARED. DETERMINE THE PARAMETER TO BE     */
*/*      CONVERTED, AND SAVE THE APPROPRIATE LENGTH AND VALUE.       */
*/*      PERFORM THE CONVERSION AND SAVE THE RESULTS.                */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO SPACE PDE                                            */
*/*      PTR TO BLOCK PDE                                            */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      NUMERIC VALUE CONVERTED TO BINARY                           */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*    CONVERT:  PROC;                                               0139
CONVERT  STM   R14,R4,@SA00003                                     0139
         STM   R6,R12,@SA00003+28                                  0139
*        PKAREA(1) = 'F0'X;            /* FIRST BYTE SET TO F0       */
         MVI   PKAREA,X'F0'                                        0140
*        P = ADDR(PKAREA(1));          /* POINT TO FIRST BYTE        */
         LA    R10,PKAREA                                          0141
         ST    R10,P(,R3AWAPTR)                                    0141
*        Q = ADDR(PKAREA(2));          /* POINT TO SECOND BYTE       */
         LA    R4,PKAREA+1                                         0142
         ST    R4,Q(,R3AWAPTR)                                     0142
*        Q -> AREA1 = P -> AREA2;      /* SET PACKAREA TO ALL F0     */
         MVC   AREA1(15,R4),AREA2(R10)                             0143
*        IF BLKCNVRT = '1'B THEN       /* IF BLOCK TO BE CONVERTED,  */
         TM    BLKCNVRT,B'10000000'                                0144
         BNO   @RF00144                                            0144
*          DO;                                                     0145
*            VALLEN = BLKLEN;          /* SAVE BLOCK LENGTH AND      */
         L     R10,PTRPDL(,R3AWAPTR)                               0146
         LH    R5VALLEN,BLKLEN(,R10)                               0146
*            VALBUF = BLKBUF;          /* BLOCK BUFFER               */
         L     R10,BLKPTR(,R10)                                    0147
         MVC   VALBUF(8),BLKBUF(R10)                               0147
*          END;                                                    0148
*        ELSE                                                      0149
*          IF SPCCNVRT = '1'B THEN     /* IF SPACE TO BE CONVERTED   */
         B     @RC00144                                            0149
@RF00144 TM    SPCCNVRT,B'01000000'                                0149
         BNO   @RF00149                                            0149
*            DO;                                                   0150
*              VALLEN = SPACELEN;      /* SAVE SPACE LENGTH AND      */
         L     R10,PTRPDL(,R3AWAPTR)                               0151
         LH    R5VALLEN,SPACELEN(,R10)                             0151
*              VALBUF = SPACEBUF;      /* SPACE BUFFER               */
         LR    R4,R5VALLEN             COPY LENGTH
         BCTR  R4,0                    DECREMENT FOR EXECUTE
         L     R10,SPACEPTR(,R10)                                  0152
****     MVC   VALBUF(8),SPACEBUF(R10)                             0152
         EX    R4,D33L0678
*            END;                                                  0153
*          ELSE                                                    0154
*            IF INCCNVRT = '1'B THEN   /* IF SECONDARY SPACE TO BE   */
         B     @RC00149                                            0154
@RF00149 TM    INCCNVRT,B'00100000'                                0154
         BNO   @RF00154                                            0154
*              DO;                     /* CONVERTED,                 */
*                VALLEN = SPACLEN2;    /* SAVE SEC SPACE LENGTH      */
         L     R10,PTRPDL(,R3AWAPTR)                               0156
         LH    R5VALLEN,SPACLEN2(,R10)                             0156
*                VALBUF = SPACBUF2;    /* AND SEC SPACE BUFFER       */
         LR    R4,R5VALLEN             COPY LENGTH
         BCTR  R4,0                    DECREMENT FOR EXECUTE
         L     R10,SPACPTR2(,R10)                                  0157
****     MVC   VALBUF(8),SPACBUF2(R10)                             0157
         EX    R4,D33L067E
*              END;                                                0158
*        RFY Y RSTD;                                               0159
@RF00154 DS    0H                                                  0159
@RC00149 DS    0H                                                  0159
@RC00144 DS    0H                                                  0160
*        Y = 8 - VALLEN + ADDR(PKAREA);/* POINT TO BUFFER POSITION   */
         LA    R8Y,8                                               0160
         SLR   R8Y,R5VALLEN                                        0160
         LA    R10,PKAREA                                          0160
         ALR   R8Y,R10                                             0160
*        PKAREA1(1:VALLEN)= VALBUF(1:VALLEN);/* MOVE PARM TO BUFFER  */
         LR    R10,R5VALLEN                                        0161
         BCTR  R10,0                                               0161
         EX    R10,@SM00680                                        0161
*        GENERATE REFS(CVBAREA);                                   0162
         PACK  CVBAREA(8),PKAREA(8)
         CVB   R8Y,CVBAREA
*        SAVPARM = Y;                  /* SAVE RESULT                */
         ST    R8Y,@TF00001                                        0163
         MVC   SAVPARM(4),@TF00001                                 0163
*        RFY Y UNRSTD;                                             0164
*        CNVRTYPE = '00'X;             /* CLEAR FLAG FIELD           */
         MVI   CNVRTYPE,X'00'                                      0165
*   END CONVERT;                                                   0166
@EL00003 DS    0H                                                  0166
@EF00003 DS    0H                                                  0166
@ER00003 LM    R14,R4,@SA00003                                     0166
         LM    R6,R12,@SA00003+28                                  0166
         BR    R14                                                 0166
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      DCBTEXT                                                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE SETS UP THE TEXT UNIT FOR DCB BLOCK SIZE.      */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE COUNTER FOR THE NUMBER OF ENTRIES IS INCREMENTED. THE   */
*/*      KEY, NUMBER, LENGTH, AND VALUE ARE PUT INTO THE TEXT. THE   */
*/*      ADDRESS OF THE TEXT IS PUT INTO THE ADDRESS LIST.           */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO VALUE                                                */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      TEXT UNIT BUILT                                             */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/*                                                                  */
*/*        THIS TEXT UNIT MUST BE SET UP SINCE THE BLOCK PARAMETER   */
*/*        NEEDS 2 KEYS - DCB BLOCK SIZE, AND AVERAGE RECORD LENGTH. */
*/*        GENTRANS CAN PROCESS THE KEY FOR AVERAGE RECORD LENGTH.   */
*/********************************************************************/
*    DCBTEXT:  PROC OPTIONS(NOSAVEAREA);                           0167
DCBTEXT  STM   R14,R3,12(R13)                                      0167
         STM   R5,R12,40(R13)                                      0167
*        ADDNUM = ADDNUM + 1;               /* INCREMENT ENTRY CTR   */
         L     R10,GTPLPTR(,R3AWAPTR)                              0168
         L     R10,GTPLABLK(,R10)                                  0168
         LA    R5,1                                                0168
         LH    R2,ADDNUM(,R10)                                     0168
         ALR   R2,R5                                               0168
         STH   R2,ADDNUM(,R10)                                     0168
*        ADLKEY = DALBLKSZ;                 /* PUT KEY,              */
         L     R2,TXT(,R3AWAPTR)                                   0169
         MVC   ADLKEY(2,R2),@HWBLKSZ                               0169
*        ADLNBR = 1;                        /* NUMBER,               */
         STH   R5,ADLNBR(,R2)                                      0170
*        ADLLEN = 2;                        /* LENGTH AND            */
         LA    R15,2                                               0171
         STH   R15,ADLLEN(,R2)                                     0171
*        ADLPARM(1:ADLLEN)=SAVPARM(3:4);    /* PARM INTO TEXT        */
         BCTR  R15,0                                               0172
         EX    R15,@SM00682                                        0172
*        ADDTEXT(INC) = TXT;                /* TEXT PTR IN LIST      */
         LR    R15,R4INC                                           0173
         SLA   R15,2                                               0173
         ST    R2,ADDTEXT-4(R15,R10)                               0173
*        TXT = TXT + 8;                     /* INCREMENT TEXT PTR    */
         AL    R2,@FW8                                             0174
         ST    R2,TXT(,R3AWAPTR)                                   0174
*        INC = INC + 1;                     /* INCREMENT SUBSCRIPT   */
         ALR   R4INC,R5                                            0175
*   END  DCBTEXT;                                                  0176
@EL00004 DS    0H                                                  0176
@EF00004 DS    0H                                                  0176
@ER00004 LM    R14,R3,12(R13)                                      0176
         LM    R5,R12,40(R13)                                      0176
         BR    R14                                                 0176
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      PRMPTSPC                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE REENTERS PARSE TO PROMPT FOR A SPACE VALUE     */
*/*      WHEN ONE HAS NOT BEEN ENTERED AND IS REQUIRED.              */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      INVOKE PARSE WITH A SECONDARY PCL AND PDL ADDRESS. IF PARSE */
*/*      FAILS, INVOKE PARSERR ROUTINE. ELSE, OVERLAY THE ORIGINAL   */
*/*      PDE WITH THE PDE ROTURNED FORM THE PROMPT. RELEASE THE      */
*/*      PROMPT PDE.                                                 */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO SPACE PDE                                            */
*/*      PTR TO SECONDARY PCL                                        */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      SPACE PDE OVERLAID  WITH NEW DATA                           */
*/*                                                                  */
*/* NOTE:  THIS ROTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN     */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*    PRMPTSPC: PROC;                                               0177
PRMPTSPC STM   R14,R12,@SA00005                                    0177
*        ENTRYCD = 5;                  /* INDICATE SPACE PROMPT      */
         MVC   ENTRYCD(2,R3AWAPTR),@HW5                            0178
*        R1 = AWAPTR;                  /* WORKAREA PTR IN REG 1      */
         LR    R1,R3AWAPTR                                         0179
*        CALL IKJEFD37;                /* INVOKE PARSE               */
         L     R15,VCONSD37                                        0180
         BALR  R14,R15                                             0180
*        IF RCODESV > 0 THEN           /* IF PARSE FAILED,           */
         L     R10,RCODESV(,R3AWAPTR)                              0181
         LTR   R10,R10                                             0181
         BNP   @RF00181                                            0181
*          DO;                                                     0182
*            ENTRYCD = 2;              /* SET ENTRY CODE             */
         MVC   ENTRYCD(2,R3AWAPTR),@HW2                            0183
*            R1 = AWAPTR;              /* WORKAREA PTR IN REG 1      */
         LR    R1,R3AWAPTR                                         0184
*            CALL IKJEFD35;            /* PROCESS PARSE ERROR        */
         L     R15,VCONSD35                                        0185
         BALR  R14,R15                                             0185
*          END;                                                    0186
*        ELSE                                                      0187
*          DO;                         /* IF PARSE SUCCESSFUL,       */
         B     @RC00181                                            0187
@RF00181 DS    0H                                                  0188
*            SPACEPTR = ADDR(NSPCBUF1);/* PTR IN PDE TO NEW BUFFER   */
         L     R10,PTRPDL(,R3AWAPTR)                               0188
         LA    R2,NSPCBUF1                                         0188
         ST    R2,SPACEPTR(,R10)                                   0188
*            NSPCBUF1(1:SPCLEN1)=SPCBUF1(1:SPCLEN1);               0189
         L     R2,PMPTPDL(,R3AWAPTR)                               0189
         LH    R15,SPCLEN1(,R2)                                    0189
         LR    R14,R15                                             0189
         BCTR  R14,0                                               0189
         L     R1,SPCPTR1(,R2)                                     0189
         EX    R14,@SM00684                                        0189
*            SPACELEN = SPCLEN1;       /* LENGTH, AND                */
         STH   R15,SPACELEN(,R10)                                  0190
*            SPACEFLG = SPCFLAG1;      /* FLAGS - INTO OLD PDE       */
         MVC   SPACEFLG(1,R10),SPCFLAG1(R2)                        0191
*            IF SPC2PRES = '1'B THEN   /* IF SEC SPACE ENTERED,      */
         TM    SPC2PRES(R2),B'10000000'                            0192
         BNO   @RF00192                                            0192
*              DO;                                                 0193
*                SPACPTR2 = ADDR(NSPCBUF2);  /* MOVE POINTER,        */
         LA    R15,NSPCBUF2                                        0194
         ST    R15,SPACPTR2(,R10)                                  0194
*                NSPCBUF2(1:SPCLEN2)=SPCBUF2(1:SPCLEN2);           0195
         LH    R15,SPCLEN2(,R2)                                    0195
         LR    R14,R15                                             0195
         BCTR  R14,0                                               0195
         L     R1,SPCPTR2(,R2)                                     0195
         EX    R14,@SM00686                                        0195
*                SPACLEN2 = SPCLEN2;         /* LENGTH,  AND         */
         STH   R15,SPACLEN2(,R10)                                  0196
*                SPACFLG2 = SPCFLAG2;        /* FLAGS INTO OLD PDE   */
         MVC   SPACFLG2(1,R10),SPCFLAG2(R2)                        0197
*             END;                                                 0198
*            RFY R5 RSTD;                                          0199
@RF00192 DS    0H                                                  0200
*            R5 = ADDR(PMPTPDL);       /* PROMPT PDL IN REG 5        */
         LA    R5,PMPTPDL(,R3AWAPTR)                               0200
*            GEN (IKJRLSA (5));        /* RELEASE PROMPT PDL         */
         IKJRLSA (5)
*            RFY R5 UNRSTD;                                        0202
*          END;                                                    0203
*   END PRMPTSPC;                                                  0204
@EL00005 DS    0H                                                  0204
@EF00005 DS    0H                                                  0204
@ER00005 LM    R14,R12,@SA00005                                    0204
         BR    R14                                                 0204
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      PRMPTBLK                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE PROMPTS THE USER TO ENTER BLOCK, AVBLOCK,      */
*/*      TRACKS OR CYLINDERS WHEN THE PARAMETER HAS BEEN OMITTED     */
*/*      AND IS REQUIRED.                                            */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      INVOKE PARSE WITH A SECONDARY PCL AND PDL ADDRESS. IF PARSE */
*/*      FAILS, INVOKE PARSERR ROUTINE. ELSE, OVERLAY THE ORIGINAL   */
*/*      PDE WITH THE PADE RETURNED FROM THE PROMPT. RELEASE THE     */
*/*      PROMPT PDL.                                                 */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO BLOCK PDE                                            */
*/*      PTR TO SECONDARY PCL                                        */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      BLOCK PDE OVERLAID WITH NEW DATA                            */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INLCUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/*************************(******************************************/
*    PRMPTBLK: PROC;                                               0205
PRMPTBLK STM   R14,R12,@SA00006                                    0205
*        ENTRYCD = 7;                  /* INDICATE PROMPT FOR BLOCK  */
         MVC   ENTRYCD(2,R3AWAPTR),@HW7                            0206
*        R1 = AWAPTR;                  /* WORKAREA PTR IN REG 1      */
         LR    R1,R3AWAPTR                                         0207
*        CALL IKJEFD37;                /* INVOKE PARSE               */
         L     R15,VCONSD37                                        0208
         BALR  R14,R15                                             0208
*        IF RCODESV > 0 THEN           /* IF PARSE FAILED,           */
         L     R10,RCODESV(,R3AWAPTR)                              0209
         LTR   R10,R10                                             0209
         BNP   @RF00209                                            0209
*          DO;                         /* THEN                       */
*            ENTRYCD = 2;              /* INDICATE PARSE ERROR       */
         MVC   ENTRYCD(2,R3AWAPTR),@HW2                            0211
*            R1 = AWAPTR;              /* WORKAREA PTR IN REG 1      */
         LR    R1,R3AWAPTR                                         0212
*            CALL IKJEFD35;            /* ISSUE ERROR MESSAGE        */
         L     R15,VCONSD35                                        0213
         BALR  R14,R15                                             0213
*          END;                                                    0214
*        ELSE                                                      0215
*          DO;                         /* IF PARSE SUCCESSFUL,       */
         B     @RC00209                                            0215
@RF00209 DS    0H                                                  0216
*            RFY R5 RSTD;              /* RESTRICT REG 5             */
*            R5 = ADDR(PMPTPDL);       /* PROMPT PDL IN REG 5        */
         LA    R5,PMPTPDL(,R3AWAPTR)                               0217
*            GEN (IKJRLSA (5));        /* RELEASE PROMPT PDL         */
         IKJRLSA (5)
*            RFY R5 UNRSTD;            /* UNRESTRICT REG 5           */
*          END;                                                    0220
*   END PRMPTBLK;                                                  0221
@EL00006 DS    0H                                                  0221
@EF00006 DS    0H                                                  0221
@ER00006 LM    R14,R12,@SA00006                                    0221
         BR    R14                                                 0221
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      PRMPTDIR                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE PROMPTS THE USER TO ENTER A DIR VALUE WHEN     */
*/*      THE PARAMETER HAS BEEN OMITTED AND IS REQUIRED.             */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      INVOKE PARSE WITH A SECONDARY PCL AND PDL ADDRESS. IF PARSE */
*/*      FAILS, INVOKE PARSERR ROUTINE. ELSE, OVERLAY THE ORIGINAL   */
*/*      PDE WITH THE PDE RETURNED FROM THE PROMPT. RELEASE THE      */
*/*      PROMPT PDL.                                                 */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO DIR PDE                                              */
*/*      PTR TO SECONDARY PCL                                        */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      DIR PDE OVERLAID WITH NEW DATA                              */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*   PRMPTDIR:  PROC;                                               0222
PRMPTDIR STM   R14,R12,@SA00007                                    0222
*        ENTRYCD = 6;                  /* INDICATE PROMPT FOR DIR    */
         MVC   ENTRYCD(2,R3AWAPTR),@HW6                            0223
*        R1 = AWAPTR;                  /* WORKAREA PTR IN REG 1      */
         LR    R1,R3AWAPTR                                         0224
*        CALL IKJEFD37;                /* INVOKE PARSE               */
         L     R15,VCONSD37                                        0225
         BALR  R14,R15                                             0225
*        IF RCODESV > 0 THEN           /* IF PARSE FAILED,           */
         L     R10,RCODESV(,R3AWAPTR)                              0226
         LTR   R10,R10                                             0226
         BNP   @RF00226                                            0226
*          DO;                         /* THEN                       */
*            ENTRYCD = 2;              /* SET ENTRY CODE             */
         MVC   ENTRYCD(2,R3AWAPTR),@HW2                            0228
*            R1 = AWAPTR;              /* WORKAREA PTR IN REG 1      */
         LR    R1,R3AWAPTR                                         0229
*            CALL IKJEFD35;            /* PROCESS PARSE ERROR        */
         L     R15,VCONSD35                                        0230
         BALR  R14,R15                                             0230
*          END;                                                    0231
*        ELSE                                                      0232
*          DO;                         /* IF PARSE SUCCESSFUL,       */
         B     @RC00226                                            0232
@RF00226 DS    0H                                                  0233
*            DIRPDE = 1;                                           0233
         L     R10,PTRPDL(,R3AWAPTR)                               0233
         MVC   DIRPDE(2,R10),@HW1                                  0233
*            DIRPTR = ADDR(NDIRBUF1);  /* PTR IN PDE TO NEW BUFFER   */
         LA    R2,NDIRBUF1                                         0234
         ST    R2,DIRPTR(,R10)                                     0234
*            NDIRBUF1(1:DIRLEN1)=DIRBUF1(1:DIRLEN1);               0235
         L     R2,PMPTPDL(,R3AWAPTR)                               0235
         LH    R15,DIRLEN1(,R2)                                    0235
         LR    R14,R15                                             0235
         BCTR  R14,0                                               0235
         L     R1,DIRPTR1(,R2)                                     0235
         EX    R14,@SM00688                                        0235
*            DIRLEN = DIRLEN1;         /* LENGTH, AND                */
         STH   R15,DIRLEN(,R10)                                    0236
*            DIRFLAGS = DIRFLAG1;      /* FLAGS INTO OLD PDE         */
         MVC   DIRFLAGS(1,R10),DIRFLAG1(R2)                        0237
*            RFY R5 RSTD;              /* RESTRICT REG 5             */
*            R5 = ADDR(PMPTPDL);       /* PROMPT PDL IN REG 5        */
         LA    R5,PMPTPDL(,R3AWAPTR)                               0239
*            GEN (IKJRLSA (5));        /* RELEASE PROMPT PDL         */
         IKJRLSA (5)
*            RFY R5 UNRSTD;            /* UNRESTRICT REG 5           */
*          END;                                                    0242
*   END PRMPTDIR;                                                  0243
@EL00007 DS    0H                                                  0243
@EF00007 DS    0H                                                  0243
@ER00007 LM    R14,R12,@SA00007                                    0243
         BR    R14                                                 0243
*                                                                  0244
*                                                                  0244
*                                                                  0244
*    /****************************************************************/
*    /*                                                              */
*    /* SUBROUTINE - SPCDEFLT                                        */
*    /* FUNCTION - PROVIDE MINIMAL DEFAULTS FOR PRIMARY, SECONDARY   */
*    /*     AND UNIT OF SPACE WHEN NO SPACE DEFAULTING CAN BE        */
*    /*     PERFORMED BY SVC99. THIS OCCURS WHEN KEYWORDS RLSE OR    */
*    /*     ROUND HAVE BEEN SPECIFIED BY THE TERMINAL USER WITHOUT   */
*    /*     ANY OTHER SPACE TYPE PARAMETERS.                 @ZA08703*/
*    /*                                                              */
*    /* OPERATION - LOAD IEFAB445 (ALLOCATION DEFAULT CSECT)         */
*    /*     CONVERT PRIMARY,SECONDARY,AVBLKSIZE AND DIRECTORY        */
*    /*     VALUES TO EBCDIC AND UPDATE PDE'S FOR THESE VALUES       */
*    /*     TO INDICATE THEIR PRESENCE AND POINT TO THESE DEFAULT    */
*    /*     VALUES. DELETE IEFAB445.                                 */
*    /*                                                              */
*    /* INPUT - ALLOCATE COMMAND'S PDL                               */
*    /*         IEFAB445 (ALLOCATION DEFAULT CSECT)                  */
*    /*                                                              */
*    /* OUTPUT - ALLOCATE COMMAND'S PDL OVERLAID WITH DEFAULTED      */
*    /*          DATA.                                               */
*    /*                                                              */
*    /* NOTE - IEFAB445 IS THE ALLOCATION DEFAULT CSECT. IT IS       */
*    /*        MAPPED BY MACRO IEFZB445.                             */
*    /*                                                              */
*    /****************************************************************/
*    SPCDEFLT: PROC;                   /* DEFAULT SPACE      @ZA08703*/
SPCDEFLT STM   R14,R12,@SA00008                                    0244
*          RFY (R0) RSTD;              /* RESERVE REG 0      @ZA08703*/
*          GEN SETS(R0) (LOAD EP=IEFAB445); /* LOAD DEFAULT  @ZA08703*/
         LOAD EP=IEFAB445
*          AB445PTR = R0;              /* CSECT,SET BASE FOR @ZA08703*/
         LR    AB445PTR,R0                                         0247
*          RFY (R0) UNRSTD;            /* MAPPING MACRO      @ZA08703*/
*          INPTR = ADDR(DEFPQTY);      /* MOVE OVERLAY       @ZA08703*/
         LR    R5INPTR,AB445PTR                                    0249
*          CVD(FIXED24,PKAREA);        /* GET EBCDIC FOR     @ZA08703*/
         LR    R10,R5INPTR                                         0250
         BCTR  R10,0                                               0250
         L     R10,FIXED24(,R10)                                   0250
         LA    R10,0(,R10)                                         0250
         CVD   R10,@TS00001                                        0250
         MVC   PKAREA(8),@TS00001                                  0250
*          UNPK(NSPCBUF1,PKAREA(4:8)); /* PRIMARY SPACE      @ZA08703*/
         UNPK  NSPCBUF1(8),PKAREA+3(5)                             0251
*          SPACEPTR = ADDR(NSPCBUF1);  /* OVERLAY PDE        @ZA08703*/
         L     R10,PTRPDL(,R3AWAPTR)                               0252
         LA    R5,NSPCBUF1                                         0252
         ST    R5,SPACEPTR(,R10)                                   0252
*          SPACELEN = 8;               /* SET LENGTH         @ZA08703*/
         LA    R5,8                                                0253
         STH   R5,SPACELEN(,R10)                                   0253
*          SPACPRES = '1'B;            /* INDICATE SPACE     @ZA08703*/
         OI    SPACPRES(R10),B'10000000'                           0254
*          SPACEPDE = 1;               /* PRESENT            @ZA08703*/
         MVC   SPACEPDE(2,R10),@HW1                                0255
*          IF DEFSQTY ^= 0             /* IF SECONDARY AMT   @ZA08703*/
*            THEN DO;                  /* HAS DEFAULT        @ZA08703*/
         MVC   @ZT00001+1(3),DEFSQTY(AB445PTR)                     0256
         L     R2,@ZT00001                                         0256
         LTR   R2,R2                                               0256
         BZ    @RF00256                                            0256
*              INPTR = ADDR(DEFSQTY);  /* SET OVERLAY        @ZA08703*/
         LA    R5INPTR,DEFSQTY(,AB445PTR)                          0258
*              CVD(FIXED24,PKAREA);    /* CONVERT TO EBCDIC  @ZA08703*/
         LR    R2,R5INPTR                                          0259
         BCTR  R2,0                                                0259
         L     R2,FIXED24(,R2)                                     0259
         LA    R2,0(,R2)                                           0259
         CVD   R2,@TS00001                                         0259
         MVC   PKAREA(8),@TS00001                                  0259
*              UNPK(NSPCBUF2,PKAREA(4:8));/* FOR PDE         @ZA08703*/
         UNPK  NSPCBUF2(8),PKAREA+3(5)                             0260
*              SPACPTR2 = ADDR(NSPCBUF2); /* OVERLAY PDE     @ZA08703*/
         LA    R5,NSPCBUF2                                         0261
         ST    R5,SPACPTR2(,R10)                                   0261
*              SPACLEN2 = 8;              /* SET LENGTH      @ZA08703*/
         LA    R5,8                                                0262
         STH   R5,SPACLEN2(,R10)                                   0262
*              SPCPRES2 = '1'B;        /* INDICATE VALUE     @ZA08703*/
         OI    SPCPRES2(R10),B'10000000'                           0263
*            END;                      /* PRESENT            @ZA08703*/
*          IF DEFDQTY ^= 0             /* IF DEFAULT FOR     @ZA08703*/
*            THEN DO;                  /* DIRECTORY BLOCKS   @ZA08703*/
@RF00256 L     R10,DEFDQTY-1(,AB445PTR)                            0265
         LA    R10,0(,R10)                                         0265
         LTR   R10,R10                                             0265
         BZ    @RF00265                                            0265
*              INPTR = ADDR(DEFDQTY);  /* SET OVERLAY        @ZA08703*/
         LA    R5INPTR,DEFDQTY(,AB445PTR)                          0267
*              CVD(FIXED24,PKAREA);    /* GET IT'S EBCDIC    @ZA08703*/
         LR    R10,R5INPTR                                         0268
         BCTR  R10,0                                               0268
         L     R10,FIXED24(,R10)                                   0268
         LA    R10,0(,R10)                                         0268
         CVD   R10,@TS00001                                        0268
         MVC   PKAREA(8),@TS00001                                  0268
*              UNPK(NDIRBUF1,PKAREA(4:8));  /* EQUIVALENT    @ZA08703*/
         UNPK  NDIRBUF1(8),PKAREA+3(5)                             0269
*              DIRPDE = 1;             /* SHOW KEYWD PRESENT @ZA08703*/
         L     R10,PTRPDL(,R3AWAPTR)                               0270
         MVC   DIRPDE(2,R10),@HW1                                  0270
*              DIRPTR = ADDR(NDIRBUF1);/* OVERLAY PDE        @ZA08703*/
         LA    R5,NDIRBUF1                                         0271
         ST    R5,DIRPTR(,R10)                                     0271
*              DIRLEN = 8;             /* SET LENGTH         @ZA08703*/
         MVC   DIRLEN(2,R10),@HW8                                  0272
*              DIRPRES = '1'B;         /* SHOW VALUE PRESENT @ZA08703*/
         OI    DIRPRES(R10),B'10000000'                            0273
*            END;                      /*                    @ZA08703*/
*          IF DEFBLKLN = '1'B          /* IF UNITS OF SPACE  @ZA08703*/
*            THEN DO;                  /* IN AVBLOCK         @ZA08703*/
@RF00265 TM    DEFBLKLN(AB445PTR),B'00100000'                      0275
         BNO   @RF00275                                            0275
*              BLOKPDE = 2;            /* SHOW AVBLOCK REQ'D @ZA08703*/
         L     R10,PTRPDL(,R3AWAPTR)                               0277
         MVC   BLOKPDE(2,R10),@HW2                                 0277
*              INPTR = ADDR(DEFDRLH);  /* SET OVERLAY        @ZA08703*/
         LA    R5INPTR,DEFDRLH(,AB445PTR)                          0278
*              CVD(FIXED24,PKAREA);    /* GET EBCDIC FOR     @ZA08703*/
         LR    R2,R5INPTR                                          0279
         BCTR  R2,0                                                0279
         L     R2,FIXED24(,R2)                                     0279
         LA    R2,0(,R2)                                           0279
         CVD   R2,@TS00001                                         0279
         MVC   PKAREA(8),@TS00001                                  0279
*              UNPK(NBLKBUF1,PKAREA(4:8));    /* AVBLOCK LEN @ZA08703*/
         UNPK  NBLKBUF1(8,R3AWAPTR),PKAREA+3(5)                    0280
*              ABLKPTR = ADDR(NBLKBUF1);      /* OVERLAY PDE @ZA08703*/
         LA    R5,NBLKBUF1(,R3AWAPTR)                              0281
         ST    R5,ABLKPTR(,R10)                                    0281
*              ABLKLEN = 8;            /* SET LENGTH         @ZA08703*/
         MVC   ABLKLEN(2,R10),@HW8                                 0282
*              ABLKPRES = '1'B;        /* INDICATE AVBLOCK   @ZA08703*/
         OI    ABLKPRES(R10),B'10000000'                           0283
*            END;                      /* VALUE SUPPLIED     @ZA08703*/
*          IF DEFTRK = '1'B            /* IF UNITS OF SPACE  @ZA08703*/
*            THEN                      /* ARE IN TRACKS      @ZA08703*/
@RF00275 TM    DEFTRK(AB445PTR),B'10000000'                        0285
         BNO   @RF00285                                            0285
*              BLOKPDE = 3;            /* INDICATE TRACKS    @ZA08703*/
         L     R10,PTRPDL(,R3AWAPTR)                               0286
         MVC   BLOKPDE(2,R10),@HW3                                 0286
*          IF DEFCYL = '1'B            /* IF UNITS OF SPACE  @ZA08703*/
*            THEN                      /* ARE IN CYLINDERS   @ZA08703*/
@RF00285 TM    DEFCYL(AB445PTR),B'01000000'                        0287
         BNO   @RF00287                                            0287
*              BLOKPDE = 4;            /* INDICATE CYLINDERS @ZA08703*/
         L     R10,PTRPDL(,R3AWAPTR)                               0288
         MVC   BLOKPDE(2,R10),@HW4                                 0288
*          GEN(DELETE EP=IEFAB445);    /* DELETE DEFAULT     @ZA08703*/
@RF00287 DS    0H                                                  0289
         DELETE EP=IEFAB445
*        END SPCDEFLT;                 /* CSECT              @ZA08703*/
@EL00008 DS    0H                                                  0290
@EF00008 DS    0H                                                  0290
@ER00008 LM    R14,R12,@SA00008                                    0290
         BR    R14                                                 0290
*                                                                  0291
*    END IKJEFD33                                                  0291
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJZT430)                                        *
*/*%INCLUDE SYSLIB  (IKJZB831)                                        *
*/*%INCLUDE SYSLIB  (IKJPPL  )                                        *
*/*%INCLUDE SYSLIB  (IKJCPPL )                                        *
*/*%INCLUDE SYSLIB  (IEFZB4D2)                                        *
*/*%INCLUDE SYSLIB  (IEFZB445)                                        *
*;                                                                 0291
@DATA    DC    0H'0'
@HW1     DC    H'1'
@HW2     DC    H'2'
@HW3     DC    H'3'
@HW4     DC    H'4'
@HW5     DC    H'5'
@HW7     DC    H'7'
@HWPRIME DC    XL2'000A'
@HWSECND DC    XL2'000B'
@HWBLKSZ DC    XL2'0030'
@SM00677 MVC   ADLPARM(0,R15),SAVPARM+1
D33L0678 MVC   VALBUF(0),SPACEBUF(R10)         ****
D33L067E MVC   VALBUF(0),SPACBUF2(R10)         ****
@SM00680 MVC   PKAREA1(0,R8Y),VALBUF
@SM00682 MVC   ADLPARM(0,R2),SAVPARM+2
@SM00684 MVC   NSPCBUF1(0),SPCBUF1(R1)
@SM00686 MVC   NSPCBUF2(0),SPCBUF2(R1)
@SM00688 MVC   NDIRBUF1(0),DIRBUF1(R1)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SAV001  EQU   @SA00001
@SA00007 DS    15F
@SA00003 DS    14F
@SA00005 DS    15F
@SA00002 DS    13F
@SA00006 DS    15F
@SA00008 DS    15F
@TF00001 DS    F
@ZTEMPS  DS    0F
@ZT00001 DC    F'0'
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
@TEMPS   EQU   @ZTEMPS
@L       EQU   @ZLEN
IKJEFD33 CSECT
         DC    0F'0'
@FW6     DC    F'6'
@HW6     EQU   @FW6+2
@FW8     DC    F'8'
@HW8     EQU   @FW8+2
@DATD    DSECT
         DS    0D
PDLADDR2 DS    A
         DS    0D
@TS00001 DS    CL8
CNVRTYPE DS    CL1
         ORG   CNVRTYPE
BLKCNVRT DS    BL1
SPCCNVRT EQU   CNVRTYPE+0
INCCNVRT EQU   CNVRTYPE+0
@NM00008 EQU   CNVRTYPE+0
         ORG   CNVRTYPE+1
SAVPARM  DS    CL4
VALBUF   DS    CL8
NSPCBUF1 DS    CL8
NSPCBUF2 DS    CL8
NDIRBUF1 DS    CL8
PKAREA   DS    CL8
         DS    CL3
CVBAREA  DS    CL8
         ORG   *+1-(*-@DATD)/(*-@DATD) ENSURE DSECT DATA
@ENDDATD EQU   *
@DATEND  EQU   *
IKJEFD33 CSECT
         DC    0F'0'
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
@SIZ001  EQU   @SIZDATD
VCONSD35 DC    V(IKJEFD35)
VCONSD37 DC    V(IKJEFD37)
         DC    0D'0'                   END OF CSECT
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
R5INPTR  EQU   R5
AB445PTR EQU   R4
R5VALLEN EQU   R5
R4INC    EQU   R4
R3AWAPTR EQU   R3
R8Y      EQU   R8
ALLOCWA  EQU   0
CPPLPTR  EQU   ALLOCWA
PTRPDL   EQU   ALLOCWA+4
GTPLPTR  EQU   ALLOCWA+8
SWITCH   EQU   ALLOCWA+12
RBCODE12 EQU   SWITCH
CONT     EQU   SWITCH
SWITCH2  EQU   ALLOCWA+13
DSEXISTS EQU   SWITCH2
ENTRYCD  EQU   ALLOCWA+14
TXT      EQU   ALLOCWA+16
RCODESV  EQU   ALLOCWA+24
VCFLAGS  EQU   ALLOCWA+36
PMPTPDL  EQU   ALLOCWA+40
P        EQU   ALLOCWA+52
Q        EQU   ALLOCWA+56
CMDTWO   EQU   ALLOCWA+60
NBLKBUF1 EQU   ALLOCWA+164
PPLPTR   EQU   ALLOCWA+172
ALLOCPDL EQU   0
BLOKPDE  EQU   ALLOCPDL+16
SPACEPDE EQU   ALLOCPDL+18
DIRPDE   EQU   ALLOCPDL+20
USINGPDE EQU   ALLOCPDL+22
RLSEPDE  EQU   ALLOCPDL+42
RNDPDE   EQU   ALLOCPDL+44
DSNPDE   EQU   ALLOCPDL+48+4                                       @26C
DSNPTR   EQU   DSNPDE
DSNFLAGS EQU   DSNPDE+6
MBRPTR   EQU   DSNPDE+8
MBRFLAGS EQU   DSNPDE+14
MBRPRES  EQU   MBRFLAGS
PASSPTR  EQU   DSNPDE+16
PASSFLAG EQU   DSNPDE+22
DDNMEPDE EQU   ALLOCPDL+76+4                                       @26C
DDNPTR   EQU   DDNMEPDE
DDNFLAGS EQU   DDNMEPDE+6
CLASPDE  EQU   ALLOCPDL+84+4                                       @26C
CLASPTR  EQU   CLASPDE
CLASFLG  EQU   CLASPDE+6
SERPDE   EQU   ALLOCPDL+92+4                                       @26C
SERPTR   EQU   SERPDE
SERFLAGS EQU   SERPDE+6
BLKPDE   EQU   ALLOCPDL+104+4                                      @26C
BLKPTR   EQU   BLKPDE
BLKLEN   EQU   BLKPDE+4
BLKFLAGS EQU   BLKPDE+6
ABLKPDE  EQU   ALLOCPDL+112+4                                      @26C
ABLKPTR  EQU   ABLKPDE
ABLKLEN  EQU   ABLKPDE+4
ABLKFLG  EQU   ABLKPDE+6
ABLKPRES EQU   ABLKFLG
SPACPDE  EQU   ALLOCPDL+120+4                                      @26C
SPACEPTR EQU   SPACPDE
SPACELEN EQU   SPACPDE+4
SPACEFLG EQU   SPACPDE+6
SPACPRES EQU   SPACEFLG
SPACPDE2 EQU   ALLOCPDL+128+4                                      @26C
SPACPTR2 EQU   SPACPDE2
SPACLEN2 EQU   SPACPDE2+4
SPACFLG2 EQU   SPACPDE2+6
SPCPRES2 EQU   SPACFLG2
DIRECPDE EQU   ALLOCPDL+136+4                                      @26C
DIRPTR   EQU   DIRECPDE
DIRLEN   EQU   DIRECPDE+4
DIRFLAGS EQU   DIRECPDE+6
DIRPRES  EQU   DIRFLAGS
ATTRPDE  EQU   ALLOCPDL+144+4                                      @26C
ATTRPTR  EQU   ATTRPDE
ATTRFLAG EQU   ATTRPDE+6
USIDPDE  EQU   ALLOCPDL+152+4                                      @26C
USIDPTR  EQU   USIDPDE
USIDFLAG EQU   USIDPDE+6
UTYPPDE  EQU   ALLOCPDL+160+4                                      @26C
UTYPPTR  EQU   UTYPPDE
UTYPFLAG EQU   UTYPPDE+6
UNCNTPDE EQU   ALLOCPDL+168+4                                      @26C
UCNTPTR  EQU   UNCNTPDE
UCNTFLAG EQU   UNCNTPDE+6
POSTPDE  EQU   ALLOCPDL+180+4                                      @26C
POSPTR   EQU   POSTPDE
POSFLAG  EQU   POSTPDE+6
MXVOLPDE EQU   ALLOCPDL+188+4                                      @26C
MXVOLPTR EQU   MXVOLPDE
MXVOLFLG EQU   MXVOLPDE+6
VOLSQPDE EQU   ALLOCPDL+196+4                                      @26C
VOLSQPTR EQU   VOLSQPDE
VOLSQFLG EQU   VOLSQPDE+6
MSVGPDE  EQU   ALLOCPDL+204+4                                      @26C
MSVGPTR  EQU   MSVGPDE
MSVGFLG  EQU   MSVGPDE+6
DSNBUF   EQU   0
BLKBUF   EQU   0
SPACEBUF EQU   0
SPACBUF2 EQU   0
GTPL     EQU   0
GTPLABLK EQU   GTPL+16
TEXTCORE EQU   0
ADDNUM   EQU   TEXTCORE
ADDTEXT  EQU   TEXTCORE+4
ADLTEXT  EQU   0
ADLKEY   EQU   ADLTEXT
ADLNBR   EQU   ADLTEXT+2
ADLLEN   EQU   ADLTEXT+4
ADLPARM  EQU   ADLTEXT+6
PPL      EQU   0
CPPL     EQU   0
SPCPDE1  EQU   0
SPCPTR1  EQU   SPCPDE1+8
SPCLEN1  EQU   SPCPDE1+12
SPCFLAG1 EQU   SPCPDE1+14
SPCPTR2  EQU   SPCPDE1+16
SPCLEN2  EQU   SPCPDE1+20
SPCFLAG2 EQU   SPCPDE1+22
SPC2PRES EQU   SPCFLAG2
SPCBUF1  EQU   0
SPCBUF2  EQU   0
DIRPDE1  EQU   0
DIRPTR1  EQU   DIRPDE1+8
DIRLEN1  EQU   DIRPDE1+12
DIRFLAG1 EQU   DIRPDE1+14
DIRBUF1  EQU   0
IEFAB445 EQU   0
DEFSPACE EQU   IEFAB445
DEFPQTY  EQU   DEFSPACE
DEFSQTY  EQU   DEFSPACE+3
DEFDRLH  EQU   DEFSPACE+6
DEFDQTY  EQU   DEFSPACE+9
@NM00017 EQU   DEFSPACE+12
DEFTRK   EQU   @NM00017
DEFCYL   EQU   @NM00017
DEFBLKLN EQU   @NM00017
PKAREA1  EQU   0
AREA1    EQU   0
AREA2    EQU   0
FIXED24  EQU   0
ABLKBUF  EQU   0
ATTRBUF  EQU   0
CLASSBUF EQU   0
DDNBUF   EQU   0
DIRBUF   EQU   0
MBRBUF   EQU   0
MSVGBUF  EQU   0
MXVOLBUF EQU   0
PASSBUF  EQU   0
POSTBUF  EQU   0
SERBUF   EQU   0
UCNTBUF  EQU   0
USIDBUF  EQU   0
UTYPBUF  EQU   0
VSEQBUF  EQU   0
INPARMS  EQU   0
*                                      START UNREFERENCED COMPONENTS
DEFUNIT  EQU   IEFAB445+13
DEFROUND EQU   @NM00017
DEFALX   EQU   @NM00017
DEFMIXG  EQU   @NM00017
DEFCONTG EQU   @NM00017
DEFRLSE  EQU   @NM00017
@NM00016 EQU   DIRPDE1+15
@NM00015 EQU   DIRPDE1+4
@NM00014 EQU   DIRPDE1
@NM00013 EQU   SPCPDE1+23
@NM00012 EQU   SPCFLAG2
@NM00011 EQU   SPCPDE1+15
@NM00010 EQU   SPCPDE1+4
@NM00009 EQU   SPCPDE1
CPPLECT  EQU   CPPL+12
CPPLPSCB EQU   CPPL+8
CPPLUPT  EQU   CPPL+4
CPPLCBUF EQU   CPPL
PPLUWA   EQU   PPL+24
PPLCBUF  EQU   PPL+20
PPLANS   EQU   PPL+16
PPLPCL   EQU   PPL+12
PPLECB   EQU   PPL+8
PPLECT   EQU   PPL+4
PPLUPT   EQU   PPL
ADDUNIT  EQU   TEXTCORE+36
@NM00007 EQU   TEXTCORE+2
GTPLOUTA EQU   GTPL+20
GTPLTBLE EQU   GTPL+12
GTPLKLST EQU   GTPL+8
GTPLPCL  EQU   GTPL+4
GTPLPDL  EQU   GTPL
DSNTERM  EQU   DSNBUF
MSVGRSV2 EQU   MSVGPDE+7
MSVGRSV1 EQU   MSVGFLG
MSVGPRES EQU   MSVGFLG
MSVGLEN  EQU   MSVGPDE+4
VOLRSV2  EQU   VOLSQPDE+7
VOLRSV1  EQU   VOLSQFLG
VOLPRES  EQU   VOLSQFLG
VOLSQLEN EQU   VOLSQPDE+4
MXVRSV2  EQU   MXVOLPDE+7
MXVRSV1  EQU   MXVOLFLG
MXVPRES  EQU   MXVOLFLG
MXVOLLEN EQU   MXVOLPDE+4
POSRSV2  EQU   POSTPDE+7
POSRSV1  EQU   POSFLAG
POSPRES  EQU   POSFLAG
POSLEN   EQU   POSTPDE+4
LABLRSV1 EQU   ALLOCPDL+178+4                                      @26C
LABELPDE EQU   ALLOCPDL+176+4                                      @26C
UCNTRSV2 EQU   UNCNTPDE+7
UCNTRSV1 EQU   UCNTFLAG
UCNTPRES EQU   UCNTFLAG
UCNTLEN  EQU   UNCNTPDE+4
UTYPRSV2 EQU   UTYPPDE+7
UTYPRSV1 EQU   UTYPFLAG
UTYPPRES EQU   UTYPFLAG
UTYPLEN  EQU   UTYPPDE+4
USIDRSV2 EQU   USIDPDE+7
USIDRSV1 EQU   USIDFLAG
USIDPRES EQU   USIDFLAG
USIDLEN  EQU   USIDPDE+4
ATTRRSV2 EQU   ATTRPDE+7
ATTRRSV1 EQU   ATTRFLAG
ATTRPRES EQU   ATTRFLAG
ATTRLEN  EQU   ATTRPDE+4
DIRRSV2  EQU   DIRECPDE+7
DIRRSV1  EQU   DIRFLAGS
SPCRSV22 EQU   SPACPDE2+7
SPCRSV12 EQU   SPACFLG2
SPACRSV2 EQU   SPACPDE+7
SPACRSV1 EQU   SPACEFLG
ABLKRSV2 EQU   ABLKPDE+7
ABLKRSV1 EQU   ABLKFLG
BLKRSV2  EQU   BLKPDE+7
BLKRSV1  EQU   BLKFLAGS
BLKPRES  EQU   BLKFLAGS
SERNEXT  EQU   SERPDE+8
SERRSV2  EQU   SERPDE+7
SERRSV1  EQU   SERFLAGS
SERPRES  EQU   SERFLAGS
SERLEN   EQU   SERPDE+4
CLASRSV2 EQU   CLASPDE+7
CLASRSV1 EQU   CLASFLG
CLASPRES EQU   CLASFLG
CLASLEN  EQU   CLASPDE+4
DDNRSV2  EQU   DDNMEPDE+7
DDNRSV1  EQU   DDNFLAGS
DDNPRES  EQU   DDNFLAGS
DDNLEN   EQU   DDNMEPDE+4
DSNNEXT  EQU   DSNPDE+24
PASSRSV2 EQU   DSNPDE+23
PASSRSV1 EQU   PASSFLAG
PASSPRES EQU   PASSFLAG
PASSLEN  EQU   DSNPDE+20
MBRRSV2  EQU   DSNPDE+15
MBRRSV1  EQU   MBRFLAGS
MBRLEN   EQU   DSNPDE+12
DSNRSV2  EQU   DSNPDE+7
DSNRSV1  EQU   DSNFLAGS
DSNQUOT  EQU   DSNFLAGS
DSNPRES  EQU   DSNFLAGS
DSNLENGH EQU   DSNPDE+4
DISPPDE  EQU   ALLOCPDL+46
VSEQPDE  EQU   ALLOCPDL+40
PRIVPDE  EQU   ALLOCPDL+38
MAXVPDE  EQU   ALLOCPDL+36
POSPDE   EQU   ALLOCPDL+34
LABLPDE  EQU   ALLOCPDL+32
UCNTPDE  EQU   ALLOCPDL+30
UNITPDE  EQU   ALLOCPDL+28
HOLDPDE  EQU   ALLOCPDL+26
DESTPDE  EQU   ALLOCPDL+24
VOLPDE   EQU   ALLOCPDL+14
STATSPDE EQU   ALLOCPDL+12
FILEPDE  EQU   ALLOCPDL+10
DSPDE    EQU   ALLOCPDL+8
@NM00006 EQU   ALLOCPDL+4
@NM00005 EQU   ALLOCPDL
FIRSTPTR EQU   ALLOCWA+176
COMMECB  EQU   ALLOCWA+160
PDLADDR3 EQU   ALLOCWA+156
PPLTWO   EQU   ALLOCWA+128
CMDTWOBF EQU   CMDTWO+4
CMDTWOOF EQU   CMDTWO+2
CMDTWOLN EQU   CMDTWO
MSGPTR   EQU   ALLOCWA+48
PRCODE   EQU   ALLOCWA+44
@NM00004 EQU   ALLOCWA+38
NCLASBUF EQU   ALLOCWA+37
@NM00003 EQU   VCFLAGS
SPACE2   EQU   VCFLAGS
SPACE1   EQU   VCFLAGS
AVBLK    EQU   VCFLAGS
PTRMSGS  EQU   ALLOCWA+32
DSNCTR   EQU   ALLOCWA+30
VLISTCTR EQU   ALLOCWA+28
PTRS99RB EQU   ALLOCWA+20
@NM00002 EQU   SWITCH2
@NM00001 EQU   SWITCH2
FIRSTPDE EQU   SWITCH
AWARSV1  EQU   SWITCH
ASTRSK   EQU   SWITCH
TERMOPT  EQU   SWITCH
PROMPT   EQU   SWITCH
DSOVRLAY EQU   SWITCH
*                                      END UNREFERENCED COMPONENTS
@RC00079 EQU   @RC00070
@RC00091 EQU   @RC00088
@RF00095 EQU   @RC00088
@RF00103 EQU   @RC00100
@RC00181 EQU   @EL00005
@RC00209 EQU   @EL00006
@RC00226 EQU   @EL00007
@EL01    EQU   @EL00001
@ENDDATA EQU   *
         END   IKJEFD33,(C'PLS1343',0702,82173)
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
  IDENTIFY IKJEFD33('ZP60026')
++MOD(IKJEFD34) DISTLIB(AOST4).
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT)'
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE 'CONCATENATION ROUTINE                                  *
                        '
***********************************************************************
*  $26   ZP60026  2010-01-23 GREG PRICE: ADD 'REUSE' OPERAND.         *
*                            CHANGES APPLIED TO EBB1102 LEVEL.        *
***********************************************************************
IKJEFD34 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(33)                                             @26C
         DC    C'IKJEFD34  75.248'                                 0001
         DC    CL17' ZP60026 2010.023'                             @26A
         DROP  R15
@PROLOG  STM   R14,R12,12(R13)                                     0001
         BALR  R12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,R12                                         0001
         L     R0,@SIZDATD                                         0001
         GETMAIN  R,LV=(0)
         LR    R11,R1                                              0001
         USING @DATD,R11                                           0001
         ST    R13,@SA00001+4                                      0001
         LM    R0,R1,20(R13)                                       0001
         ST    R11,8(,R13)                                         0001
         LR    R13,R11                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
         MVC   @PC00001(4),0(R1)                                   0001
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      CONCATRQ                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE PROCESSES A CONCATENATION REQUEST.             */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      IF A STATUS OF MOD, NEW OR SYSOUT WAS SPECIFIED,            */
*/*      THEN ISSUE AN ERROR MESSAGE AND TERMINATE.                  */
*/*      IF FILE WAS NOT SPECIFIED, PROMPT THE USER                  */
*/*      TO ENTER A FILENAME. MARK EXTRANEOUS PARAMETERS NOT         */
*/*      ENTERED IN THE PDL. ISSUE A GETMAIN FOR STORAGE TO HOLD     */
*/*      THE TEXT UNITS FOR THE DDNAMES ASSOCIATED WITH EACH DATA    */
*/*      SET. TRANSLATE PARAMETERS TO TEXT FORMAT. INVOKE ROUTINE    */
*/*      CONCTDSN TO ALLOCATE EACH DATA SET. IF THE ALLOCATION WAS   */
*/*      SUCCESSFUL, INVOKE DYNAMIC ALLOCATION TO CONCATENATE THE    */
*/*      DDNAMES.                                                    */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDL                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RBCODE12 = 0 - CONCATENATION SUCCESSFUL                     */
*/*                 1 - ERROR IN ALLOCATION OR CONCATENATION         */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*    CONCATRQ:                                                     0088
*          AWAPTR = R1;                     /* POINTER TO WORKAREA   */
CONCATRQ LR    R3AWAPTR,R1                                         0088
*          INC = ADDNUM + 1;                /* SUBSCRIPT USED FOR  0089
*                                              ADDITIONAL TEXT       */
         L     R6,GTPLPTR(,R3AWAPTR)                               0089
         L     R6,GTPLABLK(,R6)                                    0089
         LA    R8INC,1                                             0089
         AH    R8INC,ADDNUM(,R6)                                   0089
*          CNCTFLAG = '00'X;                /* INITIALIZE FLAGS      */
         MVI   CNCTFLAG,X'00'                                      0090
*          IF STATSPDE > 2 THEN             /* IF MOD,NEW OR SYSOUT, */
         L     R6,PTRPDL(,R3AWAPTR)                                0091
         LH    R6,STATSPDE(,R6)                                    0091
         C     R6,@FW2                                             0091
         BNH   @RF00091                                            0091
*            DO;                            /* THEN                  */
*              RBCODE12 = '1'B;             /* INDICATE ALLOC FAILED */
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0093
*              STATSERR = '1'B;             /* INDICATE ERROR TYPE   */
         OI    STATSERR,B'10000000'                                0094
*              CALL CCERRMSG;               /* ISSUE ERROR MSG       */
         BAL   R14,CCERRMSG                                        0095
*            END;                                                  0096
*          ELSE                                                    0097
*            DO;                                                   0097
         B     @RC00091                                            0097
@RF00091 DS    0H                                                  0098
*              IF FILEPDE = 0 THEN          /* IF FILE NOT ENTERED,  */
         L     R6,PTRPDL(,R3AWAPTR)                                0098
         LH    R6,FILEPDE(,R6)                                     0098
         LTR   R6,R6                                               0098
         BNZ   @RF00098                                            0098
*                CALL PRMPTDDN;             /* PROMPT FOR FILENAME   */
         BAL   R14,PRMPTDDN                                        0099
*              I = 1;                       /* INITIALIZE SUBSCRIPT  */
@RF00098 LA    R2I,1                                               0100
*    /* MARK EXTRANEOUS PARAMETERS NOT ENTERED IN PDL                */
*              DO WHILE (CONT='0'B);                               0101
         B     @DE00101                                            0101
@DL00101 DS    0H                                                  0102
*              IF CONCTEXT(I)='00'X THEN    /* IF END OF LIST,       */
         LA    R6,CONCTEXT-1(R2I)                                  0102
         CLI   0(R6),X'00'                                         0102
         BNE   @RF00102                                            0102
*                CONT='1'B;                 /* EXIT DO-WHILE         */
         OI    CONT(R3AWAPTR),B'00010000'                          0103
*              ELSE                         /* ELSE,                 */
*                DO;                        /* GET ADDRESS OF PDE    */
         B     @RC00102                                            0104
@RF00102 DS    0H                                                  0105
*                 EXTRAN = ADDR(ALLOCPDL)+CONCTEXT(I);             0105
         SLR   R5EXTRAN,R5EXTRAN                                   0105
         IC    R5EXTRAN,CONCTEXT-1(R2I)                            0105
         AL    R5EXTRAN,PTRPDL(,R3AWAPTR)                          0105
*                 PDEEXT = 0;               /* SET PDE TO 0          */
         SLR   R6,R6                                               0106
         STH   R6,PDEEXT(,R5EXTRAN)                                0106
*                 I = I+1;                  /* INCREMENT SUBSCRIPT   */
         AL    R2I,@FW1                                            0107
*                END;                                              0108
*              END;                         /* END DO-WHILE          */
@RC00102 DS    0H                                                  0109
@DE00101 TM    CONT(R3AWAPTR),B'00010000'                          0109
         BZ    @DL00101                                            0109
*              CONT = '0'B;                 /* RESET SWITCH          */
         NI    CONT(R3AWAPTR),B'11101111'                          0110
*              SIZE = (DSNCTR*10) + 16;     /* CORE NEEDED FOR CONCAT*/
         LH    R2,DSNCTR(,R3AWAPTR)                                0111
         MH    R2,@HW10                                            0111
         LA    R2,16(,R2)                                          0111
         ST    R2,@TF00001                                         0111
         MVC   SIZE(3),@TF00001+1                                  0111
*              SPNO = '01'X;                /* SUBPOOL NUMBER        */
         MVI   SPNO,X'01'                                          0112
*              R0 = CORE;                   /* SBPOOL AND SIZE IN 0  */
         L     R0,CORE                                             0113
*              GEN (GETMAIN R,LV=(0));      /* ISSUE GETMAIN         */
         GETMAIN R,LV=(0)
*              DDNAPTR = R1;                /* PTR TO STORAGE        */
         LR    DDNAPTR,R1                                          0115
*              DDLST = ADDR(DDNMLEN);       /* PTR TO LIST POSITION  */
         LA    R5DDLST,DDNMLEN(,DDNAPTR)                           0116
*              PERMCTPT = ADDR(PERMCTXT);   /* TEXT FOR PERM CONCAT  */
         LA    R2,PERMCTXT(,DDNAPTR)                               0117
         ST    R2,PERMCTPT(,DDNAPTR)                               0117
*              PERMCTKY = DCCPERMC;         /* KEY AND               */
         MVC   PERMCTKY(2,DDNAPTR),@HWPERMC                        0118
*              PERMCTNM = 0;                /* NUMBER                */
         SLR   R2,R2                                               0119
         STH   R2,PERMCTNM(,DDNAPTR)                               0119
*              DDNMPTR = ADDR(DDNMTXT);     /* TEXT FOR DDNAMES      */
         LA    R2,DDNMTXT(,DDNAPTR)                                0120
         ST    R2,DDNMPTR(,DDNAPTR)                                0120
*              DDNMKEY = DCCDDNAM;          /* KEY AND               */
         MVC   DDNMKEY(2,DDNAPTR),@HWDDNAM                         0121
*              DDNMNBR = DSNCTR;            /* NUMBER                */
         LH    R2,DSNCTR(,R3AWAPTR)                                0122
         STH   R2,DDNMNBR(,DDNAPTR)                                0122
*              DDNMEND = '1'B;              /* END OF ADDR LIST      */
         OI    DDNMEND(DDNAPTR),B'10000000'                        0123
*              CALL CNCATTXT;               /* SET UP TEXT UNITS     */
         BAL   R14,CNCATTXT                                        0124
*              CALL TRANSRTN;               /* TRANSLATE PARAMETERS  */
         BAL   R14,TRANSRTN                                        0125
*              IF RBCODE12 = '0'B THEN      /* IF TRANSLATE          */
         TM    RBCODE12(R3AWAPTR),B'10000000'                      0126
         BNZ   @RF00126                                            0126
*                DO;                        /* SUCCESSFUL,           */
*                  CALL CONCTDSN;           /* ALLOC EACH DATASET    */
         BAL   R14,CONCTDSN                                        0128
*                  IF RBCODE12 = '0'B THEN  /* IF ALLOCATION GOOD,   */
         TM    RBCODE12(R3AWAPTR),B'10000000'                      0129
         BNZ   @RF00129                                            0129
*                    DO;                                           0130
*                  S99VERB = S99VRBCC;      /* SET CONCAT VERB       */
         L     R10,PTRS99RB(,R3AWAPTR)                             0131
         MVI   S99VERB(R10),X'03'                                  0131
*                  S99TXTPP = DDNAPTR;      /* SET PTR TO CONCAT TEXT*/
         ST    DDNAPTR,S99TXTPP(,R10)                              0132
*                  CALL DYNSVC;             /* INVOKE DYN ALLOCATION */
         BAL   R14,DYNSVC                                          0133
*                  IF RCODESV > 0 THEN      /* IF ALLOCATION FAILED  */
         L     R10,RCODESV(,R3AWAPTR)                              0134
         LTR   R10,R10                                             0134
         BNP   @RF00134                                            0134
*                    DO;                    /* THEN                  */
*                      RBCODE12 = '1'B;     /* INDICATE ALLOC FAILED */
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0136
*                      CALL CONCTERR;       /* ISSUE MSG & FREE DS   */
         BAL   R14,CONCTERR                                        0137
*                    END;                                          0138
*                    END;                                          0139
@RF00134 DS    0H                                                  0140
*                END;                                              0140
@RF00129 DS    0H                                                  0141
*            END;                                                  0141
@RF00126 DS    0H                                                  0142
*        IF RBCODE12 = '1'B THEN       /* IF ERROR OCCURRED          */
@RC00091 TM    RBCODE12(R3AWAPTR),B'10000000'                      0142
         BNO   @RF00142                                            0142
*          RETCODE = 12;               /* RETURN CODE OF 12          */
         L     R10,REGSAVE(,R13)                                   0143
         MVC   RETCODE(4,R10),@FW12                                0143
*        ELSE                          /* ELSE                       */
*          RETCODE = 0;                /* RETURN CODE 0              */
         B     @RC00142                                            0144
@RF00142 L     R10,REGSAVE(,R13)                                   0144
         SLR   R15,R15                                             0144
         ST    R15,RETCODE(,R10)                                   0144
*        RETURN;                                                   0145
@EL00001 L     R13,4(,R13)                                         0145
@EF00001 L     R0,@SIZDATD                                         0145
         LR    R1,R11                                              0145
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    R14,R12,12(R13)                                     0145
         BR    R14                                                 0145
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      CNCATTXT                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE BUILDS ADDITIONAL TEXT UNITS NEEDED WHEN       */
*/*      ALLOCATING DATA SETS TO BE CONCATENATED.                    */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      BUILD TEXT UNIT TO RETURN DDNAME. BUILD TEXT UNIT TO RETURN */
*/*      DSORG.                                                      */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      WORKAREA                                                    */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      TEXT UNITS BUILT                                            */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/*                                                                  */
*/*        THESE TEXT UNITS HAVE TO BE SET UP HERE BECAUSE GENTRANS  */
*/*        CAN ONLY BUILD TEXT UNITS RELATED TO PARAMETERS IN        */
*/*        THE PDL.                                                  */
*/********************************************************************/
*    CNCATTXT: PROC;                                               0146
         B     @EL00001                                            0146
CNCATTXT STM   R14,R7,12(R13)                                      0146
         STM   R9,R12,56(R13)                                      0146
*        ADDNUM = ADDNUM + 1;          /* INCREMENT TEXT COUNTER     */
         L     R10,GTPLPTR(,R3AWAPTR)                              0147
         L     R10,GTPLABLK(,R10)                                  0147
         LA    R9,1                                                0147
         LH    R2,ADDNUM(,R10)                                     0147
         ALR   R2,R9                                               0147
         STH   R2,ADDNUM(,R10)                                     0147
*        ADLKEY = DALRTDDN;            /* RETURN DDNAME KEY          */
         L     R15,TXT(,R3AWAPTR)                                  0148
         MVC   ADLKEY(2,R15),@HWRTDDN                              0148
*        ADLNBR = 1;                   /* NUMBER                     */
         STH   R9,ADLNBR(,R15)                                     0149
*        ADLLEN = 8;                   /* MAX LENGTH                 */
         LA    R14,8                                               0150
         STH   R14,ADLLEN(,R15)                                    0150
*        ADDTEXT(INC) = TXT;           /* PTR TO TEXT UNIT IN LIST   */
         LR    R7,R8INC                                            0151
         SLA   R7,2                                                0151
         ST    R15,@TF00001                                        0151
         ALR   R7,R10                                              0151
         MVC   ADDTEXT-4(4,R7),@TF00001                            0151
*        TXT = TXT + 14;               /* INCREMENT TEXT PTR         */
         AL    R15,@FW14                                           0152
         ST    R15,TXT(,R3AWAPTR)                                  0152
*        INC = INC + 1;                /* INCREMENT ADDR SUBSCRIPT   */
         ALR   R8INC,R9                                            0153
*        ADDNUM = ADDNUM + 1;          /* INCREMENT TEXT COUNTER     */
         ALR   R2,R9                                               0154
         STH   R2,ADDNUM(,R10)                                     0154
*        ADLKEY = DALRTORG;            /* RETURN DSORG KEY           */
         MVC   ADLKEY(2,R15),@HWRTORG                              0155
*        ADLNBR = 1;                   /* NUMBER                     */
         STH   R9,ADLNBR(,R15)                                     0156
*        ADLLEN = 2;                   /* LENGTH                     */
         MVC   ADLLEN(2,R15),@HW2                                  0157
*        ADDTEXT(INC) = TXT;           /* PTR TO TEXT UNIT IN LIST   */
         LR    R2,R8INC                                            0158
         SLA   R2,2                                                0158
         ST    R15,@TF00001                                        0158
         ALR   R10,R2                                              0158
         MVC   ADDTEXT-4(4,R10),@TF00001                           0158
*        TXT = TXT + 8;                /* INCREMENT TEXT PTR         */
         ALR   R15,R14                                             0159
         ST    R15,TXT(,R3AWAPTR)                                  0159
*        INC = INC + 1;                /* INCREMENT ADDR SUBSCRIPT   */
         ALR   R8INC,R9                                            0160
*   END CNCATTXT;                                                  0161
@EL00002 DS    0H                                                  0161
@EF00002 DS    0H                                                  0161
@ER00002 LM    R14,R7,12(R13)                                      0161
         LM    R9,R12,56(R13)                                      0161
         BR    R14                                                 0161
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      CONCTDSN                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE ALLOCATES A LIST OF DATA SETS TO BE            */
*/*      CONCATENATED.                                               */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      ALLOCATE ONE DATA SET AT A TIME. IF THE ALLOCATION IS NOT   */
*/*      SUCCESSFUL, ISSUE AN ERROR MESSAGE AND TERMINATE. IF THE    */
*/*      DSORG IS NOT THE SAME FOR ALL THE DATA SETS IN THE LIST,    */
*/*      ISSUE AN ERROR MESSAGE AND TERMINATE. IF EITHER OF THE      */
*/*      ABOVE ERRORS ARE FOUND, ROUTINE CONCTERR IS INVOKED TO      */
*/*      FREE ANY PREVIOUSLY ALLOCATED DATA SETS.                    */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO DSNAME, MEMBER AND PASSWORD TEXT UNITS               */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RBCODE12 = 0 - ALLOCATION OF LIST SUCCESSFUL                */
*/*                 1 - ERROR IN ALLOCATION                          */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*    CONCTDSN: PROC;                                               0162
CONCTDSN STM   R14,R7,@SA00003                                     0162
         STM   R9,R12,@SA00003+40                                  0162
*        DPTR2 = ADDR(DALEN);               /* PTR TO DSN LEN & PARM */
         L     R15,TUDSN(,GTPLOUT1)                                0163
         LA    R2DPTR2,DALEN(,R15)                                 0163
*        LISTNMBR = DSNCTR;                 /* SAVE DSN NUMBER       */
         LH    LISTNMBR,DSNCTR(,R3AWAPTR)                          0164
*        DANUM = 1;                         /* SET DSN NUMBER TO 1   */
         MVC   DANUM(2,R15),@HW1                                   0165
*        IF TUMBR ^= 0 THEN                 /* IF MEMBER UNIT BUILT  */
         SLR   R15,R15                                             0166
         L     R14,TUMBR(,GTPLOUT1)                                0166
         CR    R14,R15                                             0166
         BE    @RF00166                                            0166
*         DO;                               /* THEN                  */
*           MPTR2 = ADDR(MBLEN);            /* PTR TO MBR LEN & PARM */
         LA    R7MPTR2,MBLEN(,R14)                                 0168
*           SAVMBLEN = MEMLEN;              /* SAVE MEMBER LENGTH    */
         LH    R1,MEMLEN(,R7MPTR2)                                 0169
         LR    SAVMBLEN,R1                                         0169
*           IF MEMLEN = 0 THEN              /* IF MBR NOT ENTERED,   */
         CR    R1,R15                                              0170
         BNE   @RF00170                                            0170
*             DO;                           /* THEN,                 */
*               MBKEY = 0;                  /* SET KEY TO 0          */
         STH   R15,MBKEY(,R14)                                     0172
*               MBNUM = 0;                  /* SET NUMBER TO 0       */
         STH   R15,MBNUM(,R14)                                     0173
*             END;                                                 0174
*           ELSE                            /* ELSE,                 */
*             MBNUM = 1;                    /* SET MBR NUMBER TO 1   */
         B     @RC00170                                            0175
@RF00170 L     R1,TUMBR(,GTPLOUT1)                                 0175
         MVC   MBNUM(2,R1),@HW1                                    0175
*         END;                                                     0176
@RC00170 DS    0H                                                  0177
*        IF TUPSWD ^= 0 THEN                /* IF PSWORD UNIT BUILT  */
@RF00166 SLR   R15,R15                                             0177
         L     R14,TUPSWD(,GTPLOUT1)                               0177
         CR    R14,R15                                             0177
         BE    @RF00177                                            0177
*         DO;                               /* THEN                  */
*           PPTR2 = ADDR(PWLEN);            /* PTR TO PSW LEN & PARM */
         LA    R9PPTR2,PWLEN(,R14)                                 0179
*           SAVPWLEN = PSWLEN;              /* SAVE PASSWORD LENGTH  */
         LH    R1,PSWLEN(,R9PPTR2)                                 0180
         STH   R1,SAVPWLEN                                         0180
*           IF PSWLEN = 0 THEN              /* IF PSW NOT ENTERED,   */
         CR    R1,R15                                              0181
         BNE   @RF00181                                            0181
*             DO;                           /* THEN                  */
*               PWKEY = 0;                  /* SET KEY TO 0          */
         STH   R15,PWKEY(,R14)                                     0183
*               PWNUM = 0;                  /* SET NUMBER TO 0       */
         STH   R15,PWNUM(,R14)                                     0184
*             END;                                                 0185
*           ELSE                            /* ELSE,                 */
*             PWNUM = 1;                    /* SET PSW NUMBER TO 1   */
         B     @RC00181                                            0186
@RF00181 L     R1,TUPSWD(,GTPLOUT1)                                0186
         MVC   PWNUM(2,R1),@HW1                                    0186
*         END;                                                     0187
@RC00181 DS    0H                                                  0188
*        CNCTFLG1 = '00'X;                  /* SET FLAGS TO 0        */
@RF00177 MVI   CNCTFLG1,X'00'                                      0188
*        S99NOCNV = '1'B;                   /* DONT USE EXISTING   0189
*                                              ALLOCATIONS           */
         L     R1,PTRS99RB(,R3AWAPTR)                              0189
         OI    S99NOCNV(R1),B'01000000'                            0189
*        DO WHILE (SEARCH = '0'B);          /* ALLOCATE DS LIST      */
         B     @DE00190                                            0190
@DL00190 DS    0H                                                  0191
*          CALL DYNSVC;                     /* INVOKE DYN ALLOCATION */
         BAL   R14,DYNSVC                                          0191
*          IF LISTNMBR = DSNCTR THEN        /* IF 1ST DS IN LIST,    */
         CH    LISTNMBR,DSNCTR(,R3AWAPTR)                          0192
         BNE   @RF00192                                            0192
*            CALL FIRSTCC;                  /* PROCESS               */
         BAL   R14,FIRSTCC                                         0193
*          ELSE                             /* IF NOT 1ST DS,        */
*            CALL OTHERCC;                  /* PROCESS               */
         B     @RC00192                                            0194
@RF00192 BAL   R14,OTHERCC                                         0194
*          IF RBCODE12 = '0'B THEN          /* IF NO ERROR FOUND     */
@RC00192 TM    RBCODE12(R3AWAPTR),B'10000000'                      0195
         BNZ   @RF00195                                            0195
*            DO;                            /* WHILE PROCESSING      */
*              LISTNMBR = LISTNMBR-1;       /* DECREMENT COUNTER     */
         BCTR  LISTNMBR,0                                          0197
*              IF LISTNMBR = 0 THEN         /* IF COUNTER 0          */
         LTR   LISTNMBR,LISTNMBR                                   0198
         BNZ   @RF00198                                            0198
*                SEARCH = '1'B;             /* EXIT FROM DO-WHILE    */
         OI    SEARCH,B'10000000'                                  0199
*              ELSE                         /* OTHERWISE             */
*                DO;                        /* PROCESS NEXT DSN      */
         B     @RC00198                                            0200
@RF00198 DS    0H                                                  0201
*                  DPTR2 = DPTR2+2+DALEN;   /* UPDATE DSN PTR,       */
         LA    R15,2                                               0201
         LR    R14,R2DPTR2                                         0201
         ALR   R14,R15                                             0201
         L     R1,TUDSN(,GTPLOUT1)                                 0201
         AH    R14,DALEN(,R1)                                      0201
         LR    R2DPTR2,R14                                         0201
*                  DALEN = DATALEN;         /* MOVE DS LEN & PARM    */
         LH    R0,DATALEN(,R2DPTR2)                                0202
         STH   R0,DALEN(,R1)                                       0202
*                  DAPARM(1:DALEN)=DATAVAL(1:DALEN);               0203
         BCTR  R0,0                                                0203
         LR    R14,R0                                              0203
         EX    R14,@SM00888                                        0203
*                  IF TUMBR ^= 0 THEN       /* IF MEMBER UNIT BUILT  */
         SLR   R14,R14                                             0204
         L     R1,TUMBR(,GTPLOUT1)                                 0204
         CR    R1,R14                                              0204
         BE    @RF00204                                            0204
*                   DO;                     /* THEN                  */
*                  MPTR2 = MPTR2+2+SAVMBLEN;/* PTR TO MBR LEN & PARM */
         ALR   R15,R7MPTR2                                         0206
         ALR   R15,SAVMBLEN                                        0206
         LR    R7MPTR2,R15                                         0206
*                  SAVMBLEN = MEMLEN;       /* SAVE MEMBER LENGTH    */
         LH    R15,MEMLEN(,R7MPTR2)                                0207
         LR    SAVMBLEN,R15                                        0207
*                  IF MEMLEN = 0 THEN       /* IF MBR NOT ENTERED,   */
         CR    R15,R14                                             0208
         BNE   @RF00208                                            0208
*                    DO;                    /* THEN                  */
*                    MBKEY = 0;             /* SET KEY TO 0          */
         STH   R14,MBKEY(,R1)                                      0210
*                    MBNUM = 0;             /* SET NUMBER TO 0       */
         STH   R14,MBNUM(,R1)                                      0211
*                    END;                                          0212
*                  ELSE                                            0213
*                    DO;                    /* OTHERWISE             */
         B     @RC00208                                            0213
@RF00208 DS    0H                                                  0214
*                      MBKEY = DALMEMBR;    /* SET MEMBER KEY        */
         L     R15,TUMBR(,GTPLOUT1)                                0214
         MVC   MBKEY(2,R15),@HWMEMBR                               0214
*                      MBNUM = 1;           /* SET MBR NUMBER        */
         MVC   MBNUM(2,R15),@HW1                                   0215
*                      MBLEN = MEMLEN;      /* MOVE MBR LEN & PARM   */
         LH    R14,MEMLEN(,R7MPTR2)                                0216
         STH   R14,MBLEN(,R15)                                     0216
*                      MBPARM(1:MBLEN)=MBRVAL(1:MBLEN);            0217
         BCTR  R14,0                                               0217
         EX    R14,@SM00890                                        0217
*                    END;                                          0218
*                   END;                                           0219
@RC00208 DS    0H                                                  0220
*                  IF TUPSWD ^= 0 THEN      /* IF PSWORD UNIT BUILT  */
@RF00204 SLR   R15,R15                                             0220
         L     R14,TUPSWD(,GTPLOUT1)                               0220
         CR    R14,R15                                             0220
         BE    @RF00220                                            0220
*                   DO;                     /* THEN                  */
*                  PPTR2 = PPTR2+2+SAVPWLEN;/* PTR TO PSW LEN & PARM */
         LA    R1,2                                                0222
         ALR   R1,R9PPTR2                                          0222
         AH    R1,SAVPWLEN                                         0222
         LR    R9PPTR2,R1                                          0222
*                  SAVPWLEN = PSWLEN;       /* SAVE PASSWORD LENGTH  */
         LH    R1,PSWLEN(,R9PPTR2)                                 0223
         STH   R1,SAVPWLEN                                         0223
*                  IF PSWLEN = 0 THEN       /* IF PSW NOT ENTERED,   */
         CR    R1,R15                                              0224
         BNE   @RF00224                                            0224
*                    DO;                    /* THEN                  */
*                    PWKEY = 0;             /* SET KEY TO 0          */
         STH   R15,PWKEY(,R14)                                     0226
*                    PWNUM = 0;             /* SET NUMBER TO 0       */
         STH   R15,PWNUM(,R14)                                     0227
*                    END;                                          0228
*                  ELSE                                            0229
*                    DO;                    /* OTHERWISE             */
         B     @RC00224                                            0229
@RF00224 DS    0H                                                  0230
*                      PWKEY = DALPASSW;    /* SET PASSWORD KEY      */
         L     R15,TUPSWD(,GTPLOUT1)                               0230
         MVC   PWKEY(2,R15),@HWPASSW                               0230
*                      PWNUM = 1;           /* SET PASSWORD NUMBER   */
         MVC   PWNUM(2,R15),@HW1                                   0231
*                      PWLEN = PSWLEN;      /* MOVE PSW LEN & PARM   */
         LH    R14,PSWLEN(,R9PPTR2)                                0232
         STH   R14,PWLEN(,R15)                                     0232
*                      PWPARM(1:PWLEN)=PSWVAL(1:PWLEN);            0233
         BCTR  R14,0                                               0233
         EX    R14,@SM00892                                        0233
*                    END;                                          0234
*                   END;                                           0235
*                END;                                              0236
*            END;                                                  0237
*          ELSE                             /* IF ERROR IN PROCESSING*/
*            SEARCH = '1'B;                 /* EXIT DO-WHILE         */
         B     @RC00195                                            0238
@RF00195 OI    SEARCH,B'10000000'                                  0238
*        END;                               /* END DO-WHILE          */
@RC00195 DS    0H                                                  0239
@DE00190 TM    SEARCH,B'10000000'                                  0239
         BZ    @DL00190                                            0239
*        SEARCH = '0'B;                     /* RE-SET SWITCH         */
         NI    SEARCH,B'01111111'                                  0240
*        S99NOCNV = '0'B;                   /* TURN OFF NO CONVERT   */
         L     R10,PTRS99RB(,R3AWAPTR)                             0241
         NI    S99NOCNV(R10),B'10111111'                           0241
*   END CONCTDSN;                                                  0242
@EL00003 DS    0H                                                  0242
@EF00003 DS    0H                                                  0242
@ER00003 LM    R14,R7,@SA00003                                     0242
         LM    R9,R12,@SA00003+40                                  0242
         BR    R14                                                 0242
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      CONCTERR                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE FREES ANY DATA SETS THAT HAVE BEEN ALLOCATED   */
*/*      PRIOR TO FINDING AN ERROR IN THE CONCATENATION REQUEST.     */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      EACH DDNAME IS FREED. IF AN ERROR OCCURS WHILE FREEING ANY  */
*/*      OF THE DATA SETS, ISSUE AN ERROR MESSAGE AND CONTINUE.      */
*/*      WHEN ALL THE DATA SETS HAVE BEEN FREED, ISSUE THE           */
*/*      APPROPRIATE ERROR MSG.                                      */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      LIST OF DDNAMES                                             */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      LIST OF DDNAMES FREED                                       */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*    CONCTERR: PROC;                                               0243
CONCTERR STM   R14,R4,@SA00004                                     0243
         STM   R6,R12,@SA00004+28                                  0243
*        DDLST = ADDR(DDNMLEN);        /* PTR TO DD LEN & PARM       */
         LA    R5DDLST,DDNMLEN(,DDNAPTR)                           0244
*        IF ALLOCERR = '1'B THEN       /* IF ALLOCATION ERROR        */
         TM    ALLOCERR,B'01000000'                                0245
         BNO   @RF00245                                            0245
*          DSFREED = DSNCTR - LISTNMBR;/* GET NUMBER TO FREE         */
         LH    DSFREED,DSNCTR(,R3AWAPTR)                           0246
         SLR   DSFREED,LISTNMBR                                    0246
*        ELSE                          /* IF OTHER ERROR,            */
*          DSFREED = DSNCTR - LISTNMBR +1;   /* ADD 1 MORE           */
         B     @RC00245                                            0247
@RF00245 LH    DSFREED,DSNCTR(,R3AWAPTR)                           0247
         SLR   DSFREED,LISTNMBR                                    0247
         AL    DSFREED,@FW1                                        0247
*        PERMCTKY = DUNUNALC;          /* SET UNALLOC OPTION KEY     */
@RC00245 MVC   PERMCTKY(2,DDNAPTR),@HWUNALC                        0248
*        DDNMPTR = ADDR(DDFREEBF);     /* PTR TO TEXT TO BE BUILT    */
         LA    R10,DDFREEBF                                        0249
         ST    R10,DDNMPTR(,DDNAPTR)                               0249
*        DDFKEY = DUNDDNAM;            /* SET KEY IN TEXT UNIT       */
         MVC   DDFKEY(2),@HWDDNAM                                  0250
*        DDFNUM = 1;                   /* SET NUMBER TO 1            */
         MVC   DDFNUM(2),@HW1                                      0251
*        DDFLEN = DDNMLNGH;            /* MOVE DDNAME LENGTH         */
         LH    R10,DDNMLNGH(,R5DDLST)                              0252
         STH   R10,DDFLEN                                          0252
*        DDFVAL(1:DDFLEN)=DDNMPARM(1:DDFLEN);  /* MOVE DDNAME        */
         BCTR  R10,0                                               0253
         EX    R10,@SM00896                                        0253
*        S99VERB = S99VRBUN;           /* SET UNALLOC VERB CODE      */
         L     R10,PTRS99RB(,R3AWAPTR)                             0254
         MVI   S99VERB(R10),X'02'                                  0254
*        S99TXTPP = DDNAPTR;           /* PTR TO DDNAMES             */
         ST    DDNAPTR,S99TXTPP(,R10)                              0255
*        S99NOCNV = '0'B;              /* TURN OFF FLAGS             */
         NI    S99NOCNV(R10),B'10111111'                           0256
*        DDNMEND = '1'B;               /* END ADDRESS LIST           */
         OI    DDNMEND(DDNAPTR),B'10000000'                        0257
*        DO WHILE (SEARCH='0'B);       /* UNALLOCATE DDNAMES         */
         B     @DE00258                                            0258
@DL00258 DS    0H                                                  0259
*          CALL DYNSVC;                /* INVOKE DYN ALLOCATION      */
         BAL   R14,DYNSVC                                          0259
*          IF RCODESV > 0 THEN         /* IF UNALLOCATION FAILED,    */
         L     R10,RCODESV(,R3AWAPTR)                              0260
         LTR   R10,R10                                             0260
         BNP   @RF00260                                            0260
*            DO;                                                   0261
*              ENTRYCD = 1;            /* SET ENTRY CODE             */
         MVC   ENTRYCD(2,R3AWAPTR),@HW1                            0262
*              R1 = AWAPTR;            /* WORKAREA PTR IN REG 1      */
         LR    R1,R3AWAPTR                                         0263
*              CALL IKJEFD35;          /* ISSUE ERROR MESSAGE        */
         L     R15,VCONSD35                                        0264
         BALR  R14,R15                                             0264
*            END;                                                  0265
*          DSFREED = DSFREED-1;        /* DECREMENT CTR BY 1         */
@RF00260 BCTR  DSFREED,0                                           0266
*          IF DSFREED = 0 THEN         /* IF CTR IS 0 (END OF LIST)  */
         LTR   DSFREED,DSFREED                                     0267
         BNZ   @RF00267                                            0267
*            SEARCH = '1'B;            /* EXIT FROM DO-WHILE         */
         OI    SEARCH,B'10000000'                                  0268
*          ELSE                                                    0269
*            DO;                       /* OTHERWISE, UPDATE PTR TO   */
         B     @RC00267                                            0269
@RF00267 DS    0H                                                  0270
*              DDLST = DDLST + 2 + DDNMLNGH; /* DD LEN AND PARM      */
         LA    R10,2                                               0270
         ALR   R10,R5DDLST                                         0270
         AH    R10,DDNMLNGH(,R5DDLST)                              0270
         LR    R5DDLST,R10                                         0270
*              DDFLEN = DDNMLNGH;     /* MOVE LEN AND PARM          */
         LH    R10,DDNMLNGH(,R5DDLST)                              0271
         STH   R10,DDFLEN                                          0271
*              DDFVAL(1:DDFLEN)=DDNMPARM(1:DDFLEN);                0272
         BCTR  R10,0                                               0272
         EX    R10,@SM00896                                        0272
*            END;                                                  0273
*        END;                          /* END DO-WHILE               */
@RC00267 DS    0H                                                  0274
@DE00258 TM    SEARCH,B'10000000'                                  0274
         BZ    @DL00258                                            0274
*        SEARCH = '0'B;                /* RESET SWITCH               */
         NI    SEARCH,B'01111111'                                  0275
*        CALL CCERRMSG;                /* ISSUE APPROPRIATE MSG      */
         BAL   R14,CCERRMSG                                        0276
*   END CONCTERR;                                                  0277
@EL00004 DS    0H                                                  0277
@EF00004 DS    0H                                                  0277
@ER00004 LM    R14,R4,@SA00004                                     0277
         LM    R6,R12,@SA00004+28                                  0277
         BR    R14                                                 0277
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      FIRSTCC                                                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      IF DYNAMIC ALLOCATION FAILED DUE TO FILE IN USE, PROMPT     */
*/*      THE USER FOR THE OPTION. IF USER REQUESTS TO TERMINATE,     */
*/*      ISSUE MESSAGE AND TERMINATE. IF MORE THAN 16 PARTITIONED    */
*/*      DATA SETS SPECIFIED, ISSUE ERROR MESSAGE AND TERMINATE.     */
*/*      ELSE, SAVE THE DSORG (FOR LATER COMPARISONS) AND THE        */
*/*      DDNAME.                                                     */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      WORKAREA                                                    */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RBCODE12 = 0 - CONTINUE WITH NEXT DSNAME                    */
*/*                 1 - ERROR FOUND, TERMINATE                       */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*    FIRSTCC: PROC;                                                0278
FIRSTCC  STM   R14,R4,@SA00005                                     0278
         STM   R6,R12,@SA00005+28                                  0278
*        IF RCODESV > 0 & S99ERROR = '0410'X  THEN  /* IF ALLOCATION
*                                                    FAILED  @YM06354*/
         L     R10,RCODESV(,R3AWAPTR)                              0279
         LTR   R10,R10                                             0279
         BNP   @RF00279                                            0279
         L     R9,PTRS99RB(,R3AWAPTR)                              0279
         CLC   S99ERROR(2,R9),@HEX0410                             0279
         BNE   @RF00279                                            0279
*          DO;                         /* & FILE IN USE THEN @YM06354*/
*            SAVERC = RCODESV;         /* SAVE DYN RC        @Z30LPKH*/
         LR    R7SAVERC,R10                                        0281
*            R1 = AWAPTR;              /* WORKAREA PTR IN REG 1      */
         LR    R1,R3AWAPTR                                         0282
*            CALL IKJEFD36;            /* PROMPT FOR FILE OPTION     */
         L     R15,VCONSD36                                        0283
         BALR  R14,R15                                             0283
*            RCODESV = SAVERC;         /* RESTORE DYN RC     @Z30LPKH*/
         ST    R7SAVERC,RCODESV(,R3AWAPTR)                         0284
*            IF TERMOPT = '1'B THEN    /* IF OPTION TO TERMINATE     */
         TM    TERMOPT(R3AWAPTR),B'00001000'                       0285
         BNO   @RF00285                                            0285
*            DO;                       /* THEN                       */
*            TERMOPT = '0'B;           /* TURN OFF INDICATOR         */
         NI    TERMOPT(R3AWAPTR),B'11110111'                       0287
*            ALLOCERR = '1'B;          /* INDICATE ERROR TYPE        */
         OI    ALLOCERR,B'01000000'                                0288
*            CALL CCERRMSG;            /* ISSUE ERROR MESSAGE        */
         BAL   R14,CCERRMSG                                        0289
*            END;                                                  0290
*            ELSE                                 /*         @YM06354*/
*              FREEFL = '1'B;                     /*         @YM06354*/
         B     @RC00285                                            0291
@RF00285 OI    FREEFL,B'00001000'                                  0291
*          END;                                   /*         @YM06354*/
*        ELSE                          /*                    @OZ02964*/
*            IF RCODESV > 0 & S99ERROR ^= '0410'X THEN  /*   @YM06354*/
         B     @RC00279                                            0293
@RF00279 L     R10,RCODESV(,R3AWAPTR)                              0293
         LTR   R10,R10                                             0293
         BNP   @RF00293                                            0293
         L     R10,PTRS99RB(,R3AWAPTR)                             0293
         CLC   S99ERROR(2,R10),@HEX0410                            0293
         BE    @RF00293                                            0293
*              DO;                                                 0294
*                ALLOCERR = '1'B;      /* INDICATE ERROR TYPE        */
         OI    ALLOCERR,B'01000000'                                0295
*                ENTRYCD = 1;          /* SET ENTRY CODE             */
         MVC   ENTRYCD(2,R3AWAPTR),@HW1                            0296
*                R1 = AWAPTR;          /* WORKAREA IN REG 1          */
         LR    R1,R3AWAPTR                                         0297
*                CALL IKJEFD35;        /* ISSUE DYNALLOC ERROR MSG   */
         L     R15,VCONSD35                                        0298
         BALR  R14,R15                                             0298
*                CALL CCERRMSG;        /* ISSUE ERROR MESSAGE        */
         BAL   R14,CCERRMSG                                        0299
*              END;                                                0300
*        IF FREEFL = '1'B | RCODESV = 0 THEN /* IF ALLOCATION      0301
*                                                 SUCCESSFUL @YM06354*/
@RF00293 DS    0H                                                  0301
@RC00279 TM    FREEFL,B'00001000'                                  0301
         BO    @RT00301                                            0301
         L     R10,RCODESV(,R3AWAPTR)                              0301
         LTR   R10,R10                                             0301
         BNZ   @RF00301                                            0301
@RT00301 DS    0H                                                  0302
*          DO;                         /* THEN                       */
*            FILEKY = 0;               /* SET FILE KEY TO 0          */
         SLR   R10,R10                                             0303
         L     R9,TUFILE(,GTPLOUT1)                                0303
         STH   R10,FILEKY(,R9)                                     0303
*            FILENUM = 0;                                          0304
         STH   R10,FILENUM(,R9)                                    0304
*            DDNMLNGH = RTDDNLEN;      /* SAVE DDNAME RETURNED       */
         L     R10,TURTDDN(,GTPLOUT1)                              0305
         LH    R9,RTDDNLEN(,R10)                                   0305
         STH   R9,DDNMLNGH(,R5DDLST)                               0305
*            DDNMPARM(1:RTDDNLEN) = RTDDNAME(1:RTDDNLEN);          0306
         LR    R7,R9                                               0306
         BCTR  R7,0                                                0306
         EX    R7,@SM00900                                         0306
*            DDLST = DDLST + 2 + RTDDNLEN;                         0307
         LA    R7,2                                                0307
         ALR   R7,R5DDLST                                          0307
         ALR   R7,R9                                               0307
         LR    R5DDLST,R7                                          0307
*            RTDDNLEN = 8;             /* SET DDNAME LENGTH TO 8     */
         MVC   RTDDNLEN(2,R10),@HW8                                0308
*                                      /* IF DSORG PARTITIONED AND 0309
*                                         OVER 16 DSNAMES GIVEN,     */
*            IF DSNCTR > 16 & PARTND = '1'B THEN                   0309
         LH    R10,DSNCTR(,R3AWAPTR)                               0309
         C     R10,@FW16                                           0309
         BNH   @RF00309                                            0309
         L     R10,TURTDSO(,GTPLOUT1)                              0309
         TM    PARTND(R10),B'00000010'                             0309
         BNO   @RF00309                                            0309
*              DO;                     /* THEN                       */
*                MAXERR = '1'B;        /* INDICATE ERROR TYPE        */
         OI    MAXERR,B'00100000'                                  0311
*                CALL CONCTERR;        /* ISSUE ERROR MESSAGE        */
         BAL   R14,CONCTERR                                        0312
*              END;                                                0313
*            ELSE                                                  0314
*              DO;                                                 0314
         B     @RC00309                                            0314
@RF00309 DS    0H                                                  0315
*                IF SEQUEN = '1'B THEN /* IF SEQUENTIAL DSORG        */
         L     R10,TURTDSO(,GTPLOUT1)                              0315
         TM    SEQUEN(R10),B'01000000'                             0315
         BNO   @RF00315                                            0315
*                  DSORGSQ = '1'B;     /* INDICATE SO                */
         OI    DSORGSQ,B'01000000'                                 0316
*                ELSE                                              0317
*                  IF PARTND = '1'B THEN   /* IF PARTITIONED DSORG   */
         B     @RC00315                                            0317
@RF00315 L     R10,TURTDSO(,GTPLOUT1)                              0317
         TM    PARTND(R10),B'00000010'                             0317
         BNO   @RF00317                                            0317
*                    IF MBNUM = 1 THEN     /* WITH MEMB SPEC @ZA04568*/
         L     R10,TUMBR(,GTPLOUT1)                                0318
         CLC   MBNUM(2,R10),@HW1                                   0318
         BNE   @RF00318                                            0318
*                      DSORGSQ = '1'B;     /* INDICATE SEQ   @ZA04568*/
         OI    DSORGSQ,B'01000000'                                 0319
*                    ELSE                  /* DSORG. MEM NOT @ZA04568*/
*                      DSORGPR = '1'B;     /* SPEC DSORD IS  @ZA04568*/
         B     @RC00318                                            0320
@RF00318 OI    DSORGPR,B'00100000'                                 0320
*                                          /* PARTITIONED    @ZA04568*/
*                  ELSE                                            0321
*                    IF VSAM = '1'B THEN   /* IF VSAM DATA SET       */
         B     @RC00317                                            0321
@RF00317 L     R10,TURTDSO(,GTPLOUT1)                              0321
         TM    VSAM(R10),B'00010000'                               0321
         BNO   @RF00321                                            0321
*                      DSORGVM = '1'B;     /* INDICATE SO            */
         OI    DSORGVM,B'00010000'                                 0322
*                    ELSE                                          0323
*                      DO;                 /* IF NEITHER OF ABOVE    */
         B     @RC00321                                            0323
@RF00321 DS    0H                                                  0324
*                        INVORG = '1'B;    /* INDICATE ERROR TYPE    */
         OI    INVORG,B'00001000'                                  0324
*                        CALL CONCTERR;    /* ISSUE ERROR MESSAGE    */
         BAL   R14,CONCTERR                                        0325
*                      END;                                        0326
*              END;                                                0327
*          END;                                                    0328
*    END FIRSTCC;                                                  0329
@EL00005 DS    0H                                                  0329
@EF00005 DS    0H                                                  0329
@ER00005 LM    R14,R4,@SA00005                                     0329
         LM    R6,R12,@SA00005+28                                  0329
         BR    R14                                                 0329
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      OTHERCC                                                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE PROCESSES DATA SETS IN THE LIST OTHER THAN     */
*/*      THE FIRST DATA SET.                                         */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      IF DYNAMIC ALLOCATION FAILED, ISSUE ERROR MESSAGE AND       */
*/*      TERMINATE. IF THE DATA SET ORGANIZATION IS NOT THE SAME     */
*/*      AS THAT OF THE FIRST DATA SET, ISSUE AN ERROR MESSAGE AND   */
*/*      TERMINATE. SAVE THE DDNAME RETURNED BY DYNAMIC ALLOCATION   */
*/*      FOR THIS DATA SET.                                          */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      DATA SET ORGANIZATION                                       */
*/*      DDNAME                                                      */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RBCODE12 = 0 - CONTINUE WITH NEXT DSNAME                    */
*/*                 1 - ERROR FOUND, TERMINATE                       */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*    OTHERCC: PROC;                                                0330
OTHERCC  STM   R14,R4,@SA00006                                     0330
         STM   R6,R12,@SA00006+28                                  0330
*        IF RCODESV > 0 THEN           /* IF ALLOCATION FAILED,      */
         L     R10,RCODESV(,R3AWAPTR)                              0331
         LTR   R10,R10                                             0331
         BNP   @RF00331                                            0331
*          DO;                         /* THEN                       */
*            ALLOCERR = '1'B;          /* INDICATE ERROR TYPE        */
         OI    ALLOCERR,B'01000000'                                0333
*            ENTRYCD = 1;              /* SET ENTRY CODE             */
         MVC   ENTRYCD(2,R3AWAPTR),@HW1                            0334
*            R1 = AWAPTR;              /* WORKAREA IN REG 1          */
         LR    R1,R3AWAPTR                                         0335
*            CALL IKJEFD35;            /* ISSUE DYNALLOC ERROR MSG   */
         L     R15,VCONSD35                                        0336
         BALR  R14,R15                                             0336
*            CALL CONCTERR;            /* ISSUE ERROR MESSAGE        */
         BAL   R14,CONCTERR                                        0337
*          END;                                                    0338
*        ELSE                          /* ELSE,                      */
*          DO;                                                     0339
         B     @RC00331                                            0339
@RF00331 DS    0H                                                  0340
*            DDNMLNGH = RTDDNLEN;      /* SAVE DDNAME RETURNED       */
         L     R10,TURTDDN(,GTPLOUT1)                              0340
         LH    R9,RTDDNLEN(,R10)                                   0340
         STH   R9,DDNMLNGH(,R5DDLST)                               0340
*            DDNMPARM(1:RTDDNLEN) = RTDDNAME(1:RTDDNLEN);          0341
         LR    R7,R9                                               0341
         BCTR  R7,0                                                0341
         EX    R7,@SM00900                                         0341
*            DDLST = DDLST +2 + RTDDNLEN;                          0342
         LA    R10,2                                               0342
         ALR   R10,R5DDLST                                         0342
         ALR   R10,R9                                              0342
         LR    R5DDLST,R10                                         0342
*                                      /* CHECK DSORG TO BE SAME     */
*            IF (DSORGSQ='1'B & (SEQUEN='0'B & MBNUM=0))|  /*@ZA04568*/
*               (DSORGPR='1'B & PARTND='0'B) |                     0343
*               (DSORGPR='1'B & (PARTND='1'B & MBNUM=1))|  /*@ZA04568*/
*                (DSORGVM='1'B & VSAM='0'B) THEN                   0343
         TM    DSORGSQ,B'01000000'                                 0343
         BNO   @GL00007                                            0343
         L     R10,TURTDSO(,GTPLOUT1)                              0343
         TM    SEQUEN(R10),B'01000000'                             0343
         BNZ   @GL00007                                            0343
         L     R10,TUMBR(,GTPLOUT1)                                0343
         LH    R10,MBNUM(,R10)                                     0343
         LTR   R10,R10                                             0343
         BZ    @RT00343                                            0343
@GL00007 TM    DSORGPR,B'00100000'                                 0343
         BNO   @GL00006                                            0343
         L     R10,TURTDSO(,GTPLOUT1)                              0343
         TM    PARTND(R10),B'00000010'                             0343
         BZ    @RT00343                                            0343
@GL00006 TM    DSORGPR,B'00100000'                                 0343
         BNO   @GL00005                                            0343
         L     R10,TURTDSO(,GTPLOUT1)                              0343
         TM    PARTND(R10),B'00000010'                             0343
         BNO   @GL00005                                            0343
         L     R10,TUMBR(,GTPLOUT1)                                0343
         CLC   MBNUM(2,R10),@HW1                                   0343
         BE    @RT00343                                            0343
@GL00005 TM    DSORGVM,B'00010000'                                 0343
         BNO   @RF00343                                            0343
         L     R10,TURTDSO(,GTPLOUT1)                              0343
         TM    VSAM(R10),B'00010000'                               0343
         BNZ   @RF00343                                            0343
@RT00343 DS    0H                                                  0344
*              DO;                     /* NO -                       */
*                DSORGERR = '1'B;      /* INDICATE ERROR TYPE        */
         OI    DSORGERR,B'00010000'                                0345
*                CALL CONCTERR;        /* ISSUE ERROR MESSAGE        */
         BAL   R14,CONCTERR                                        0346
*              END;                                                0347
*          END;                                                    0348
*    END OTHERCC;                                                  0349
@EL00006 DS    0H                                                  0349
@EF00006 DS    0H                                                  0349
@ER00006 LM    R14,R4,@SA00006                                     0349
         LM    R6,R12,@SA00006+28                                  0349
         BR    R14                                                 0349
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      CCERRMSG                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE ISSUES A MESSAGE WHEN AN ERROR HAS BEEN FOUND  */
*/*      IN THE CONCATENATION REQUEST.                               */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE FIRST LEVEL MESSAGE NOTIFIES THE USER THAT THE DATA SETS*/
*/*      WERE NOT CONCATENATED. THE SECOND LEVEL MESSAGE GIVES ONE   */
*/*      OF THE FOLLOWING REASONS-                                   */
*/*      NUMBER OF DATA SETS IN THE LIST EXCEEDS THE MAXIMUM, DSORG  */
*/*      IS NOT THE SAME FOR ALL DATA SETS IN THE LIST, STATUS IS    */
*/*      NEW,MOD, OR SYSOUT, OR ALLOCATION ERROR OCCURRED.           */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      ERROR TYPE INDICATOR                                        */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      MESSAGE ISSUED                                              */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*    CCERRMSG: PROC;                                               0350
CCERRMSG STM   R14,R12,@SA00007                                    0350
*        MSGTABLE = MSGTABLE && MSGTABLE;/* CLEAR INTERFACE AREA     */
         L     R10,MSGPTR(,R3AWAPTR)                               0351
         XC    MSGTABLE(64,R10),MSGTABLE(R10)                      0351
*        RBCODE12 = '1'B;                /* INDICATE ALLOC FAILED    */
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0352
*        IF MAXERR = '1'B THEN           /* IF MAXIMUM ERROR,        */
         TM    MAXERR,B'00100000'                                  0353
         BNO   @RF00353                                            0353
*          MSGID = '107A';               /* SET MESSAGE ID           */
         MVC   MSGID(4,R10),@CHR107A                               0354
*        IF DSORGERR = '1'B THEN         /* IF DSORG ERROR,          */
@RF00353 TM    DSORGERR,B'00010000'                                0355
         BNO   @RF00355                                            0355
*          MSGID = '106A';               /* SET MESSAGE ID           */
         L     R10,MSGPTR(,R3AWAPTR)                               0356
         MVC   MSGID(4,R10),@CHR106A                               0356
*        IF INVORG = '1'B THEN           /* IF INVALID DSORG,        */
@RF00355 TM    INVORG,B'00001000'                                  0357
         BNO   @RF00357                                            0357
*          MSGID = '110A';               /* SET MESSAGE ID           */
         L     R10,MSGPTR(,R3AWAPTR)                               0358
         MVC   MSGID(4,R10),@CHR110A                               0358
*        IF STATSERR = '1'B THEN         /* IF STATUS ERROR,         */
@RF00357 TM    STATSERR,B'10000000'                                0359
         BNO   @RF00359                                            0359
*          DO;                           /* THEN                     */
*            MSGID = '108A';             /* SET MESSAGE ID           */
         L     R10,MSGPTR(,R3AWAPTR)                               0361
         MVC   MSGID(4,R10),@CHR108A                               0361
*            IF STATSPDE = 3 THEN        /* IF STATUS MOD,           */
         L     R5,PTRPDL(,R3AWAPTR)                                0362
         CLC   STATSPDE(2,R5),@HW3                                 0362
         BNE   @RF00362                                            0362
*              DO;                       /* THEN                     */
*                VAR1 = ADDR(MOD);       /* PUT MOD VARIABLE         */
         LA    R5,MOD                                              0364
         ST    R5,@TF00001                                         0364
         MVC   VAR1(3,R10),@TF00001+1                              0364
*                L1 = LENGTH(MOD);       /* AND LENGTH IN LIST       */
         MVI   L1(R10),X'03'                                       0365
*              END;                                                0366
*            IF STATSPDE = 4 THEN        /* IF STATUS NEW            */
@RF00362 L     R10,PTRPDL(,R3AWAPTR)                               0367
         CLC   STATSPDE(2,R10),@HW4                                0367
         BNE   @RF00367                                            0367
*              DO;                       /* THEN,                    */
*                VAR1 = ADDR(NEW);       /* PUT NEW VARIABLE         */
         L     R10,MSGPTR(,R3AWAPTR)                               0369
         LA    R5,NEW                                              0369
         ST    R5,@TF00001                                         0369
         MVC   VAR1(3,R10),@TF00001+1                              0369
*                L1 = LENGTH(NEW);       /* AND LENGTH IN LIST       */
         MVI   L1(R10),X'03'                                       0370
*              END;                                                0371
*            IF STATSPDE = 5 THEN        /* IF STATUS SYSOUT         */
@RF00367 L     R10,PTRPDL(,R3AWAPTR)                               0372
         CLC   STATSPDE(2,R10),@HW5                                0372
         BNE   @RF00372                                            0372
*              DO;                       /* THEN                     */
*                VAR1 = ADDR(SYSOUT);    /* PUT SYSOUT VARIABLE      */
         L     R10,MSGPTR(,R3AWAPTR)                               0374
         LA    R5,SYSOUT                                           0374
         ST    R5,@TF00001                                         0374
         MVC   VAR1(3,R10),@TF00001+1                              0374
*                L1 = LENGTH(SYSOUT);    /* AND LENGTH IN LIST       */
         MVI   L1(R10),X'06'                                       0375
*              END;                                                0376
*          END;                                                    0377
@RF00372 DS    0H                                                  0378
*        IF ALLOCERR = '1'B THEN         /* IF ALLOCATION ERROR,     */
@RF00359 TM    ALLOCERR,B'01000000'                                0378
         BNO   @RF00378                                            0378
*          DO;                                                     0379
*            MSGID = '109A';             /* SET MESSAGE ID           */
         L     R10,MSGPTR(,R3AWAPTR)                               0380
         MVC   MSGID(4,R10),@CHR109A                               0380
*            VAR1 = ADDR(DAPARM);        /* PUT DSNAME VARIABLE      */
         L     R5,TUDSN(,GTPLOUT1)                                 0381
         LA    R2,DAPARM(,R5)                                      0381
         ST    R2,@TF00001                                         0381
         MVC   VAR1(3,R10),@TF00001+1                              0381
*            L1 = DALEN;                 /* AND LENGTH IN LIST       */
         LH    R5,DALEN(,R5)                                       0382
         STC   R5,L1(,R10)                                         0382
*          END;                                                    0383
*        LISTPTR = ADDR(MSGCSECT);       /* ADDR OF PARM LIST        */
@RF00378 L     R10,MSGPTR(,R3AWAPTR)                               0384
         LA    R5,MSGCSECT(,R10)                                   0384
         ST    R5,LISTPTR(,R10)                                    0384
*        MTCPPL = CPPLPTR;               /* PTR TO CPPL              */
         L     R5,CPPLPTR(,R3AWAPTR)                               0385
         ST    R5,MTCPPL(,R10)                                     0385
*        ECBPTR = ADDR(COMMECB);         /* PTR TO ECB               */
         LA    R5,COMMECB(,R3AWAPTR)                               0386
         ST    R5,ECBPTR(,R10)                                     0386
*        COMMECB = 0;                    /* INIT ECB TO 0            */
         SLR   R5,R5                                               0387
         ST    R5,COMMECB(,R3AWAPTR)                               0387
*        MTHIGH = '1'B;                  /* SET HIGH ORDER BIT ON    */
         OI    MTHIGH(R10),B'10000000'                             0388
*        MTPUTLSW = '1'B;                /* INDICATE PUTLINE         */
         OI    MTPUTLSW(R10),B'01000000'                           0389
*        MSGCSECT = PTRMSGS;             /* MSG CSECT ADDRESS        */
         L     R5,PTRMSGS(,R3AWAPTR)                               0390
         ST    R5,MSGCSECT(,R10)                                   0390
*        R1 = ADDR(MSGTABLE);            /* PARM LIST IN REG 1       */
         LR    R1,R10                                              0391
*        GEN (LINK EP=IKJEFF02);         /* INVOKE MESSAGE PROCESSOR */
*                                                                  0392
         LINK EP=IKJEFF02
*    END CCERRMSG;                                                 0393
@EL00007 DS    0H                                                  0393
@EF00007 DS    0H                                                  0393
@ER00007 LM    R14,R12,@SA00007                                    0393
         BR    R14                                                 0393
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      PRMPTDDN                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE PROMPTS THE USER TO ENTER A FILENAME WHEN      */
*/*      THE PARAMETER HAS BEEN OMITTED AND IS REQUIRED.             */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*       INVOKE PARSE WITH A SECONDARY PCL AND PDL ADDRESS.  IF     */
*/*       PARSE FAILS, ISSUE ERROR MESSAGE. ELSE, OVERLAY THE        */
*/*       ORIGINAL PDE WITH THE PDE RETURNED FROM THE PROMPT.        */
*/*                                                                  */
*/* INPUT -                                                          */
*/*       PTR TO FILE PDE                                            */
*/*       PTR TO SECONDARY PCL                                       */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*       FILE PDE OVERLAID WITH NEW DATA                            */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        CAN BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE  */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*    PRMPTDDN: PROC;                                               0394
PRMPTDDN STM   R14,R12,@SA00008                                    0394
*        ENTRYCD = 4;                      /* INDICATE DDN PROMPT    */
         MVC   ENTRYCD(2,R3AWAPTR),@HW4                            0395
*        R1 = AWAPTR;                      /* WORKAREA PTR IN REG 1  */
         LR    R1,R3AWAPTR                                         0396
*        CALL IKJEFD37;                                            0397
         L     R15,VCONSD37                                        0397
         BALR  R14,R15                                             0397
*        IF RCODESV > 0 THEN               /* IF RETURN CODE >0      */
         L     R10,RCODESV(,R3AWAPTR)                              0398
         LTR   R10,R10                                             0398
         BNP   @RF00398                                            0398
*          DO;                                                     0399
*            ENTRYCD = 2;                  /* SET ENTRY CODE         */
         MVC   ENTRYCD(2,R3AWAPTR),@HW2                            0400
*            R1 = AWAPTR;                                          0401
         LR    R1,R3AWAPTR                                         0401
*            CALL IKJEFD35;                                        0402
         L     R15,VCONSD35                                        0402
         BALR  R14,R15                                             0402
*          END;                                                    0403
*        ELSE                                                      0404
*          DO;                             /* ELSE,                  */
         B     @RC00398                                            0404
@RF00398 DS    0H                                                  0405
*            FILEPDE = 1;                  /* INDICATE FILE PRESENT  */
         L     R10,PTRPDL(,R3AWAPTR)                               0405
         MVC   FILEPDE(2,R10),@HW1                                 0405
*            DDNPTR = ADDR(NDDNBUF1);      /* PTR TO NEW BUFFER      */
         LA    R2,NDDNBUF1                                         0406
         ST    R2,DDNPTR(,R10)                                     0406
*            DDNLEN = DDLNGH2;             /* NEW LENGTH             */
         L     R2,PMPTPDL(,R3AWAPTR)                               0407
         LH    R15,DDLNGH2(,R2)                                    0407
         STH   R15,DDNLEN(,R10)                                    0407
*            DDNFLAGS = DDFLAG2;           /* FLAGS AND PARM         */
         MVC   DDNFLAGS(1,R10),DDFLAG2(R2)                         0408
*            NDDNBUF1(1:DDNLEN) = DDNBUF1(1:DDNLEN);               0409
         BCTR  R15,0                                               0409
         L     R10,DDPTR2(,R2)                                     0409
         EX    R15,@SM00903                                        0409
*            RFY R5 RSTD;                  /* RESTRICT REG 5         */
*            R5 = ADDR(PMPTPDL);          /* PROMPT PDL IN REG 5    */
         LA    R5,PMPTPDL(,R3AWAPTR)                               0411
*            GEN (IKJRLSA (5));            /* RELEASE PDL            */
         IKJRLSA (5)
*            RFY R5 UNRSTD;                /* UNRESTRICT REG 5       */
*          END;                                                    0414
*    END PRMPTDDN;                                                 0415
@EL00008 DS    0H                                                  0415
@EF00008 DS    0H                                                  0415
@ER00008 LM    R14,R12,@SA00008                                    0415
         BR    R14                                                 0415
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      TRANSRTN                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS MODULE INVOKES GENTRANS TO TRANSLATE PARAMETERS TO     */
*/*      DYNAMIC ALLOCATION TEXT FORMAT.                             */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE TEXT UNIT FOR PERMANENT ALLOCATION IS SET UP. GENTRANS  */
*/*      IS INVOKED. IF GENTRANS FAILS, AN INDICATOR IS SET TO       */
*/*      SHOW THE ERROR. ELSE, THE POINTER TO THE TEXT BUILT BY      */
*/*      GENTRANS IS PUT INTO THE DYNAMIC ALLOCATION REQUEST BLOCK.  */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      GENTRANS PARAMETER LIST                                     */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RBOCDE12 = 0 - GENTRANS SUCCESSFUL                          */
*/*                 1 - GENTRANS ERROR                               */
*/*                                                                  */
*/********************************************************************/
*    TRANSRTN: PROC;                                               0416
TRANSRTN STM   R14,R3,@SA00009                                     0416
         STM   R5,R12,@SA00009+24                                  0416
*        ADLKEY = DALPERMA;            /* PERMANENT ALLOC KEY        */
         L     R10,TXT(,R3AWAPTR)                                  0417
         MVC   ADLKEY(2,R10),@HWPERMA                              0417
*        ADLNBR = 0;                   /* NUMBER 0                   */
         SLR   R9,R9                                               0418
         STH   R9,ADLNBR(,R10)                                     0418
*        ADDTEXT(INC) = TXT;           /* PTR TO TEXT UNIT           */
         LR    R9,R8INC                                            0419
         SLA   R9,2                                                0419
         L     R5,GTPLPTR(,R3AWAPTR)                               0419
         L     R2,GTPLABLK(,R5)                                    0419
         ST    R10,@TF00001                                        0419
         ALR   R9,R2                                               0419
         MVC   ADDTEXT-4(4,R9),@TF00001                            0419
*        ADDNUM = ADDNUM + 1;          /* INCREMENT NUMBER OF ENTRIES *
         LA    R10,1                                               0420
         AH    R10,ADDNUM(,R2)                                     0420
         STH   R10,ADDNUM(,R2)                                     0420
*        R1 = GTPLPTR;                 /* PARM LIST IN REG 1         */
         LR    R1,R5                                               0421
*        GEN (LINK EP=IKJCB831);       /* INVOKE GENTRANS            */
         LINK EP=IKJCB831
*        RCODESV = R15;                /* SAVE RETURN CODE           */
         ST    R15,RCODESV(,R3AWAPTR)                              0423
*        IF RCODESV > 0 THEN           /* IF GENTRANS FAILED,        */
         L     R10,RCODESV(,R3AWAPTR)                              0424
         LTR   R10,R10                                             0424
         BNP   @RF00424                                            0424
*          DO;                         /* THEN                       */
*            ENTRYCD = 3;              /* SET ENTRY CODE             */
         MVC   ENTRYCD(2,R3AWAPTR),@HW3                            0426
*            R1 = AWAPTR;                                          0427
         LR    R1,R3AWAPTR                                         0427
*            CALL IKJEFD35;                                        0428
         L     R15,VCONSD35                                        0428
         BALR  R14,R15                                             0428
*          END;                                                    0429
*        ELSE                          /* OTHERWISE,                 */
*          DO;                                                     0430
         B     @RC00424                                            0430
@RF00424 DS    0H                                                  0431
*            S99TXTPP = GTPLOUTA + 8;  /* TEXT PTR IN REQUEST BLOCK  */
         L     R10,PTRS99RB(,R3AWAPTR)                             0431
         L     R5,GTPLPTR(,R3AWAPTR)                               0431
         L     R5,GTPLOUTA(,R5)                                    0431
         LA    R2,8                                                0431
         ALR   R2,R5                                               0431
         ST    R2,S99TXTPP(,R10)                                   0431
*            GTPLOUT1 = GTPLOUTA;      /* SAVE TEXT PTR              */
         LR    GTPLOUT1,R5                                         0432
*          END;                                                    0433
*                                                                  0433
*    END TRANSRTN;                                                 0434
@EL00009 DS    0H                                                  0434
@EF00009 DS    0H                                                  0434
@ER00009 LM    R14,R3,@SA00009                                     0434
         LM    R5,R12,@SA00009+24                                  0434
         BR    R14                                                 0434
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      DYNSVC                                                      */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE INVOKES DYNAMIC ALLOCATION.                    */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE PARAMETER LIST IS COMPLETED. SVC 99 IS ISSUED. THE      */
*/*      RETURN CODE IN REGISTER 15 IS SAVED.                        */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      SVC 99 REQUEST BLOCK                                        */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE                                                 */
*/*                                                                  */
*/********************************************************************/
*    DYNSVC: PROC;                                                 0435
*                                                                  0435
DYNSVC   STM   R14,R12,12(R13)                                     0435
*        R1 = ADDR(S99RBPTR);                                      0436
         LA    R1,S99RBPTR                                         0436
*        S99RBPTR = PTRS99RB;                                      0437
         L     R10,PTRS99RB(,R3AWAPTR)                             0437
         ST    R10,S99RBPTR                                        0437
*        S99RBPND = '1'B;              /* HIGH ORDER BIT ON          */
*                                                                  0438
*                                                                  0438
         OI    S99RBPND,B'10000000'                                0438
*         /*MACDATE Y-2 73082*/                                    0439
*         SVC (99);                    /* ISSUE SVC 99               */
*                                                                  0439
         SVC   99                                                  0439
*        RCODESV = R15;                /* SAVE RETURN CODE           */
*                                                                  0440
         ST    R15,RCODESV(,R3AWAPTR)                              0440
*    END DYNSVC;                                                   0441
@EL00010 DS    0H                                                  0441
@EF00010 DS    0H                                                  0441
@ER00010 LM    R14,R12,12(R13)                                     0441
         BR    R14                                                 0441
*    END IKJEFD34                                                  0442
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJZT430)                                        *
*/*%INCLUDE SYSLIB  (IKJCPPL )                                        *
*/*%INCLUDE SYSLIB  (IKJPPL  )                                        *
*/*%INCLUDE SYSLIB  (IKJEFFMT)                                        *
*/*%INCLUDE SYSLIB  (IKJZB831)                                        *
*/*%INCLUDE SYSLIB  (IEFZB4D0)                                        *
*/*%INCLUDE SYSLIB  (IEFZB4D2)                                        *
*;                                                                 0442
@DATA    DC    0H'0'
@HW3     DC    H'3'
@HW4     DC    H'4'
@HW5     DC    H'5'
@HW8     DC    H'8'
@HW10    DC    H'10'
@HWDDNAM DC    XL2'0001'
@HWMEMBR DC    XL2'0003'
@HWPERMC DC    XL2'0004'
@HWUNALC DC    XL2'0007'
@HWPASSW DC    XL2'0050'
@HWPERMA DC    XL2'0052'
@HWRTDDN DC    XL2'0055'
@HWRTORG DC    XL2'0057'
@SM00888 MVC   DAPARM(0,R1),DATAVAL(R2DPTR2)
@SM00890 MVC   MBPARM(0,R15),MBRVAL(R7MPTR2)
@SM00892 MVC   PWPARM(0,R15),PSWVAL(R9PPTR2)
@SM00896 MVC   DDFVAL(0),DDNMPARM(R5DDLST)
@SM00900 MVC   DDNMPARM(0,R5DDLST),RTDDNAME(R10)
@SM00903 MVC   NDDNBUF1(0),DDNBUF1(R10)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SAV001  EQU   @SA00001
@SA00007 DS    15F
@SA00008 DS    15F
@SA00009 DS    14F
@SA00003 DS    14F
@SA00004 DS    14F
@SA00005 DS    14F
@SA00006 DS    14F
@TF00001 DS    F
@ZTEMPS  DS    C
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
@TEMPS   EQU   @ZTEMPS
@L       EQU   @ZLEN
IKJEFD34 CSECT
         DC    0F'0'
@FW1     DC    F'1'
@HW1     EQU   @FW1+2
@FW2     DC    F'2'
@HW2     EQU   @FW2+2
@FW12    DC    F'12'
@FW14    DC    F'14'
@FW16    DC    F'16'
@DATD    DSECT
         DS    0D
S99RBPTR DS    AL4
         ORG   S99RBPTR
S99RBPND DS    BL1
         ORG   S99RBPTR+4
S99TUFP  DS    A
SAVPWLEN DS    H
         DS    CL2
CORE     DS    CL4
         ORG   CORE
SPNO     DS    CL1
SIZE     DS    AL3
         ORG   CORE+4
DDFREEBF DS    CL14
         ORG   DDFREEBF
DDFKEY   DS    FL2
DDFNUM   DS    FL2
DDFLEN   DS    FL2
DDFVAL   DS    CL8
         ORG   DDFREEBF+14
CNCTFLAG DS    CL1
         ORG   CNCTFLAG
STATSERR DS    BL1
ALLOCERR EQU   CNCTFLAG+0
MAXERR   EQU   CNCTFLAG+0
DSORGERR EQU   CNCTFLAG+0
INVORG   EQU   CNCTFLAG+0
@NM00011 EQU   CNCTFLAG+0
         ORG   CNCTFLAG+1
CNCTFLG1 DS    CL1
         ORG   CNCTFLG1
SEARCH   DS    BL1
DSORGSQ  EQU   CNCTFLG1+0
DSORGPR  EQU   CNCTFLG1+0
DSORGVM  EQU   CNCTFLG1+0
FREEFL   EQU   CNCTFLG1+0
@NM00021 EQU   CNCTFLG1+0
         ORG   CNCTFLG1+1
NDDNBUF1 DS    CL8
SAVEFLG  DS    CL1
         ORG   *+1-(*-@DATD)/(*-@DATD) ENSURE DSECT DATA
@ENDDATD EQU   *
@DATEND  EQU   *
IKJEFD34 CSECT
         DC    0F'0'
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
@SIZ001  EQU   @SIZDATD
VCONSD35 DC    V(IKJEFD35)
VCONSD36 DC    V(IKJEFD36)
VCONSD37 DC    V(IKJEFD37)
         DC    0D'0'
@CHR107A DC    C'107A'
@CHR106A DC    C'106A'
@CHR110A DC    C'110A'
@CHR108A DC    C'108A'
@CHR109A DC    C'109A'
@HEX0410 DC    X'0410'
MOD      DC    CL3'MOD'
NEW      DC    CL3'NEW'
SYSOUT   DC    CL6'SYSOUT'
         DC    0F'0'
PATCH32  DC    25F'0'
CONCTEXT DC    X'12'
         DC    X'10'
         DC    X'14'
         DC    X'1E'
         DC    X'2E'
         DC    X'20'
         DC    X'22'
         DC    X'1A'
         DC    X'1C'
         DC    X'2A'
         DC    X'2C'
         DC    X'24'
         DC    X'0E'
         DC    X'26'
         DC    X'28'
         DC    X'18'
         DC    X'16'
         DC    X'30'                                               @26A
         DC    X'00'
         DC    0D'0'                   END OF CSECT                @26A
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
GTPLOUT1 EQU   R4
LISTNMBR EQU   R8
DSFREED  EQU   R7
R5DDLST  EQU   R5
DDNAPTR  EQU   R6
SAVMBLEN EQU   R10
R9PPTR2  EQU   R9
R7MPTR2  EQU   R7
R2DPTR2  EQU   R2
R8INC    EQU   R8
R5EXTRAN EQU   R5
R7SAVERC EQU   R7
R3AWAPTR EQU   R3
R2I      EQU   R2
REGSAVE  EQU   4
RETCODE  EQU   16
ALLOCWA  EQU   0
CPPLPTR  EQU   ALLOCWA
PTRPDL   EQU   ALLOCWA+4
GTPLPTR  EQU   ALLOCWA+8
SWITCH   EQU   ALLOCWA+12
RBCODE12 EQU   SWITCH
CONT     EQU   SWITCH
TERMOPT  EQU   SWITCH
ENTRYCD  EQU   ALLOCWA+14
TXT      EQU   ALLOCWA+16
PTRS99RB EQU   ALLOCWA+20
RCODESV  EQU   ALLOCWA+24
DSNCTR   EQU   ALLOCWA+30
PTRMSGS  EQU   ALLOCWA+32
VCFLAGS  EQU   ALLOCWA+36
PMPTPDL  EQU   ALLOCWA+40
MSGPTR   EQU   ALLOCWA+48
CMDTWO   EQU   ALLOCWA+60
COMMECB  EQU   ALLOCWA+160
PPLPTR   EQU   ALLOCWA+172
ALLOCPDL EQU   0
FILEPDE  EQU   ALLOCPDL+10
STATSPDE EQU   ALLOCPDL+12
DSNPDE   EQU   ALLOCPDL+48+4                                       @26C
DSNPTR   EQU   DSNPDE
DSNFLAGS EQU   DSNPDE+6
MBRPTR   EQU   DSNPDE+8
MBRFLAGS EQU   DSNPDE+14
PASSPTR  EQU   DSNPDE+16
PASSFLAG EQU   DSNPDE+22
DDNMEPDE EQU   ALLOCPDL+76+4                                       @26C
DDNPTR   EQU   DDNMEPDE
DDNLEN   EQU   DDNMEPDE+4
DDNFLAGS EQU   DDNMEPDE+6
CLASPDE  EQU   ALLOCPDL+84+4                                       @26C
CLASPTR  EQU   CLASPDE
CLASFLG  EQU   CLASPDE+6
SERPDE   EQU   ALLOCPDL+92+4                                       @26C
SERPTR   EQU   SERPDE
SERFLAGS EQU   SERPDE+6
BLKPDE   EQU   ALLOCPDL+104+4                                      @26C
BLKPTR   EQU   BLKPDE
BLKFLAGS EQU   BLKPDE+6
ABLKPDE  EQU   ALLOCPDL+112+4                                      @26C
ABLKPTR  EQU   ABLKPDE
ABLKFLG  EQU   ABLKPDE+6
SPACPDE  EQU   ALLOCPDL+120+4                                      @26C
SPACEPTR EQU   SPACPDE
SPACEFLG EQU   SPACPDE+6
SPACPDE2 EQU   ALLOCPDL+128+4                                      @26C
SPACPTR2 EQU   SPACPDE2
SPACFLG2 EQU   SPACPDE2+6
DIRECPDE EQU   ALLOCPDL+136+4                                      @26C
DIRPTR   EQU   DIRECPDE
DIRFLAGS EQU   DIRECPDE+6
ATTRPDE  EQU   ALLOCPDL+144+4                                      @26C
ATTRPTR  EQU   ATTRPDE
ATTRFLAG EQU   ATTRPDE+6
USIDPDE  EQU   ALLOCPDL+152+4                                      @26C
USIDPTR  EQU   USIDPDE
USIDFLAG EQU   USIDPDE+6
UTYPPDE  EQU   ALLOCPDL+160+4                                      @26C
UTYPPTR  EQU   UTYPPDE
UTYPFLAG EQU   UTYPPDE+6
UNCNTPDE EQU   ALLOCPDL+168+4                                      @26C
UCNTPTR  EQU   UNCNTPDE
UCNTFLAG EQU   UNCNTPDE+6
POSTPDE  EQU   ALLOCPDL+180+4                                      @26C
POSPTR   EQU   POSTPDE
POSFLAG  EQU   POSTPDE+6
MXVOLPDE EQU   ALLOCPDL+188+4                                      @26C
MXVOLPTR EQU   MXVOLPDE
MXVOLFLG EQU   MXVOLPDE+6
VOLSQPDE EQU   ALLOCPDL+196+4                                      @26C
VOLSQPTR EQU   VOLSQPDE
VOLSQFLG EQU   VOLSQPDE+6
MSVGPDE  EQU   ALLOCPDL+204+4                                      @26C
MSVGPTR  EQU   MSVGPDE
MSVGFLG  EQU   MSVGPDE+6
DSNBUF   EQU   0
CPPL     EQU   0
PPL      EQU   0
PDEEXT   EQU   0
MSGTABLE EQU   0
LISTPTR  EQU   MSGTABLE
TMCTPTR  EQU   MSGTABLE+4
MTCPPL   EQU   TMCTPTR
ECBPTR   EQU   MSGTABLE+8
@NM00005 EQU   MSGTABLE+12
MTHIGH   EQU   @NM00005
MSGCSECT EQU   MSGTABLE+16
SW       EQU   MSGTABLE+20
MTPUTLSW EQU   SW
RETMSG   EQU   MSGTABLE+21
SW2      EQU   MSGTABLE+24
MSGID    EQU   MSGTABLE+40
MTINSRTS EQU   MSGTABLE+44
L1       EQU   MTINSRTS
VAR1     EQU   MTINSRTS+1
L2       EQU   MTINSRTS+4
L3       EQU   MTINSRTS+8
L4       EQU   MTINSRTS+12
RET      EQU   0
TEXTCORE EQU   0
ADDNUM   EQU   TEXTCORE
ADDTEXT  EQU   TEXTCORE+4
ADLTEXT  EQU   0
ADLKEY   EQU   ADLTEXT
ADLNBR   EQU   ADLTEXT+2
ADLLEN   EQU   ADLTEXT+4
FILETXT  EQU   0
FILEKY   EQU   FILETXT
FILENUM  EQU   FILETXT+2
DSNTUNIT EQU   0
DANUM    EQU   DSNTUNIT+2
DALEN    EQU   DSNTUNIT+4
DAPARM   EQU   DSNTUNIT+6
DSUNIT   EQU   0
DATALEN  EQU   DSUNIT
DATAVAL  EQU   DSUNIT+2
MBRTUNIT EQU   0
MBKEY    EQU   MBRTUNIT
MBNUM    EQU   MBRTUNIT+2
MBLEN    EQU   MBRTUNIT+4
MBPARM   EQU   MBRTUNIT+6
MBUNIT   EQU   0
MEMLEN   EQU   MBUNIT
MBRVAL   EQU   MBUNIT+2
PSWTUNIT EQU   0
PWKEY    EQU   PSWTUNIT
PWNUM    EQU   PSWTUNIT+2
PWLEN    EQU   PSWTUNIT+4
PWPARM   EQU   PSWTUNIT+6
PWUNIT   EQU   0
PSWLEN   EQU   PWUNIT
PSWVAL   EQU   PWUNIT+2
DDNCAREA EQU   0
PERMCTPT EQU   DDNCAREA
DDNMPTR  EQU   DDNCAREA+4
DDNMEND  EQU   DDNMPTR
PERMCTXT EQU   DDNCAREA+8
PERMCTKY EQU   PERMCTXT
PERMCTNM EQU   PERMCTXT+2
DDNMTXT  EQU   DDNCAREA+12
DDNMKEY  EQU   DDNMTXT
DDNMNBR  EQU   DDNMTXT+2
DDNMLEN  EQU   DDNMTXT+4
DDNMLIST EQU   0
DDNMLNGH EQU   DDNMLIST
DDNMPARM EQU   DDNMLIST+2
DADSORG  EQU   0
RTDSORG  EQU   DADSORG+6
SEQUEN   EQU   RTDSORG
PARTND   EQU   RTDSORG
VSAM     EQU   RTDSORG+1
DADDNAME EQU   0
RTDDNLEN EQU   DADDNAME+4
RTDDNAME EQU   DADDNAME+6
DDPDE2   EQU   0
DDPTR2   EQU   DDPDE2+8
DDLNGH2  EQU   DDPDE2+12
DDFLAG2  EQU   DDPDE2+14
DDNBUF1  EQU   0
GTPL     EQU   0
GTPLABLK EQU   GTPL+16
GTPLOUTA EQU   GTPL+20
TEXTRET  EQU   0
TUDSN    EQU   TEXTRET+8
TUMBR    EQU   TEXTRET+12
TUPSWD   EQU   TEXTRET+16
TUFILE   EQU   TEXTRET+20
TURTDDN  EQU   TEXTRET+96+4                                        @26C
TURTDSO  EQU   TEXTRET+100+4                                       @26C
S99RB    EQU   0
S99VERB  EQU   S99RB+1
S99FLAG1 EQU   S99RB+2
S99FLG11 EQU   S99FLAG1
S99NOCNV EQU   S99FLG11
S99RSC   EQU   S99RB+4
S99ERROR EQU   S99RSC
S99TXTPP EQU   S99RB+8
S99FLAG2 EQU   S99RB+16
S99FLG21 EQU   S99FLAG2
S99FLG22 EQU   S99FLAG2+1
S99TUPL  EQU   0
S99TUPTR EQU   S99TUPL
S99TUP   EQU   0
S99TUNIT EQU   0
S99TUENT EQU   S99TUNIT+4
S99TUFLD EQU   0
ABLKBUF  EQU   0
ATTRBUF  EQU   0
BLKBUF   EQU   0
CLASSBUF EQU   0
DDNBUF   EQU   0
DIRBUF   EQU   0
MBRBUF   EQU   0
MSGECB   EQU   0
MSGTMCT  EQU   0
MSVGBUF  EQU   0
MXVOLBUF EQU   0
PASSBUF  EQU   0
POSTBUF  EQU   0
SERBUF   EQU   0
SPACBUF2 EQU   0
SPACEBUF EQU   0
UCNTBUF  EQU   0
USIDBUF  EQU   0
UTYPBUF  EQU   0
VSEQBUF  EQU   0
INPARMS  EQU   0
*                                      START UNREFERENCED COMPONENTS
S99TUPRM EQU   S99TUFLD+2
S99TULEN EQU   S99TUFLD
S99TUPAR EQU   S99TUENT+2
S99TULNG EQU   S99TUENT
S99TUNUM EQU   S99TUNIT+2
S99TUKEY EQU   S99TUNIT
S99TUPND EQU   S99TUP
S99TUPLN EQU   S99TUPTR
S99FLG24 EQU   S99FLAG2+3
S99FLG23 EQU   S99FLAG2+2
S99PCINT EQU   S99FLG22
S99UDEVT EQU   S99FLG22
S99MOUNT EQU   S99FLG21
S99CATLG EQU   S99FLG21
S99TIONQ EQU   S99FLG21
S99OFFLN EQU   S99FLG21
S99WTUNT EQU   S99FLG21
S99NORES EQU   S99FLG21
S99WTDSN EQU   S99FLG21
S99WTVOL EQU   S99FLG21
S99RSV01 EQU   S99RB+12
S99INFO  EQU   S99RSC+2
S99FLG12 EQU   S99FLAG1+1
S99JBSYS EQU   S99FLG11
S99NOMNT EQU   S99FLG11
S99ONCNV EQU   S99FLG11
S99RBLN  EQU   S99RB
TUDISP   EQU   TEXTRET+92
TURND    EQU   TEXTRET+88
TURLSE   EQU   TEXTRET+84
TUVSEQ   EQU   TEXTRET+80
TUPRIV   EQU   TEXTRET+76
TUMAXV   EQU   TEXTRET+72
TUPOS    EQU   TEXTRET+68
TULABEL  EQU   TEXTRET+64
TUUCNT   EQU   TEXTRET+60
TUUNIT   EQU   TEXTRET+56
TUHOLD   EQU   TEXTRET+52
TUDEST   EQU   TEXTRET+48
TUUSING  EQU   TEXTRET+44
TUDIR    EQU   TEXTRET+40
TUSPACE  EQU   TEXTRET+36
TUBLOK   EQU   TEXTRET+32
TUVOL    EQU   TEXTRET+28
TUSTATS  EQU   TEXTRET+24
TUPSWDND EQU   TUPSWD
ENTRYNBR EQU   TEXTRET+4
SBPLSIZE EQU   TEXTRET
GTPLTBLE EQU   GTPL+12
GTPLKLST EQU   GTPL+8
GTPLPCL  EQU   GTPL+4
GTPLPDL  EQU   GTPL
@NM00024 EQU   DDPDE2+15
@NM00023 EQU   DDPDE2+4
@NM00022 EQU   DDPDE2
@NM00020 EQU   DADDNAME+2
@NM00019 EQU   DADDNAME
@NM00018 EQU   RTDSORG+1
@NM00017 EQU   RTDSORG
@NM00016 EQU   RTDSORG
@NM00015 EQU   RTDSORG
@NM00014 EQU   DADSORG+4
@NM00013 EQU   DADSORG+2
@NM00012 EQU   DADSORG
DDNMVAL  EQU   DDNMTXT+6
DAKEY    EQU   DSNTUNIT
ADLPARM  EQU   ADLTEXT+6
ADDUNIT  EQU   TEXTCORE+36
@NM00010 EQU   TEXTCORE+2
RETCHAR  EQU   RET+2
RETSIZE  EQU   RET
MSGRTN   EQU   MSGTABLE+60
VAR4     EQU   MTINSRTS+13
HIGHL4   EQU   L4
VAR3     EQU   MTINSRTS+9
HIGHL3   EQU   L3
VAR2     EQU   MTINSRTS+5
HIGHL2   EQU   L2
HIGHL1   EQU   L1
@NM00009 EQU   MSGTABLE+36
@NM00008 EQU   MSGTABLE+32
MTOLDPTR EQU   MSGTABLE+28
@NM00007 EQU   MSGTABLE+25
@NM00006 EQU   SW2
MTPGMSW  EQU   SW2
MTNPLMSW EQU   SW2
MTNOXQSW EQU   SW2
MTDOMSW  EQU   SW2
MT2OLDSW EQU   SW2
MTNHEXSW EQU   SW
MTWTPSW  EQU   SW
MTJOBISW EQU   SW
MTKEY1SW EQU   SW
MTHEXSW  EQU   SW
MTWTOSW  EQU   SW
MTNOIDSW EQU   SW
PPLUWA   EQU   PPL+24
PPLCBUF  EQU   PPL+20
PPLANS   EQU   PPL+16
PPLPCL   EQU   PPL+12
PPLECB   EQU   PPL+8
PPLECT   EQU   PPL+4
PPLUPT   EQU   PPL
CPPLECT  EQU   CPPL+12
CPPLPSCB EQU   CPPL+8
CPPLUPT  EQU   CPPL+4
CPPLCBUF EQU   CPPL
DSNTERM  EQU   DSNBUF
MSVGRSV2 EQU   MSVGPDE+7
MSVGRSV1 EQU   MSVGFLG
MSVGPRES EQU   MSVGFLG
MSVGLEN  EQU   MSVGPDE+4
VOLRSV2  EQU   VOLSQPDE+7
VOLRSV1  EQU   VOLSQFLG
VOLPRES  EQU   VOLSQFLG
VOLSQLEN EQU   VOLSQPDE+4
MXVRSV2  EQU   MXVOLPDE+7
MXVRSV1  EQU   MXVOLFLG
MXVPRES  EQU   MXVOLFLG
MXVOLLEN EQU   MXVOLPDE+4
POSRSV2  EQU   POSTPDE+7
POSRSV1  EQU   POSFLAG
POSPRES  EQU   POSFLAG
POSLEN   EQU   POSTPDE+4
LABLRSV1 EQU   ALLOCPDL+178+4                                      @26C
LABELPDE EQU   ALLOCPDL+176+4                                      @26C
UCNTRSV2 EQU   UNCNTPDE+7
UCNTRSV1 EQU   UCNTFLAG
UCNTPRES EQU   UCNTFLAG
UCNTLEN  EQU   UNCNTPDE+4
UTYPRSV2 EQU   UTYPPDE+7
UTYPRSV1 EQU   UTYPFLAG
UTYPPRES EQU   UTYPFLAG
UTYPLEN  EQU   UTYPPDE+4
USIDRSV2 EQU   USIDPDE+7
USIDRSV1 EQU   USIDFLAG
USIDPRES EQU   USIDFLAG
USIDLEN  EQU   USIDPDE+4
ATTRRSV2 EQU   ATTRPDE+7
ATTRRSV1 EQU   ATTRFLAG
ATTRPRES EQU   ATTRFLAG
ATTRLEN  EQU   ATTRPDE+4
DIRRSV2  EQU   DIRECPDE+7
DIRRSV1  EQU   DIRFLAGS
DIRPRES  EQU   DIRFLAGS
DIRLEN   EQU   DIRECPDE+4
SPCRSV22 EQU   SPACPDE2+7
SPCRSV12 EQU   SPACFLG2
SPCPRES2 EQU   SPACFLG2
SPACLEN2 EQU   SPACPDE2+4
SPACRSV2 EQU   SPACPDE+7
SPACRSV1 EQU   SPACEFLG
SPACPRES EQU   SPACEFLG
SPACELEN EQU   SPACPDE+4
ABLKRSV2 EQU   ABLKPDE+7
ABLKRSV1 EQU   ABLKFLG
ABLKPRES EQU   ABLKFLG
ABLKLEN  EQU   ABLKPDE+4
BLKRSV2  EQU   BLKPDE+7
BLKRSV1  EQU   BLKFLAGS
BLKPRES  EQU   BLKFLAGS
BLKLEN   EQU   BLKPDE+4
SERNEXT  EQU   SERPDE+8
SERRSV2  EQU   SERPDE+7
SERRSV1  EQU   SERFLAGS
SERPRES  EQU   SERFLAGS
SERLEN   EQU   SERPDE+4
CLASRSV2 EQU   CLASPDE+7
CLASRSV1 EQU   CLASFLG
CLASPRES EQU   CLASFLG
CLASLEN  EQU   CLASPDE+4
DDNRSV2  EQU   DDNMEPDE+7
DDNRSV1  EQU   DDNFLAGS
DDNPRES  EQU   DDNFLAGS
DSNNEXT  EQU   DSNPDE+24
PASSRSV2 EQU   DSNPDE+23
PASSRSV1 EQU   PASSFLAG
PASSPRES EQU   PASSFLAG
PASSLEN  EQU   DSNPDE+20
MBRRSV2  EQU   DSNPDE+15
MBRRSV1  EQU   MBRFLAGS
MBRPRES  EQU   MBRFLAGS
MBRLEN   EQU   DSNPDE+12
DSNRSV2  EQU   DSNPDE+7
DSNRSV1  EQU   DSNFLAGS
DSNQUOT  EQU   DSNFLAGS
DSNPRES  EQU   DSNFLAGS
DSNLENGH EQU   DSNPDE+4
DISPPDE  EQU   ALLOCPDL+46
RNDPDE   EQU   ALLOCPDL+44
RLSEPDE  EQU   ALLOCPDL+42
VSEQPDE  EQU   ALLOCPDL+40
PRIVPDE  EQU   ALLOCPDL+38
MAXVPDE  EQU   ALLOCPDL+36
POSPDE   EQU   ALLOCPDL+34
LABLPDE  EQU   ALLOCPDL+32
UCNTPDE  EQU   ALLOCPDL+30
UNITPDE  EQU   ALLOCPDL+28
HOLDPDE  EQU   ALLOCPDL+26
DESTPDE  EQU   ALLOCPDL+24
USINGPDE EQU   ALLOCPDL+22
DIRPDE   EQU   ALLOCPDL+20
SPACEPDE EQU   ALLOCPDL+18
BLOKPDE  EQU   ALLOCPDL+16
VOLPDE   EQU   ALLOCPDL+14
DSPDE    EQU   ALLOCPDL+8
@NM00004 EQU   ALLOCPDL+4
@NM00003 EQU   ALLOCPDL
FIRSTPTR EQU   ALLOCWA+176
NBLKBUF1 EQU   ALLOCWA+164
PDLADDR3 EQU   ALLOCWA+156
PPLTWO   EQU   ALLOCWA+128
CMDTWOBF EQU   CMDTWO+4
CMDTWOOF EQU   CMDTWO+2
CMDTWOLN EQU   CMDTWO
Q        EQU   ALLOCWA+56
P        EQU   ALLOCWA+52
PRCODE   EQU   ALLOCWA+44
@NM00002 EQU   ALLOCWA+38
NCLASBUF EQU   ALLOCWA+37
@NM00001 EQU   VCFLAGS
SPACE2   EQU   VCFLAGS
SPACE1   EQU   VCFLAGS
AVBLK    EQU   VCFLAGS
VLISTCTR EQU   ALLOCWA+28
SWITCH2  EQU   ALLOCWA+13                                          @26C
FIRSTPDE EQU   SWITCH
AWARSV1  EQU   SWITCH
ASTRSK   EQU   SWITCH
PROMPT   EQU   SWITCH
DSOVRLAY EQU   SWITCH
*                                      END UNREFERENCED COMPONENTS
@RC00142 EQU   @EL00001
@RC00198 EQU   @RC00195
@RF00220 EQU   @RC00195
@RC00224 EQU   @RC00195
@RC00285 EQU   @RC00279
@RF00301 EQU   @EL00005
@RC00309 EQU   @EL00005
@RC00321 EQU   @EL00005
@RC00317 EQU   @EL00005
@RC00315 EQU   @EL00005
@RC00331 EQU   @EL00006
@RF00343 EQU   @EL00006
@RC00398 EQU   @EL00008
@RC00424 EQU   @EL00009
@RC00318 EQU   @RC00317
@EL01    EQU   @EL00001
@ENDDATA EQU   *
         END   IKJEFD34,(C'PLS1704',0701,75248)
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
  IDENTIFY IKJEFD34('ZP60026')
++MOD(IKJEFD35) DISTLIB(AOST4).
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT)'
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE 'ALLOCATE ERROR HANDLING ROUTINE                        *
                        '
***********************************************************************
*  $26   ZP60026  2010-01-23 GREG PRICE: ADD 'REUSE' OPERAND.         *
*                            CHANGES APPLIED TO EBB1102 LEVEL.        *
***********************************************************************
IKJEFD35 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(33)                                             @26C
         DC    C'IKJEFD35  74.204'                                 0001
         DC    CL17' ZP60026 2010.023'                             @26A
         DROP  R15
@PROLOG  STM   R14,R12,12(R13)                                     0001
         BALR  R12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,R12                                         0001
         L     R0,@SIZDATD                                         0001
         GETMAIN  R,LV=(0)
         LR    R11,R1                                              0001
         USING @DATD,R11                                           0001
         ST    R13,@SA00001+4                                      0001
         LM    R0,R1,20(R13)                                       0001
         ST    R11,8(,R13)                                         0001
         LR    R13,R11                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
         MVC   @PC00001(4),0(R1)                                   0001
*        AWAPTR = R1;                       /* PTR TO WORK AREA      */
         LR    R3AWAPTR,R1                                         0043
*        MSGTABLE = MSGTABLE && MSGTABLE;   /* CLEAR MSG AREA        */
         L     R10,MSGPTR(,R3AWAPTR)                               0044
         XC    MSGTABLE(64,R10),MSGTABLE(R10)                      0044
*        IF ENTRYCD = 1 THEN                /* IF DYNALLOC ERROR     */
         CLC   ENTRYCD(2,R3AWAPTR),@HW1                            0045
         BNE   @RF00045                                            0045
*          CALL DFAILRTN;                   /* INVOKE MSG ROUTINE    */
         BAL   R14,DFAILRTN                                        0046
*        ELSE                               /* ELSE,                 */
*          IF ENTRYCD = 2 THEN              /* IF PARSE ERROR        */
         B     @RC00045                                            0047
@RF00045 CLC   ENTRYCD(2,R3AWAPTR),@HW2                            0047
         BNE   @RF00047                                            0047
*            CALL PARSERR;                  /* INVOKE PARSE MSG RTN  */
         BAL   R14,PARSERR                                         0048
*          ELSE                             /* ELSE,                 */
*            IF ENTRYCD = 3 |               /* IF GENTRANS OR        */
*               ENTRYCD = 4 THEN            /* CMDSCAN ERROR         */
         B     @RC00047                                            0049
@RF00047 LH    R10,ENTRYCD(,R3AWAPTR)                              0049
         C     R10,@FW3                                            0049
         BE    @RT00049                                            0049
         C     R10,@FW4                                            0049
         BNE   @RF00049                                            0049
@RT00049 DS    0H                                                  0050
*              CALL SYSERR;                 /* INVOKE SYSTEM MSG RTN */
         BAL   R14,SYSERR                                          0050
*            ELSE                           /* ELSE,                 */
*              IF ENTRYCD = 5 THEN          /* IF DISPOSITION ERROR  */
         B     @RC00049                                            0051
@RF00049 CLC   ENTRYCD(2,R3AWAPTR),@HW5                            0051
         BNE   @RF00051                                            0051
*                CALL DISPERR;              /* INVOKE DISP MSG RTN   */
*                                                                  0052
         BAL   R14,DISPERR                                         0052
*        IF RBCODE12 = '1'B  THEN           /* IF ERROR OCCURRED,    */
@RF00051 DS    0H                                                  0053
@RC00049 DS    0H                                                  0053
@RC00047 DS    0H                                                  0053
@RC00045 TM    RBCODE12(R3AWAPTR),B'10000000'                      0053
         BNO   @RF00053                                            0053
*          RETCODE = 12;                    /* SET RETURN CODE TO 12 */
         L     R10,REGSAVE(,R13)                                   0054
         MVC   RETCODE(4,R10),@FW12                                0054
*        ELSE                               /* ELSE                  */
*          RETCODE = 0;                     /* RETURN CODE IS 0      */
*                                                                  0055
         B     @RC00053                                            0055
@RF00053 L     R10,REGSAVE(,R13)                                   0055
         SLR   R15,R15                                             0055
         ST    R15,RETCODE(,R10)                                   0055
*        RETURN;                                                   0056
@EL00001 L     R13,4(,R13)                                         0056
@EF00001 L     R0,@SIZDATD                                         0056
         LR    R1,R11                                              0056
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    R14,R12,12(R13)                                     0056
         BR    R14                                                 0056
*/************** START OF SPECIFICATIONS *****                     0057
**                                                                 0057
** SEGMENT NAME -                                                  0057
**      SYSERR                                                     0057
**                                                                 0057
** FUNCTION -                                                      0057
**      THIS ROUTINE ISSUES THE MESSAGE NOTIFYING THE USER OF A    0057
**      COMMAND SYSTEM ERROR.                                      0057
**                                                                 0057
** OPERATION -                                                     0057
**      SET UP THE MESSAGE SEGMENTS. INVOKE IKJEFF02 TO ISSUE      0057
**      THE MESSAGE.                                               0057
**                                                                 0057
** INPUT -                                                         0057
**      RETURN CODE                                                0057
**                                                                 0057
** OUTPUT -                                                        0057
**      MESSAGE ISSUED                                             0057
**                                                                 0057
*******************            END OF SPECIFICATIONS ******/       0057
*                                                                  0057
*    SYSERR: PROC;                                                 0057
*                                                                  0057
         B     @EL00001                                            0057
SYSERR   STM   R14,R12,@SA00002                                    0057
*        MSGID = '102A';                    /* SET MESSAGE ID        */
         L     R10,MSGPTR(,R3AWAPTR)                               0058
         MVC   MSGID(4,R10),@CC00457                               0058
*        IF ENTRYCD = 2 THEN                /* IF PARSE ERROR        */
         CLC   ENTRYCD(2,R3AWAPTR),@HW2                            0059
         BNE   @RF00059                                            0059
*          DO;                              /* THEN,                 */
*            VAR1 = ADDR(PARS);             /* PUT PARSE VARIABLE    */
         LA    R2,PARS                                             0061
         ST    R2,@TF00001                                         0061
         MVC   VAR1(3,R10),@TF00001+1                              0061
*            L1 = LENGTH(PARS);             /* AND LENGTH IN LIST    */
         MVI   L1(R10),X'05'                                       0062
*          END;                                                    0063
*        IF ENTRYCD = 3 THEN                /* IF GENTRANS ERROR     */
@RF00059 CLC   ENTRYCD(2,R3AWAPTR),@HW3                            0064
         BNE   @RF00064                                            0064
*          DO;                              /* THEN                  */
*            VAR1 = ADDR(GTRANS);           /* PUT GENTRANS VARIABLE */
         L     R10,MSGPTR(,R3AWAPTR)                               0066
         LA    R2,GTRANS                                           0066
         ST    R2,@TF00001                                         0066
         MVC   VAR1(3,R10),@TF00001+1                              0066
*            L1 = LENGTH(GTRANS);           /* AND LENGTH IN LIST    */
         MVI   L1(R10),X'08'                                       0067
*          END;                                                    0068
*        IF ENTRYCD = 4 THEN                /* IF CMD SCAN ERROR     */
@RF00064 CLC   ENTRYCD(2,R3AWAPTR),@HW4                            0069
         BNE   @RF00069                                            0069
*          DO;                              /* THEN,                 */
*            VAR1 = ADDR(CMDSCAN);          /* PUT CMD SCAN VARIABLE */
         L     R10,MSGPTR(,R3AWAPTR)                               0071
         LA    R2,CMDSCAN                                          0071
         ST    R2,@TF00001                                         0071
         MVC   VAR1(3,R10),@TF00001+1                              0071
*            L1 = LENGTH(CMDSCAN);          /* AND LENGTH IN LIST    */
         MVI   L1(R10),X'0C'                                       0072
*          END;                                                    0073
*                                                                  0073
*        VAR2 = ADDR(RCODESV);              /* PUT RETURN CODE AND   */
@RF00069 L     R10,MSGPTR(,R3AWAPTR)                               0074
         LA    R2,RCODESV(,R3AWAPTR)                               0074
         ST    R2,@TF00001                                         0074
         MVC   VAR2(3,R10),@TF00001+1                              0074
*        L2 = 4;                            /* LENGTH IN LIST        */
         MVI   L2(R10),X'04'                                       0075
*        HIGHL2 = '1'B;                     /* INDICATE CONVERT HEX  */
         OI    HIGHL2(R10),B'10000000'                             0076
*        CALL PUTMSG;                       /* ISSUE MESSAGE         */
         BAL   R14,PUTMSG                                          0077
*        RBCODE12 = '1'B;                   /* INDICATE ALLOC FAILED */
*                                                                  0078
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0078
*    END SYSERR;                                                   0079
@EL00002 DS    0H                                                  0079
@EF00002 DS    0H                                                  0079
@ER00002 LM    R14,R12,@SA00002                                    0079
         BR    R14                                                 0079
*/****************** START OF SPECIFICATIONS     *******           0080
**                                                                 0080
** SEGMENT NAME -                                                  0080
**      PARSERR                                                    0080
**                                                                 0080
** FUNCTION -                                                      0080
**      THIS ROUTINE ISSUES A DIAGNOSTIC MESSAGE WHEN PARSE        0080
**      SERVICE ROUTINE HAS FAILED.                                0080
**                                                                 0080
** OPERATION -                                                     0080
**      IF THE RETURN CODE IS 4, DO NOT ISSUE A MESSAGE. IF THE    0080
**      RETURN CODE IS 16, ISSUE MESSAGE INDICATING NOT ENOUGH     0080
**      STORAGE WAS AVAILABLE.  FOR ANY OTHER RETURN CODE, INVOKE  0080
**      ROUTINE SYSERR.                                            0080
**                                                                 0080
** INPUT -                                                         0080
**      PARSE RETURN CODE                                          0080
**                                                                 0080
** OUTPUT -                                                        0080
**      MESSAGE ISSUED                                             0080
**                                                                 0080
*****************************   END OF SPECIFICATIONS  ******/     0080
*                                                                  0080
*    PARSERR: PROC;                                                0080
*                                                                  0080
PARSERR  STM   R14,R12,@SA00003                                    0080
*        IF RCODESV = 4 THEN                /* IF NO PROMPT MODE,    */
         CLC   RCODESV(4,R3AWAPTR),@FW4                            0081
         BNE   @RF00081                                            0081
*          RBCODE12 = '1'B;                 /* INDICATE ALLOC FAILED */
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0082
*        ELSE                                                      0083
*          IF RCODESV = 16 THEN             /* IF NOT ENOUGH STORAGE */
         B     @RC00081                                            0083
@RF00081 CLC   RCODESV(4,R3AWAPTR),@FW16                           0083
         BNE   @RF00083                                            0083
*            DO;                            /* SET UP MSG -          */
*              RBCODE12 = '1'B;             /* INDICATE ALLOC FAILED */
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0085
*              MSGID = '100A';              /* SET MESSAGE ID        */
         L     R10,MSGPTR(,R3AWAPTR)                               0086
         MVC   MSGID(4,R10),@CC00465                               0086
*              CALL PUTMSG;                 /* ISSUE MESSAGE         */
         BAL   R14,PUTMSG                                          0087
*            END;                                                  0088
*          ELSE                             /* OTHER RETURN CODES -  */
*            CALL SYSERR;                   /* ISSUE SYSTEM ERR MSG  */
*                                                                  0089
         B     @RC00083                                            0089
@RF00083 BAL   R14,SYSERR                                          0089
*    END PARSERR;                                                  0090
@EL00003 DS    0H                                                  0090
@EF00003 DS    0H                                                  0090
@ER00003 LM    R14,R12,@SA00003                                    0090
         BR    R14                                                 0090
*/*******************    START OF SPECIFICATIONS   ****            0091
**                                                                 0091
** SEGMENT NAME -                                                  0091
**      DISPERR                                                    0091
**                                                                 0091
** FUNCTION -                                                      0091
**      THIS ROUTINE ISSUES AN ERROR MESSAGE IF A DISPOSITION OF   0091
**      DELETE HAS BEEN SPECIFIED FOR A MEMBER OF A PARTITIONED    0091
**      DATA SET.                                                  0091
**                                                                 0091
** OPERATION -                                                     0091
**      SET UP MESSAGE TO BE ISSUED. GET DATA SET NAME.  INVOKE    0091
**      IKJEFF02 TO ISSUE MESSAGE.                                 0091
**                                                                 0091
** INPUT -                                                         0091
**      PTR TO DSNAME                                              0091
**                                                                 0091
** OUTPUT -                                                        0091
**      MESSAGE ISSUED                                             0091
**                                                                 0091
*****************              END OF SPECIFICATIONS     ****/     0091
*                                                                  0091
*    DISPERR: PROC;                                                0091
*                                                                  0091
DISPERR  STM   R14,R12,@SA00004                                    0091
*        MSGID = '118A';                    /* SET MESSAGE ID        */
         L     R10,MSGPTR(,R3AWAPTR)                               0092
         MVC   MSGID(4,R10),@CC00469                               0092
*        VAR1 = DSNPTR;                     /* PUT DSNAME VARIABLE   */
         L     R2,PTRPDL(,R3AWAPTR)                                0093
         MVC   VAR1(3,R10),DSNPTR+1(R2)                            0093
*        L1 = DSNLENGH;                     /* AND LENGTH IN LIST    */
*                                                                  0094
         MVC   L1(1,R10),DSNLENGH+1(R2)                            0094
*        CALL PUTMSG;                       /* ISSUE MESSAGE         */
         BAL   R14,PUTMSG                                          0095
*        RBCODE12 = '1'B;                   /* INDICATE ALLOC FAILED */
*                                                                  0096
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0096
*    END DISPERR;                                                  0097
@EL00004 DS    0H                                                  0097
@EF00004 DS    0H                                                  0097
@ER00004 LM    R14,R12,@SA00004                                    0097
         BR    R14                                                 0097
*/************** START OF SPECIFICATIONS   ****                    0098
**                                                                 0098
** SEGMENT NAME -                                                  0098
**      MSGRTN                                                     0098
**                                                                 0098
** FUNCTION -                                                      0098
**      THIS ROUTINE INVOKES DAIRFAIL TO ISSUE AN ERROR MESSAGE.   0098
**                                                                 0098
** OPERATION -                                                     0098
**      DAIRFAIL IS LOADED AND CALLED. BY ANALYZING DATA IN THE    0098
**      REQUEST BLOCK, DAIRFAIL DETERMINES THE APPROPRIATE MESSAGE 0098
**      TO ISSUE TO THE USER.                                      0098
**                                                                 0098
** INPUT -                                                         0098
**      WORKAREA                                                   0098
**                                                                 0098
** OUTPUT -                                                        0098
**      MESSAGE ISSUED                                             0098
**                                                                 0098
********************     END OF SPECIFICATIONS  ****/              0098
*                                                                  0098
*    DFAILRTN: PROC;                                               0098
*                                                                  0098
DFAILRTN STM   R14,R12,@SA00005                                    0098
*        GEN (LOAD EP=IKJEFF18);            /* LOAD DAIRFAIL         */
*                                                                  0099
         LOAD EP=IKJEFF18
*        CALL R0                            /* CALL DAIRFAIL,PASSING */
*            (S99RB,                        /* REQUEST BLOCK         */
*             RCODESV,                      /* RETURN CODE           */
*             ADMSG,                        /* ADDR OF MSG RTN = 0   */
*             CALLERNO,                     /* CALLER ID = 50        */
*             CPPL);                        /* CPPL POINTER          */
*                                                                  0100
         L     R1,PTRS99RB(,R3AWAPTR)                              0100
         ST    R1,@AL00001                                         0100
         LA    R10,RCODESV(,R3AWAPTR)                              0100
         ST    R10,@AL00001+4                                      0100
         LA    R10,ADMSG                                           0100
         ST    R10,@AL00001+8                                      0100
         LA    R10,CALLERNO                                        0100
         ST    R10,@AL00001+12                                     0100
         L     R1,CPPLPTR(,R3AWAPTR)                               0100
         ST    R1,@AL00001+16                                      0100
         LR    R15,R0                                              0100
         LA    R1,@AL00001                                         0100
         BALR  R14,R15                                             0100
*        GEN (DELETE EP=IKJEFF18);          /* DELETE DAIRFAIL       */
*                                                                  0101
         DELETE EP=IKJEFF18
*    END DFAILRTN;                                                 0102
@EL00005 DS    0H                                                  0102
@EF00005 DS    0H                                                  0102
@ER00005 LM    R14,R12,@SA00005                                    0102
         BR    R14                                                 0102
*/***************     START OF SPECIFICATIONS *****                0103
**                                                                 0103
** SEGMENT NAME -                                                  0103
**      PUTMSG                                                     0103
**                                                                 0103
** FUNCTION -                                                      0103
**      THIS ROUTINE INVOKES IKJEFF02 TO ISSUE MESSAGES            0103
**                                                                 0103
** OPERATION -                                                     0103
**      IKJEFF02 IS LOADED. THE PARAMETER LIST IS COMPLETED. CALL  0103
**      IKJEFF02, AND SAVE THE RETURN CODE. DELETE IKJEFF02.       0103
**                                                                 0103
** INPUT -                                                         0103
**      IKJEFF02 PARAMETER LIST                                    0103
**                                                                 0103
** OUTPUT -                                                        0103
**      MESSAGE ISSUED                                             0103
**                                                                 0103
**********************       END OF SPECIFICATIONS *****/          0103
*                                                                  0103
*    PUTMSG: PROC;                                                 0103
*                                                                  0103
PUTMSG   STM   R14,R12,@SA00006                                    0103
*        LISTPTR = ADDR(MSGCSECT);          /* PTR TO MSG PARMS      */
         L     R10,MSGPTR(,R3AWAPTR)                               0104
         LA    R2,MSGCSECT(,R10)                                   0104
         ST    R2,LISTPTR(,R10)                                    0104
*        MTCPPL = CPPLPTR;                  /* PTR TO CPPL           */
         L     R2,CPPLPTR(,R3AWAPTR)                               0105
         ST    R2,MTCPPL(,R10)                                     0105
*        ECBPTR = ADDR(COMMECB);            /* PTR TO ECB            */
         LA    R2,COMMECB(,R3AWAPTR)                               0106
         ST    R2,ECBPTR(,R10)                                     0106
*        COMMECB = 0;                       /* INIT ECB TO 0         */
         SLR   R2,R2                                               0107
         ST    R2,COMMECB(,R3AWAPTR)                               0107
*        MTHIGH = '1'B;                     /* INDICATE END OF LIST  */
         OI    MTHIGH(R10),B'10000000'                             0108
*        MTPUTLSW = '1'B;                   /* INDICATE PUTLINE      */
         OI    MTPUTLSW(R10),B'01000000'                           0109
*        MSGCSECT = PTRMSGS;                /* PTR TO MSG CSECT      */
*                                                                  0110
         L     R2,PTRMSGS(,R3AWAPTR)                               0110
         ST    R2,MSGCSECT(,R10)                                   0110
*        R1 = ADDR(MSGTABLE);               /* MSG PARMS IN REG 1    */
         LR    R1,R10                                              0111
*        GEN (LINK EP=IKJEFF02);            /* INVOKE MSG PROCESSOR  */
         LINK EP=IKJEFF02
*        RCODESV = R15;                     /* SAVE RETURN CODE      */
*                                                                  0113
         ST    R15,RCODESV(,R3AWAPTR)                              0113
*        IF RCODESV > 0 THEN                /* IF NON-ZERO CODE      */
         L     R10,RCODESV(,R3AWAPTR)                              0114
         LTR   R10,R10                                             0114
         BNP   @RF00114                                            0114
*          RBCODE12 = '1'B;                 /* INDICATE ALLOC FAILED */
*                                                                  0115
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0115
*    END PUTMSG;                                                   0116
*                                                                  0116
@EL00006 DS    0H                                                  0116
@EF00006 DS    0H                                                  0116
@ER00006 LM    R14,R12,@SA00006                                    0116
         BR    R14                                                 0116
*    END IKJEFD35                                                  0117
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJZT430)                                        *
*/*%INCLUDE SYSLIB  (IKJEFFMT)                                        *
*/*%INCLUDE SYSLIB  (IKJCPPL )                                        *
*/*%INCLUDE SYSLIB  (IEFZB4D0)                                        *
*;                                                                 0117
@DATA    DC    0H'0'
@HW1     DC    H'1'
@HW2     DC    H'2'
@HW5     DC    H'5'
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SAV001  EQU   @SA00001
@SA00005 DS    15F
@SA00003 DS    15F
@SA00002 DS    15F
@SA00004 DS    15F
@SA00006 DS    15F
@AL00001 DS    5A
@TF00001 DS    F
@ZTEMPS  DS    C
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
@TEMPS   EQU   @ZTEMPS
@L       EQU   @ZLEN
IKJEFD35 CSECT
         DC    0F'0'
@FW3     DC    F'3'
@HW3     EQU   @FW3+2
@FW4     DC    F'4'
@HW4     EQU   @FW4+2
@FW12    DC    F'12'
@FW16    DC    F'16'
@DATD    DSECT
         DS    0D
S99RBPTR DS    AL4
         ORG   S99RBPTR
S99RBPND DS    BL1
         ORG   S99RBPTR+4
S99TUFP  DS    A
         ORG   *+1-(*-@DATD)/(*-@DATD) ENSURE DSECT DATA
@ENDDATD EQU   *
@DATEND  EQU   *
IKJEFD35 CSECT
         DC    0F'0'
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
@SIZ001  EQU   @SIZDATD
         DC    0D'0'
ADMSG    DC    F'0'
CALLERNO DC    H'50'
@CC00457 DC    C'102A'
@CC00465 DC    C'100A'
@CC00469 DC    C'118A'
PARS     DC    CL5'PARSE'
GTRANS   DC    CL8'GENTRANS'
CMDSCAN  DC    CL13'COMMAND SCAN '
PATCH35  DC    25F'0'
         DC    0D'0'                   END OF CSECT                @26A
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
R3AWAPTR EQU   R3
REGSAVE  EQU   4
RETCODE  EQU   16
ALLOCWA  EQU   0
CPPLPTR  EQU   ALLOCWA
PTRPDL   EQU   ALLOCWA+4
SWITCH   EQU   ALLOCWA+12
RBCODE12 EQU   SWITCH
ENTRYCD  EQU   ALLOCWA+14
PTRS99RB EQU   ALLOCWA+20
RCODESV  EQU   ALLOCWA+24
PTRMSGS  EQU   ALLOCWA+32
VCFLAGS  EQU   ALLOCWA+36
MSGPTR   EQU   ALLOCWA+48
CMDTWO   EQU   ALLOCWA+60
COMMECB  EQU   ALLOCWA+160
ALLOCPDL EQU   0
DSNPDE   EQU   ALLOCPDL+48+4                                       @26C
DSNPTR   EQU   DSNPDE
DSNLENGH EQU   DSNPDE+4
DSNFLAGS EQU   DSNPDE+6
MBRPTR   EQU   DSNPDE+8
MBRFLAGS EQU   DSNPDE+14
PASSPTR  EQU   DSNPDE+16
PASSFLAG EQU   DSNPDE+22
DDNMEPDE EQU   ALLOCPDL+76+4                                       @26C
DDNPTR   EQU   DDNMEPDE
DDNFLAGS EQU   DDNMEPDE+6
CLASPDE  EQU   ALLOCPDL+84+4                                       @26C
CLASPTR  EQU   CLASPDE
CLASFLG  EQU   CLASPDE+6
SERPDE   EQU   ALLOCPDL+92+4                                       @26C
SERPTR   EQU   SERPDE
SERFLAGS EQU   SERPDE+6
BLKPDE   EQU   ALLOCPDL+104+4                                      @26C
BLKPTR   EQU   BLKPDE
BLKFLAGS EQU   BLKPDE+6
ABLKPDE  EQU   ALLOCPDL+112+4                                      @26C
ABLKPTR  EQU   ABLKPDE
ABLKFLG  EQU   ABLKPDE+6
SPACPDE  EQU   ALLOCPDL+120+4                                      @26C
SPACEPTR EQU   SPACPDE
SPACEFLG EQU   SPACPDE+6
SPACPDE2 EQU   ALLOCPDL+128+4                                      @26C
SPACPTR2 EQU   SPACPDE2
SPACFLG2 EQU   SPACPDE2+6
DIRECPDE EQU   ALLOCPDL+136+4                                      @26C
DIRPTR   EQU   DIRECPDE
DIRFLAGS EQU   DIRECPDE+6
ATTRPDE  EQU   ALLOCPDL+144+4                                      @26C
ATTRPTR  EQU   ATTRPDE
ATTRFLAG EQU   ATTRPDE+6
USIDPDE  EQU   ALLOCPDL+152+4                                      @26C
USIDPTR  EQU   USIDPDE
USIDFLAG EQU   USIDPDE+6
UTYPPDE  EQU   ALLOCPDL+160+4                                      @26C
UTYPPTR  EQU   UTYPPDE
UTYPFLAG EQU   UTYPPDE+6
UNCNTPDE EQU   ALLOCPDL+168+4                                      @26C
UCNTPTR  EQU   UNCNTPDE
UCNTFLAG EQU   UNCNTPDE+6
POSTPDE  EQU   ALLOCPDL+180+4                                      @26C
POSPTR   EQU   POSTPDE
POSFLAG  EQU   POSTPDE+6
MXVOLPDE EQU   ALLOCPDL+188+4                                      @26C
MXVOLPTR EQU   MXVOLPDE
MXVOLFLG EQU   MXVOLPDE+6
VOLSQPDE EQU   ALLOCPDL+196+4                                      @26C
VOLSQPTR EQU   VOLSQPDE
VOLSQFLG EQU   VOLSQPDE+6
VVGRPDE  EQU   ALLOCPDL+204+4                                      @26C
VVGPPTR  EQU   VVGRPDE
VVGPFLG  EQU   VVGRPDE+6
DSNBUF   EQU   0
MSGTABLE EQU   0
LISTPTR  EQU   MSGTABLE
TMCTPTR  EQU   MSGTABLE+4
MTCPPL   EQU   TMCTPTR
ECBPTR   EQU   MSGTABLE+8
@NM00005 EQU   MSGTABLE+12
MTHIGH   EQU   @NM00005
MSGCSECT EQU   MSGTABLE+16
SW       EQU   MSGTABLE+20
MTPUTLSW EQU   SW
RETMSG   EQU   MSGTABLE+21
SW2      EQU   MSGTABLE+24
MSGID    EQU   MSGTABLE+40
MTINSRTS EQU   MSGTABLE+44
L1       EQU   MTINSRTS
VAR1     EQU   MTINSRTS+1
L2       EQU   MTINSRTS+4
HIGHL2   EQU   L2
VAR2     EQU   MTINSRTS+5
L3       EQU   MTINSRTS+8
L4       EQU   MTINSRTS+12
RET      EQU   0
CPPL     EQU   0
S99RB    EQU   0
S99FLAG1 EQU   S99RB+2
S99FLG11 EQU   S99FLAG1
S99RSC   EQU   S99RB+4
S99TXTPP EQU   S99RB+8
S99FLAG2 EQU   S99RB+16
S99FLG21 EQU   S99FLAG2
S99FLG22 EQU   S99FLAG2+1
S99TUPL  EQU   0
S99TUPTR EQU   S99TUPL
S99TUP   EQU   0
S99TUNIT EQU   0
S99TUENT EQU   S99TUNIT+4
S99TUFLD EQU   0
ABLKBUF  EQU   0
ATTRBUF  EQU   0
BLKBUF   EQU   0
CLASSBUF EQU   0
DDNBUF   EQU   0
DIRBUF   EQU   0
MBRBUF   EQU   0
MSGECB   EQU   0
MSGTMCT  EQU   0
MXVOLBUF EQU   0
PASSBUF  EQU   0
POSTBUF  EQU   0
SERBUF   EQU   0
SPACBUF2 EQU   0
SPACEBUF EQU   0
UCNTBUF  EQU   0
USIDBUF  EQU   0
UTYPBUF  EQU   0
VSEQBUF  EQU   0
VVGPBUF  EQU   0
INPARMS  EQU   0
*                                      START UNREFERENCED COMPONENTS
S99TUPRM EQU   S99TUFLD+2
S99TULEN EQU   S99TUFLD
S99TUPAR EQU   S99TUENT+2
S99TULNG EQU   S99TUENT
S99TUNUM EQU   S99TUNIT+2
S99TUKEY EQU   S99TUNIT
S99TUPND EQU   S99TUP
S99TUPLN EQU   S99TUPTR
S99FLG24 EQU   S99FLAG2+3
S99FLG23 EQU   S99FLAG2+2
S99PCINT EQU   S99FLG22
S99UDEVT EQU   S99FLG22
S99MOUNT EQU   S99FLG21
S99CATLG EQU   S99FLG21
S99TIONQ EQU   S99FLG21
S99OFFLN EQU   S99FLG21
S99WTUNT EQU   S99FLG21
S99NORES EQU   S99FLG21
S99WTDSN EQU   S99FLG21
S99WTVOL EQU   S99FLG21
S99RSV01 EQU   S99RB+12
S99INFO  EQU   S99RSC+2
S99ERROR EQU   S99RSC
S99FLG12 EQU   S99FLAG1+1
S99JBSYS EQU   S99FLG11
S99NOMNT EQU   S99FLG11
S99NOCNV EQU   S99FLG11
S99ONCNV EQU   S99FLG11
S99VERB  EQU   S99RB+1
S99RBLN  EQU   S99RB
CPPLECT  EQU   CPPL+12
CPPLPSCB EQU   CPPL+8
CPPLUPT  EQU   CPPL+4
CPPLCBUF EQU   CPPL
RETCHAR  EQU   RET+2
RETSIZE  EQU   RET
MSGRTN   EQU   MSGTABLE+60
VAR4     EQU   MTINSRTS+13
HIGHL4   EQU   L4
VAR3     EQU   MTINSRTS+9
HIGHL3   EQU   L3
HIGHL1   EQU   L1
@NM00009 EQU   MSGTABLE+36
@NM00008 EQU   MSGTABLE+32
MTOLDPTR EQU   MSGTABLE+28
@NM00007 EQU   MSGTABLE+25
@NM00006 EQU   SW2
MTPGMSW  EQU   SW2
MTNPLMSW EQU   SW2
MTNOXQSW EQU   SW2
MTDOMSW  EQU   SW2
MT2OLDSW EQU   SW2
MTNHEXSW EQU   SW
MTWTPSW  EQU   SW
MTJOBISW EQU   SW
MTKEY1SW EQU   SW
MTHEXSW  EQU   SW
MTWTOSW  EQU   SW
MTNOIDSW EQU   SW
DSNTERM  EQU   DSNBUF
VVGPRSV2 EQU   VVGRPDE+7
VVGPRSV1 EQU   VVGPFLG
VVGPRES  EQU   VVGPFLG
VVGPLEN  EQU   VVGRPDE+4
VOLRSV2  EQU   VOLSQPDE+7
VOLRSV1  EQU   VOLSQFLG
VOLPRES  EQU   VOLSQFLG
VOLSQLEN EQU   VOLSQPDE+4
MXVRSV2  EQU   MXVOLPDE+7
MXVRSV1  EQU   MXVOLFLG
MXVPRES  EQU   MXVOLFLG
MXVOLLEN EQU   MXVOLPDE+4
POSRSV2  EQU   POSTPDE+7
POSRSV1  EQU   POSFLAG
POSPRES  EQU   POSFLAG
POSLEN   EQU   POSTPDE+4
LABLRSV1 EQU   ALLOCPDL+178+4                                      @26C
LABELPDE EQU   ALLOCPDL+176+4                                      @26C
UCNTRSV2 EQU   UNCNTPDE+7
UCNTRSV1 EQU   UCNTFLAG
UCNTPRES EQU   UCNTFLAG
UCNTLEN  EQU   UNCNTPDE+4
UTYPRSV2 EQU   UTYPPDE+7
UTYPRSV1 EQU   UTYPFLAG
UTYPPRES EQU   UTYPFLAG
UTYPLEN  EQU   UTYPPDE+4
USIDRSV2 EQU   USIDPDE+7
USIDRSV1 EQU   USIDFLAG
USIDPRES EQU   USIDFLAG
USIDLEN  EQU   USIDPDE+4
ATTRRSV2 EQU   ATTRPDE+7
ATTRRSV1 EQU   ATTRFLAG
ATTRPRES EQU   ATTRFLAG
ATTRLEN  EQU   ATTRPDE+4
DIRRSV2  EQU   DIRECPDE+7
DIRRSV1  EQU   DIRFLAGS
DIRPRES  EQU   DIRFLAGS
DIRLEN   EQU   DIRECPDE+4
SPCRSV22 EQU   SPACPDE2+7
SPCRSV12 EQU   SPACFLG2
SPCPRES2 EQU   SPACFLG2
SPACLEN2 EQU   SPACPDE2+4
SPACRSV2 EQU   SPACPDE+7
SPACRSV1 EQU   SPACEFLG
SPACPRES EQU   SPACEFLG
SPACELEN EQU   SPACPDE+4
ABLKRSV2 EQU   ABLKPDE+7
ABLKRSV1 EQU   ABLKFLG
ABLKPRES EQU   ABLKFLG
ABLKLEN  EQU   ABLKPDE+4
BLKRSV2  EQU   BLKPDE+7
BLKRSV1  EQU   BLKFLAGS
BLKPRES  EQU   BLKFLAGS
BLKLEN   EQU   BLKPDE+4
SERNEXT  EQU   SERPDE+8
SERRSV2  EQU   SERPDE+7
SERRSV1  EQU   SERFLAGS
SERPRES  EQU   SERFLAGS
SERLEN   EQU   SERPDE+4
CLASRSV2 EQU   CLASPDE+7
CLASRSV1 EQU   CLASFLG
CLASPRES EQU   CLASFLG
CLASLEN  EQU   CLASPDE+4
DDNRSV2  EQU   DDNMEPDE+7
DDNRSV1  EQU   DDNFLAGS
DDNPRES  EQU   DDNFLAGS
DDNLEN   EQU   DDNMEPDE+4
DSNNEXT  EQU   DSNPDE+24
PASSRSV2 EQU   DSNPDE+23
PASSRSV1 EQU   PASSFLAG
PASSPRES EQU   PASSFLAG
PASSLEN  EQU   DSNPDE+20
MBRRSV2  EQU   DSNPDE+15
MBRRSV1  EQU   MBRFLAGS
MBRPRES  EQU   MBRFLAGS
MBRLEN   EQU   DSNPDE+12
DSNRSV2  EQU   DSNPDE+7
DSNRSV1  EQU   DSNFLAGS
DSNQUOT  EQU   DSNFLAGS
DSNPRES  EQU   DSNFLAGS
DISPPDE  EQU   ALLOCPDL+46
RNDPDE   EQU   ALLOCPDL+44
RLSEPDE  EQU   ALLOCPDL+42
VSEQPDE  EQU   ALLOCPDL+40
PRIVPDE  EQU   ALLOCPDL+38
MAXVPDE  EQU   ALLOCPDL+36
POSPDE   EQU   ALLOCPDL+34
LABLPDE  EQU   ALLOCPDL+32
UCNTPDE  EQU   ALLOCPDL+30
UNITPDE  EQU   ALLOCPDL+28
HOLDPDE  EQU   ALLOCPDL+26
DESTPDE  EQU   ALLOCPDL+24
USINGPDE EQU   ALLOCPDL+22
DIRPDE   EQU   ALLOCPDL+20
SPACEPDE EQU   ALLOCPDL+18
BLOKPDE  EQU   ALLOCPDL+16
VOLPDE   EQU   ALLOCPDL+14
STATSPDE EQU   ALLOCPDL+12
FILEPDE  EQU   ALLOCPDL+10
DSPDE    EQU   ALLOCPDL+8
@NM00004 EQU   ALLOCPDL+4
@NM00003 EQU   ALLOCPDL
FIRSTPTR EQU   ALLOCWA+176
PPLPTR   EQU   ALLOCWA+172
NBLKBUF1 EQU   ALLOCWA+164
PDLADDR3 EQU   ALLOCWA+156
PPLTWO   EQU   ALLOCWA+128
CMDTWOBF EQU   CMDTWO+4
CMDTWOOF EQU   CMDTWO+2
CMDTWOLN EQU   CMDTWO
Q        EQU   ALLOCWA+56
P        EQU   ALLOCWA+52
PRCODE   EQU   ALLOCWA+44
PMPTPDL  EQU   ALLOCWA+40
@NM00002 EQU   ALLOCWA+38
NCLASBUF EQU   ALLOCWA+37
@NM00001 EQU   VCFLAGS
SPACE2   EQU   VCFLAGS
SPACE1   EQU   VCFLAGS
AVBLK    EQU   VCFLAGS
DSNCTR   EQU   ALLOCWA+30
VLISTCTR EQU   ALLOCWA+28
TXT      EQU   ALLOCWA+16
SWITCH2  EQU   ALLOCWA+13                                          @26C
FIRSTPDE EQU   SWITCH
AWARSV1  EQU   SWITCH
ASTRSK   EQU   SWITCH
TERMOPT  EQU   SWITCH
CONT     EQU   SWITCH
PROMPT   EQU   SWITCH
DSOVRLAY EQU   SWITCH
GTPLPTR  EQU   ALLOCWA+8
*                                      END UNREFERENCED COMPONENTS
@RC00053 EQU   @EL00001
@RC00083 EQU   @EL00003
@RC00081 EQU   @EL00003
@RF00114 EQU   @EL00006
@EL01    EQU   @EL00001
@ENDDATA EQU   *
         END   IKJEFD35,(C'PLS0301',0603,74204)
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
  IDENTIFY IKJEFD35('ZP60026')
++MOD(IKJEFD36) DISTLIB(AOST4).
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT)'
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE 'ALLOCATE OPTION ROUTINE                                *
                        '
***********************************************************************
*  $26   ZP60026  2010-01-23 GREG PRICE: ADD 'REUSE' OPERAND.         *
*                            CHANGES APPLIED TO EBB1102 LEVEL.        *
***********************************************************************
IKJEFD36 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(33)                                             @26C
         DC    C'IKJEFD36  74.204'                                 0001
         DC    CL17' ZP60026 2010.023'                             @26A
         DROP  R15
@PROLOG  STM   R14,R12,12(R13)                                     0001
         BALR  R12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,R12                                         0001
         L     R0,@SIZDATD                                         0001
         GETMAIN  R,LV=(0)
         LR    R11,R1                                              0001
         USING @DATD,R11                                           0001
         ST    R13,@SA00001+4                                      0001
         LM    R0,R1,20(R13)                                       0001
         ST    R11,8(,R13)                                         0001
         LR    R13,R11                                             0001
         XC    @ZTEMPS(@ZLEN),@ZTEMPS
         MVC   @PC00001(4),0(R1)                                   0001
*                                                                  0068
*                                                                  0069
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      PRMPTFLE                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE NOTIFIES THE USER THAT THE REQUESTED FILENAME  */
*/*      IS IN USE, AND PROMPTS THE USER TO ENTER EITHER FREE OR     */
*/*      CARRIAGE RETURN. IF FREE IS ENTERED, THE FILE IS FREED AND  */
*/*      RE-ALLOCATED. ELSE, ALLOCATE TERMINATES.                    */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      DAIRFAIL IS INVOKED TO ISSUE THE FILE IN USE MESSAGE. THE   */
*/*      PROMPT MESSAGE IS SET UP AND ROUTINE PRMOPT IS INVOKED TO   */
*/*      ISSUE THE PUTGET AND ANALYZE THE RESPONSE.                  */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      DDNAME PDE                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      FILE FREED AND RE-ALLOCATED, OR                             */
*/*      ALLOCATE TERMINATION INDICATED                              */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*    PRMPTFLE:                                                     0069
*        AWAPTR = R1;                  /* PTR TO WORKAREA            */
PRMPTFLE LR    R3AWAPTR,R1                                         0069
*        MSGTABLE = MSGTABLE && MSGTABLE;                          0070
         L     R10,MSGPTR(,R3AWAPTR)                               0070
         XC    MSGTABLE(64,R10),MSGTABLE(R10)                      0070
*        IF REUSING DDNAME THEN SKIP MESSAGES                      #26A
         TM    REUSE(R3AWAPTR),B'00000010'                         @26A
         BNO   @NOREUSE                                            @26A
         BAL   R14,VALIDRSP            BEHAVE AS IF FREED ENTERED  @26A
         B     @RF00074                                            @26A
@NOREUSE EQU   *                                                   @26A
*        ENTRYCD = 1;                  /* SET ENTRY CODE             */
         MVC   ENTRYCD(2,R3AWAPTR),@HW1                            0071
*        R1 = AWAPTR;                  /* WORKAREA PTR IN REG 1      */
         LR    R1,R3AWAPTR                                         0072
*        CALL IKJEFD35;                /* ISSUE FILE IN USE MSG      */
*                                                                  0073
         L     R15,VCONSD35                                        0073
         BALR  R14,R15                                             0073
*        IF RBCODE12 = '0'B THEN       /* IF NO ERROR,               */
         TM    RBCODE12(R3AWAPTR),B'10000000'                      0074
         BNZ   @RF00074                                            0074
*          DO;                         /* THEN                       */
*            MSGID = '113A';           /* SET MESSAGE ID             */
         L     R10,MSGPTR(,R3AWAPTR)                               0076
         MVC   MSGID(4,R10),@CHR113A                               0076
*            MTPUTLSW = '0'B;          /* INDICATE PUTGET            */
         NI    MTPUTLSW(R10),B'10111111'                           0077
*            VAR1 = DDNPTR;            /* PTR TO DDNAME VARIABLE     */
         L     R2,PTRPDL(,R3AWAPTR)                                0078
         MVC   VAR1(3,R10),DDNPTR+1(R2)                            0078
*            L1 = DDNLEN;              /* DDNAME VARIABLE LENGTH     */
         MVC   L1(1,R10),DDNLEN+1(R2)                              0079
*            CALL PRMOPT;              /* ISSUE MSG AND PROCESS    0080
*                                         RESPONSE                   */
         BAL   R14,PRMOPT                                          0080
*          END;                                                    0081
*        IF RBCODE12 = '1'B THEN                                   0082
@RF00074 TM    RBCODE12(R3AWAPTR),B'10000000'                      0082
         BNO   @RF00082                                            0082
*          RETCODE = 12;                                           0083
         L     R10,REGSAVE(,R13)                                   0083
         MVC   RETCODE(4,R10),@FW12                                0083
*        ELSE                                                      0084
*          RETCODE = 0;                                            0084
*                                                                  0084
         B     @RC00082                                            0084
@RF00082 L     R10,REGSAVE(,R13)                                   0084
         SLR   R15,R15                                             0084
         ST    R15,RETCODE(,R10)                                   0084
*        RETURN;                       /* RETURN TO CALLER           */
@EL00001 L     R13,4(,R13)                                         0085
@EF00001 L     R0,@SIZDATD                                         0085
         LR    R1,R11                                              0085
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    R14,R12,12(R13)                                     0085
         BR    R14                                                 0085
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      PRMOPT                                                      */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE PROMPTS THE USER FOR A TERMINAL RESPONSE, AND  */
*/*      INVOKES COMMAND SCAN TO CHECK THE RESPONSE.                 */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      ISSUE PROMPT MESSAGE. SET UP THE                            */
*/*      PARAMETER LIST FOR COMMAND SCAN, PASSING THE BUFFER         */
*/*      RETURNED FROM PUTGET. INVOKE COMMAND SCAN. SAVE THE RETURN  */
*/*      CODE AND ANALYZE COMMAND SCAN OUTPUT.                       */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PROMPT MESSAGE TO BE ISSUED                                 */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      PROMPT MESSAGE ISSUED                                       */
*/*      RESPONSE SCANNED FOR VALIDITY                               */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*    PRMOPT: PROC;                                                 0086
         B     @EL00001                                            0086
PRMOPT   STM   R14,R12,@SA00002                                    0086
*    PRMOPT1:                                                      0087
*        CALL PUTMSG;                  /* ISSUE PROMPT MSG           */
PRMOPT1  BAL   R14,PUTMSG                                          0087
*        NULLRSP = '0'B;               /* INIT FLAG          @Y30NQKH*/
         NI    NULLRSP,B'01111111'                                 0088
*        IF RCODESV > 0 THEN           /* IF PUTGET FAILED,          */
         L     R10,RCODESV(,R3AWAPTR)                              0089
         LTR   R10,R10                                             0089
         BNP   @RF00089                                            0089
*          RBCODE12 = '1'B;            /* SET ALLOC FAILED INDICATOR */
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0090
*        ELSE                          /* ELSE               @YM05480*/
*          IF RETSIZE = 2 THEN         /* IF NULL RESPONSE   @YM05480*/
         B     @RC00089                                            0091
@RF00089 L     R10,MSGPTR(,R3AWAPTR)                               0091
         L     R10,RETMSG-1(,R10)                                  0091
         LA    R10,0(,R10)                                         0091
         CLC   RETSIZE(2,R10),@HW2                                 0091
         BNE   @RF00091                                            0091
*            DO;                       /* THEN               @Y30NQKH*/
*              NULLRSP = '1'B;         /* INDICATE SO        @Y30NQKH*/
         OI    NULLRSP,B'10000000'                                 0093
*              GO TO INVRSP;           /* PROCESS INVALID    @YM05480*/
         B     INVRSP                                              0094
*            END;                      /*                    @Y30NQKH*/
*        ELSE                                                      0096
*          DO;                         /* IF PUTGET SUCCESSFUL,      */
@RF00091 DS    0H                                                  0097
*            CSPLPTR = ADDR(SCANAREA); /* CSCAN PARM LIST PTR        */
         LA    CSPLPTR,SCANAREA                                    0097
*            SYNCHK = '1'B;            /* NO SYNTAX CHECK            */
         OI    SYNCHK,B'10000000'                                  0098
*            CSPLFLG = ADDR(FLAGWORD); /* FLAGS IN CSCAN LIST        */
         LA    R10,FLAGWORD                                        0099
         ST    R10,CSPLFLG(,CSPLPTR)                               0099
*            IF RETSIZE > 20 THEN      /* IF LENGTH > 20     @YM05480*/
         LA    R10,20                                              0100
         L     R5,MSGPTR(,R3AWAPTR)                                0100
         L     R5,RETMSG-1(,R5)                                    0100
         LA    R5,0(,R5)                                           0100
         CH    R10,RETSIZE(,R5)                                    0100
         BNL   @RF00100                                            0100
*              RETSIZE = 20;           /* SET LENGTH TO 20   @YM05480*/
         STH   R10,RETSIZE(,R5)                                    0101
*            PGLENGH = RETSIZE+2;      /* SET LEN OF INPUT   @YM05468*/
@RF00100 L     R10,MSGPTR(,R3AWAPTR)                               0102
         L     R10,RETMSG-1(,R10)                                  0102
         LA    R10,0(,R10)                                         0102
         LH    R5,RETSIZE(,R10)                                    0102
         LA    R2,2                                                0102
         ALR   R2,R5                                               0102
         STH   R2,PGLENGH                                          0102
*            PGOFFST = 0;              /* SET OFFSET TO 0            */
         SLR   R2,R2                                               0103
         STH   R2,PGOFFST                                          0103
*                                      /* COPY INPUT INTO BUFFER     */
*            PGINPUT(1:RETSIZE-2) = RETCHAR(1:RETSIZE-2); /* @YM05480*/
         SL    R5,@CF00321                                         0104
         EX    R5,@SM01407                                         0104
*            CSPLCBUF = ADDR(PGBUFFR); /* RESPONSE IN LIST           */
         LA    R10,PGBUFFR                                         0105
         ST    R10,CSPLCBUF(,CSPLPTR)                              0105
*            CSPLOA = ADDR(SCANOUT);   /* PTR TO OUTPUT AREA         */
         LA    R10,SCANOUT                                         0106
         ST    R10,CSPLOA(,CSPLPTR)                                0106
*            CSPLUPT = CPPLUPT;        /* PTR TO UPT                 */
         L     R10,CPPLPTR(,R3AWAPTR)                              0107
         L     R5,CPPLUPT(,R10)                                    0107
         ST    R5,CSPLUPT(,CSPLPTR)                                0107
*            CSPLECT = CPPLECT;        /* PTR TO ECT                 */
         L     R10,CPPLECT(,R10)                                   0108
         ST    R10,CSPLECT(,CSPLPTR)                               0108
*            CSPLECB = ADDR(COMMECB);  /* PTR TO ECB                 */
         LA    R10,COMMECB(,R3AWAPTR)                              0109
         ST    R10,CSPLECB(,CSPLPTR)                               0109
*            R1 = CSPLPTR;             /* PTR IN REGISTER 1          */
         LR    R1,CSPLPTR                                          0110
*              DO; /*CALLTSSR EP(IKJSCAN)*/                        0111
*                RESPECIFY GPR01P RSTD;                            0112
*                IF CVTSCAN = 0                                    0113
*                  THEN                                            0113
         L     R10,CVTPTR                                          0113
         C     R2,CVTSCAN-CVT(,R10)                                0113
         BNE   @RF00113                                            0113
*                    GEN(LINK EP=IKJSCAN);                         0114
         LINK EP=IKJSCAN
*                  ELSE                                            0115
*                    CALL CVTSCAN;                                 0115
         B     @RC00113                                            0115
@RF00113 L     R10,CVTPTR                                          0115
         L     R15,CVTSCAN-CVT(,R10)                               0115
         BALR  R14,R15                                             0115
*                RESPECIFY GPR01P UNRSTD;                          0116
@RC00113 DS    0H                                                  0117
*              END;   /* INVOKE COMMAND SCAN@Y30NQKH*/             0117
*            RCODESV = R15;            /* SAVE RETURN CODE           */
         ST    R15,RCODESV(,R3AWAPTR)                              0118
*            IF RCODESV > 0 THEN       /* IF COMMAND SCAN FAILED     */
         L     R10,RCODESV(,R3AWAPTR)                              0119
         LTR   R10,R10                                             0119
         BNP   @RF00119                                            0119
*              DO;                     /* ISSUE SYSTEM ERROR MSG     */
*                ENTRYCD = 4;          /* SET ENTRY CODE             */
         MVC   ENTRYCD(2,R3AWAPTR),@HW4                            0121
*                R1 = AWAPTR;          /* WORKAREA PTR IN REG 1      */
         LR    R1,R3AWAPTR                                         0122
*                                      /* ISSUE SYSTEM ERROR MSG     */
*                CALL IKJEFD35;                                    0123
         L     R15,VCONSD35                                        0123
         BALR  R14,R15                                             0123
*              END;                                                0124
*            ELSE                                                  0125
*              DO;                     /* IF CMD SCAN SUCCESSFUL     */
         B     @RC00119                                            0125
@RF00119 DS    0H                                                  0126
*                CSOAPTR = CSPLOA;     /* SET PTR TO OUTPUT AREA     */
         L     CSOAPTR,CSPLOA(,CSPLPTR)                            0126
*                IF CSOANOC='1'B THEN  /* IF NULL RESPONSE   @Y30NQKH*/
         TM    CSOANOC(CSOAPTR),B'00010000'                        0127
         BNO   @RF00127                                            0127
*                  DO;                 /* THEN               @Y30NQKH*/
*                    NULLRSP = '1'B;   /* INDICATE SO        @Y30NQKH*/
         OI    NULLRSP,B'10000000'                                 0129
*                    GO TO INVRSP;     /* PROCESS INVALID    @Y30NQKH*/
         B     INVRSP                                              0130
*                  END;                /*                    @Y30NQKH*/
*                ELSE                  /* ELSE               @Y30NQKH*/
*                IF CSOACNM = 0 |      /* IF PTR IS 0,       @Y30NQKH*/
*                   CSOALNM > 4 THEN   /* LENGTH > 4, THEN   @Y30NQKH*/
@RF00127 L     R10,CSOACNM(,CSOAPTR)                               0132
         LTR   R10,R10                                             0132
         BZ    @RT00132                                            0132
         LH    R15,CSOALNM(,CSOAPTR)                               0132
         C     R15,@FW4                                            0132
         BH    @RT00132                                            0132
*                  GO TO INVRSP;       /* PROCESS INVALID    @Y30NQKH
*                                         RESPONSE           @Y30NQKH*/
*                ELSE                  /* ELSE               @Y30NQKH*/
*                                      /* IF FREE ENTERED,   @Y30NQKH*/
*                  IF CSOABUF(1:CSOALNM) = 'FREE' THEN    /* @Y30NQKH*/
         BCTR  R15,0                                               0134
         EX    R15,@SC01409                                        0134
         BNE   @RF00134                                            0134
*                    CALL VALIDRSP;    /* PROCESS VALID REPLY@Y30NQKH*/
         BAL   R14,VALIDRSP                                        0135
*                  ELSE                /* ELSE               @Y30NQKH*/
*                    IF CSOALNM>3 THEN /* IF LENGTH > 3 THEN @Y30NQKH*/
         B     @RC00134                                            0136
@RF00134 LH    R10,CSOALNM(,CSOAPTR)                               0136
         C     R10,@CF00321                                        0136
         BH    @RT00136                                            0136
*                      GO TO INVRSP;   /* PROCESS INVALID    @Y30NQKH
*                                         RESPONSE           @Y30NQKH*/
*                    ELSE              /* ELSE               @Y30NQKH*/
*                                      /* IF END ENTERED     @Y30NQKH*/
*                      IF CSOABUF(1:CSOALNM) = 'END' THEN /* @Y30NQKH*/
         L     R1,CSOACNM(,CSOAPTR)                                0138
         BCTR  R10,0                                               0138
         EX    R10,@SC01411                                        0138
         BNE   @RF00138                                            0138
*                        DO;           /* THEN               @Y30NQKH*/
*                                     /* INDICATE ALLOC ERROR@Y30NQKH*/
*                          RBCODE12 = '1'B;               /* @Y30NQKH*/
*                                      /* TERMINATION REQ    @Y30NQKH*/
*                          TERMOPT = '1'B;                /* @Y30NQKH*/
         OI    RBCODE12(R3AWAPTR),B'10001000'                      0141
*                        END;          /*                    @Y30NQKH*/
*                      ELSE            /* ELSE, PROCESS      @Y30NQKH*/
*                        DO;           /* INVALID RESPONSE   @Y30NQKH*/
         B     @RC00138                                            0143
@RF00138 DS    0H                                                  0144
*         INVRSP:                                                  0144
*                                      /* IF NULL RESPONSE   @Y30NQKH*/
*                        IF NULLRSP = '1'B THEN           /* @Y30NQKH*/
INVRSP   TM    NULLRSP,B'10000000'                                 0144
         BNO   @RF00144                                            0144
*                          DO;         /* THEN               @Y30NQKH*/
*                                      /* CLEAR INDICATOR    @Y30NQKH*/
*                            NULLRSP = '0'B;              /* @Y30NQKH*/
         NI    NULLRSP,B'01111111'                                 0146
*                                      /* SET MESSAGE ID     @Y30NQKH*/
*                            MSGID = '115B';              /* @Y30NQKH*/
         L     R10,MSGPTR(,R3AWAPTR)                               0147
         MVC   MSGID(4,R10),@CHR115B                               0147
*                          END;        /*                    @Y30NQKH*/
*                        ELSE          /* ELSE,PROCESS       @Y30NQKH*/
*                          DO;         /* OTHER THAN NULL    @Y30NQKH*/
         B     @RC00144                                            0149
@RF00144 DS    0H                                                  0150
*                                      /* SET MESSAGE ID     @Y30NQKH*/
*                            MSGID = '115A';              /* @Y30NQKH*/
         L     R10,MSGPTR(,R3AWAPTR)                               0150
         MVC   MSGID(4,R10),@CHR115A                               0150
*                                      /* PTR TO RESPONSE    @Y30NQKH*/
*                            VAR1 = ADDR(RETCHAR);        /* @Y30NQKH*/
         L     R2,RETMSG-1(,R10)                                   0151
         LA    R2,0(,R2)                                           0151
         LA    R15,RETCHAR(,R2)                                    0151
         ST    R15,@TF00001                                        0151
         MVC   VAR1(3,R10),@TF00001+1                              0151
*                                      /* LEN OF VARIABLE    @Y30NQKH*/
*                            L1 = RETSIZE-2;              /* @Y30NQKH*/
         LH    R2,RETSIZE(,R2)                                     0152
         BCTR  R2,0                                                0152
         BCTR  R2,0                                                0152
         STC   R2,L1(,R10)                                         0152
*                          END;        /*                    @Y30NQKH*/
*                        MTPUTLSW = '1'B;/* INDICATE PUTLINE         */
@RC00144 L     R10,MSGPTR(,R3AWAPTR)                               0154
         OI    MTPUTLSW(R10),B'01000000'                           0154
*                        CALL PUTMSG;    /* ISSUE MESSAGE            */
         BAL   R14,PUTMSG                                          0155
*                                        /* IF PUTLINE FAILED,       */
*                        IF RCODESV > 0 THEN                       0156
         L     R10,RCODESV(,R3AWAPTR)                              0156
         LTR   R10,R10                                             0156
         BNP   @RF00156                                            0156
*                                        /* INDICATE SO              */
*                          RBCODE12 = '1'B;                        0157
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0157
*                        ELSE                                      0158
*                          DO;           /* OTHERWISE,               */
         B     @RC00156                                            0158
@RF00156 DS    0H                                                  0159
*                                        /* SET MESSAGE ID           */
*                            MSGID = '116A';                       0159
         L     R10,MSGPTR(,R3AWAPTR)                               0159
         MVC   MSGID(4,R10),@CHR116A                               0159
*                                        /* INDICATE PUTGET          */
*                            MTPUTLSW='0'B;                        0160
         NI    MTPUTLSW(R10),B'10111111'                           0160
*                            VAR1=DDNPTR;/* PTR TO DDNAME VARIABLE   */
         L     R2,PTRPDL(,R3AWAPTR)                                0161
         MVC   VAR1(3,R10),DDNPTR+1(R2)                            0161
*                            L1 = DDNLEN;/* SET VARIABLE LENGTH      */
         MVC   L1(1,R10),DDNLEN+1(R2)                              0162
*                                        /* ISSUE MESSAGE            */
*                            GO TO PRMOPT1;                        0163
         B     PRMOPT1                                             0163
*                          END;                                    0164
*                      END;                                        0165
*               END;                                               0166
*          END;                                                    0167
*    END PRMOPT;                                                   0168
@EL00002 DS    0H                                                  0168
@EF00002 DS    0H                                                  0168
@ER00002 LM    R14,R12,@SA00002                                    0168
         BR    R14                                                 0168
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      VALIDRSP                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE FREES THE FILE AND RE-ALLOCATES IT.            */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      POINTER TO CURRENT TEXT IS SAVED. A GETMAIN IS ISSUED FOR   */
*/*      STORAGE FOR BUILDING THE FREE FUNCTION TEXT. TWO TEXT       */
*/*      UNITS ARE SET UP IN THE STORAGE - ONE SPECIFYING THE        */
*/*      DDNAME TO BE FREED, AND ONE SPECIFYING THAT PERMANENTLY     */
*/*      ALLOCATED DATA SETS ARE TO BE FREED. THE VERB IN THE        */
*/*      REQUEST BLOCK IS SET TO UNALLOC, AND DYNAMIC ALLOCATION IS  */
*/*      INVOKED. THE ORIGINAL TEXT POINTER IS SET BACK IN THE       */
*/*      REQUEST BLOCK AND THE VERB IS SET TO ALLOC. DYNAMIC         */
*/*      ALLOCATION IS INVOKED AGAIN.                                */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      SVC 99 REQUEST BLOCK                                        */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      FILE FREED AND RE-ALLOCATED                                 */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*    VALIDRSP: PROC;                                               0169
VALIDRSP STM   R14,R12,@SA00003                                    0169
*        SAVETXTP = S99TXTPP;          /* SAVE PTR TO TEXT           */
         L     R10,PTRS99RB(,R3AWAPTR)                             0170
         L     SAVETXTP,S99TXTPP(,R10)                             0170
*        PRMPTXTP = ADDR(PRMTEXT);     /* SET POINTER TO STORAGE     */
         LA    PRMPTXTP,PRMTEXT                                    0171
*        FILEADDR = ADDR(FILEKEY);     /* ADDRESS OF FILE TEXT       */
         LA    R5,FILEKEY                                          0172
         ST    R5,FILEADDR                                         0172
*        PERMADDR = ADDR(PERMKEY);     /* ADDRESS OF PERM TEXT       */
         LA    R5,PERMKEY                                          0173
         ST    R5,PERMADDR                                         0173
*        ENDPRMT = '1'B;               /* END OF ADDRESS LIST        */
         OI    ENDPRMT,B'10000000'                                 0174
*        FILEKEY = DUNDDNAM;           /* FILE TEXT - KEY,           */
         MVC   FILEKEY(2),@HWDDNAM                                 0175
*        FILENUM = 1;                  /* NUMBER,                    */
         MVC   FILENUM(2),@HW1                                     0176
*        FILELEN = DDNLEN;             /* LENGTH AND PARM            */
         L     R5,PTRPDL(,R3AWAPTR)                                0177
         LH    R15,DDNLEN(,R5)                                     0177
         STH   R15,FILELEN                                         0177
*        FILEBUF(1:FILELEN)=DDNBUF(1:FILELEN);                     0178
         BCTR  R15,0                                               0178
         L     R5,DDNPTR(,R5)                                      0178
         EX    R15,@SM01414                                        0178
*        PERMKEY = DUNUNALC;           /* PERM TEXT - KEY,           */
         MVC   PERMKEY(2),@HWUNALC                                 0179
*        PERMNUM = 0;                  /* AND NUMBER                 */
         SLR   R5,R5                                               0180
         STH   R5,PERMNUM                                          0180
*        S99TXTPP = PRMPTXTP;          /* PTR IN REQUEST BLOCK       */
         ST    PRMPTXTP,S99TXTPP(,R10)                             0181
*        S99VERB = S99VRBUN;           /* UNALLOC VERB               */
         MVI   S99VERB(R10),X'02'                                  0182
*        S99ERROR = S99ERROR && S99ERROR;/* CLEAR ERROR FIELD        */
         XC    S99ERROR(2,R10),S99ERROR(R10)                       0183
*        SAVEFLG = S99FLG11;             /* SAVE FLAG SETTING        */
         MVC   SAVEFLG(1),S99FLG11(R10)                            0184
*        S99FLG11 = S99FLG11 && S99FLG11;/* CLEAR FLAGS              */
         XC    S99FLG11(1,R10),S99FLG11(R10)                       0185
*        CALL DYNSVC;                  /* INVOKE DYN ALLOCATION      */
         BAL   R14,DYNSVC                                          0186
*        IF RCODESV = 0 THEN           /* IF DYN ALLOC SUCCESSFUL    */
         L     R10,RCODESV(,R3AWAPTR)                              0187
         LTR   R10,R10                                             0187
         BNZ   @RF00187                                            0187
*          DO;                                                     0188
*            S99TXTPP = SAVETXTP;      /* RESTORE FORMER TEXT PTR    */
         L     R10,PTRS99RB(,R3AWAPTR)                             0189
         ST    SAVETXTP,S99TXTPP(,R10)                             0189
*            S99FLG11 = SAVEFLG;       /* RESTORE FLAG SETTINGS      */
         MVC   S99FLG11(1,R10),SAVEFLG                             0190
*            S99VERB = S99VRBAL;       /* SET ALLOC VERB             */
         MVI   S99VERB(R10),X'01'                                  0191
*            CALL DYNSVC;              /* INVOKE DYN ALLOCATION      */
         BAL   R14,DYNSVC                                          0192
*            IF RCODESV > 0 THEN       /* IF DYN ALLOC FAILED,       */
         L     R10,RCODESV(,R3AWAPTR)                              0193
         LTR   R10,R10                                             0193
         BNP   @RF00193                                            0193
*              DO;                                                 0194
*                RBCODE12 = '1'B;      /* INDICATE ALLOC FAILED      */
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0195
*                ENTRYCD = 1;          /* INDICATE ALLOC ERROR       */
         MVC   ENTRYCD(2,R3AWAPTR),@HW1                            0196
*                R1 = AWAPTR;          /* WORKAREA PTR IN REG 1      */
         LR    R1,R3AWAPTR                                         0197
*                CALL IKJEFD35;        /* ISSUE ERROR MESSAGE        */
         L     R15,VCONSD35                                        0198
         BALR  R14,R15                                             0198
*              END;                                                0199
*          END;                                                    0200
*        ELSE                          /* ELSE,                      */
*          DO;                         /* IF DYN ALLOC FAILED        */
         B     @RC00187                                            0201
@RF00187 DS    0H                                                  0202
*            RBCODE12 = '1'B;          /* INDICATE ALLOC FAILED      */
         OI    RBCODE12(R3AWAPTR),B'10000000'                      0202
*            ENTRYCD = 1;              /* INDICATE ALLOC ERROR       */
         MVC   ENTRYCD(2,R3AWAPTR),@HW1                            0203
*            R1 = AWAPTR;              /* WORKAREA PTR IN REG 1      */
         LR    R1,R3AWAPTR                                         0204
*            CALL IKJEFD35;            /* ISSUE ERROR MESSAGE        */
         L     R15,VCONSD35                                        0205
         BALR  R14,R15                                             0205
*          END;                                                    0206
*    END VALIDRSP;                                                 0207
@EL00003 DS    0H                                                  0207
@EF00003 DS    0H                                                  0207
@ER00003 LM    R14,R12,@SA00003                                    0207
         BR    R14                                                 0207
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      DYNSVC                                                      */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE INVOKES DYNAMIC ALLOCATION                     */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE PARAMETER LIST IS COMPLETED. THE MACRO TO INVOKE SVC 99 */
*/*      IS ISSUED. THE RETURN CODE FROM DYNAMIC ALLOCATION IS       */
*/*      SAVED.                                                      */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      SVC 99 REQUEST BLOCK                                        */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE                                                 */
*/*                                                                  */
*/********************************************************************/
*    DYNSVC: PROC;                                                 0208
*                                                                  0208
DYNSVC   STM   R14,R12,12(R13)                                     0208
*        R1 = ADDR(S99RBPTR);          /* PTR IN REGISTER 1          */
         LA    R1,S99RBPTR                                         0209
*        S99RBPTR = PTRS99RB;          /* PTR TO REQUEST BLOCK       */
         L     R10,PTRS99RB(,R3AWAPTR)                             0210
         ST    R10,S99RBPTR                                        0210
*        S99RBPND = '1'B;              /* HIGH ORDER BIT ON          */
*                                                                  0211
*                                                                  0211
         OI    S99RBPND,B'10000000'                                0211
*         /*MACDATE Y-2 73082*/                                    0212
*         SVC (99);                    /* ISSUE SVC 99               */
*                                                                  0212
         SVC   99                                                  0212
*        RCODESV = R15;                /* SAVE RETURN CODE           */
*                                                                  0213
         ST    R15,RCODESV(,R3AWAPTR)                              0213
*    END DYNSVC;                                                   0214
@EL00004 DS    0H                                                  0214
@EF00004 DS    0H                                                  0214
@ER00004 LM    R14,R12,12(R13)                                     0214
         BR    R14                                                 0214
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      PUTMSG                                                      */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE INVOKES THE MESSAGE PROCESSOR, IKJEFF02.       */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE PARAMETER LIST TO IKJEFF02 IS COMPLETED. IKJEFF02 IS    */
*/*      LOADED IN, AND CALLED. THE RETURN CODE IN REGISTER 15 IS    */
*/*      SAVED. THE MESSAGE PROCESSOR IS DELETED.                    */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      IKJEFF02 PARAMETER LIST                                     */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE  = 0 - PUTLINE/PUTGET SUCCESSFUL                */
*/*                  ^= 0 - PUTLINE/PUTGET FAILED                    */
*/*                                                                  */
*/********************************************************************/
*    PUTMSG: PROC;                                                 0215
PUTMSG   STM   R14,R12,@SA00005                                    0215
*        LISTPTR = ADDR(MSGCSECT);     /* ADDR OF PARM LIST          */
         L     R10,MSGPTR(,R3AWAPTR)                               0216
         LA    R2,MSGCSECT(,R10)                                   0216
         ST    R2,LISTPTR(,R10)                                    0216
*        MTCPPL = CPPLPTR;             /* PTR TO CPPL                */
         L     R2,CPPLPTR(,R3AWAPTR)                               0217
         ST    R2,MTCPPL(,R10)                                     0217
*        ECBPTR = ADDR(COMMECB);       /* COMMUNICATIONS ECB         */
         LA    R2,COMMECB(,R3AWAPTR)                               0218
         ST    R2,ECBPTR(,R10)                                     0218
*        COMMECB = 0;                  /* SET ECB TO 0               */
         SLR   R2,R2                                               0219
         ST    R2,COMMECB(,R3AWAPTR)                               0219
*        MTHIGH = '1'B;                /* HIGH ORDER BIT ON          */
         OI    MTHIGH(R10),B'10000000'                             0220
*        MSGCSECT = PTRMSGS;           /* PTR TO MSG CSECT           */
         L     R2,PTRMSGS(,R3AWAPTR)                               0221
         ST    R2,MSGCSECT(,R10)                                   0221
*        R1 = ADDR(MSGTABLE);          /* PARM LIST IN REG 1         */
*                                                                  0222
         LR    R1,R10                                              0222
*        GEN (LINK EP=IKJEFF02);       /* INVOKE MSG PROCESSOR       */
*                                                                  0223
         LINK EP=IKJEFF02
*        RCODESV = R15;                /* SAVE RETURN CODE           */
*                                                                  0224
         ST    R15,RCODESV(,R3AWAPTR)                              0224
*    END PUTMSG;                                                   0225
*                                                                  0225
*                                                                  0225
@EL00005 DS    0H                                                  0225
@EF00005 DS    0H                                                  0225
@ER00005 LM    R14,R12,@SA00005                                    0225
         BR    R14                                                 0225
*  DECLARE /*GENERAL PURPOSE REGISTERS */                          0226
*    GPR00P PTR(31) REG(0),                                        0226
*    GPR01P PTR(31) REG(1),                                        0226
*    GPR02P PTR(31) REG(2),                                        0226
*    GPR03P PTR(31) REG(3),                                        0226
*    GPR04P PTR(31) REG(4),                                        0226
*    GPR05P PTR(31) REG(5),                                        0226
*    GPR06P PTR(31) REG(6),                                        0226
*    GPR07P PTR(31) REG(7),                                        0226
*    GPR08P PTR(31) REG(8),                                        0226
*    GPR09P PTR(31) REG(9),                                        0226
*    GPR14P PTR(31) REG(14),                                       0226
*    GPR15P PTR(31) REG(15);                                       0226
*                                                                  0226
*  DECLARE /* COMMON VARIABLES */                                  0227
*    I256C CHAR(256) BASED,                                        0227
*    I031F FIXED(31) BASED,                                        0227
*    I031P PTR(31)   BASED,                                        0227
*    I015F FIXED(15) BASED,                                        0227
*    I015P PTR(15)   BASED,                                        0227
*    I008P PTR(8)    BASED,                                        0227
*    I001C CHAR(1)   BASED;                                        0227
*                                                                  0227
@DATA    DC    0H'0'
@HW1     DC    H'1'
@HW2     DC    H'2'
@HWDDNAM DC    XL2'0001'
@HWUNALC DC    XL2'0007'
@SM01407 MVC   PGINPUT(0),RETCHAR(R10)
@SC01409 CLC   CSOABUF(0,R10),@CHRFREE
@SC01411 CLC   CSOABUF(0,R1),@CHREND
@SM01414 MVC   FILEBUF(0),DDNBUF(R5)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@PC00001 DS    1F
@SAV001  EQU   @SA00001
@SA00002 DS    15F
@SA00005 DS    15F
@SA00003 DS    15F
@TF00001 DS    F
@ZTEMPS  DS    C
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
@TEMPS   EQU   @ZTEMPS
@L       EQU   @ZLEN
IKJEFD36 CSECT
         DC    0F'0'
@CF00321 DC    F'3'
@FW4     DC    F'4'
@HW4     EQU   @FW4+2
@FW12    DC    F'12'
@DATD    DSECT
         DS    0D
S99RBPTR DS    AL4
         ORG   S99RBPTR
S99RBPND DS    BL1
         ORG   S99RBPTR+4
S99TUFP  DS    A
PRMFLG   DS    CL1
         ORG   PRMFLG
NULLRSP  DS    BL1
@NM00001 EQU   PRMFLG+0
         ORG   PRMFLG+1
         DS    CL3
PGBUFFR  DS    CL22
         ORG   PGBUFFR
PGLENGH  DS    FL2
PGOFFST  DS    FL2
PGINPUT  DS    CL18
         ORG   PGBUFFR+22
         DS    CL2
FLAGWORD DS    CL4
         ORG   FLAGWORD
SYNCHK   DS    BL1
@NM00011 EQU   FLAGWORD+0
@NM00012 DS    AL3
         ORG   FLAGWORD+4
SCANAREA DS    CL24
SCANOUT  DS    CL8
PRMTEXT  DS    CL26
         ORG   PRMTEXT
FILEADDR DS    AL4
PERMADDR DS    AL4
         ORG   PERMADDR
ENDPRMT  DS    BL1
         ORG   PRMTEXT+8
FILEKEY  DS    FL2
FILENUM  DS    FL2
FILELEN  DS    FL2
FILEBUF  DS    CL8
PERMKEY  DS    FL2
PERMNUM  DS    FL2
         ORG   PRMTEXT+26
SAVEFLG  DS    CL1
         ORG   *+1-(*-@DATD)/(*-@DATD) ENSURE DSECT DATA
@ENDDATD EQU   *
@DATEND  EQU   *
IKJEFD36 CSECT
         DC    0F'0'
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
@SIZ001  EQU   @SIZDATD
VCONSD35 DC    V(IKJEFD35)
         DC    0D'0'
@CHR113A DC    C'113A'
@CHRFREE DC    C'FREE'
@CHR115B DC    C'115B'
@CHR115A DC    C'115A'
@CHR116A DC    C'116A'
@CHREND  DC    C'END'
         DC    0F'0'
PATCH36  DC    25F'0'
         DC    0D'0'                   END OF CSECT                @26A
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
SAVETXTP EQU   R4
PRMPTXTP EQU   R2
CSOAPTR  EQU   R2
CSPLPTR  EQU   R4
R3AWAPTR EQU   R3
REGSAVE  EQU   4
RETCODE  EQU   16
ALLOCWA  EQU   0
CPPLPTR  EQU   ALLOCWA
PTRPDL   EQU   ALLOCWA+4
SWITCH   EQU   ALLOCWA+12
RBCODE12 EQU   SWITCH
TERMOPT  EQU   SWITCH
SWITCH2  EQU   ALLOCWA+13                                          @26A
REUSE    EQU   SWITCH2                                             @26A
ENTRYCD  EQU   ALLOCWA+14
PTRS99RB EQU   ALLOCWA+20
RCODESV  EQU   ALLOCWA+24
PTRMSGS  EQU   ALLOCWA+32
VCFLAGS  EQU   ALLOCWA+36
MSGPTR   EQU   ALLOCWA+48
CMDTWO   EQU   ALLOCWA+60
COMMECB  EQU   ALLOCWA+160
ALLOCPDL EQU   0
DSNPDE   EQU   ALLOCPDL+48+4                                       @26C
DSNPTR   EQU   DSNPDE
DSNFLAGS EQU   DSNPDE+6
MBRPTR   EQU   DSNPDE+8
MBRFLAGS EQU   DSNPDE+14
PASSPTR  EQU   DSNPDE+16
PASSFLAG EQU   DSNPDE+22
DDNMEPDE EQU   ALLOCPDL+76+4                                       @26C
DDNPTR   EQU   DDNMEPDE
DDNLEN   EQU   DDNMEPDE+4
DDNFLAGS EQU   DDNMEPDE+6
CLASPDE  EQU   ALLOCPDL+84+4                                       @26C
CLASPTR  EQU   CLASPDE
CLASFLG  EQU   CLASPDE+6
SERPDE   EQU   ALLOCPDL+92+4                                       @26C
SERPTR   EQU   SERPDE
SERFLAGS EQU   SERPDE+6
BLKPDE   EQU   ALLOCPDL+104+4                                      @26C
BLKPTR   EQU   BLKPDE
BLKFLAGS EQU   BLKPDE+6
ABLKPDE  EQU   ALLOCPDL+112+4                                      @26C
ABLKPTR  EQU   ABLKPDE
ABLKFLG  EQU   ABLKPDE+6
SPACPDE  EQU   ALLOCPDL+120+4                                      @26C
SPACEPTR EQU   SPACPDE
SPACEFLG EQU   SPACPDE+6
SPACPDE2 EQU   ALLOCPDL+128+4                                      @26C
SPACPTR2 EQU   SPACPDE2
SPACFLG2 EQU   SPACPDE2+6
DIRECPDE EQU   ALLOCPDL+136+4                                      @26C
DIRPTR   EQU   DIRECPDE
DIRFLAGS EQU   DIRECPDE+6
ATTRPDE  EQU   ALLOCPDL+144+4                                      @26C
ATTRPTR  EQU   ATTRPDE
ATTRFLAG EQU   ATTRPDE+6
USIDPDE  EQU   ALLOCPDL+152+4                                      @26C
USIDPTR  EQU   USIDPDE
USIDFLAG EQU   USIDPDE+6
UTYPPDE  EQU   ALLOCPDL+160+4                                      @26C
UTYPPTR  EQU   UTYPPDE
UTYPFLAG EQU   UTYPPDE+6
UNCNTPDE EQU   ALLOCPDL+168+4                                      @26C
UCNTPTR  EQU   UNCNTPDE
UCNTFLAG EQU   UNCNTPDE+6
POSTPDE  EQU   ALLOCPDL+180+4                                      @26C
POSPTR   EQU   POSTPDE
POSFLAG  EQU   POSTPDE+6
MXVOLPDE EQU   ALLOCPDL+188+4                                      @26C
MXVOLPTR EQU   MXVOLPDE
MXVOLFLG EQU   MXVOLPDE+6
VOLSQPDE EQU   ALLOCPDL+196+4                                      @26C
VOLSQPTR EQU   VOLSQPDE
VOLSQFLG EQU   VOLSQPDE+6
VVGRPDE  EQU   ALLOCPDL+204+4                                      @26C
VVGPPTR  EQU   VVGRPDE
VVGPFLG  EQU   VVGRPDE+6
DSNBUF   EQU   0
DDNBUF   EQU   0
CPPL     EQU   0
CPPLUPT  EQU   CPPL+4
CPPLECT  EQU   CPPL+12
MSGTABLE EQU   0
LISTPTR  EQU   MSGTABLE
TMCTPTR  EQU   MSGTABLE+4
MTCPPL   EQU   TMCTPTR
ECBPTR   EQU   MSGTABLE+8
@NM00006 EQU   MSGTABLE+12
MTHIGH   EQU   @NM00006
MSGCSECT EQU   MSGTABLE+16
SW       EQU   MSGTABLE+20
MTPUTLSW EQU   SW
RETMSG   EQU   MSGTABLE+21
SW2      EQU   MSGTABLE+24
MSGID    EQU   MSGTABLE+40
MTINSRTS EQU   MSGTABLE+44
L1       EQU   MTINSRTS
VAR1     EQU   MTINSRTS+1
L2       EQU   MTINSRTS+4
L3       EQU   MTINSRTS+8
L4       EQU   MTINSRTS+12
RET      EQU   0
RETSIZE  EQU   RET
RETCHAR  EQU   RET+2
CSPL     EQU   0
CSPLUPT  EQU   CSPL
CSPLECT  EQU   CSPL+4
CSPLECB  EQU   CSPL+8
CSPLFLG  EQU   CSPL+12
CSPLOA   EQU   CSPL+16
CSPLCBUF EQU   CSPL+20
CSOA     EQU   0
CSOACNM  EQU   CSOA
CSOALNM  EQU   CSOA+4
CSOAFLG  EQU   CSOA+6
CSOANOC  EQU   CSOAFLG
CSOABUF  EQU   0
S99RB    EQU   0
S99VERB  EQU   S99RB+1
S99FLAG1 EQU   S99RB+2
S99FLG11 EQU   S99FLAG1
S99RSC   EQU   S99RB+4
S99ERROR EQU   S99RSC
S99TXTPP EQU   S99RB+8
S99FLAG2 EQU   S99RB+16
S99FLG21 EQU   S99FLAG2
S99FLG22 EQU   S99FLAG2+1
S99TUPL  EQU   0
S99TUPTR EQU   S99TUPL
S99TUP   EQU   0
S99TUNIT EQU   0
S99TUENT EQU   S99TUNIT+4
S99TUFLD EQU   0
ABLKBUF  EQU   0
ATTRBUF  EQU   0
BLKBUF   EQU   0
CLASSBUF EQU   0
DIRBUF   EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
MBRBUF   EQU   0
MSGECB   EQU   0
MSGTMCT  EQU   0
MXVOLBUF EQU   0
PASSBUF  EQU   0
POSTBUF  EQU   0
SERBUF   EQU   0
SPACBUF2 EQU   0
SPACEBUF EQU   0
UCNTBUF  EQU   0
USIDBUF  EQU   0
UTYPBUF  EQU   0
VSEQBUF  EQU   0
VVGPBUF  EQU   0
INPARMS  EQU   0
*                                      START UNREFERENCED COMPONENTS
S99TUPRM EQU   S99TUFLD+2
S99TULEN EQU   S99TUFLD
S99TUPAR EQU   S99TUENT+2
S99TULNG EQU   S99TUENT
S99TUNUM EQU   S99TUNIT+2
S99TUKEY EQU   S99TUNIT
S99TUPND EQU   S99TUP
S99TUPLN EQU   S99TUPTR
S99FLG24 EQU   S99FLAG2+3
S99FLG23 EQU   S99FLAG2+2
S99PCINT EQU   S99FLG22
S99UDEVT EQU   S99FLG22
S99MOUNT EQU   S99FLG21
S99CATLG EQU   S99FLG21
S99TIONQ EQU   S99FLG21
S99OFFLN EQU   S99FLG21
S99WTUNT EQU   S99FLG21
S99NORES EQU   S99FLG21
S99WTDSN EQU   S99FLG21
S99WTVOL EQU   S99FLG21
S99RSV01 EQU   S99RB+12
S99INFO  EQU   S99RSC+2
S99FLG12 EQU   S99FLAG1+1
S99JBSYS EQU   S99FLG11
S99NOMNT EQU   S99FLG11
S99NOCNV EQU   S99FLG11
S99ONCNV EQU   S99FLG11
S99RBLN  EQU   S99RB
@NM00015 EQU   CSOA+7
@NM00014 EQU   CSOAFLG
@NM00013 EQU   CSOAFLG
CSOAEXEC EQU   CSOAFLG
CSOABAD  EQU   CSOAFLG
CSOAQM   EQU   CSOAFLG
CSOAVNP  EQU   CSOAFLG
CSOAVWP  EQU   CSOAFLG
MSGRTN   EQU   MSGTABLE+60
VAR4     EQU   MTINSRTS+13
HIGHL4   EQU   L4
VAR3     EQU   MTINSRTS+9
HIGHL3   EQU   L3
VAR2     EQU   MTINSRTS+5
HIGHL2   EQU   L2
HIGHL1   EQU   L1
@NM00010 EQU   MSGTABLE+36
@NM00009 EQU   MSGTABLE+32
MTOLDPTR EQU   MSGTABLE+28
@NM00008 EQU   MSGTABLE+25
@NM00007 EQU   SW2
MTPGMSW  EQU   SW2
MTNPLMSW EQU   SW2
MTNOXQSW EQU   SW2
MTDOMSW  EQU   SW2
MT2OLDSW EQU   SW2
MTNHEXSW EQU   SW
MTWTPSW  EQU   SW
MTJOBISW EQU   SW
MTKEY1SW EQU   SW
MTHEXSW  EQU   SW
MTWTOSW  EQU   SW
MTNOIDSW EQU   SW
CPPLPSCB EQU   CPPL+8
CPPLCBUF EQU   CPPL
DSNTERM  EQU   DSNBUF
VVGPRSV2 EQU   VVGRPDE+7
VVGPRSV1 EQU   VVGPFLG
VVGPRES  EQU   VVGPFLG
VVGPLEN  EQU   VVGRPDE+4
VOLRSV2  EQU   VOLSQPDE+7
VOLRSV1  EQU   VOLSQFLG
VOLPRES  EQU   VOLSQFLG
VOLSQLEN EQU   VOLSQPDE+4
MXVRSV2  EQU   MXVOLPDE+7
MXVRSV1  EQU   MXVOLFLG
MXVPRES  EQU   MXVOLFLG
MXVOLLEN EQU   MXVOLPDE+4
POSRSV2  EQU   POSTPDE+7
POSRSV1  EQU   POSFLAG
POSPRES  EQU   POSFLAG
POSLEN   EQU   POSTPDE+4
LABLRSV1 EQU   ALLOCPDL+178+4                                      @26C
LABELPDE EQU   ALLOCPDL+176+4                                      @26C
UCNTRSV2 EQU   UNCNTPDE+7
UCNTRSV1 EQU   UCNTFLAG
UCNTPRES EQU   UCNTFLAG
UCNTLEN  EQU   UNCNTPDE+4
UTYPRSV2 EQU   UTYPPDE+7
UTYPRSV1 EQU   UTYPFLAG
UTYPPRES EQU   UTYPFLAG
UTYPLEN  EQU   UTYPPDE+4
USIDRSV2 EQU   USIDPDE+7
USIDRSV1 EQU   USIDFLAG
USIDPRES EQU   USIDFLAG
USIDLEN  EQU   USIDPDE+4
ATTRRSV2 EQU   ATTRPDE+7
ATTRRSV1 EQU   ATTRFLAG
ATTRPRES EQU   ATTRFLAG
ATTRLEN  EQU   ATTRPDE+4
DIRRSV2  EQU   DIRECPDE+7
DIRRSV1  EQU   DIRFLAGS
DIRPRES  EQU   DIRFLAGS
DIRLEN   EQU   DIRECPDE+4
SPCRSV22 EQU   SPACPDE2+7
SPCRSV12 EQU   SPACFLG2
SPCPRES2 EQU   SPACFLG2
SPACLEN2 EQU   SPACPDE2+4
SPACRSV2 EQU   SPACPDE+7
SPACRSV1 EQU   SPACEFLG
SPACPRES EQU   SPACEFLG
SPACELEN EQU   SPACPDE+4
ABLKRSV2 EQU   ABLKPDE+7
ABLKRSV1 EQU   ABLKFLG
ABLKPRES EQU   ABLKFLG
ABLKLEN  EQU   ABLKPDE+4
BLKRSV2  EQU   BLKPDE+7
BLKRSV1  EQU   BLKFLAGS
BLKPRES  EQU   BLKFLAGS
BLKLEN   EQU   BLKPDE+4
SERNEXT  EQU   SERPDE+8
SERRSV2  EQU   SERPDE+7
SERRSV1  EQU   SERFLAGS
SERPRES  EQU   SERFLAGS
SERLEN   EQU   SERPDE+4
CLASRSV2 EQU   CLASPDE+7
CLASRSV1 EQU   CLASFLG
CLASPRES EQU   CLASFLG
CLASLEN  EQU   CLASPDE+4
DDNRSV2  EQU   DDNMEPDE+7
DDNRSV1  EQU   DDNFLAGS
DDNPRES  EQU   DDNFLAGS
DSNNEXT  EQU   DSNPDE+24
PASSRSV2 EQU   DSNPDE+23
PASSRSV1 EQU   PASSFLAG
PASSPRES EQU   PASSFLAG
PASSLEN  EQU   DSNPDE+20
MBRRSV2  EQU   DSNPDE+15
MBRRSV1  EQU   MBRFLAGS
MBRPRES  EQU   MBRFLAGS
MBRLEN   EQU   DSNPDE+12
DSNRSV2  EQU   DSNPDE+7
DSNRSV1  EQU   DSNFLAGS
DSNQUOT  EQU   DSNFLAGS
DSNPRES  EQU   DSNFLAGS
DSNLENGH EQU   DSNPDE+4
DISPPDE  EQU   ALLOCPDL+46
RNDPDE   EQU   ALLOCPDL+44
RLSEPDE  EQU   ALLOCPDL+42
VSEQPDE  EQU   ALLOCPDL+40
PRIVPDE  EQU   ALLOCPDL+38
MAXVPDE  EQU   ALLOCPDL+36
POSPDE   EQU   ALLOCPDL+34
LABLPDE  EQU   ALLOCPDL+32
UCNTPDE  EQU   ALLOCPDL+30
UNITPDE  EQU   ALLOCPDL+28
HOLDPDE  EQU   ALLOCPDL+26
DESTPDE  EQU   ALLOCPDL+24
USINGPDE EQU   ALLOCPDL+22
DIRPDE   EQU   ALLOCPDL+20
SPACEPDE EQU   ALLOCPDL+18
BLOKPDE  EQU   ALLOCPDL+16
VOLPDE   EQU   ALLOCPDL+14
STATSPDE EQU   ALLOCPDL+12
FILEPDE  EQU   ALLOCPDL+10
DSPDE    EQU   ALLOCPDL+8
@NM00005 EQU   ALLOCPDL+4
@NM00004 EQU   ALLOCPDL
FIRSTPTR EQU   ALLOCWA+176
PPLPTR   EQU   ALLOCWA+172
NBLKBUF1 EQU   ALLOCWA+164
PDLADDR3 EQU   ALLOCWA+156
PPLTWO   EQU   ALLOCWA+128
CMDTWOBF EQU   CMDTWO+4
CMDTWOOF EQU   CMDTWO+2
CMDTWOLN EQU   CMDTWO
Q        EQU   ALLOCWA+56
P        EQU   ALLOCWA+52
PRCODE   EQU   ALLOCWA+44
PMPTPDL  EQU   ALLOCWA+40
@NM00003 EQU   ALLOCWA+38
NCLASBUF EQU   ALLOCWA+37
@NM00002 EQU   VCFLAGS
SPACE2   EQU   VCFLAGS
SPACE1   EQU   VCFLAGS
AVBLK    EQU   VCFLAGS
DSNCTR   EQU   ALLOCWA+30
VLISTCTR EQU   ALLOCWA+28
TXT      EQU   ALLOCWA+16
*AWARSV2 EQU   ALLOCWA+13                                          @26D
FIRSTPDE EQU   SWITCH
AWARSV1  EQU   SWITCH
ASTRSK   EQU   SWITCH
CONT     EQU   SWITCH
PROMPT   EQU   SWITCH
DSOVRLAY EQU   SWITCH
GTPLPTR  EQU   ALLOCWA+8
*                                      END UNREFERENCED COMPONENTS
@RC00082 EQU   @EL00001
@RT00132 EQU   INVRSP
@RT00136 EQU   INVRSP
@RC00089 EQU   @EL00002
@RC00119 EQU   @EL00002
@RC00138 EQU   @EL00002
@RC00134 EQU   @EL00002
@RC00156 EQU   @EL00002
@RC00187 EQU   @EL00003
@RF00193 EQU   @RC00187
@EL01    EQU   @EL00001
@ENDDATA EQU   *
*    END IKJEFD36                                                  0228
         PRINT NOGEN
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJZT430)                                        *
*/*%INCLUDE SYSLIB  (IKJCPPL )                                        *
*/*%INCLUDE SYSLIB  (IKJEFFMT)                                        *
*/*%INCLUDE SYSLIB  (IKJCSPL )                                        *
*/*%INCLUDE SYSLIB  (IKJCSOA )                                        *
*/*%INCLUDE SYSLIB  (IEFZB4D0)                                        *
*/*%INCLUDE SYSLIB  (IEFZB4D2)                                        *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
         CVT   DSECT=YES
*;                                                                 0228
         END   IKJEFD36,(C'PLS0315',0603,74204)
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
  IDENTIFY IKJEFD36('ZP60026')
++MOD(IKJEFD37) DISTLIB(AOST4).
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//IFOX00   EXEC PGM=IFOX00,PARM='OBJECT,NODECK,NOTERM,XREF(SHORT)'
//SYSPRINT DD  SYSOUT=*
//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR
//         DD  DSN=SYS1.SMPMTS,DISP=SHR
//         DD  DSN=SYS1.AMODGEN,DISP=SHR
//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,10)
//SYSGO    DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  *
         TITLE 'ALLOCATE VALIDITY CHECK EXITS                          *
                        '
***********************************************************************
*  $26   ZP60026  2010-01-23 GREG PRICE: ADD 'REUSE' OPERAND.         *
*                            CHANGES APPLIED TO UZ65229 LEVEL.        *
***********************************************************************
IKJEFD37 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,R15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(33)                                             @26C
         DC    C'IKJEFD37  83.145'                                 0001
         DC    CL17' ZP60026 2010.023'                             @26A
         DROP  R15
@PROLOG  STM   R14,R12,12(R13)                                     0001
         BALR  R12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,R12                                         0001
         L     R0,@SIZDATD                                         0001
         GETMAIN  R,LV=(0)
         LR    R11,R1                                              0001
         USING @DATD,R11                                           0001
         ST    R13,@SA00001+4                                      0001
         LM    R0,R1,20(R13)                                       0001
         ST    R11,8(,R13)                                         0001
         LR    R13,R11                                             0001
**  OLD  XC    @ZTEMPS(@ZLEN),@ZTEMPS
*        AWAPTR = R1;                  /* SAVE PTR TO WORKAREA       */
         LR    R6AWAPTR,R1                                         0072
*        PPLUWA = ADDR(SAVEVAL);       /* USER WORD CONTAINS REGS    */
         L     R7,PPLPTR(,R6AWAPTR)                                0073
         LA    R10,SAVEVAL                                         0073
         ST    R10,PPLUWA(,R7)                                     0073
*        GEN (STM 2,12,SAVEVAL);       /* STORE REGISTERS            */
         STM 2,12,SAVEVAL
*        PPLCBUF = CPPLCBUF;           /* CMD BUFFER IN PPL          */
         L     R7,PPLPTR(,R6AWAPTR)                                0075
         L     R10,CPPLPTR(,R6AWAPTR)                              0075
         L     R10,CPPLCBUF(,R10)                                  0075
         ST    R10,PPLCBUF(,R7)                                    0075
*        IF ENTRYCD = 1 THEN           /* IF MAIN CALL TO PARSE,     */
         CLC   ENTRYCD(2,R6AWAPTR),@HW1                            0076
         BNE   @RF00076                                            0076
*          DO;                         /* THEN                       */
*            PPLPCL = ADCONPCL;        /* PUT PCL ADDRESS IN PPL     */
         L     R10,ADCONPCL                                        0078
         ST    R10,PPLPCL(,R7)                                     0078
*            PPLANS = ADDR(PDLADDR);   /* PUT PDL ADDRESS IN PPL     */
         LA    R10,PDLADDR                                         0079
         ST    R10,PPLANS(,R7)                                     0079
*            PDLADDR = 0;              /* SET PDL ADDRESS TO 0       */
         SLR   R7,R7                                               0080
         ST    R7,PDLADDR                                          0080
*          END;                                                    0081
*        ELSE                          /* ELSE,                      */
*          DO;                         /* IF PROMPT CALL TO PARSE,   */
         B     @RC00076                                            0082
@RF00076 DS    0H                                                  0083
*             PPLANS = ADDR(PDLADDR2); /* PUT PDL ADDRESS IN PPL     */
         L     R10,PPLPTR(,R6AWAPTR)                               0083
         LA    R7,PDLADDR2                                         0083
         ST    R7,PPLANS(,R10)                                     0083
*             PDLADDR2 = 0;            /* SET PDL ADDR TO 0          */
         SLR   R7,R7                                               0084
         ST    R7,PDLADDR2                                         0084
*             IF ENTRYCD = 2 THEN      /* IF STATUS PROMPT,          */
         CLC   ENTRYCD(2,R6AWAPTR),@HW2                            0085
         BNE   @RF00085                                            0085
*               PPLPCL = ADCNPCLF;     /* SET PCL                    */
         L     R7,ADCNPCLF                                         0086
         ST    R7,PPLPCL(,R10)                                     0086
*             ELSE                                                 0087
*             IF ENTRYCD = 3 THEN      /* IF DSNAME PROMPT,          */
         B     @RC00085                                            0087
@RF00085 CLC   ENTRYCD(2,R6AWAPTR),@HW3                            0087
         BNE   @RF00087                                            0087
*               PPLPCL = ADCNPCLA;     /* SET PCL                    */
         L     R10,PPLPTR(,R6AWAPTR)                               0088
         L     R7,ADCNPCLA                                         0088
         ST    R7,PPLPCL(,R10)                                     0088
*             ELSE                                                 0089
*             IF ENTRYCD = 4 THEN      /* IF FILENAME PROMPT,        */
         B     @RC00087                                            0089
@RF00087 CLC   ENTRYCD(2,R6AWAPTR),@HW4                            0089
         BNE   @RF00089                                            0089
*               PPLPCL = ADCNPCLE;     /* SET PCL                    */
         L     R10,PPLPTR(,R6AWAPTR)                               0090
         L     R7,ADCNPCLE                                         0090
         ST    R7,PPLPCL(,R10)                                     0090
*             ELSE                                                 0091
*             IF ENTRYCD = 5 THEN      /* IF SPACE PROMPT,           */
         B     @RC00089                                            0091
@RF00089 CLC   ENTRYCD(2,R6AWAPTR),@HW5                            0091
         BNE   @RF00091                                            0091
*               PPLPCL = ADCNPCLB;     /* SET PCL                    */
         L     R10,PPLPTR(,R6AWAPTR)                               0092
         L     R7,ADCNPCLB                                         0092
         ST    R7,PPLPCL(,R10)                                     0092
*             ELSE                                                 0093
*             IF ENTRYCD = 6 THEN      /* IF DIR PROMPT,             */
         B     @RC00091                                            0093
@RF00091 CLC   ENTRYCD(2,R6AWAPTR),@HW6                            0093
         BNE   @RF00093                                            0093
*               PPLPCL = ADCNPCLD;     /* SET PCL                    */
         L     R10,PPLPTR(,R6AWAPTR)                               0094
         L     R7,ADCNPCLD                                         0094
         ST    R7,PPLPCL(,R10)                                     0094
*             ELSE                                                 0095
*             IF ENTRYCD = 7 THEN      /* IF BLOCK PROMPT,           */
         B     @RC00093                                            0095
@RF00093 CLC   ENTRYCD(2,R6AWAPTR),@HW7                            0095
         BNE   @RF00095                                            0095
*               PPLPCL = ADCNPCLC;     /* SET PCL                    */
         L     R10,PPLPTR(,R6AWAPTR)                               0096
         L     R7,ADCNPCLC                                         0096
         ST    R7,PPLPCL(,R10)                                     0096
*           END;                                                   0097
@RF00095 DS    0H                                                  0097
@RC00093 DS    0H                                                  0097
@RC00091 DS    0H                                                  0097
@RC00089 DS    0H                                                  0097
@RC00087 DS    0H                                                  0097
@RC00085 DS    0H                                                  0098
*        VCFLAGS = '00'X;              /* INITIALIZE FLAGS           */
@RC00076 MVI   VCFLAGS(R6AWAPTR),X'00'                             0098
*        R1 = PPLPTR;                  /* PPL IN REG 1               */
         L     R1,PPLPTR(,R6AWAPTR)                                0099
*          DO; /*CALLTSSR EP(IKJPARS)*/                            0100
*            RESPECIFY GPR01P RSTD;                                0101
*            IF CVTPARS = 0                                        0102
*              THEN                                                0102
         L     R7,CVTPTR                                           0102
         L     R10,CVTPARS-CVT(,R7)                                0102
         LTR   R10,R10                                             0102
         BNZ   @RF00102                                            0102
*                GEN(LINK EP=IKJPARS);                             0103
         LINK EP=IKJPARS
*              ELSE                                                0104
*                CALL CVTPARS;                                     0104
         B     @RC00102                                            0104
@RF00102 L     R7,CVTPTR                                           0104
         L     R15,CVTPARS-CVT(,R7)                                0104
         BALR  R14,R15                                             0104
*            RESPECIFY GPR01P UNRSTD;                              0105
@RC00102 DS    0H                                                  0106
*          END;       /* INVOKE PARSE       @Y30NQKK*/             0106
*                                                                  0106
*        IF R15 > 0 THEN               /* IF PARSE FAILED            */
         SLR   R7,R7                                               0107
         CR    R15,R7                                              0107
         BNH   @RF00107                                            0107
*          DO;                         /* AND                        */
*            IF RCODESV = 0 THEN       /* IF NO ERROR IN VAL CHECK   */
         C     R7,RCODESV(,R6AWAPTR)                               0109
         BNE   @RF00109                                            0109
*              RCODESV = R15;          /* SAVE RETURN CODE           */
         ST    R15,RCODESV(,R6AWAPTR)                              0110
*          END;                                                    0111
*        ELSE                          /* ELSE                       */
*          RCODESV = R15;              /* SAVE GOOD RETURN CODE      */
         B     @RC00107                                            0112
@RF00107 ST    R15,RCODESV(,R6AWAPTR)                              0112
*        IF ENTRYCD = 1 THEN           /* IF MAIN CALL TO PARSE,     */
@RC00107 CLC   ENTRYCD(2,R6AWAPTR),@HW1                            0113
         BNE   @RF00113                                            0113
*          PTRPDL = PDLADDR;           /* SAVE MAIN PDL ADDRESS      */
         L     R7,PDLADDR                                          0114
         ST    R7,PTRPDL(,R6AWAPTR)                                0114
*        ELSE                          /* ELSE                       */
*          PMPTPDL = PDLADDR2;         /* SAVE PROMPT PDL            */
*                                                                  0115
         B     @RC00113                                            0115
@RF00113 L     R7,PDLADDR2                                         0115
         ST    R7,PMPTPDL(,R6AWAPTR)                               0115
*        RETURN;                       /* RETURN TO CALLER           */
@EL00001 L     R13,4(,R13)                                         0116
@EF00001 L     R0,@SIZDATD                                         0116
         LR    R1,R11                                              0116
         FREEMAIN R,LV=(0),A=(1)
@ER00001 LM    R14,R12,12(R13)                                     0116
         BR    R14                                                 0116
*        GENERATE;                                                 0117
IKJEFD3Z  IKJPARM DSECT=PCL
DSKEYWRD  IKJKEYWD
          IKJNAME  'DATASET',SUBFLD=DSNAME,ALIAS='DSNAME'      @Y30NQKK
          IKJNAME  'DUMMY'
FILE      IKJKEYWD
          IKJNAME  'FILE',SUBFLD=DDNAMFLD,ALIAS='DDNAME'       @Y30NQKK
STATUS    IKJKEYWD
          IKJNAME  'OLD'
          IKJNAME  'SHR'
          IKJNAME  'MOD'
          IKJNAME  'NEW'
          IKJNAME  'SYSOUT',SUBFLD=SYSCLASS
VOLUME    IKJKEYWD
          IKJNAME  'VOLUME',SUBFLD=SERIAL
*                                                              @Y30LPKH
          IKJNAME  'MSVGP',SUBFLD=VVIDENT
BLOCK     IKJKEYWD
          IKJNAME  'BLOCK',SUBFLD=BLKSIZE,ALIAS='BLKSIZE'      @Y30NQKK
          IKJNAME  'AVBLOCK',SUBFLD=ABLKSIZE
          IKJNAME  'TRACKS'
          IKJNAME  'CYLINDERS'
SPACE     IKJKEYWD
          IKJNAME  'SPACE',SUBFLD=QUANT
DIR       IKJKEYWD
          IKJNAME  'DIR',SUBFLD=INTEGER
USING     IKJKEYWD
          IKJNAME  'USING',SUBFLD=ATTRNAME
DEST      IKJKEYWD
          IKJNAME  'DEST',SUBFLD=USERID
HOLD      IKJKEYWD  DEFAULT='NOHOLD'
          IKJNAME  'HOLD'
          IKJNAME  'NOHOLD'
UNIT      IKJKEYWD
          IKJNAME  'UNIT',SUBFLD=UNITYPE
*                                                              @YM07624
UCOUNT    IKJKEYWD
          IKJNAME  'UCOUNT',SUBFLD=UNCNTSUB
          IKJNAME  'PARALLEL'
LABEL     IKJKEYWD
          IKJNAME  'LABEL',SUBFLD=LBLTYPE
POSITION  IKJKEYWD
          IKJNAME  'POSITION',SUBFLD=DSSEQ
MAXVOL    IKJKEYWD
          IKJNAME  'MAXVOL',SUBFLD=MXVOLSUB
PRIVATE   IKJKEYWD
          IKJNAME  'PRIVATE'
VSEQ      IKJKEYWD
          IKJNAME  'VSEQ',SUBFLD=VSSEQSUB
RELSE     IKJKEYWD
          IKJNAME  'RELEASE'
ROUND     IKJKEYWD
          IKJNAME  'ROUND'
DISP      IKJKEYWD
          IKJNAME  'KEEP'
          IKJNAME  'DELETE'
          IKJNAME  'CATALOG'
          IKJNAME  'UNCATALOG'
REUSE     IKJKEYWD ,                                               @26A
          IKJNAME  'REUSE'                                         @26A
DSNAME    IKJSUBF
*                                                              @YM02616
DSNAMES   IKJPOSIT  DSTHING,LIST,USID,                                 X
               PROMPT='DATA SET NAME OR *',                            X
               HELP='NAME OF DATA SET TO BE ALLOCATED',                X
               VALIDCK=SYSDSN
DDNAMFLD  IKJSUBF
DDNMFLDS  IKJIDENT  'FILE NAME',                                       X
               MAXLNTH=8,                                              X
               FIRST=ALPHA,                                            X
               OTHER=ALPHANUM,                                         X
               PROMPT='FILE NAME',                                     X
               HELP='FILE NAME TO BE USED'
SYSCLASS  IKJSUBF
SYSOUTC   IKJIDENT  'SYSOUT CLASS',                                    X
               MAXLNTH=1,                                              X
               FIRST=NONATNUM,                                         X
               HELP='SYSTEM OUTPUT CLASS'
SERIAL    IKJSUBF
SERIALS   IKJIDENT  'VOLUME SERIAL',LIST,                              X
               FIRST=ALPHANUM,                                         X
               OTHER=ALPHANUM,                                         X
               MAXLNTH=6,                                              X
               PROMPT='VOLUME SERIAL NUMBER',                          X
               HELP='VOLUME SERIAL NUMBER ON WHICH DATA SET RESIDES',  X
               VALIDCK=SYSVLIST
BLKSIZE   IKJSUBF
BLKSIZES  IKJIDENT  'BLOCK SIZE',                                      X
               MAXLNTH=8,                                              X
               FIRST=NUMERIC,                                          X
               OTHER=NUMERIC,                                          X
               PROMPT='BLOCK SIZE',                                    X
               HELP='LENGTH OF OUTPUT RECORDS',                        X
               VALIDCK=SYSBLOCK
ABLKSIZE  IKJSUBF
ABLKSUB   IKJIDENT  'AVERAGE RECORD LENGTH',                           X
               MAXLNTH=8,                                              X
               FIRST=NUMERIC,                                          X
               OTHER=NUMERIC,                                          X
               VALIDCK=SYSABLOK,                                       X
               PROMPT='AVERAGE RECORD LENGTH',                         X
               HELP='LENGTH OF OUTPUT RECORDS'
QUANT     IKJSUBF
QUANTITY  IKJIDENT  'SPACE VALUE',                                     X
               MAXLNTH=8,                                              X
               FIRST=NUMERIC,                                          X
               OTHER=NUMERIC,                                          X
               PROMPT='SPACE VALUE AND IF ANY, INCREMENT VALUE',       X
               HELP='NUMBER OF RECORDS',                               X
               VALIDCK=SYSPACE1
QUANTIT2  IKJIDENT  'INCREMENT VALUE',                                 X
               MAXLNTH=8,                                              X
               FIRST=NUMERIC,                                          X
               OTHER=NUMERIC,                                          X
               VALIDCK=SYSPACE2
INTEGER   IKJSUBF
INTEGERS  IKJIDENT  'DIRECTORY QUANTITY',                              X
               MAXLNTH=8,                                              X
               FIRST=NUMERIC,                                          X
               OTHER=NUMERIC,                                          X
               PROMPT='NUMBER OF DIRECTORY BLOCKS',                    X
               HELP='NUMBER OF BLOCKS TO BE USED',                     X
               VALIDCK=SYSDIR
ATTRNAME  IKJSUBF
ATTRNAMS  IKJIDENT  'ATTR-LIST-NAME',                                  X
               MAXLNTH=8,                                              X
               FIRST=ALPHA,                                            X
               OTHER=ALPHANUM,                                         X
               PROMPT='ATTR-LIST-NAME',                                X
               HELP='ATTR-LIST-NAME TO BE USED'
USERID    IKJSUBF
USERIDS   IKJIDENT  'ID IN THE DEST SUBFIELD',                         X
               MAXLNTH=7,                                              X
               FIRST=ALPHANUM,                                         X
               OTHER=ALPHANUM,                                         X
               PROMPT='ID FOR THE DEST SUBFIELD',                      X
               HELP='ID OF A REMOTE USER OR DEVICE'
UNITYPE   IKJSUBF
UNTYPES   IKJIDENT  'DEVICE TYPE',                                     X
               MAXLNTH=8,                                              X
               FIRST=ANY,                                              X
               OTHER=ANY,                                              X
               PROMPT='DEVICE TYPE TO BE ALLOCATED',                   X
               HELP='GENERIC DEVICE NAME, ESOTERIC DEVICE NAME, OR DEVIX
               CE ADDRESS'
UNCNTSUB  IKJSUBF
UCNTSUBS  IKJIDENT  'UNIT COUNT',                                      X
               MAXLNTH=2,                                              X
               FIRST=NUMERIC,                                          X
               OTHER=NUMERIC,                                          X
               PROMPT='UNIT COUNT',                                    X
               HELP='NUMBER OF DEVICES TO BE ALLOCATED',               X
               VALIDCK=SYSUCNT
LBLTYPE   IKJSUBF
LBLTYPES  IKJKEYWD  DEFAULT='SL'
          IKJNAME  'SL'
          IKJNAME  'SUL'
          IKJNAME  'AL'
          IKJNAME  'AUL'
          IKJNAME  'NL'
          IKJNAME  'NSL'
          IKJNAME  'LTM'
          IKJNAME  'BLP'
DSSEQ     IKJSUBF
DSSEQSUB  IKJIDENT  'DATA SET SEQUENCE NUMBER',                        X
               MAXLNTH=4,                                              X
               FIRST=NUMERIC,                                          X
               OTHER=NUMERIC,                                          X
               PROMPT='DATA SET SEQUENCE NUMBER',                      X
               HELP='RELATIVE POSITION OF DATA SET'
MXVOLSUB  IKJSUBF
MXVOLS    IKJIDENT  'VOLUME COUNT',                                    X
               MAXLNTH=3,                                              X
               FIRST=NUMERIC,                                          X
               OTHER=NUMERIC,                                          X
               PROMPT='VOLUME COUNT',                                  X
               HELP='MAXIMUM NUMBER OF VOLUMES',                       X
               VALIDCK=SYSMAX
VSSEQSUB  IKJSUBF
VSSEQSB   IKJIDENT  'VOLUME SEQUENCE NUMBER',                          X
               MAXLNTH=3,                                              X
               FIRST=NUMERIC,                                          X
               OTHER=NUMERIC,                                          X
               PROMPT='VOLUME SEQUENCE NUMBER',                        X
               VALIDCK=SYSMAX
*                                                              @Y30LPKH
VVIDENT  IKJSUBF
VVGPSUB  IKJIDENT   'MASS STORAGE GROUP',                              X
               MAXLNTH=8,                                              X
               FIRST=ALPHANUM,                                         X
               OTHER=ALPHANUM,                                         X
               PROMPT='MASS STORAGE GROUP',                            X
               HELP='MASS STORAGE GROUP ON WHICH DATA SET IS TO RESIDE'
         IKJENDP
ADCONPCL  DC A(IKJEFD3Z)
*        GENERATE;                                                 0118
* THE FOLLOWING PARAMETER CONTROL LIST IS USED WHEN IT IS NECESSARY
* TO PROMPT FOR THE DATA SET NAME
IKJEFD3A  IKJPARM DSECT=PCLA
*                                                              @YM02616
DSN       IKJPOSIT DSNAME,PROMPT='DATA SET NAME',LIST,USID,            X
               HELP='NAME OF DATA SET TO BE ALLOCATED'
          IKJENDP
ADCNPCLA  DC A(IKJEFD3A)
*        GENERATE;                                                 0119
* THE FOLLOWING IS THE PCL THAT IS USED FOR THE BLOCK PARAMETER WHEN
* IT MUST BE OBTAINED AFTER PARSE HAS FINISHED ITS INITIAL SCAN
IKJEFD3C  IKJPARM DSECT=PCLC
PBLOK     IKJTERM  'UNIT OF SPACE KEYWORD',                            X
               TYPE=VAR,SBSCRPT=PBLOKSUB,                              X
               PROMPT='UNIT OF SPACE KEYWORD WITH VALUE, IF ANY',      X
               HELP='BLOCK, BLKSIZE, AVBLOCK, TRACKS OR CYLINDERS',    X
               VALIDCK=SYSPBLK
PBLOKSUB  IKJTERM  'BLOCK OR AVBLOCK VALUE',                           X
               TYPE=CNST,SBSCRPT
          IKJENDP
ADCNPCLC  DC A(IKJEFD3C)
*        GENERATE;                                                 0120
* THE FOLLOWING PCL IS USED TO SCAN THE VALUE ENTERED ON THE UNIT
* OF SPACE PROMPT FOR A VALID PARAMETER
IKJEFD3Y  IKJPARM DSECT=PCLY
BLOKKY    IKJKEYWD
          IKJNAME  'BLOCK',SUBFLD=BLOKSUB,ALIAS='BLKSIZE'      @Y30NQKK
          IKJNAME  'AVBLOCK',SUBFLD=ABLOKSUB
          IKJNAME  'TRACKS'
          IKJNAME  'CYLINDERS'
BLOKSUB   IKJSUBF
BLOKS     IKJIDENT  'BLOCK SIZE',                                      X
               MAXLNTH=8,FIRST=NUMERIC,OTHER=NUMERIC,                  X
               PROMPT='BLOCK SIZE'
ABLOKSUB  IKJSUBF
ABLOKS    IKJIDENT  'AVERAGE RECORD LENGTH',                           X
               MAXLNTH=8,FIRST=NUMERIC,OTHER=NUMERIC,                  X
               PROMPT='AVERAGE RECORD LENGTH'
          IKJENDP
ADCNPCLY  DC   A(IKJEFD3Y)
*        GENERATE;                                                 0121
* THE FOLLOWING IS THE PCL THAT IS USED FOR THE SPACE PARAMETER WHEN IT
* MUST BE OBTAINED AFTER PARSE HAS FINISHED ITS INITIAL SCAN
IKJEFD3B  IKJPARM DSECT=PCLB
SPACEP    IKJIDENT  'SPACE VALUE',MAXLNTH=8,FIRST=NUMERIC,             X
               OTHER=NUMERIC,PROMPT='SPACE VALUE AND IF ANY, SPACE INCRX
               EMENT VALUE',HELP='NUMBER OF RECORDS',VALIDCK=SYSPACE1
SPACES    IKJIDENT  'SPACE INCREMENT VALUE', MAXLNTH=8,                X
               FIRST=NUMERIC,OTHER=NUMERIC,VALIDCK=SYSPACE2
          IKJENDP
ADCNPCLB  DC A(IKJEFD3B)
*        GENERATE;                                                 0122
* THE FOLLOWING PCL IS USED TO PROMPT FOR THE DIRECTORY QUANTITY WHEN
* A MEMBER NAME IS GIVEN WITHOUT A DIRECTORY AMOUNT
IKJEFD3D IKJPARM DSECT=PCLD
DIRECT   IKJIDENT  'DIRECTORY QUANTITY',MAXLNTH=8,FIRST=NUMERIC,       X
               OTHER=NUMERIC,PROMPT='NUMBER OF DIRECTORY BLOCKS',      X
               HELP='NUMBER OF BLOCKS TO BE USED',VALIDCK=SYSDIR
         IKJENDP
ADCNPCLD  DC A(IKJEFD3D)
*        GENERATE;                                                 0123
* THE FOLLOWING IS THE PCL USED TO PROMPT FOR STATUS
IKJEFD3F   IKJPARM  DSECT=PCLF
STATUS1  IKJTERM 'STATUS OR SYSOUT KEYWORD',                           X
               TYPE=VAR,SBSCRPT=STATSUB,                               X
               PROMPT='STATUS OR SYSOUT KEYWORD',                      X
               HELP='STATUS OF OLD, MOD, SHR, OR NEW, OR SYSOUT',      X
               VALIDCK=SYSTATS
STATSUB  IKJTERM  'OUTPUT CLASS',                                      X
               TYPE=ANY,SBSCRPT
          IKJENDP
ADCNPCLF DC A(IKJEFD3F)
*        GENERATE;                                                 0124
* THE FOLLOWING IS THE PCL USED TO SCAN STATUS ON THE CALL TO
* PARSE FROM THE VALIDITY CHECK EXIT SYSTATS
IKJEFD3X IKJPARM DSECT=PCLX
STATKEY  IKJKEYWD
         IKJNAME 'OLD'
         IKJNAME 'SHR'
         IKJNAME 'MOD'
         IKJNAME 'NEW'
         IKJNAME 'SYSOUT',SUBFLD=OUTCLASS
OUTCLASS IKJSUBF
OUTCLASB IKJIDENT 'SYSOUT CLASS',MAXLNTH=1,FIRST=NONATNUM
         IKJENDP
ADCNPCLX DC A(IKJEFD3X)
*        GENERATE;                                                 0125
* THE FOLLOWING PCL IS USED TO PROMPT FOR DDNAME
IKJEFD3E  IKJPARM DSECT=PCLE
PDDNAME   IKJIDENT 'FILE NAME',MAXLNTH=8,FIRST=ALPHA,OTHER=ALPHANUM,   X
               PROMPT='FILE NAME'
          IKJENDP
ADCNPCLE  DC  A(IKJEFD3E)
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      SYSBLOCK                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS VALIDITY CHECK ROUTINE CHECKS THE BLOCK AND            */
*/*      AVBLOCK VALUES FOR THE MAXIMUM.                             */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      TWO ENTRY POINTS ARE DEFINED TO INDICATE WHICH PARAMETER    */
*/*      IS BEING PROCESSED - SYSBLOCK AND SYSABLOK. BOTH ENTRY      */
*/*      POINTS INVOKE THE MAIN PROCESSOR, SYSBLK. THE PARAMETER IS  */
*/*      CONVERTED TO BINARY AND CHECKED AGAINST THE MAXIMUM OF      */
*/*      65535. IF GREATER, THE RETURN CODE IS SET TO 8 AND AN       */
*/*      ERROR MESSAGE IS ISSUED.                                    */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE = 0-VALID PARAMETER                             */
*/*                    8-INVALID PARAMETER, PARSE PROMPTS            */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*                                      /* ENTRY FOR BLOCK            */
*    SYSBLOCK: PROC OPTIONS(NOSAVEAREA);                           0126
         B     @EL00001                                            0126
SYSBLOCK STM   R14,R12,12(R13)                                     0126
*        R15 = R1->VALWORK;            /* STORED REGISTERS           */
         L     R15,VALWORK(,R1)                                    0127
*        GENERATE;                     /* SET UP ADDRESSABILITY      */
*                                                                  0128
         LM  2,12,0(15)                   RESTORE ALLOC REGISTERS
         LA  14,SAVEVC                    VC SAVER IN REG 14
         ST  14,8(13)                     VC SAVER IN PARSE SAVER
         ST  13,4(14)                     PARSE SAVER IN VC SAVER
         LR  13,14                        VC SAVER IN REG 13
*        AVBLK = '0'B;                 /* INDICATE BLOCK ENTERED     */
         NI    AVBLK(R6AWAPTR),B'01111111'                         0129
*        CALL SYSBLK;                  /* PROCESS BLOCK PARAMETER    */
         BAL   R14,SYSBLK                                          0130
*        GEN (L 13,4(13));                                         0131
         L 13,4(13)
*        PARSRTC = PRCODE;                                         0132
         L     R10,PRCODE(,R6AWAPTR)                               0132
         ST    R10,PARSRTC(,R13)                                   0132
*        RETURN;                       /* RETURN TO PARSE            */
@EL00002 DS    0H                                                  0133
@EF00002 DS    0H                                                  0133
@ER00002 LM    R14,R12,12(R13)                                     0133
         BR    R14                                                 0133
*     END SYSBLOCK;                                                0134
*                                      /* ENTRY FOR AVBLOCK          */
*    SYSABLOK: PROC OPTIONS(NOSAVEAREA);                           0135
SYSABLOK STM   R14,R12,12(R13)                                     0135
*        R15 = R1->VALWORK;            /* GET STORED REGISTERS       */
         L     R15,VALWORK(,R1)                                    0136
*        GENERATE;                     /* SET UP ADDRESSABILITY      */
*                                                                  0137
         LM  2,12,0(15)                   RESTORE ALLOC REGISTERS
         LA  14,SAVEVC                    VC SAVER IN REG 14
         ST  14,8(13)                     VC SAVER IN PARSE SAVER
         ST  13,4(14)                     PARSE SAVER IN VC SAVER
         LR  13,14                        VC SAVER IN REG 13
*        AVBLK = '1'B;                 /* INDICATE AVBLOCK ENTERED   */
         OI    AVBLK(R6AWAPTR),B'10000000'                         0138
*        CALL SYSBLK;                  /* PROCESS PARAMETER          */
         BAL   R14,SYSBLK                                          0139
*        AVBLK = '0'B;                 /* TURN OFF INDICATOR         */
         NI    AVBLK(R6AWAPTR),B'01111111'                         0140
*        GEN (L 13,4(13));                                         0141
         L 13,4(13)
*        PARSRTC = PRCODE;                                         0142
         L     R10,PRCODE(,R6AWAPTR)                               0142
         ST    R10,PARSRTC(,R13)                                   0142
*        RETURN;                       /* RETURN TO PARSE            */
@EL00003 DS    0H                                                  0143
@EF00003 DS    0H                                                  0143
@ER00003 LM    R14,R12,12(R13)                                     0143
         BR    R14                                                 0143
*     END SYSABLOK;                                                0144
*                                                                  0144
*    SYSBLK: PROC;                     /* COMMON BLOCK & AVBLOCK RTN */
*                                                                  0145
SYSBLK   STM   R14,R12,@SA00004                                    0145
*         VCKPTR = R1;                 /* PARM LIST FROM REG 1       */
         LR    R5VCKPTR,R1                                         0146
*         PRCODE = 0;                  /* INIT RETURN CODE           */
         SLR   R4,R4                                               0147
         ST    R4,PRCODE(,R6AWAPTR)                                0147
*         RCODESV = 0;                 /* INIT RET CODE IN WORKAREA  */
         ST    R4,RCODESV(,R6AWAPTR)                               0148
*         PKAREA(1) = 'F0'X;           /* 1ST BYTE IN PACKAREA F0    */
         MVI   PKAREA,X'F0'                                        0149
*         P = ADDR(PKAREA(1));         /* POINT TO 1ST BYTE          */
         LA    R7,PKAREA                                           0150
         ST    R7,P(,R6AWAPTR)                                     0150
*         Q = ADDR(PKAREA(2));         /* POINT TO 2ND BYTE          */
         LA    R10,PKAREA+1                                        0151
         ST    R10,Q(,R6AWAPTR)                                    0151
*         Q->AREA1 = P->AREA2;         /* CLEAR PACK AREA TO ALL F0  */
         MVC   AREA1(15,R10),AREA2(R7)                             0152
*         RFY Y RSTD;                  /* RESTRICT WORK REGISTER     */
*         Y = 8-VCBLKLEN+ADDR(PKAREA); /* MOVE VALUE INTO PACK AREA  */
         L     R4,VALPDE(,R5VCKPTR)                                0154
         LH    R7,VCBLKLEN(,R4)                                    0154
         LA    R8Y,8                                               0154
         SLR   R8Y,R7                                              0154
         LA    R10,PKAREA                                          0154
         ALR   R8Y,R10                                             0154
*         PKAREA1(1:VCBLKLEN) = VCBLKBUF(1:VCBLKLEN);              0155
         BCTR  R7,0                                                0155
         L     R4,VCBLKPTR(,R4)                                    0155
         EX    R7,@SM01301                                         0155
*         GENERATE REFS(CVBAREA);      /* PACK AND CONVERT TO BINARY */
         PACK  CVBAREA(8),PKAREA(8)
         CVB   R8Y,CVBAREA
*         IF Y > 65535 THEN            /* IF VALUE EXCEEDS MAXIMUM,  */
         C     R8Y,@FW4FOX                                         0157
         BNH   @RF00157                                            0157
*           DO;                        /* THEN,                      */
*             PRCODE = 8;              /* INDICATE PARSE PROMPT      */
         MVC   PRCODE(4,R6AWAPTR),@FW8                             0159
*             MSGID = '103A';          /* SET MESSAGE ID             */
         L     R7,MSGPTR(,R6AWAPTR)                                0160
         MVC   MSGID(4,R7),@CHR103A                                0160
*             IF AVBLK = '1'B THEN     /* IF PROCESSING AVBLOCK,     */
         TM    AVBLK(R6AWAPTR),B'10000000'                         0161
         BNO   @RF00161                                            0161
*               DO;                    /* THEN                       */
*                 VAR1 = ADDR(AVBLOCK);/* PTR TO AVBLOCK VARIABLE    */
         LA    R9,AVBLOCK                                          0163
** STCM  ST    R9,@TF00001                                         0163
** STCM  MVC   VAR1(3,R7),@TF00001+1                               0163
         STCM  R9,7,VAR1(R7)                                       0163
*                 L1 = LENGTH(AVBLOCK);/* AND LENGTH IN PARM LIST    */
         MVI   L1(R7),X'07'                                        0164
*               END;                                               0165
*             ELSE                     /* ELSE,                      */
*               DO;                    /* ASSUME BLOCK -             */
         B     @RC00161                                            0166
@RF00161 DS    0H                                                  0167
*                 VAR1 = ADDR(BLKVAR); /* PTR TO BLOCK VARIABLE      */
         L     R10,MSGPTR(,R6AWAPTR)                               0167
         LA    R4,BLKVAR                                           0167
** STCM  ST    R9,@TF00001                                         0167
** STCM  MVC   VAR1(3,R4),@TF00001+1                               0167
         STCM  R4,7,VAR1(R10)                                      0167
*                 L1 = LENGTH(BLKVAR); /* AND LENGTH IN PARM LIST    */
         MVI   L1(R10),X'0A'                                       0168
*               END;                                               0169
*             CALL VCPUTMSG;           /* ISSUE MESSAGE              */
@RC00161 BAL   R14,VCPUTMSG                                        0170
*             IF RCODESV > 0 THEN      /* IF MSG ROUTINE FAILED,     */
         L     R7,RCODESV(,R6AWAPTR)                               0171
         LTR   R7,R7                                               0171
         BNP   @RF00171                                            0171
*               PRCODE = 12;           /* INDICATE PARSE TERMINATE   */
         MVC   PRCODE(4,R6AWAPTR),@FW12                            0172
*             ELSE                     /* ELSE,                      */
*               VALMSG = ADDR(MSG01);  /* PASS PARSE 2ND LEVEL MSG   */
         B     @RC00171                                            0173
@RF00171 LA    R9,MSG01                                            0173
         ST    R9,VALMSG(,R5VCKPTR)                                0173
*           END;                                                   0174
*    END SYSBLK;                                                   0175
@EL00004 DS    0H                                                  0175
@EF00004 DS    0H                                                  0175
@ER00004 LM    R14,R12,@SA00004                                    0175
         BR    R14                                                 0175
*        RFY Y UNRSTD;                                             0176
*                                                                  0177
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      SYSPACE                                                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS VALIDITY CHECK ROUTINE CHECKS THE SPACE, SPACE         */
*/*      INCREMENT, AND DIRECTORY VALUES FOR THE MAXIMUM.            */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THREE ENTRY POINTS ARE DEFINED TO INDICATE WHICH PARAMETER  */
*/*      IS BEING PROCESSED - SYSPACE1, SYSPACE2, SYSDIR. EACH       */
*/*      ENTRY POINT INVOKES THE MAIN PROCESSOR, SYSPACE. THE        */
*/*      PARAMETER IS CONVERTED TO BINARY AND CHECKED AGAINST THE    */
*/*      MAXIMUM OF 16,777,215. IF GREATER, THE RETURN CODE IS SET   */
*/*      TO 8, AND AN ERROR MESSAGE IS ISSUED.                       */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE = 0 - VALID PARAMETER                           */
*/*                    8 - INVALID PARAMETER, PARSE PROMPTS          */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*                                      /* ENTRY FOR SPACE            */
*    SYSPACE1: PROC OPTIONS(NOSAVEAREA);                           0177
SYSPACE1 STM   R14,R12,12(R13)                                     0177
*        R15 = R1->VALWORK;            /* GET STORED REGISTERS       */
         L     R15,VALWORK(,R1)                                    0178
*        GENERATE;                     /* SET UP ADDRESSABILITY      */
*                                                                  0179
         LM  2,12,0(15)                   RESTORE ALLOC REGISTERS
         LA  14,SAVEVC                    VC SAVER IN REG 14
         ST  14,8(13)                     VC SAVER IN PARSE SAVER
         ST  13,4(14)                     PARSE SAVER IN VC SAVER
         LR  13,14                        VC SAVER IN REG 13
*        SPACE1 = '1'B;                /* INDICATE SPACE             */
         OI    SPACE1(R6AWAPTR),B'01000000'                        0180
*        CALL SYSPACE;                 /* PROCESS PARAMETER          */
         BAL   R14,SYSPACE                                         0181
*        SPACE1 = '0'B;                /* TURN OFF INDICATOR         */
         NI    SPACE1(R6AWAPTR),B'10111111'                        0182
*        GEN (L 13,4(13));                                         0183
         L 13,4(13)
*        PARSRTC = PRCODE;                                         0184
         L     R10,PRCODE(,R6AWAPTR)                               0184
         ST    R10,PARSRTC(,R13)                                   0184
*        RETURN;                       /* RETURN TO PARSE            */
@EL00005 DS    0H                                                  0185
@EF00005 DS    0H                                                  0185
@ER00005 LM    R14,R12,12(R13)                                     0185
         BR    R14                                                 0185
*     END SYSPACE1;                                                0186
*                                                                  0186
*                                      /* ENTRY FOR SPACE INCREMENT  */
*   SYSPACE2:  PROC OPTIONS(NOSAVEAREA);                           0187
SYSPACE2 STM   R14,R12,12(R13)                                     0187
*        R15 = R1->VALWORK;            /* GET STORED REGISTERS       */
         L     R15,VALWORK(,R1)                                    0188
*        GENERATE;                     /* SET UP ADDRESSABILITY      */
         LM  2,12,0(15)                   RESTORE ALLOC REGISTERS
         LA  14,SAVEVC                    VC SAVER IN REG 14
         ST  14,8(13)                     VC SAVER IN PARSE SAVER
         ST  13,4(14)                     PARSE SAVER IN VC SAVER
         LR  13,14                        VC SAVER IN REG 13
*        SPACE2 = '1'B;                /* INDICATE SECONDARY SPACE   */
         OI    SPACE2(R6AWAPTR),B'00100000'                        0190
*        CALL SYSPACE;                 /* PROCESS PARAMETER          */
         BAL   R14,SYSPACE                                         0191
*        SPACE2 = '0'B;                /* RESET INDICATOR            */
         NI    SPACE2(R6AWAPTR),B'11011111'                        0192
*        GEN (L 13,4(13));                                         0193
         L 13,4(13)
*        PARSRTC = PRCODE;                                         0194
         L     R10,PRCODE(,R6AWAPTR)                               0194
         ST    R10,PARSRTC(,R13)                                   0194
*        RETURN;                       /* RETURN TO PARSE            */
@EL00006 DS    0H                                                  0195
@EF00006 DS    0H                                                  0195
@ER00006 LM    R14,R12,12(R13)                                     0195
         BR    R14                                                 0195
*     END SYSPACE2;                                                0196
*                                                                  0196
*                                      /* ENTRY FOR DIRECTORY        */
*   SYSDIR: PROC OPTIONS(NOSAVEAREA);                              0197
SYSDIR   STM   R14,R12,12(R13)                                     0197
*        R15 = R1->VALWORK;            /* GET STORED REGISTERS       */
         L     R15,VALWORK(,R1)                                    0198
*        GENERATE;                     /* SET UP ADDRESSABILITY      */
         LM  2,12,0(15)                   RESTORE ALLOC REGISTERS
         LA  14,SAVEVC                    VC SAVER IN REG 14
         ST  14,8(13)                     VC SAVER IN PARSE SAVER
         ST  13,4(14)                     PARSE SAVER IN VC SAVER
         LR  13,14                        VC SAVER IN REG 13
*        VCFLAGS = '00'X;              /* INDICATE DIRECTORY         */
         MVI   VCFLAGS(R6AWAPTR),X'00'                             0200
*        CALL SYSPACE;                 /* PROCESS PARAMETER          */
         BAL   R14,SYSPACE                                         0201
*        GEN (L 13,4(13));                                         0202
         L 13,4(13)
*        PARSRTC = PRCODE;                                         0203
         L     R10,PRCODE(,R6AWAPTR)                               0203
         ST    R10,PARSRTC(,R13)                                   0203
*        RETURN;                       /* RETURN TO PARSE            */
@EL00007 DS    0H                                                  0204
@EF00007 DS    0H                                                  0204
@ER00007 LM    R14,R12,12(R13)                                     0204
         BR    R14                                                 0204
*     END SYSDIR;                                                  0205
*                                                                  0205
*   SYSPACE: PROC;                     /* COMMON SPACE AND DIR RTN   */
SYSPACE  STM   R14,R12,@SA00008                                    0206
*        VCKPTR = R1;                  /* PARM LIST FROM REG 1       */
         LR    R5VCKPTR,R1                                         0207
*        PRCODE = 0;                   /* INIT RETURN CODE           */
         SLR   R4,R4                                               0208
         ST    R4,PRCODE(,R6AWAPTR)                                0208
*        RCODESV = 0;                  /* INIT RET CODE IN WORKAREA  */
         ST    R4,RCODESV(,R6AWAPTR)                               0209
*        PKAREA(1) = 'F0'X;            /* 1ST BYTE IN PACKAREA F0    */
         MVI   PKAREA,X'F0'                                        0210
*        P = ADDR(PKAREA(1));          /* POINT TO 1ST BYTE          */
         LA    R7,PKAREA                                           0211
         ST    R7,P(,R6AWAPTR)                                     0211
*        Q = ADDR(PKAREA(2));          /* POINT TO 2ND BYTE          */
         LA    R10,PKAREA+1                                        0212
         ST    R10,Q(,R6AWAPTR)                                    0212
*        Q->AREA1 = P->AREA2;          /* CLEAR PACKAREA TO ALL F0   */
         MVC   AREA1(15,R10),AREA2(R7)                             0213
*        RFY Y RSTD;                   /* RESTRICT WORK REGISTER     */
*        Y = 8-VCBLKLEN+ADDR(PKAREA);  /* MOVE PARM INTO AREA        */
         L     R4,VALPDE(,R5VCKPTR)                                0215
         LH    R7,VCBLKLEN(,R4)                                    0215
         LA    R8Y,8                                               0215
         SLR   R8Y,R7                                              0215
         LA    R10,PKAREA                                          0215
         ALR   R8Y,R10                                             0215
*        PKAREA1(1:VCBLKLEN)=VCBLKBUF(1:VCBLKLEN);                 0216
         BCTR  R7,0                                                0216
         L     R4,VCBLKPTR(,R4)                                    0216
         EX    R7,@SM01301                                         0216
*        GENERATE REFS(CVBAREA);       /* PACK & CONVERT TO BINARY   */
         PACK  CVBAREA(8),PKAREA(8)
         CVB   R8Y,CVBAREA
*        IF Y > 16777215 THEN          /* IF VALUE EXCEEDS MAX,      */
         C     R8Y,@FW6FOX                                         0218
         BNH   @RF00218                                            0218
*          DO;                         /* THEN -                     */
*            PRCODE = 8;               /* INDICATE PARSE PROMPT      */
         MVC   PRCODE(4,R6AWAPTR),@FW8                             0220
*            MSGID = '103A';           /* SET MESSAGE ID             */
         L     R7,MSGPTR(,R6AWAPTR)                                0221
         MVC   MSGID(4,R7),@CHR103A                                0221
*            IF SPACE1 = '1'B THEN     /* IF SPACE ENTRY,            */
         TM    SPACE1(R6AWAPTR),B'01000000'                        0222
         BNO   @RF00222                                            0222
*              DO;                     /* THEN                       */
*                VAR1 = ADDR(SPC1);    /* PTR TO SPACE VARIABLE      */
         LA    R9,SPC1                                             0224
** STCM  ST    R9,@TF00001                                         0224
** STCM  MVC   VAR1(3,R10),@TF00001+1                              0224
         STCM  R9,7,VAR1(R7)                                       0224
*                L1 = LENGTH(SPC1);    /* AND LENGTH IN PARM LIST    */
         MVI   L1(R7),X'05'                                        0225
*              END;                                                0226
*            ELSE                      /* ELSE                       */
*            IF SPACE2 = '1'B THEN     /* IF SEC SPACE ENTRY,        */
         B     @RC00222                                            0227
@RF00222 TM    SPACE2(R6AWAPTR),B'00100000'                        0227
         BNO   @RF00227                                            0227
*              DO;                     /* THEN                       */
*                VAR1 = ADDR(SPC2);    /* PTR TO INCREMENT VARIABLE  */
         L     R10,MSGPTR(,R6AWAPTR)                               0229
         LA    R4,SPC2                                             0229
** STCM  ST    R4,@TF00001                                         0229
** STCM  MVC   VAR1(3,R10),@TF00001+1                              0229
         STCM  R4,7,VAR1(R10)                                      0229
*                L1 = LENGTH(SPC2);    /* AND LENGTH IN PARM LIST    */
         MVI   L1(R10),X'0F'                                       0230
*              END;                                                0231
*            ELSE                      /* OTHERWISE,                 */
*              DO;                     /* ASSUME DIR ENTRY -         */
         B     @RC00227                                            0232
@RF00227 DS    0H                                                  0233
*                VAR1 = ADDR(DIR1);    /* PTR TO DIR VARIABLE        */
         L     R7,MSGPTR(,R6AWAPTR)                                0233
         LA    R9,DIR1                                             0233
** STCM  ST    R9,@TF00001                                         0233
** STCM  MVC   VAR1(3,R10),@TF00001+1                              0233
         STCM  R9,7,VAR1(R7)                                       0233
*                L1 = LENGTH(DIR1);    /* AND LENGTH IN PARM LIST    */
         MVI   L1(R7),X'03'                                        0234
*              END;                                                0235
*            CALL VCPUTMSG;            /* ISSUE MESSAGE              */
@RC00227 DS    0H                                                  0236
@RC00222 BAL   R14,VCPUTMSG                                        0236
*            IF RCODESV > 0 THEN       /* IF MSG PROCESSOR FAILED,   */
         L     R10,RCODESV(,R6AWAPTR)                              0237
         LTR   R10,R10                                             0237
         BNP   @RF00237                                            0237
*              PRCODE = 12;            /* INDICATE PARSE TERMINATE   */
         MVC   PRCODE(4,R6AWAPTR),@FW12                            0238
*            ELSE                      /* ELSE,                      */
*              VALMSG = ADDR(MSG01);   /* PASS 2ND LEVEL MSG         */
         B     @RC00237                                            0239
@RF00237 LA    R4,MSG01                                            0239
         ST    R4,VALMSG(,R5VCKPTR)                                0239
*          END;                                                    0240
*   END  SYSPACE;                      /* RETURN                     */
@EL00008 DS    0H                                                  0241
@EF00008 DS    0H                                                  0241
@ER00008 LM    R14,R12,@SA00008                                    0241
         BR    R14                                                 0241
*        RFY Y UNRSTD;                                             0242
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      SYSDSN                                                      */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS VALIDITY CHECK ROUTINE CHECKS THE DATASET PARAMETER    */
*/*      FOR A MAXIMUM OF 255 DSNAMES IN THE LIST, AN ASTERISK       */
*/*      ENTERED AS DSNAME WITHIN THE LIST, AND A MEMBER NAME        */
*/*      SPECIFIED WITH NO DSNAME.                                   */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      A COUNTER IS INCREMENTED UPON ENTRY TO THE ROUTINE. IF THE  */
*/*      COUNTER EXCEEDS 255, THE RETURN CODE IS SET TO 12 AND AN    */
*/*      ERROR MESSAGE IS ISSUED. IF THE COUNTER IS GREATER THAN 1   */
*/*      AND AN ASTERISK HAS BEEN ENTERED AS DSNAME, THE RETURN CODE */
*/*      IS SET TO 12, AND AN ERROR MESSAGE IS ISSUED. IF A MEMBER   */
*/*      NAME HAS BEEN SPECIFIED WITH NO DSNAME, THE RETURN CODE IS  */
*/*      SET TO 4, AND A SECOND LEVEL MESSAGE IS PASSED TO PARSE.    */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*      DSNAME COUNTER                                              */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE = 0 - VALID PARAMETER                           */
*/*                    4 - INVALID PARAMETER, PARSE PROMPTS          */
*/*                   12 - INVALID PARAMETER, PARSE TERMINATES       */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*                                      /* ENTRY FOR DSNAME           */
*    SYSDSN: PROC OPTIONS(NOSAVEAREA);                             0243
SYSDSN   STM   R14,R12,12(R13)                                     0243
*        R15 = R1->VALWORK;            /* GET STORED REGISTERS       */
         L     R15,VALWORK(,R1)                                    0244
*        GENERATE;                     /* SET UP ADDRESSABILITY      */
         LM  2,12,0(15)                   RESTORE ALLOC REGISTERS
         LA  14,SAVEVC                    VC SAVER IN REG 14
         ST  14,8(13)                     VC SAVER IN PARSE SAVER
         ST  13,4(14)                     PARSE SAVER IN VC SAVER
         LR  13,14                        VC SAVER IN REG 13
*        VCKPTR = R1;                  /* PARM LIST FROM REG 1       */
         LR    R5VCKPTR,R1                                         0246
*        PRCODE = 0;                   /* INIT PARSE RETURN CODE     */
         SLR   R4,R4                                               0247
         ST    R4,PRCODE(,R6AWAPTR)                                0247
*        RCODESV = 0;                  /* INIT RET CODE IN WORKAREA  */
         ST    R4,RCODESV(,R6AWAPTR)                               0248
*        IF FIRSTPDE = '0'B THEN       /* IS THIS 1ST DSNAME @YM05479*/
         TM    FIRSTPDE(R6AWAPTR),B'00000001'                      0249
         BNZ   @RF00249                                            0249
*          DO;                         /* YES -              @YM05479*/
*            FIRSTPDE = '1'B;          /* INDICATE SO        @YM05479*/
         OI    FIRSTPDE(R6AWAPTR),B'00000001'                      0251
*            FIRSTPTR = VALPDE;        /* SAVE PDE ADDR      @YM05479*/
         L     R10,VALPDE(,R5VCKPTR)                               0252
         ST    R10,FIRSTPTR(,R6AWAPTR)                             0252
*          END;                        /*                    @YM05479*/
*        ELSE                          /* NO -               @YM05479*/
*          IF FIRSTPTR = VALPDE THEN   /* IS THIS PDE ADDR   @YM05479
*                                         IN 1ST LOCATION    @YM05479*/
         B     @RC00249                                            0254
@RF00249 CLC   FIRSTPTR(4,R6AWAPTR),VALPDE(R5VCKPTR)               0254
         BNE   @RF00254                                            0254
*            DO;                       /* YES -              @YM05479*/
*              DSNCTR = 0;             /* RESET DSN COUNTER  @YM05479*/
         SLR   R4,R4                                               0256
         STH   R4,DSNCTR(,R6AWAPTR)                                0256
*              ASTRSK = '0'B;          /* RESET * INDICATOR  @YM05479*/
         NI    ASTRSK(R6AWAPTR),B'11111011'                        0257
*            END;                      /*                    @YM05479*/
*        IF ASTRSK = '1'B THEN         /* IF * FOUND AS PREVIOUS DSN */
@RF00254 DS    0H                                                  0259
@RC00249 TM    ASTRSK(R6AWAPTR),B'00000100'                        0259
         BO    @RT00259                                            0259
*          GO TO INVASTK;              /* PROCESS ERROR              */
*        DSNCTR = DSNCTR + 1;          /* INCREMENT COUNTER          */
         LA    R7,1                                                0261
         AH    R7,DSNCTR(,R6AWAPTR)                                0261
         STH   R7,DSNCTR(,R6AWAPTR)                                0261
*        IF DSNCTR > 255 THEN          /* IF MORE THAN 255 DSNAMES,  */
         C     R7,@FW255                                           0262
         BNH   @RF00262                                            0262
*          DO;                         /* THEN                       */
*            PRCODE  = 12;             /* INDICATE PARSE TERMINATE   */
         MVC   PRCODE(4,R6AWAPTR),@FW12                            0264
*            MSGID = '107A';           /* SET MESSAGE ID             */
         L     R10,MSGPTR(,R6AWAPTR)                               0265
         MVC   MSGID(4,R10),@CHR107A                               0265
*            CALL VCPUTMSG;            /* ISSUE ERROR MESSAGE        */
         BAL   R14,VCPUTMSG                                        0266
*            AWARSV1 = '1'B;           /* INDICATE MSG ISSUED        */
         OI    AWARSV1(R6AWAPTR),B'00000010'                       0267
*          END;                                                    0268
*        ELSE                                                      0269
*          IF VCTERM = '*' THEN        /* IF THIS DSNAME IS *        */
         B     @RC00262                                            0269
@RF00262 L     R4,VALPDE(,R5VCKPTR)                                0269
         L     R7,VCDSNPTR(,R4)                                    0269
         CLI   VCTERM(R7),C'*'                                     0269
         BNE   @RF00269                                            0269
*            DO;                       /* THEN                       */
*              IF DSNCTR = 1 THEN      /* IF 1ST DSNAME,             */
         CLC   DSNCTR(2,R6AWAPTR),@HW1                             0271
         BNE   @RF00271                                            0271
*                ASTRSK = '1'B;        /* SET INDICATOR              */
         OI    ASTRSK(R6AWAPTR),B'00000100'                        0272
*              ELSE                    /* ELSE,                      */
*                DO;                   /* IF * WITHIN DSN LIST -     */
         B     @RC00271                                            0273
@RF00271 DS    0H                                                  0274
* INVASTK:                                                         0274
*                   PRCODE  = 12;      /* INDICATE PARSE TERMINATE   */
INVASTK  MVC   PRCODE(4,R6AWAPTR),@FW12                            0274
*                   MSGID = '111A';    /* SET MESSAGE ID             */
         L     R10,MSGPTR(,R6AWAPTR)                               0275
         MVC   MSGID(4,R10),@CHR111A                               0275
*                   CALL VCPUTMSG;     /* ISSUE ERROR MESSAGE        */
         BAL   R14,VCPUTMSG                                        0276
*                   AWARSV1 = '1'B;    /* INDICATE MSG ISSUED        */
         OI    AWARSV1(R6AWAPTR),B'00000010'                       0277
*                END;                                              0278
*            END;                                                  0279
*          ELSE                                                    0280
*            IF VCDSNPRS = '0'B &      /* IF DSN NOT ENTERED AND     */
*               VCMBRPRS = '1'B THEN   /* MEMBER NAME IS ENTERED,    */
         B     @RC00269                                            0280
@RF00269 L     R4,VALPDE(,R5VCKPTR)                                0280
         TM    VCDSNPRS(R4),B'10000000'                            0280
         BNZ   @RF00280                                            0280
         TM    VCMBRPRS(R4),B'10000000'                            0280
         BNO   @RF00280                                            0280
*              DO;                     /* THEN                       */
*                PRCODE = 4;           /* INDICATE PARSE PROMPT      */
         MVC   PRCODE(4,R6AWAPTR),@FW4                             0282
*                VALMSG = ADDR(MSG02); /* PASS 2ND LEVEL MSG         */
         LA    R7,MSG02                                            0283
         ST    R7,VALMSG(,R5VCKPTR)                                0283
*              END;                                                0284
*        GEN (L 13,4(13));             /* RESTORE PARSE REGISTERS    */
@RF00280 DS    0H                                                  0285
@RC00269 DS    0H                                                  0285
@RC00262 DS    0H                                                  0285
         L 13,4(13)
*        PARSRTC = PRCODE;             /* RETURN CODE IN REG 15      */
         L     R7,PRCODE(,R6AWAPTR)                                0286
         ST    R7,PARSRTC(,R13)                                    0286
*   END  SYSDSN;                                                   0287
@EL00009 DS    0H                                                  0287
@EF00009 DS    0H                                                  0287
@ER00009 LM    R14,R12,12(R13)                                     0287
         BR    R14                                                 0287
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      SYSMAX                                                      */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS VALIDITY CHECK ROUTINE CHECKS THE VOLUME COUNT AND     */
*/*      VOLUME SEQUENCE NUMBER FOR THE MAXIMUM VALUE.               */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE VALUE IN THE PDE IS CONVERTED TO BINARY. IF GREATER     */
*/*      THAN 255, SET PARSE RETURN CODE TO 4.                       */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE = 0 - VALID PARAMETER                           */
*/*                    4 - INVALID PARAMETER, PARSE PROMPTS          */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*                                      /* ENTRY FOR MAXVOL & VSEQ    */
*    SYSMAX: PROC OPTIONS(NOSAVEAREA);                             0288
SYSMAX   STM   R14,R12,12(R13)                                     0288
*        R15 = R1->VALWORK;            /* GET STORED REGISTERS       */
         L     R15,VALWORK(,R1)                                    0289
*        GEN (LM 2,12,0(15));          /* RESTORE ALLOC REGISTERS    */
         LM 2,12,0(15)
*        VCKPTR = R1;                  /* PARM LIST FROM REG 1       */
         LR    R5VCKPTR,R1                                         0291
*        PARSRTC = 0;                  /* INIT RETURN CODE           */
         SLR   R4,R4                                               0292
         ST    R4,PARSRTC(,R13)                                    0292
*        RCODESV = 0;                  /* INIT RET CODE IN WORKAREA  */
         ST    R4,RCODESV(,R6AWAPTR)                               0293
*        PKAREA(1) = 'F0'X;            /* 1ST BYTE IN PACKAREA F0    */
         MVI   PKAREA,X'F0'                                        0294
*        P = ADDR(PKAREA(1));          /* POINT TO 1ST BYTE          */
         LA    R7,PKAREA                                           0295
         ST    R7,P(,R6AWAPTR)                                     0295
*        Q = ADDR(PKAREA(2));          /* POINT TO 2ND BYTE          */
         LA    R10,PKAREA+1                                        0296
         ST    R10,Q(,R6AWAPTR)                                    0296
*        Q->AREA1 = P->AREA2;          /* CLEAR PACKAREA TO ALL F0   */
         MVC   AREA1(15,R10),AREA2(R7)                             0297
*        RFY Y RSTD;                   /* RESTRICT WORK REGISTER     */
*        Y = 8-VCBLKLEN+ADDR(PKAREA);  /* MOVE VALUE TO PACKAREA     */
         L     R4,VALPDE(,R5VCKPTR)                                0299
         LH    R7,VCBLKLEN(,R4)                                    0299
         LA    R8Y,8                                               0299
         SLR   R8Y,R7                                              0299
         LA    R10,PKAREA                                          0299
         ALR   R8Y,R10                                             0299
*        PKAREA1(1:VCBLKLEN)=VCBLKBUF(1:VCBLKLEN);                 0300
         BCTR  R7,0                                                0300
         L     R4,VCBLKPTR(,R4)                                    0300
         EX    R7,@SM01301                                         0300
*        GENERATE REFS(CVBAREA);       /* PACK & CONVERT TO BINARY   */
         PACK  CVBAREA(8),PKAREA(8)
         CVB   R8Y,CVBAREA
*        IF Y> 255 THEN                /* IF VALUE EXCEEDS 255,      */
         C     R8Y,@FW255                                          0302
         BNH   @RF00302                                            0302
*          PARSRTC = 4;                /* INDICATE PARSE PROMPT      */
         MVC   PARSRTC(4,R13),@FW4                                 0303
*   END SYSMAX;                                                    0304
@EL00010 DS    0H                                                  0304
@EF00010 DS    0H                                                  0304
@ER00010 LM    R14,R12,12(R13)                                     0304
         BR    R14                                                 0304
*        RFY Y UNRSTD;                                             0305
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      SYSUCNT                                                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS VALIDITY CHECK ROUTINE CHECKS THE UNITCOUNT PARAMETER  */
*/*      FOR THE MAXIMUM VALUE.                                      */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE VALUE IN THE PDE IS CONVERTED TO BINARY. IF GREATER     */
*/*      THAN 59, SET PARSE RETURN CODE TO 4.                        */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE = 0 - VALID PARAMETER                           */
*/*                    4 - INVALID PARAMETER, PARSE PROMPTS          */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*                                      /* ENTRY FOR UCOUNT           */
*    SYSUCNT:  PROC OPTIONS(NOSAVEAREA);                           0306
SYSUCNT  STM   R14,R12,12(R13)                                     0306
*        R15 = R1->VALWORK;            /* GET STORED REGISTERS       */
         L     R15,VALWORK(,R1)                                    0307
*        GEN (LM 2,12,0(15));          /* RESTORE ALLOC REGISTERS    */
         LM 2,12,0(15)
*        VCKPTR = R1;                  /* PARM LIST FROM REG 1       */
         LR    R5VCKPTR,R1                                         0309
*        PARSRTC = 0;                  /* INIT RETURN CODE           */
         SLR   R4,R4                                               0310
         ST    R4,PARSRTC(,R13)                                    0310
*        RCODESV = 0;                  /* INIT RET CODE IN WORKAREA  */
         ST    R4,RCODESV(,R6AWAPTR)                               0311
*        PKAREA(1) = 'F0'X;            /* 1ST BYTE IN PACKAREA F0    */
         MVI   PKAREA,X'F0'                                        0312
*        P = ADDR(PKAREA(1));          /* POINT TO 1ST BYTE          */
         LA    R7,PKAREA                                           0313
         ST    R7,P(,R6AWAPTR)                                     0313
*        Q = ADDR(PKAREA(2));          /* POINT TO 2ND BYTE          */
         LA    R10,PKAREA+1                                        0314
         ST    R10,Q(,R6AWAPTR)                                    0314
*        Q->AREA1 = P->AREA2;          /* CLEAR PACKAREA TO ALL F0   */
         MVC   AREA1(15,R10),AREA2(R7)                             0315
*        RFY Y RSTD;                   /* RESTRICT WORK REGISTER     */
*        Y = 8-VCBLKLEN+ADDR(PKAREA);  /* MOVE VALUE INTO PACKAREA   */
         L     R4,VALPDE(,R5VCKPTR)                                0317
         LH    R7,VCBLKLEN(,R4)                                    0317
         LA    R8Y,8                                               0317
         SLR   R8Y,R7                                              0317
         LA    R10,PKAREA                                          0317
         ALR   R8Y,R10                                             0317
*        PKAREA1(1:VCBLKLEN)=VCBLKBUF(1:VCBLKLEN);                 0318
         BCTR  R7,0                                                0318
         L     R4,VCBLKPTR(,R4)                                    0318
         EX    R7,@SM01301                                         0318
*        GENERATE REFS(CVBAREA);       /* PACK & CONVERT TO BINARY   */
         PACK  CVBAREA(8),PKAREA(8)
         CVB   R8Y,CVBAREA
*        IF Y > 59 THEN                /* IF PARM EXCEEDS 59,        */
         C     R8Y,@FW59                                           0320
         BNH   @RF00320                                            0320
*          PARSRTC = 4;                /* PARSE PROMPTS              */
         MVC   PARSRTC(4,R13),@FW4                                 0321
*   END  SYSUCNT;                                                  0322
@EL00011 DS    0H                                                  0322
@EF00011 DS    0H                                                  0322
@ER00011 LM    R14,R12,12(R13)                                     0322
         BR    R14                                                 0322
*        RFY Y UNRSTD;                                             0323
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      SYSVLIST                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS VALIDITY CHECK ROUTINE COUNTS THE NUMBER OF VOLUME     */
*/*      SERIALS SPECIFIED ON THE VOLUME PARAMETER.                  */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      A COUNTER IS INCREMENTED.                                   */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*      VLISTCTR - COUNTER FOR VOLUME SERIALS                       */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE = 0 - VALID PARAMETER                           */
*/*                                                                  */
*/* NOTE:  THIS ROUTINE REPRESENTS A DIRECT LINE FUNCTION AND CAN    */
*/*        BE INCORPORATED AS AN INCLUDED CODE SEGMENT WHEN THE      */
*/*        INCLUDE FUNCTION HAS RECEIVED A STANDARD DEFINITION.      */
*/********************************************************************/
*                                      /* ENTRY FOR VOLUME           */
*    SYSVLIST: PROC OPTIONS(NOSAVEAREA);                           0324
SYSVLIST STM   R14,R12,12(R13)                                     0324
*        R15 = R1->VALWORK;            /* GET STORED REGISTERS       */
         L     R15,VALWORK(,R1)                                    0325
*        GEN (LM 2,12,0(15));          /* RESTORE ALLOC REGISTERS    */
         LM 2,12,0(15)
*        VCKPTR = R1;                  /* PARM LIST FROM REG 1       */
         LR    R5VCKPTR,R1                                         0327
*        PARSRTC = 0;                  /* INITIALIZE RETURN CODE     */
         SLR   R7,R7                                               0328
         ST    R7,PARSRTC(,R13)                                    0328
*        RCODESV = 0;                  /* INIT RET CODE IN WORKAREA  */
         ST    R7,RCODESV(,R6AWAPTR)                               0329
*        VLISTCTR = VLISTCTR + 1;      /* INCREMENT COUNTER          */
         LA    R10,1                                               0330
         AH    R10,VLISTCTR(,R6AWAPTR)                             0330
         STH   R10,VLISTCTR(,R6AWAPTR)                             0330
*   END SYSVLIST;                                                  0331
@EL00012 DS    0H                                                  0331
@EF00012 DS    0H                                                  0331
@ER00012 LM    R14,R12,12(R13)                                     0331
         BR    R14                                                 0331
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      SYSTATS                                                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS VALIDITY CHECK ROUTINE CHECKS THE STATUS ENTERED ON    */
*/*      THE PROMPT FOR A VALID KEYWORD.                             */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      IF MORE THAN ONE SUBSCRIPT IS ENTERED, PARSE RETURN CODE    */
*/*      IS SET TO 4. ELSE, SET UP A NEW COMMAND BUFFER WITH THE     */
*/*      PARAMETERS ENTERED ON THE PROMPT. INVOKE PARSE, PASSING     */
*/*      A LIST OF KEYWORDS IN THE PCL. IF PARSE FINDS A MATCH,      */
*/*      MOVE THE PARAMETER INTO THE ORIGINAL PDE.                   */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*      THIRD LEVEL PCL                                             */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE = 0 - VALID PARAMETER                           */
*/*                    4 - INVALID PARAMETER, PARSE PROMPTS          */
*/********************************************************************/
*                                      /* ENTRY FOR STATUS           */
*    SYSTATS: PROC OPTIONS(NOSAVEAREA);                            0332
SYSTATS  STM   R14,R12,12(R13)                                     0332
*        R15 = R1->VALWORK;            /* GET STORED REGISTERS       */
         L     R15,VALWORK(,R1)                                    0333
*        GENERATE;                     /* SET UP ADDRESSABILITY      */
         LM  2,12,0(15)                   RESTORE ALLOC REGISTERS
         LA  14,SAVEVC                    VC SAVER IN REG 14
         ST  14,8(13)                     VC SAVER IN PARSE SAVER
         ST  13,4(14)                     PARSE SAVER IN VC SAVER
         LR  13,14                        VC SAVER IN REG 14
*        VCKPTR = R1;                  /* PARM LIST FROM REG 1       */
         LR    R5VCKPTR,R1                                         0335
*        PRCODE = 0;                   /* INIT PARSE RETURN CODE     */
         SLR   R4,R4                                               0336
         ST    R4,PRCODE(,R6AWAPTR)                                0336
*        IF SUBNMBR > 1 THEN           /* IF MORE THAN 1 SUBSCRIPT,  */
         L     R7,VALPDE(,R5VCKPTR)                                0337
         CLI   SUBNMBR(R7),1                                       0337
         BNH   @RF00337                                            0337
*          PRCODE = 4;                 /* INDICATE PARSE PROMPT      */
         MVC   PRCODE(4,R6AWAPTR),@FW4                             0338
*        ELSE                                                      0339
*          DO;                         /* ELSE,                      */
         B     @RC00337                                            0339
@RF00337 DS    0H                                                  0340
*            SAVPPL = PPLPTR;                                      0340
         L     R2SAVPPL,PPLPTR(,R6AWAPTR)                          0340
*            CALL PARSLINK;            /* SET UP FOR CALL TO PARSE   */
         BAL   R14,PARSLINK                                        0341
*            R1 = PPLPTR;              /* PPL IN REG 1               */
         L     R1,PPLPTR(,R6AWAPTR)                                0342
*              DO; /*CALLTSSR EP(IKJPARS)*/                        0343
*                RESPECIFY GPR01P RSTD;                            0344
*                IF CVTPARS = 0                                    0345
*                  THEN                                            0345
         L     R3,CVTPTR                                           0345
         L     R7,CVTPARS-CVT(,R3)                                 0345
         LTR   R7,R7                                               0345
         BNZ   @RF00345                                            0345
*                    GEN(LINK EP=IKJPARS);                         0346
         LINK EP=IKJPARS
*                  ELSE                                            0347
*                    CALL CVTPARS;                                 0347
         B     @RC00345                                            0347
@RF00345 L     R10,CVTPTR                                          0347
         L     R15,CVTPARS-CVT(,R10)                               0347
         BALR  R14,R15                                             0347
*                RESPECIFY GPR01P UNRSTD;                          0348
@RC00345 DS    0H                                                  0349
*              END;   /* INVOKE PARSE       @Y30NQKK*/             0349
*            RCODESV = R15;            /* SAVE RETURN CODE           */
         ST    R15,RCODESV(,R6AWAPTR)                              0350
*            IF RCODESV > 0 THEN       /* IF PARSE FAILED,           */
         L     R3,RCODESV(,R6AWAPTR)                               0351
         LTR   R3,R3                                               0351
         BNP   @RF00351                                            0351
*                PRCODE = 12;          /* INDICATE PARSE TERMINATE   */
         MVC   PRCODE(4,R6AWAPTR),@FW12                            0352
*            ELSE                      /* OTHERWISE                  */
*              DO;                                                 0353
         B     @RC00351                                            0353
@RF00351 DS    0H                                                  0354
*                IF STAT2PDE = 0 THEN  /* IF NO STATUS ENTERED,      */
         L     R7,PDLADDR3(,R6AWAPTR)                              0354
         LH    R10,STAT2PDE(,R7)                                   0354
         LTR   R10,R10                                             0354
         BNZ   @RF00354                                            0354
*                  PRCODE = 4;         /* INDICATE PARSE PROMPT      */
         MVC   PRCODE(4,R6AWAPTR),@FW4                             0355
*                ELSE                  /* IF STATUS WAS ENTERED,     */
*                   DO;                /* SAVE STATUS IN PDE         */
         B     @RC00354                                            0356
@RF00354 DS    0H                                                  0357
*                     STATSPDE = STAT2PDE;                         0357
         L     R3,PTRPDL(,R6AWAPTR)                                0357
         L     R7,PDLADDR3(,R6AWAPTR)                              0357
         LH    R10,STAT2PDE(,R7)                                   0357
         STH   R10,STATSPDE(,R3)                                   0357
*                     IF STATSPDE=5 &  /* IF SYSOUT AND              */
*                                      /* CLASS SPECIFIED THEN       */
*                       PCLASPRS = '1'B THEN                       0358
         C     R10,@FW5                                            0358
         BNE   @RF00358                                            0358
         TM    PCLASPRS(R7),B'10000000'                            0358
         BNO   @RF00358                                            0358
*                       DO;            /* OVERLAY PDE -              */
*                         CLASPTR = ADDR(NCLASBUF);                0360
         LA    R10,NCLASBUF(,R6AWAPTR)                             0360
         ST    R10,CLASPTR(,R3)                                    0360
*                                      /* CLASS VALUE IN PDE         */
*                         NCLASBUF(1) = CLASBUF1(1);               0361
         L     R10,PCLASPTR(,R7)                                   0361
         MVC   NCLASBUF(1,R6AWAPTR),CLASBUF1(R10)                  0361
*                                      /* LENGTH IN PDE              */
*                         CLASLEN = PCLASLEN;                      0362
         LH    R10,PCLASLEN(,R7)                                   0362
         STH   R10,CLASLEN(,R3)                                    0362
*                                      /* FLAGS IN PDE               */
*                         CLASFLG = PCLASFLG;                      0363
         MVC   CLASFLG(1,R3),PCLASFLG(R7)                          0363
*                       END;                                       0364
*                  END;                                            0365
@RF00358 DS    0H                                                  0366
*                RFY R5 RSTD;          /* RESTRICT REG 5             */
@RC00354 DS    0H                                                  0367
*                R5 = ADDR(PDLADDR3);  /* PDLADDR IN REG 5           */
         LA    R5,PDLADDR3(,R6AWAPTR)                              0367
*                GEN (IKJRLSA (5));    /* RELEASE PDL                */
         IKJRLSA (5)
*                RFY R5 UNRSTD;        /* UNRESTRICT REG 5           */
*              END;                                                0370
*            PPLPTR = SAVPPL;          /* RESTORE PPL PTR            */
@RC00351 ST    R2SAVPPL,PPLPTR(,R6AWAPTR)                          0371
*          END;                                                    0372
*        GEN (L 13,4(13));             /* RESTORE PARSE REGISTERS    */
@RC00337 DS    0H                                                  0373
         L 13,4(13)
*        PARSRTC = PRCODE;             /* RETURN CODE IN REG 15      */
         L     R10,PRCODE(,R6AWAPTR)                               0374
         ST    R10,PARSRTC(,R13)                                   0374
*        RETURN;                                                   0375
@EL00013 DS    0H                                                  0375
@EF00013 DS    0H                                                  0375
@ER00013 LM    R14,R12,12(R13)                                     0375
         BR    R14                                                 0375
*   END SYSTATS;                                                   0376
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      PARSLINK                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE SETS UP THE COMMAND BUFFER AND PARSE PARAMETER */
*/*      LIST.                                                       */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE PARAMETER ENTERED ON THE PROMPT IS PLACED IN A          */
*/*      BUFFER. THE PARSE PARAMETER LIST IS SET UP.                 */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      PPL                                                         */
*/*                                                                  */
*/********************************************************************/
*        RFY I RSTD;                                               0377
*    PARSLINK: PROC OPTIONS(NOSAVEAREA);                           0378
PARSLINK STM   R14,R12,12(R13)                                     0378
*        CMDTWOBF(1) = ' ';                 /* BLANK IN 1ST POSITION */
         MVI   CMDTWOBF(R6AWAPTR),C' '                             0379
*        I = STATLEN;                       /* SET BUFFER PTR        */
         L     R4,VALPDE(,R5VCKPTR)                                0380
         SLR   R7I,R7I                                             0380
         IC    R7I,STATLEN(,R4)                                    0380
*        CMDTWOBF(2:I+1) = STATBUF(1:I);    /* MOVE IN STATUS        */
         LR    R10,R7I                                             0381
         BCTR  R10,0                                               0381
         L     R1,STATPTR(,R4)                                     0381
         EX    R10,@SM01311                                        0381
*        I = I + 1;                         /* INCREMENT BUFFER PTR  */
         LA    R10,1                                               0382
         ALR   R7I,R10                                             0382
*        IF SUBPRES = '1'B THEN             /* IF SUBSCRIPT ENTERED, */
         TM    SUBPRES(R4),B'10000000'                             0383
         BNO   @RF00383                                            0383
*          DO;                              /* THEN                  */
*            I = I + 1;                     /* INCREMENT BUFFER PTR  */
         ALR   R7I,R10                                             0385
*            CMDTWOBF(I) = '(';             /* MOVE IN LEFT PAREN    */
         LR    R1,R6AWAPTR                                         0386
         ALR   R1,R7I                                              0386
         MVI   CMDTWOBF-1(R1),C'('                                 0386
*            I = I+1;                       /* INCREMENT BUFFER PTR  */
         ALR   R7I,R10                                             0387
*            IF CNSTSUB = '1'B THEN         /* IF SUBSCRIPT A CNST,  */
         TM    CNSTSUB(R4),B'01000000'                             0388
         BNO   @RF00388                                            0388
*              DO;                          /* MOVE IN CONSTANT      */
*                CMDTWOBF(I:I+CNSTLEN-1) = CNSTBUF(1:CNSTLEN);     0390
         LR    R10,R6AWAPTR                                        0390
         ALR   R10,R7I                                             0390
         SLR   R14,R14                                             0390
         IC    R14,CNSTLEN(,R4)                                    0390
         LR    R15,R14                                             0390
         BCTR  R15,0                                               0390
         L     R4,CNSTPTR(,R4)                                     0390
         EX    R15,@SM01313                                        0390
*                I = I + CNSTLEN;           /* INCREMENT BUFFER PTR  */
         ALR   R7I,R14                                             0391
*              END;                                                0392
*            ELSE                           /* ELSE,                 */
*              DO;                          /* MOVE IN VARIABLE      */
         B     @RC00388                                            0393
@RF00388 DS    0H                                                  0394
*                CMDTWOBF(I:I+VARLEN-1) = VARBUF(1:VARLEN);        0394
         LR    R10,R6AWAPTR                                        0394
         ALR   R10,R7I                                             0394
         L     R4,VALPDE(,R5VCKPTR)                                0394
         SLR   R8,R8                                               0394
         IC    R8,VARLEN(,R4)                                      0394
         LR    R9,R8                                               0394
         BCTR  R9,0                                                0394
         L     R4,VARPTR(,R4)                                      0394
         EX    R9,@SM01315                                         0394
*                I = I + VARLEN;            /* INCREMENT BUFFER PTR  */
         ALR   R7I,R8                                              0395
*              END;                                                0396
*            CMDTWOBF(I) = ')';             /* MOVE IN RIGHT PAREN   */
@RC00388 LR    R10,R6AWAPTR                                        0397
         ALR   R10,R7I                                             0397
         MVI   CMDTWOBF-1(R10),C')'                                0397
*          END;                                                    0398
*        CMDTWOLN = I + 4;                  /* SET BUFFER LENGTH     */
@RF00383 LA    R10,4                                               0399
         ALR   R10,R7I                                             0399
         STH   R10,CMDTWOLN(,R6AWAPTR)                             0399
*        CMDTWOOF = 0;                      /* BUFFER OFFSET ZERO    */
         SLR   R7,R7                                               0400
         STH   R7,CMDTWOOF(,R6AWAPTR)                              0400
*        PPLPTR = ADDR(PPLTWO);             /* PTR TO PPL            */
         LA    R10,PPLTWO(,R6AWAPTR)                               0401
         ST    R10,PPLPTR(,R6AWAPTR)                               0401
*        PPLUPT = CPPLUPT;                  /* UPT                   */
         L     R14,CPPLPTR(,R6AWAPTR)                              0402
         L     R15,CPPLUPT(,R14)                                   0402
         ST    R15,PPLUPT(,R10)                                    0402
*        PPLECT = CPPLECT;                  /* ECT                   */
         L     R0,CPPLECT(,R14)                                    0403
         ST    R0,PPLECT(,R10)                                     0403
*        PPLECB = ADDR(COMMECB);            /* ECB                   */
         LA    R1,COMMECB(,R6AWAPTR)                               0404
         ST    R1,PPLECB(,R10)                                     0404
*        COMMECB = 0;                       /* ECB SET TO 0          */
         ST    R7,COMMECB(,R6AWAPTR)                               0405
*        PPLPCL = ADCNPCLX;                 /* PCL ADDRESS           */
         L     R3,ADCNPCLX                                         0406
         ST    R3,PPLPCL(,R10)                                     0406
*        PPLANS = ADDR(PDLADDR3);           /* PDL ADDRESS           */
         LA    R4,PDLADDR3(,R6AWAPTR)                              0407
         ST    R4,PPLANS(,R10)                                     0407
*        PPLCBUF = ADDR(CMDTWO);            /* COMMAND BUFFER        */
         LA    R5,CMDTWO(,R6AWAPTR)                                0408
         ST    R5,PPLCBUF(,R10)                                    0408
*        PPLUWA = 0;                        /* USER WORD             */
         ST    R7,PPLUWA(,R10)                                     0409
*   END PARSLINK;                                                  0410
@EL00014 DS    0H                                                  0410
@EF00014 DS    0H                                                  0410
@ER00014 LM    R14,R12,12(R13)                                     0410
         BR    R14                                                 0410
*        RFY I UNRSTD;                                             0411
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      SYSPBLK                                                     */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS VALIDITY CHECK ROUTINE CHECKS THE VALUE ENTERED ON     */
*/*      THE PROMPT FOR A VALID KEYWORD OF BLOCK, AVBLOCK, TRACKS,   */
*/*      OR CYLINDERS.                                               */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      IF MORE THAN ONE SUBSCRIPT IS ENTERED, PARSE RETURN CODE    */
*/*      IS SET TO 4. ELSE, SET UP A NEW COMMAND BUFFER WITH THE     */
*/*      PARAMETERS ENTERED ON THE PROMPT. INVOKE PARSE, PASSING     */
*/*      A LIST OF KEYWORDS IN THE PCL. IF PARSE FINDS A MATCH,      */
*/*      MOVE THE PARAMETER INTO THE ORIGINAL PDE.                   */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*      THIRD LEVEL PCL                                             */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE = 0 - VALID PARAMETER                           */
*/*                    4 - INVALID PARAMETER, PARSE PROMPTS          */
*/********************************************************************/
*                                      /* ENTRY FOR BLOCK PROMPT     */
*    SYSPBLK: PROC OPTIONS(NOSAVEAREA);                            0412
SYSPBLK  STM   R14,R12,12(R13)                                     0412
*        R15 = R1->VALWORK;            /* GET STORED REGISTERS       */
         L     R15,VALWORK(,R1)                                    0413
*        GENERATE;                     /* SET UP ADDRESSABILITY      */
         LM  2,12,0(15)                   RESTORE ALLOC REGISTERS
         LA  14,SAVEVC                    VC SAVER IN REG 14
         ST  14,8(13)                     VC SAVER IN PARSE SAVER
         ST  13,4(14)                     PARSE SAVER IN VC SAVER
         LR  13,14                        VC SAVER IN REG 13
*        VCKPTR = R1;                  /* PARM LIST FROM REG 1       */
         LR    R5VCKPTR,R1                                         0415
*        PRCODE = 0;                   /* INIT RETURN CODE           */
         SLR   R4,R4                                               0416
         ST    R4,PRCODE(,R6AWAPTR)                                0416
*        IF SUBNUM2 > 1 THEN           /* IF MORE THAN ONE SUBSCRIPT,*/
         L     R7,VALPDE(,R5VCKPTR)                                0417
         CLI   SUBNUM2(R7),1                                       0417
         BNH   @RF00417                                            0417
*          PRCODE = 4;                 /* THEN PARSE PROMPTS         */
         MVC   PRCODE(4,R6AWAPTR),@FW4                             0418
*        ELSE                                                      0419
*          DO;                         /* ELSE                       */
         B     @RC00417                                            0419
@RF00417 DS    0H                                                  0420
*            SAVPPL = PPLPTR;          /* SAVE PPL PTR               */
         L     R2SAVPPL,PPLPTR(,R6AWAPTR)                          0420
*            CALL PARSLNK2;            /* SET UP FOR LINK TO PARSE   */
         BAL   R14,PARSLNK2                                        0421
*            R1 = PPLPTR;              /* PARM LIST IN REGISTER 1    */
         L     R1,PPLPTR(,R6AWAPTR)                                0422
*              DO; /*CALLTSSR EP(IKJPARS)*/                        0423
*                RESPECIFY GPR01P RSTD;                            0424
*                IF CVTPARS = 0                                    0425
*                  THEN                                            0425
         L     R3,CVTPTR                                           0425
         L     R4,CVTPARS-CVT(,R3)                                 0425
         LTR   R4,R4                                               0425
         BNZ   @RF00425                                            0425
*                    GEN(LINK EP=IKJPARS);                         0426
         LINK EP=IKJPARS
*                  ELSE                                            0427
*                    CALL CVTPARS;                                 0427
         B     @RC00425                                            0427
@RF00425 L     R7,CVTPTR                                           0427
         L     R15,CVTPARS-CVT(,R7)                                0427
         BALR  R14,R15                                             0427
*                RESPECIFY GPR01P UNRSTD;                          0428
@RC00425 DS    0H                                                  0429
*              END;   /* INVOKE PARSE       @Y30NQKK*/             0429
*            RCODESV = R15;            /* SAVER RETURN CODE          */
         ST    R15,RCODESV(,R6AWAPTR)                              0430
*            IF RCODESV > 0 THEN       /* IF PARSE FAILED            */
         L     R3,RCODESV(,R6AWAPTR)                               0431
         LTR   R3,R3                                               0431
         BNP   @RF00431                                            0431
*                PRCODE = 12;          /* PARSE TERMINATE            */
         MVC   PRCODE(4,R6AWAPTR),@FW12                            0432
*            ELSE                                                  0433
*              DO;                     /* OTHERWISE,                 */
         B     @RC00431                                            0433
@RF00431 DS    0H                                                  0434
*                IF BLOKNBR = 0 THEN   /* IF PARM NOT ENTERED,       */
         L     R4,PDLADDR3(,R6AWAPTR)                              0434
         LH    R7,BLOKNBR(,R4)                                     0434
         LTR   R7,R7                                               0434
         BNZ   @RF00434                                            0434
*                  PRCODE = 4;         /* INDICATE PARSE PROMPT      */
         MVC   PRCODE(4,R6AWAPTR),@FW4                             0435
*                ELSE                                              0436
*                  DO;                 /* IF PARM IS ENTERED,        */
         B     @RC00434                                            0436
@RF00434 DS    0H                                                  0437
*                                      /* SAVE PARM IN PDE           */
*                    BLOKPDE = BLOKNBR;                            0437
         L     R10,PTRPDL(,R6AWAPTR)                               0437
         L     R3,PDLADDR3(,R6AWAPTR)                              0437
         LH    R4,BLOKNBR(,R3)                                     0437
         STH   R4,BLOKPDE(,R10)                                    0437
*                                      /* IF BLOCK OR AVBLOCK,       */
*                    IF BLOKPDE < 3 THEN                           0438
         C     R4,@FW3                                             0438
         BNL   @RF00438                                            0438
*                      CALL MAXCHK;    /* CHECK FOR MAXIMUM          */
         BAL   R14,MAXCHK                                          0439
*                  END;                                            0440
@RF00438 DS    0H                                                  0441
*                RFY R5 RSTD;          /* RESTRICT REG 5             */
@RC00434 DS    0H                                                  0442
*                R5 = ADDR(PDLADDR3);  /* PDL ADDRESS IN REG 5       */
         LA    R5,PDLADDR3(,R6AWAPTR)                              0442
*                GEN (IKJRLSA (5));    /* RELEASE PDL                */
         IKJRLSA (5)
*                RFY R5 UNRSTD;        /* UNRESTRICT REG 5           */
*              END;                                                0445
*            PPLPTR = SAVPPL;          /* RESTORE PPL PTR            */
@RC00431 ST    R2SAVPPL,PPLPTR(,R6AWAPTR)                          0446
*           END;                                                   0447
*        GEN (L 13,4(13));             /* RESTORE PARSE REGISTERS    */
@RC00417 DS    0H                                                  0448
         L 13,4(13)
*        PARSRTC = PRCODE;             /* RETURN CODE IN REG 15      */
         L     R10,PRCODE(,R6AWAPTR)                               0449
         ST    R10,PARSRTC(,R13)                                   0449
*    END SYSPBLK;                                                  0450
@EL00015 DS    0H                                                  0450
@EF00015 DS    0H                                                  0450
@ER00015 LM    R14,R12,12(R13)                                     0450
         BR    R14                                                 0450
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      MAXCHK                                                      */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE CONVERTS THE BLOCK OR AVBLOCK VALUE TO BINARY  */
*/*      AND CHECK FOR A MAXIMUM OF 65535.                           */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE VALUE IS CONVERTED TO BINARY.  IF THE VALUE EXCEEDS THE */
*/*      MAXIMUM, AN ERROR MESSAGE IS ISSUED AND PARSE RETURN CODE   */
*/*      IS SET TO 8. ELSE, THE ORIGINAL PDE IS OVERLAID WITH THE    */
*/*      NEW VALUE.                                                  */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      RETURN CODE = 0 - VALID PARAMETER                           */
*/*                    8 - INVALID PARAMETER, PARSE PROMPTS          */
*/********************************************************************/
*        RFY Y RSTD;                                               0451
*    MAXCHK: PROC;                                                 0452
MAXCHK   STM   R14,R12,@SA00016                                    0452
*        PKAREA(1) = 'F0'X;                 /* 1ST BYTE IN PACKAREA
*                                              SET TO F0             */
         MVI   PKAREA,X'F0'                                        0453
*        P = ADDR(PKAREA(1));               /* POINT TO 1ST BYTE     */
         LA    R4,PKAREA                                           0454
         ST    R4,P(,R6AWAPTR)                                     0454
*        Q = ADDR(PKAREA(2));               /* POINT TO 2ND BYTE     */
         LA    R7,PKAREA+1                                         0455
         ST    R7,Q(,R6AWAPTR)                                     0455
*        Q->AREA1 = P->AREA2;               /* CLEAR PACK AREA TO F0 */
         MVC   AREA1(15,R7),AREA2(R4)                              0456
*        IF BLOKNBR = 1 THEN                /* IF BLOCK ENTERED,     */
         L     R10,PDLADDR3(,R6AWAPTR)                             0457
         CLC   BLOKNBR(2,R10),@HW1                                 0457
         BNE   @RF00457                                            0457
*          DO;                              /* THEN                  */
*            Y = 8-PBLKLEN+ADDR(PKAREA);    /* PUT VALUE IN PACK AREA*/
         LH    R4,PBLKLEN(,R10)                                    0459
         LA    R8Y,8                                               0459
         SLR   R8Y,R4                                              0459
         LA    R7,PKAREA                                           0459
         ALR   R8Y,R7                                              0459
*            PKAREA1(1:PBLKLEN)=PBLKBUF(1:PBLKLEN);                0460
         BCTR  R4,0                                                0460
         L     R9,PBLKPTR(,R10)                                    0460
         EX    R4,@SM01317                                         0460
*            VAR1 = ADDR(BLKVAR);           /* BLOCK VARIABLE PTR    */
         L     R10,MSGPTR(,R6AWAPTR)                               0461
         LA    R4,BLKVAR                                           0461
** STCM  ST    R4,@TF00001                                         0461
** STCM  MVC   VAR1(3,R10),@TF00001+1                              0461
         STCM  R4,7,VAR1(R10)                                      0461
*            L1 = LENGTH(BLKVAR);           /* AND VARIABLE LENGTH   */
         MVI   L1(R10),X'0A'                                       0462
*          END;                                                    0463
*        ELSE                               /* ELSE,                 */
*          DO;                              /* ASSUME AVBLOCK        */
         B     @RC00457                                            0464
@RF00457 DS    0H                                                  0465
*            Y = 8-PABLKLEN+ADDR(PKAREA);   /* PUT VALUE IN PACK AREA*/
         L     R7,PDLADDR3(,R6AWAPTR)                              0465
         LH    R10,PABLKLEN(,R7)                                   0465
         LA    R8Y,8                                               0465
         SLR   R8Y,R10                                             0465
         LA    R4,PKAREA                                           0465
         ALR   R8Y,R4                                              0465
*            PKAREA1(1:PABLKLEN)=PABLKBUF(1:PABLKLEN);             0466
         BCTR  R10,0                                               0466
         L     R7,PABLKPTR(,R7)                                    0466
         EX    R10,@SM01319                                        0466
*            VAR1 = ADDR(AVBLOCK);          /* AVBLOCK VARIABLE PTR  */
         L     R10,MSGPTR(,R6AWAPTR)                               0467
         LA    R4,AVBLOCK                                          0467
** STCM  ST    R4,@TF00001                                         0467
** STCM  MVC   VAR1(3,R10),@TF00001+1                              0467
         STCM  R4,7,VAR1(R10)                                      0467
*            L1 = LENGTH(AVBLOCK);          /* AND VARIABLE LENGTH   */
         MVI   L1(R10),X'07'                                       0468
*          END;                                                    0469
*                                                                  0469
*        GENERATE REFS(CVBAREA);            /* CONVERT TO BINARY     */
@RC00457 DS    0H                                                  0470
         PACK  CVBAREA(8),PKAREA(8)            PACK VALUE
         CVB   R8Y,CVBAREA                     CONVERT TO BINARY
*        IF Y > 65535 THEN                  /* IF VALUE EXCEEDS MAX, */
         C     R8Y,@FW4FOX                                         0471
         BNH   @RF00471                                            0471
*          DO;                                                     0472
*            PRCODE = 8;                    /* INDICATE PARSE PROMPT */
         MVC   PRCODE(4,R6AWAPTR),@FW8                             0473
*            MSGID = '103A';                /* SET MESSAGE ID        */
         L     R7,MSGPTR(,R6AWAPTR)                                0474
         MVC   MSGID(4,R7),@CHR103A                                0474
*            CALL VCPUTMSG;                 /* ISSUE MESSAGE         */
         BAL   R14,VCPUTMSG                                        0475
*            IF RCODESV > 0 THEN            /* IF ERROR IN MSG,      */
         L     R10,RCODESV(,R6AWAPTR)                              0476
         LTR   R10,R10                                             0476
         BNP   @RF00476                                            0476
*              PRCODE = 12;                 /* INDICATE PARSE END    */
         MVC   PRCODE(4,R6AWAPTR),@FW12                            0477
*            ELSE                                                  0478
*              VALMSG = ADDR(MSG01);        /* PASS 2ND LEVEL MSG    */
         B     @RC00476                                            0478
@RF00476 LA    R4,MSG01                                            0478
         ST    R4,VALMSG(,R5VCKPTR)                                0478
*          END;                                                    0479
*        ELSE                               /* IF VALUE DOES NOT     */
*          DO;                              /* EXCEED MAX, THEN      */
         B     @RC00471                                            0480
@RF00471 DS    0H                                                  0481
*            IF BLOKNBR = 1 THEN            /* IF BLOCK VALUE,       */
         L     R7,PDLADDR3(,R6AWAPTR)                              0481
         CLC   BLOKNBR(2,R7),@HW1                                  0481
         BNE   @RF00481                                            0481
*              DO;                          /* OVERLAY PDE           */
*                BLKPTR = ADDR(NBLKBUF1);   /* POINTER TO VALUE      */
         L     R10,PTRPDL(,R6AWAPTR)                               0483
         LA    R14,NBLKBUF1(,R6AWAPTR)                             0483
         ST    R14,BLKPTR(,R10)                                    0483
*                                           /* BLOCK VALUE           */
*                NBLKBUF1(1:PBLKLEN)=PBLKBUF(1:PBLKLEN);           0484
         LH    R15,PBLKLEN(,R7)                                    0484
         LR    R14,R15                                             0484
         BCTR  R14,0                                               0484
         L     R1,PBLKPTR(,R7)                                     0484
         EX    R14,@SM01321                                        0484
*                BLKLEN = PBLKLEN;          /* LENGTH                */
         STH   R15,BLKLEN(,R10)                                    0485
*                BLKFLAGS = PBLKFLG;        /* FLAGS                 */
         MVC   BLKFLAGS(1,R10),PBLKFLG(R7)                         0486
*              END;                                                0487
*            ELSE                           /* ELSE,                 */
*              DO;                          /* OVERLAY AVBLOCK PDE   */
         B     @RC00481                                            0488
@RF00481 DS    0H                                                  0489
*                ABLKPTR = ADDR(NBLKBUF1);  /* POINTER TO VALUE      */
         L     R7,PTRPDL(,R6AWAPTR)                                0489
         LA    R10,NBLKBUF1(,R6AWAPTR)                             0489
         ST    R10,ABLKPTR(,R7)                                    0489
*                                           /* AVBLOCK VALUE         */
*                NBLKBUF1(1:PABLKLEN)=PABLKBUF(1:PABLKLEN);        0490
         L     R10,PDLADDR3(,R6AWAPTR)                             0490
         LH    R14,PABLKLEN(,R10)                                  0490
         LR    R15,R14                                             0490
         BCTR  R15,0                                               0490
         L     R1,PABLKPTR(,R10)                                   0490
         EX    R15,@SM01323                                        0490
*                ABLKLEN = PABLKLEN;        /* LENGTH                */
         STH   R14,ABLKLEN(,R7)                                    0491
*                ABLKFLG = PABLKFLG;        /* FLAGS                 */
         MVC   ABLKFLG(1,R7),PABLKFLG(R10)                         0492
*              END;                                                0493
*          END;                                                    0494
*    END MAXCHK;                                                   0495
@EL00016 DS    0H                                                  0495
@EF00016 DS    0H                                                  0495
@ER00016 LM    R14,R12,@SA00016                                    0495
         BR    R14                                                 0495
*        RFY Y UNRSTD;                                             0496
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      PARSLNK2                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE SETS UP THE NEW COMMAND BUFFER AND THE PARSE   */
*/*      PARAMETER LIST (PPL).                                       */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE PARAMETER ENTERED ON THE PROMPT IS PUT INTO THE BUFFER. */
*/*      THE PPL IS SET UP,                                          */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      PTR TO PDE                                                  */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      PPL                                                         */
*/********************************************************************/
*        RFY I RSTD;                                               0497
*    PARSLNK2: PROC OPTIONS(NOSAVEAREA);                           0498
PARSLNK2 STM   R14,R12,12(R13)                                     0498
*         CMDTWOBF(1) = ' ';                /* BLANK IN 1ST POSITION */
         MVI   CMDTWOBF(R6AWAPTR),C' '                             0499
*         I = BATCLEN;                      /* SET BUFFER PTR        */
         L     R4,VALPDE(,R5VCKPTR)                                0500
         SLR   R7I,R7I                                             0500
         IC    R7I,BATCLEN(,R4)                                    0500
*         CMDTWOBF(2:I+1) = BATCBUF(1:I);   /* MOVE IN PARAMETER     */
         LR    R10,R7I                                             0501
         BCTR  R10,0                                               0501
         L     R1,BATCPTR(,R4)                                     0501
         EX    R10,@SM01325                                        0501
*         I = I+1;                          /* INCREMENT BUFFER PTR  */
         LA    R10,1                                               0502
         ALR   R7I,R10                                             0502
*         IF SUB2PRES = '1'B THEN           /* IF SUBSCRIPT ENTERED, */
         TM    SUB2PRES(R4),B'10000000'                            0503
         BNO   @RF00503                                            0503
*           DO;                             /* THEN                  */
*             I = I+1;                      /* INCREMENT BUFFER PTR  */
         ALR   R7I,R10                                             0505
*             CMDTWOBF(I) = '(';            /* LEFT PAREN            */
         LR    R1,R6AWAPTR                                         0506
         ALR   R1,R7I                                              0506
         MVI   CMDTWOBF-1(R1),C'('                                 0506
*             I = I+1;                      /* INCREMENT BUFFER PTR  */
         ALR   R7I,R10                                             0507
*                                           /* SUBFIELD VALUE        */
*             CMDTWOBF(I:I+CNST2LEN-1) = CNST2BUF(1:CNST2LEN);     0508
         LR    R10,R6AWAPTR                                        0508
         ALR   R10,R7I                                             0508
         SLR   R14,R14                                             0508
         IC    R14,CNST2LEN(,R4)                                   0508
         LR    R15,R14                                             0508
         BCTR  R15,0                                               0508
         L     R4,CNST2PTR(,R4)                                    0508
         EX    R15,@SM01327                                        0508
*             I = I+CNST2LEN;               /* INCREMENT BUFFER PTR  */
         ALR   R7I,R14                                             0509
*             CMDTWOBF(I) = ')';            /* MOVE IN RIGHT PAREN   */
         LR    R10,R6AWAPTR                                        0510
         ALR   R10,R7I                                             0510
         MVI   CMDTWOBF-1(R10),C')'                                0510
*           END;                                                   0511
*        CMDTWOLN = I+4;                    /* SET BUFFER LENGTH     */
@RF00503 LA    R4,4                                                0512
         ALR   R4,R7I                                              0512
         STH   R4,CMDTWOLN(,R6AWAPTR)                              0512
*        CMDTWOOF = 0;                      /* OFFSET SET TO ZERO    */
         SLR   R7,R7                                               0513
         STH   R7,CMDTWOOF(,R6AWAPTR)                              0513
*        PPLPTR = ADDR(PPLTWO);             /* SET PTR TO PPL        */
         LA    R10,PPLTWO(,R6AWAPTR)                               0514
         ST    R10,PPLPTR(,R6AWAPTR)                               0514
*        PPLUPT = CPPLUPT;                  /* UPT                   */
         L     R4,CPPLPTR(,R6AWAPTR)                               0515
         L     R9,CPPLUPT(,R4)                                     0515
         ST    R9,PPLUPT(,R10)                                     0515
*        PPLECT = CPPLECT;                  /* ECT                   */
         L     R4,CPPLECT(,R4)                                     0516
         ST    R4,PPLECT(,R10)                                     0516
*        PPLECB = ADDR(COMMECB);            /* ECB                   */
         LA    R4,COMMECB(,R6AWAPTR)                               0517
         ST    R4,PPLECB(,R10)                                     0517
*        COMMECB = 0;                       /* SET ECB TO 0          */
         ST    R7,COMMECB(,R6AWAPTR)                               0518
*        PPLPCL = ADCNPCLY;                 /* PTR TO PCL            */
         L     R4,ADCNPCLY                                         0519
         ST    R4,PPLPCL(,R10)                                     0519
*        PPLANS = ADDR(PDLADDR3);           /* ANSWER PLACE          */
         LA    R4,PDLADDR3(,R6AWAPTR)                              0520
         ST    R4,PPLANS(,R10)                                     0520
*        PDLADDR3 = 0;                      /* SET PDL TO 0          */
         ST    R7,PDLADDR3(,R6AWAPTR)                              0521
*        PPLCBUF = ADDR(CMDTWO);            /* COMMAND BUFFER        */
         LA    R4,CMDTWO(,R6AWAPTR)                                0522
         ST    R4,PPLCBUF(,R10)                                    0522
*        PPLUWA = 0;                        /* USER WORD             */
         ST    R7,PPLUWA(,R10)                                     0523
*    END PARSLNK2;                                                 0524
@EL00017 DS    0H                                                  0524
@EF00017 DS    0H                                                  0524
@ER00017 LM    R14,R12,12(R13)                                     0524
         BR    R14                                                 0524
*        RFY I UNRSTD;                                             0525
*/********************************************************************/
*/*                                                                  */
*/* SEGMENT NAME -                                                   */
*/*      VCPUTMSG                                                    */
*/*                                                                  */
*/* FUNCTION -                                                       */
*/*      THIS ROUTINE ISSUES ERROR MESSAGES.                         */
*/*                                                                  */
*/* OPERATION -                                                      */
*/*      THE PARAMETER LIST TO IKJEFF02 IS COMPLETED.  IKJEFF02 IS   */
*/*      LINKED TO. THE RETURN CODE FROM IKJEFF02 IS SAVED.          */
*/*                                                                  */
*/* INPUT -                                                          */
*/*      WORKAREA                                                    */
*/*                                                                  */
*/* OUTPUT -                                                         */
*/*      MESSAGE ISSUED                                              */
*/********************************************************************/
*    VCPUTMSG: PROC;                                               0526
VCPUTMSG STM   R14,R12,@SA00018                                    0526
*        LISTPTR = ADDR(MSGCSECT);           /* PTR TO MSG PARM LIST */
         L     R7,MSGPTR(,R6AWAPTR)                                0527
         LA    R10,MSGCSECT(,R7)                                   0527
         ST    R10,LISTPTR(,R7)                                    0527
*        MTCPPL = CPPLPTR;                   /* PTR TO CPPL          */
         L     R10,CPPLPTR(,R6AWAPTR)                              0528
         ST    R10,MTCPPL(,R7)                                     0528
*        ECBPTR = ADDR(COMMECB);             /* PTR TO ECB           */
         LA    R10,COMMECB(,R6AWAPTR)                              0529
         ST    R10,ECBPTR(,R7)                                     0529
*        COMMECB = 0;                        /* ECB SET TO ZERO      */
         SLR   R10,R10                                             0530
         ST    R10,COMMECB(,R6AWAPTR)                              0530
*        MTHIGH = '1'B;                      /* HIGH ORDER BIT ON    */
         OI    MTHIGH(R7),B'10000000'                              0531
*        MTPUTLSW = '1'B;                    /* INDICATE PUTLINE     */
         OI    MTPUTLSW(R7),B'01000000'                            0532
*        MSGCSECT = PTRMSGS;                 /* MSG CSECT ADDRESS    */
         L     R10,PTRMSGS(,R6AWAPTR)                              0533
         ST    R10,MSGCSECT(,R7)                                   0533
*        R1 = ADDR(MSGTABLE);                /* PARM LIST IN REG 1   */
         LR    R1,R7                                               0534
*        GEN (LINK EP=IKJEFF02);             /* INVOKE MSG PROCESSOR */
         LINK EP=IKJEFF02
*        RCODESV = R15;                      /* SAVE RETURN CODE     */
         ST    R15,RCODESV(,R6AWAPTR)                              0536
*    END VCPUTMSG;                                                 0537
*                                                                  0537
*                                                                  0537
*                                                                  0537
@EL00018 DS    0H                                                  0537
@EF00018 DS    0H                                                  0537
@ER00018 LM    R14,R12,@SA00018                                    0537
         BR    R14                                                 0537
*      DECLARE /*GENERAL PURPOSE REGISTERS */                      0538
*        GPR00P PTR(31) REG(0),                                    0538
*        GPR01P PTR(31) REG(1),                                    0538
*        GPR02P PTR(31) REG(2),                                    0538
*        GPR03P PTR(31) REG(3),                                    0538
*        GPR04P PTR(31) REG(4),                                    0538
*        GPR05P PTR(31) REG(5),                                    0538
*        GPR06P PTR(31) REG(6),                                    0538
*        GPR07P PTR(31) REG(7),                                    0538
*        GPR08P PTR(31) REG(8),                                    0538
*        GPR09P PTR(31) REG(9),                                    0538
*        GPR14P PTR(31) REG(14),                                   0538
*        GPR15P PTR(31) REG(15);                                   0538
*                                                                  0538
*      DECLARE /* COMMON VARIABLES */                              0539
*        I256C CHAR(256) BASED,                                    0539
*        I031F FIXED(31) BASED,                                    0539
*        I031P PTR(31)   BASED,                                    0539
*        I015F FIXED(15) BASED,                                    0539
*        I015P PTR(15)   BASED,                                    0539
*        I008P PTR(8)    BASED,                                    0539
*        I001C CHAR(1)   BASED;                               /*   0539
*      @Y30NQKK*/                                                  0539
@DATA    DS    0H
@HW1     DC    H'1'
@HW2     DC    H'2'
@HW6     DC    H'6'
@HW7     DC    H'7'
@SM01301 MVC   PKAREA1(0,R8Y),VCBLKBUF(R4)
@SM01311 MVC   CMDTWOBF+1(0,R6AWAPTR),STATBUF(R1)
@SM01313 MVC   CMDTWOBF-1(0,R10),CNSTBUF(R4)
@SM01315 MVC   CMDTWOBF-1(0,R10),VARBUF(R4)
@SM01317 MVC   PKAREA1(0,R8Y),PBLKBUF(R9)
@SM01319 MVC   PKAREA1(0,R8Y),PABLKBUF(R7)
@SM01321 MVC   NBLKBUF1(0,R6AWAPTR),PBLKBUF(R1)
@SM01323 MVC   NBLKBUF1(0,R6AWAPTR),PABLKBUF(R1)
@SM01325 MVC   CMDTWOBF+1(0,R6AWAPTR),BATCBUF(R1)
@SM01327 MVC   CMDTWOBF-1(0,R10),CNST2BUF(R4)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SAV001  EQU   @SA00001
@SA00004 DS    15F
@SA00018 DS    15F
@SA00008 DS    15F
@SA00016 DS    15F
*TF00001 DS    F     @TF00001 AREA NOT NEEDED WITH 370 INSTRUCTIONS
@ZTEMPS  DS    C
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
@TEMPS   EQU   @ZTEMPS
@L       EQU   @ZLEN
IKJEFD37 CSECT
         DS    0F
@FW3     DC    F'3'
@HW3     EQU   @FW3+2
@FW4     DC    F'4'
@HW4     EQU   @FW4+2
@FW5     DC    F'5'
@HW5     EQU   @FW5+2
@FW8     DC    F'8'
@FW12    DC    F'12'
@FW59    DC    F'59'
@FW255   DC    F'255'
@FW4FOX  DC    F'65535'
@FW6FOX  DC    F'16777215'
@DATD    DSECT
         DS    0D
PDLADDR  DS    A
PDLADDR2 DS    A
SAVEVAL  DS    CL72
PKAREA   DS    CL8
CVBAREA  DS    CL8
SAVEVC   DS    18A
         ORG   *+1-(*-@DATD)/(*-@DATD) ENSURE DSECT DATA
@ENDDATD EQU   *
@DATEND  EQU   *
IKJEFD37 CSECT
         DS    0F
@SIZDATD DC    AL1(1)
         DC    AL3(@ENDDATD-@DATD)
@SIZ001  EQU   @SIZDATD
         DS    0D
@CHR103A DC    C'103A'
@CHR107A DC    C'107A'
@CHR111A DC    C'111A'
SPC1     DC    CL5'SPACE'
SPC2     DC    CL15'SPACE INCREMENT'
DIR1     DC    CL3'DIR'
BLKVAR   DC    CL10'BLOCK SIZE'
AVBLOCK  DC    CL7'AVBLOCK'
MSG01    DS    CL108
         ORG   MSG01
MSG01LEN DC    H'108'
MSG01OFF DC    H'0'
MSG01TXT DC    CL104'IKJ56107I MAXIMUM OF 65535 FOR BLOCK AND AVBLOCK. C
               MAXIMUM OF 16777215 FOR SPACE, SPACE INCREMENT AND DIR'
         ORG   MSG01+108
MSG02    DS    CL53
         ORG   MSG02
MSG02LEN DC    H'53'
MSG02OFF DC    H'0'
MSG02TXT DC    CL49'IKJ56114I DATA SET NAME REQUIRED WITH MEMBER NAME'
         ORG   MSG02+53
         DC    0D'0'                   END OF CSECT                @26A
R0       EQU   00                      EQUATES FOR REGISTERS 0-15
R1       EQU   01
R2       EQU   02
R3       EQU   03
R4       EQU   04
R5       EQU   05
R6       EQU   06
R7       EQU   07
R8       EQU   08
R9       EQU   09
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
R2SAVPPL EQU   R2
R5VCKPTR EQU   R5
R6AWAPTR EQU   R6
R7I      EQU   R7
R8Y      EQU   R8
CPPL     EQU   0
CPPLCBUF EQU   CPPL
CPPLUPT  EQU   CPPL+4
CPPLECT  EQU   CPPL+12
PPL      EQU   0
PPLUPT   EQU   PPL
PPLECT   EQU   PPL+4
PPLECB   EQU   PPL+8
PPLPCL   EQU   PPL+12
PPLANS   EQU   PPL+16
PPLCBUF  EQU   PPL+20
PPLUWA   EQU   PPL+24
ALLOCWA  EQU   0
CPPLPTR  EQU   ALLOCWA
PTRPDL   EQU   ALLOCWA+4
SWITCH   EQU   ALLOCWA+12
ASTRSK   EQU   SWITCH
AWARSV1  EQU   SWITCH
FIRSTPDE EQU   SWITCH
ENTRYCD  EQU   ALLOCWA+14
RCODESV  EQU   ALLOCWA+24
VLISTCTR EQU   ALLOCWA+28
DSNCTR   EQU   ALLOCWA+30
PTRMSGS  EQU   ALLOCWA+32
VCFLAGS  EQU   ALLOCWA+36
AVBLK    EQU   VCFLAGS
SPACE1   EQU   VCFLAGS
SPACE2   EQU   VCFLAGS
NCLASBUF EQU   ALLOCWA+37
PMPTPDL  EQU   ALLOCWA+40
PRCODE   EQU   ALLOCWA+44
MSGPTR   EQU   ALLOCWA+48
P        EQU   ALLOCWA+52
Q        EQU   ALLOCWA+56
CMDTWO   EQU   ALLOCWA+60
CMDTWOLN EQU   CMDTWO
CMDTWOOF EQU   CMDTWO+2
CMDTWOBF EQU   CMDTWO+4
PPLTWO   EQU   ALLOCWA+128
PDLADDR3 EQU   ALLOCWA+156
COMMECB  EQU   ALLOCWA+160
NBLKBUF1 EQU   ALLOCWA+164
PPLPTR   EQU   ALLOCWA+172
FIRSTPTR EQU   ALLOCWA+176
ALLOCPDL EQU   0
STATSPDE EQU   ALLOCPDL+12
BLOKPDE  EQU   ALLOCPDL+16
DSNPDE   EQU   ALLOCPDL+48+4                                       @26C
DSNPTR   EQU   DSNPDE
DSNFLAGS EQU   DSNPDE+6
MBRPTR   EQU   DSNPDE+8
MBRFLAGS EQU   DSNPDE+14
PASSPTR  EQU   DSNPDE+16
PASSFLAG EQU   DSNPDE+22
DDNMEPDE EQU   ALLOCPDL+76+4                                       @26C
DDNPTR   EQU   DDNMEPDE
DDNFLAGS EQU   DDNMEPDE+6
CLASPDE  EQU   ALLOCPDL+84+4                                       @26C
CLASPTR  EQU   CLASPDE
CLASLEN  EQU   CLASPDE+4
CLASFLG  EQU   CLASPDE+6
SERPDE   EQU   ALLOCPDL+92+4                                       @26C
SERPTR   EQU   SERPDE
SERFLAGS EQU   SERPDE+6
BLKPDE   EQU   ALLOCPDL+104+4                                      @26C
BLKPTR   EQU   BLKPDE
BLKLEN   EQU   BLKPDE+4
BLKFLAGS EQU   BLKPDE+6
ABLKPDE  EQU   ALLOCPDL+112+4                                      @26C
ABLKPTR  EQU   ABLKPDE
ABLKLEN  EQU   ABLKPDE+4
ABLKFLG  EQU   ABLKPDE+6
SPACPDE  EQU   ALLOCPDL+120+4                                      @26C
SPACEPTR EQU   SPACPDE
SPACEFLG EQU   SPACPDE+6
SPACPDE2 EQU   ALLOCPDL+128+4                                      @26C
SPACPTR2 EQU   SPACPDE2
SPACFLG2 EQU   SPACPDE2+6
DIRECPDE EQU   ALLOCPDL+136+4                                      @26C
DIRPTR   EQU   DIRECPDE
DIRFLAGS EQU   DIRECPDE+6
ATTRPDE  EQU   ALLOCPDL+144+4                                      @26C
ATTRPTR  EQU   ATTRPDE
ATTRFLAG EQU   ATTRPDE+6
USIDPDE  EQU   ALLOCPDL+152+4                                      @26C
USIDPTR  EQU   USIDPDE
USIDFLAG EQU   USIDPDE+6
UTYPPDE  EQU   ALLOCPDL+160+4                                      @26C
UTYPPTR  EQU   UTYPPDE
UTYPFLAG EQU   UTYPPDE+6
UNCNTPDE EQU   ALLOCPDL+168+4                                      @26C
UCNTPTR  EQU   UNCNTPDE
UCNTFLAG EQU   UNCNTPDE+6
POSTPDE  EQU   ALLOCPDL+180+4                                      @26C
POSPTR   EQU   POSTPDE
POSFLAG  EQU   POSTPDE+6
MXVOLPDE EQU   ALLOCPDL+188+4                                      @26C
MXVOLPTR EQU   MXVOLPDE
MXVOLFLG EQU   MXVOLPDE+6
VOLSQPDE EQU   ALLOCPDL+196+4                                      @26C
VOLSQPTR EQU   VOLSQPDE
VOLSQFLG EQU   VOLSQPDE+6
MSVGPDE  EQU   ALLOCPDL+204+4                                      @26C
MSVGPTR  EQU   MSVGPDE
MSVGFLG  EQU   MSVGPDE+6
DSNBUF   EQU   0
MSGTABLE EQU   0
LISTPTR  EQU   MSGTABLE
TMCTPTR  EQU   MSGTABLE+4
MTCPPL   EQU   TMCTPTR
ECBPTR   EQU   MSGTABLE+8
@NM00005 EQU   MSGTABLE+12
MTHIGH   EQU   @NM00005
MSGCSECT EQU   MSGTABLE+16
SW       EQU   MSGTABLE+20
MTPUTLSW EQU   SW
RETMSG   EQU   MSGTABLE+21
SW2      EQU   MSGTABLE+24
MSGID    EQU   MSGTABLE+40
MTINSRTS EQU   MSGTABLE+44
L1       EQU   MTINSRTS
VAR1     EQU   MTINSRTS+1
L2       EQU   MTINSRTS+4
L3       EQU   MTINSRTS+8
L4       EQU   MTINSRTS+12
RET      EQU   0
VALPARM  EQU   0
VALPDE   EQU   VALPARM
VALWORK  EQU   VALPARM+4
VALMSG   EQU   VALPARM+8
PARSRTC  EQU   16
VCBLKPDE EQU   0
VCBLKPTR EQU   VCBLKPDE
VCBLKLEN EQU   VCBLKPDE+4
VCBLKBUF EQU   0
VCDSNPDE EQU   0
VCDSNPTR EQU   VCDSNPDE
VCDSNFLG EQU   VCDSNPDE+6
VCDSNPRS EQU   VCDSNFLG
VCMBRFLG EQU   VCDSNPDE+14
VCMBRPRS EQU   VCMBRFLG
VCDSNBUF EQU   0
VCTERM   EQU   VCDSNBUF
PSTATPDE EQU   0
STATPTR  EQU   PSTATPDE
STATLEN  EQU   PSTATPDE+4
STATFLG  EQU   PSTATPDE+6
SUBNMBR  EQU   PSTATPDE+18
VARPTR   EQU   PSTATPDE+20
CNSTLEN  EQU   VARPTR
VARLEN   EQU   PSTATPDE+24
ANYFLAG  EQU   PSTATPDE+26
SUBPRES  EQU   ANYFLAG
CNSTSUB  EQU   ANYFLAG
CNSTPTR  EQU   PSTATPDE+28
STATBUF  EQU   0
CNSTBUF  EQU   0
VARBUF   EQU   0
BATCPDE  EQU   0
BATCPTR  EQU   BATCPDE
BATCLEN  EQU   BATCPDE+4
BATCFLG  EQU   BATCPDE+6
SUBNUM2  EQU   BATCPDE+18
VAR2PTR  EQU   BATCPDE+20
CNST2LEN EQU   VAR2PTR
ANYFLAG2 EQU   BATCPDE+26
SUB2PRES EQU   ANYFLAG2
CNST2PTR EQU   BATCPDE+28
BATCBUF  EQU   0
CNST2BUF EQU   0
PBLKPDE1 EQU   0
BLOKNBR  EQU   PBLKPDE1+8
PBLKPTR  EQU   PBLKPDE1+12
PBLKLEN  EQU   PBLKPDE1+16
PBLKFLG  EQU   PBLKPDE1+18
PABLKPTR EQU   PBLKPDE1+20
PABLKLEN EQU   PBLKPDE1+24
PABLKFLG EQU   PBLKPDE1+26
PBLKBUF  EQU   0
PABLKBUF EQU   0
PSTSPDE  EQU   0
STAT2PDE EQU   PSTSPDE+8
PCLASPTR EQU   PSTSPDE+12
PCLASLEN EQU   PSTSPDE+16
PCLASFLG EQU   PSTSPDE+18
PCLASPRS EQU   PCLASFLG
CLASBUF1 EQU   0
AREA1    EQU   0
AREA2    EQU   0
PKAREA1  EQU   0
ABLKBUF  EQU   0
ATTRBUF  EQU   0
BLKBUF   EQU   0
CLASSBUF EQU   0
DDNBUF   EQU   0
DIRBUF   EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
I031P    EQU   0
I256C    EQU   0
MBRBUF   EQU   0
MSGECB   EQU   0
MSGTMCT  EQU   0
MSVGBUF  EQU   0
MXVOLBUF EQU   0
PASSBUF  EQU   0
POSTBUF  EQU   0
SERBUF   EQU   0
SPACBUF2 EQU   0
SPACEBUF EQU   0
UCNTBUF  EQU   0
USIDBUF  EQU   0
UTYPBUF  EQU   0
VAR2BUF  EQU   0
VSEQBUF  EQU   0
*                                      START UNREFERENCED COMPONENTS
@NM00046 EQU   PSTSPDE+19
@NM00045 EQU   PCLASFLG
@NM00044 EQU   PSTSPDE+10
@NM00043 EQU   PSTSPDE+4
@NM00042 EQU   PSTSPDE
@NM00041 EQU   PBLKPDE1+27
@NM00040 EQU   PBLKPDE1+19
@NM00039 EQU   PBLKPDE1+10
@NM00038 EQU   PBLKPDE1+4
@NM00037 EQU   PBLKPDE1
@NM00036 EQU   BATCPDE+27
@NM00035 EQU   ANYFLAG2
VAR2SUB  EQU   ANYFLAG2
CNST2SUB EQU   ANYFLAG2
@NM00034 EQU   BATCPDE+25
VAR2LEN  EQU   BATCPDE+24
@NM00033 EQU   BATCPDE+19
@NM00032 EQU   BATCPDE+16
@NM00031 EQU   BATCPDE+12
@NM00030 EQU   BATCPDE+8
@NM00029 EQU   BATCPDE+7
@NM00028 EQU   BATCFLG
BATCPRES EQU   BATCFLG
@NM00027 EQU   BATCPDE+5
@NM00026 EQU   PSTATPDE+27
@NM00025 EQU   ANYFLAG
VARSUB   EQU   ANYFLAG
@NM00024 EQU   PSTATPDE+25
@NM00023 EQU   PSTATPDE+19
@NM00022 EQU   PSTATPDE+16
@NM00021 EQU   PSTATPDE+12
@NM00020 EQU   PSTATPDE+8
@NM00019 EQU   PSTATPDE+7
@NM00018 EQU   STATFLG
STATPRES EQU   STATFLG
@NM00017 EQU   PSTATPDE+5
@NM00016 EQU   VCDSNPDE+23
VCPSWFLG EQU   VCDSNPDE+22
VCPSWLEN EQU   VCDSNPDE+20
VCPSWPTR EQU   VCDSNPDE+16
@NM00015 EQU   VCDSNPDE+15
@NM00014 EQU   VCMBRFLG
VCMBRLEN EQU   VCDSNPDE+12
VCMBRPTR EQU   VCDSNPDE+8
@NM00013 EQU   VCDSNPDE+7
@NM00012 EQU   VCDSNFLG
VCDSNLEN EQU   VCDSNPDE+4
VCBLKFLG EQU   VCBLKPDE+6
RETCHAR  EQU   RET+2
RETSIZE  EQU   RET
MSGRTN   EQU   MSGTABLE+60
VAR4     EQU   MTINSRTS+13
HIGHL4   EQU   L4
VAR3     EQU   MTINSRTS+9
HIGHL3   EQU   L3
VAR2     EQU   MTINSRTS+5
HIGHL2   EQU   L2
HIGHL1   EQU   L1
@NM00009 EQU   MSGTABLE+36
@NM00008 EQU   MSGTABLE+32
MTOLDPTR EQU   MSGTABLE+28
@NM00007 EQU   MSGTABLE+25
@NM00006 EQU   SW2
MTPGMSW  EQU   SW2
MTNPLMSW EQU   SW2
MTNOXQSW EQU   SW2
MTDOMSW  EQU   SW2
MT2OLDSW EQU   SW2
MTNHEXSW EQU   SW
MTWTPSW  EQU   SW
MTJOBISW EQU   SW
MTKEY1SW EQU   SW
MTHEXSW  EQU   SW
MTWTOSW  EQU   SW
MTNOIDSW EQU   SW
DSNTERM  EQU   DSNBUF
MSVGRSV2 EQU   MSVGPDE+7
MSVGRSV1 EQU   MSVGFLG
MSVGPRES EQU   MSVGFLG
MSVGLEN  EQU   MSVGPDE+4
VOLRSV2  EQU   VOLSQPDE+7
VOLRSV1  EQU   VOLSQFLG
VOLPRES  EQU   VOLSQFLG
VOLSQLEN EQU   VOLSQPDE+4
MXVRSV2  EQU   MXVOLPDE+7
MXVRSV1  EQU   MXVOLFLG
MXVPRES  EQU   MXVOLFLG
MXVOLLEN EQU   MXVOLPDE+4
POSRSV2  EQU   POSTPDE+7
POSRSV1  EQU   POSFLAG
POSPRES  EQU   POSFLAG
POSLEN   EQU   POSTPDE+4
LABLRSV1 EQU   ALLOCPDL+178+4                                      @26C
LABELPDE EQU   ALLOCPDL+176+4                                      @26C
UCNTRSV2 EQU   UNCNTPDE+7
UCNTRSV1 EQU   UCNTFLAG
UCNTPRES EQU   UCNTFLAG
UCNTLEN  EQU   UNCNTPDE+4
UTYPRSV2 EQU   UTYPPDE+7
UTYPRSV1 EQU   UTYPFLAG
UTYPPRES EQU   UTYPFLAG
UTYPLEN  EQU   UTYPPDE+4
USIDRSV2 EQU   USIDPDE+7
USIDRSV1 EQU   USIDFLAG
USIDPRES EQU   USIDFLAG
USIDLEN  EQU   USIDPDE+4
ATTRRSV2 EQU   ATTRPDE+7
ATTRRSV1 EQU   ATTRFLAG
ATTRPRES EQU   ATTRFLAG
ATTRLEN  EQU   ATTRPDE+4
DIRRSV2  EQU   DIRECPDE+7
DIRRSV1  EQU   DIRFLAGS
DIRPRES  EQU   DIRFLAGS
DIRLEN   EQU   DIRECPDE+4
SPCRSV22 EQU   SPACPDE2+7
SPCRSV12 EQU   SPACFLG2
SPCPRES2 EQU   SPACFLG2
SPACLEN2 EQU   SPACPDE2+4
SPACRSV2 EQU   SPACPDE+7
SPACRSV1 EQU   SPACEFLG
SPACPRES EQU   SPACEFLG
SPACELEN EQU   SPACPDE+4
ABLKRSV2 EQU   ABLKPDE+7
ABLKRSV1 EQU   ABLKFLG
ABLKPRES EQU   ABLKFLG
BLKRSV2  EQU   BLKPDE+7
BLKRSV1  EQU   BLKFLAGS
BLKPRES  EQU   BLKFLAGS
SERNEXT  EQU   SERPDE+8
SERRSV2  EQU   SERPDE+7
SERRSV1  EQU   SERFLAGS
SERPRES  EQU   SERFLAGS
SERLEN   EQU   SERPDE+4
CLASRSV2 EQU   CLASPDE+7
CLASRSV1 EQU   CLASFLG
CLASPRES EQU   CLASFLG
DDNRSV2  EQU   DDNMEPDE+7
DDNRSV1  EQU   DDNFLAGS
DDNPRES  EQU   DDNFLAGS
DDNLEN   EQU   DDNMEPDE+4
DSNNEXT  EQU   DSNPDE+24
PASSRSV2 EQU   DSNPDE+23
PASSRSV1 EQU   PASSFLAG
PASSPRES EQU   PASSFLAG
PASSLEN  EQU   DSNPDE+20
MBRRSV2  EQU   DSNPDE+15
MBRRSV1  EQU   MBRFLAGS
MBRPRES  EQU   MBRFLAGS
MBRLEN   EQU   DSNPDE+12
DSNRSV2  EQU   DSNPDE+7
DSNRSV1  EQU   DSNFLAGS
DSNQUOT  EQU   DSNFLAGS
DSNPRES  EQU   DSNFLAGS
DSNLENGH EQU   DSNPDE+4
DISPPDE  EQU   ALLOCPDL+46
RNDPDE   EQU   ALLOCPDL+44
RLSEPDE  EQU   ALLOCPDL+42
VSEQPDE  EQU   ALLOCPDL+40
PRIVPDE  EQU   ALLOCPDL+38
MAXVPDE  EQU   ALLOCPDL+36
POSPDE   EQU   ALLOCPDL+34
LABLPDE  EQU   ALLOCPDL+32
UCNTPDE  EQU   ALLOCPDL+30
UNITPDE  EQU   ALLOCPDL+28
HOLDPDE  EQU   ALLOCPDL+26
DESTPDE  EQU   ALLOCPDL+24
USINGPDE EQU   ALLOCPDL+22
DIRPDE   EQU   ALLOCPDL+20
SPACEPDE EQU   ALLOCPDL+18
VOLPDE   EQU   ALLOCPDL+14
FILEPDE  EQU   ALLOCPDL+10
DSPDE    EQU   ALLOCPDL+8
@NM00004 EQU   ALLOCPDL+4
@NM00003 EQU   ALLOCPDL
@NM00002 EQU   ALLOCWA+38
@NM00001 EQU   VCFLAGS
PTRS99RB EQU   ALLOCWA+20
TXT      EQU   ALLOCWA+16
SWITCH2  EQU   ALLOCWA+13                                          @26C
TERMOPT  EQU   SWITCH
CONT     EQU   SWITCH
PROMPT   EQU   SWITCH
DSOVRLAY EQU   SWITCH
RBCODE12 EQU   SWITCH
GTPLPTR  EQU   ALLOCWA+8
CPPLPSCB EQU   CPPL+8
*                                      END UNREFERENCED COMPONENTS
@RF00109 EQU   @RC00107
@RC00113 EQU   @EL00001
@RF00157 EQU   @EL00004
@RC00171 EQU   @EL00004
@RF00218 EQU   @EL00008
@RC00237 EQU   @EL00008
@RT00259 EQU   INVASTK
@RC00271 EQU   @RC00269
@RF00302 EQU   @EL00010
@RF00320 EQU   @EL00011
@RC00471 EQU   @EL00016
@RC00481 EQU   @EL00016
@PB00018 EQU   @EL00001
@RC00476 EQU   @RC00471
@PB00017 EQU   @PB00018
@PB00016 EQU   @PB00017
@PB00015 EQU   @PB00016
@PB00014 EQU   @PB00015
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00011 EQU   @PB00012
@PB00010 EQU   @PB00011
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@EL01    EQU   @EL00001
@ENDDATA DS    0D
*    END IKJEFD37                                                  0540
         PRINT NOGEN
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IKJCPPL )                                        *
*/*%INCLUDE SYSLIB  (IKJPPL  )                                        *
*/*%INCLUDE SYSLIB  (IKJZT430)                                        *
*/*%INCLUDE SYSLIB  (IKJEFFMT)                                        *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
         CVT   DSECT=YES
*;                                                                 0540
         END   IKJEFD37,(C'PLS-III',0300,85145)
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IFOX00
//*
//IEBGENER EXEC PGM=IEBGENER
//SYSPRINT DD  DUMMY
//SYSUT1   DD  *
  IDENTIFY IKJEFD37('ZP60026')
//SYSUT2   DD  DSN=&&SMPMCS,DISP=(MOD,PASS)
//SYSIN    DD  DUMMY
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -IEBGENER
//*
//RECV23   EXEC SMPREC
//SMPPTFIN DD  DSN=&&SMPMCS,DISP=(OLD,DELETE)
//SMPCNTL  DD  *
  RECEIVE SELECT(ZP60026).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV23
//*
//APPLY23  EXEC SMPAPP
//SMPCNTL  DD  *
  APPLY SELECT(ZP60026) DIS(WRITE).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY23
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//*********************************************************************
//* Install USERMOD ZP60032 (source: Greg Price) - allow the GTTERM   *
//* macro to report the TSO terminal name.                            *
//*********************************************************************
//*
//RECV24   EXEC SMPREC
//SMPPTFIN DD  *
++USERMOD(ZP60032)         /* ADD TERMID TO THE GTTERM MACRO */  .
++VER(Z038) FMID(ETI1106) PRE(UZ44753)
 /*
   PROBLEM DESCRIPTION:
     THE GTTERM MACRO CANNOT EXPLOIT ALL FUNCTIONS OF THE INTERFACE.
       THE ZP60009 USERMOD ENHANCED TSO/VTAM TO ALLOW THE SVC 94
       GTTERM INTERFACE TO RETURN THE 8-BYTE VTAM LU NAME OF THE
       TSO TERMINAL, BUT THE GTTERM MACRO OWNED BY TIOC DOES NOT
       SUPPORT THE TERMID OPERAND.

       THIS USERMOD ADDS THE TERMID OPERAND TO THE GTTERM MACRO
       IN A WAY WHICH IS COMPATIBLE WITH TSO/E.


   SPECIAL CONDITIONS:
     NONE.

   COMMENTS:
     PRYCROFT SIX P/L PUBLIC DOMAIN USERMOD FOR MVS 3.8 NO. 32.

     THE FOLLOWING MODULES AND/OR MACROS ARE AFFECTED BY THIS USERMOD:
     MACROS:
       GTTERM
 */.
++MAC(GTTERM) DISTLIB(ATSOMAC).
         MACRO                                                          00050000
&NAME    GTTERM &PRMSZE=,&ALTSZE=,&ATTRIB=,&TERMID=,&MF=I      @G76XRYU 00070990
.*                                                             @OW03892 00071980
.* A000000-999999                                              @G76XR00 00075000
.* A034000                                                     @OZ90350 00077000
.* NOCHANGE SHIPPED WITH JCLIN                                 @OY20024 00078000
.* NOCHANGE SHIPPED WITH JCLIN                                 @OY26821 00079000
.* ADDED TERMID PARAMETER                                      @OW03892 00080990
.*                                                                      00081980
         LCLC  &NDX                                            @G76XRYU 00085000
&NDX     SETC  '&SYSNDX'                                       @G76XRYU 00090000
         AIF   ('&MF' EQ 'I' AND '&PRMSZE' EQ '' AND '&ATTRIB' EQ '' AN-00799990
               D '&TERMID' EQ '').ERROR1              @G76XRYU @OW03892 01499980
         AIF   ('&MF' EQ 'L').LFORM                                     02450000
         AIF   ('&MF(1)' EQ 'E').EFORM                                  02500000
         AIF   ('&MF' NE 'I').ERROR2                                    02550000
.*********************I -FORM OF MACRO********************************* 02600000
&NAME    CNOP  0,4                                                      02650000
         BAL   1,*+20                   BRANCH AROUND PARMS    @G76XRYU 02672990
.*                                                             @OW03892 02675980
GTRM&NDX DC    A(0)                     ADDRESS OF PRIMARY     @G76XRYU 02680000
         DC    A(0)                     ADDRESS OF ALTERNATE            02690000
         DC    A(0)                     ADDRESS OF ATTRIBUTE   @G76XRYU 02700000
         DC    A(0)                     ADDRESS OF TERMINAL ID @OW03892 03000000
         AGO   .STADDR                                                  03350000
.EFORM   ANOP                                                           03400000
&NAME    CNOP  0,4                                             @OZ90350 03429990
         IHBOPLST ,,&NAME,MF=&MF                                        03450000
.STADDR  ANOP                                                           03500000
.*********COMMON CODE FOR BOTH I AND E FORM OF MACRO******************  03550000
         AIF   ('&PRMSZE' EQ '').LABEL2                                 03600000
         AIF   ('&PRMSZE'(1,1) NE '(').LOADPRM                          03700000
         ST    &PRMSZE(1),0(,1)         STORE PRIMARY ADDRESS           03750000
         AGO   .LABEL2                                                  03800000
.LOADPRM ANOP                                                           03850000
         AIF   ('&PRMSZE'(K'&PRMSZE,1) EQ ')' OR '&MF' NE 'I').LPARM    03857000
         ORG   GTRM&NDX                 PUT ADDR OF PRIMARY    @G76XRYU 03864000
         DC    A(&PRMSZE)               IN PARM LIST           @G76XRYU 03871000
         ORG                                                            03878000
         AGO   .LABEL2                                         @G76XRYU 03885000
.LPARM   ANOP                      ..LA ADDR OR EXECUTE FORM   @G76XRYU 03892000
         LA    0,&PRMSZE                LOAD ADDRESS OF PRIMARY         03900000
         ST    0,0(,1)                  STORE ADDRESS OF PRIMARY        03950000
.LABEL2  ANOP                                                           04000000
         AIF   ('&ALTSZE' EQ '').IEATRCK                       @G76XRYU 04020000
         AIF   ('&ALTSZE'(1,1) NE '(').LOADALT                          04150000
         ST    &ALTSZE(1),4(,1)         STORE ADDRESS OF ALTERNATE      04200000
         AGO   .IEATRCK                                        @G76XRYU 04220000
.LOADALT ANOP                                                           04300000
         AIF   ('&ALTSZE'(K'&ALTSZE,1) EQ ')' OR '&MF' NE 'I').LAALT    04300100
         ORG   GTRM&NDX+4               PUT ALTERNATE SIZE     @G76XRYU 04306100
         DC    A(&ALTSZE)               IN PARM LIST           @G76XRYU 04312100
         ORG                                                            04318100
         AGO   .IEATRCK                                        @G76XRYU 04324100
.LAALT   ANOP                     ...LA ADDR OR EXECUTE FORM   @G76XRYU 04330100
         LA    0,&ALTSZE                LOAD ADDR OF ALTERNATE @G76XRYU 04336100
         ST    0,4(,1)                  STORE ADD OF ALTERNATE @G76XRYU 04350000
.*  PROCESS ATTRIBUTE PARM FOR I AND E FORMS WHEN NOT NULL     @G76XRYU 04450000
.IEATRCK ANOP                                                  @G76XRYU 04451000
         AIF   ('&ATTRIB' EQ '').LABEL3               @G76XRYU @OW03892 04452490
         AIF   ('&ATTRIB'(1,1) EQ '(').REGATR                  @G76XRYU 04453000
         AIF   ('&ATTRIB'(K'&ATTRIB,1) EQ ')' OR '&MF' NE 'I').LAATRIB  04454000
         ORG   GTRM&NDX+8               PUT ATTRIB BYTE ADDR   @G76XRYU 04455000
         DC    A(&ATTRIB)               IN PARM LIST           @G76XRYU 04456000
         ORG                                                            04457000
         AGO   .LABEL3                                @G76XRYU @OW03892 04458490
.LAATRIB ANOP                       .. LA ADDR OR EXECUTE FORM @G76XRYU 04459000
         LA    0,&ATTRIB                GET ADR OF ATTRIB BYTE @G76XRYU 04460000
         ST    0,8(1)                   PUT IN 3RD PARM WORD   @G76XRYU 04461000
         AGO   .LABEL3                                @G76XRYU @OW03892 04462490
.REGATR  ANOP                                                  @G76XRYU 04463000
         ST    &ATTRIB(1),8(1)          REG => 3RD PARM WORD   @G76XRYU 04464000
.*  PROCESS TERMINAL ID PARM FOR I AND E FORMS WHEN NOT NULL   @OW03892 04464040
.LABEL3  ANOP                                                  @OW03892 04464080
         AIF   ('&TERMID' EQ '').SVCENTY                       @OW03892 04464120
         AIF   ('&TERMID'(1,1) NE '(').LOTRMID                 @OW03892 04464160
         ST    &TERMID(1),12(,1)        STORE PRIMARY ADDRESS  @OW03892 04464200
         OI    12(1),128                END OF LIST INDICATOR  @OW03892 04464240
         AGO   .SVCENT2                                        @OW03892 04464280
.LOTRMID ANOP                                                  @OW03892 04464320
         AIF   ('&TERMID'(K'&TERMID,1) EQ ')' OR '&MF' NE 'I').LTERM    04464360
.*                                                             @OW03892 04464400
         ORG   GTRM&NDX+12              PUT ADDR OF TERMID IN  @OW03892 04464440
         DC    XL1'80',AL3(&TERMID)     PARM LIST WITH END OF  @OW03892 04464480
.*                                      LIST INDICATOR         @OW03892 04464520
         ORG                                                            04464560
         AGO   .SVCENT2                                        @OW03892 04464600
.LTERM   ANOP                      ..LA ADDR OR EXECUTE FORM   @OW03892 04464640
         LA    0,&TERMID                LOAD ADDRESS OF TERMINAL ID     04464680
.*                                                             @OW03892 04464720
         ST    0,12(,1)                 STORE ADDRESS OF TERMINAL ID    04464760
.*                                                             @OW03892 04464800
         OI    12(1),128                END OF LIST INDICATOR  @OW03892 04464840
         AGO   .SVCENT2                                        @OW03892 04464880
.SVCENTY ANOP                                                           04465000
         OI    8(1),128                 END OF LIST INDICATOR  @G76XRYU 04470000
.SVCENT2 ANOP                                                           04510000
         LA    0,17                     ENTRY CODE                      04550000
         SLL   0,24                     SHIFT TO HIGH ORDER BYTE        04600000
         SVC   94                       ISSUE SVC                       04650000
         MEXIT                                                          04700000
.***************  L  - FORM  ***************************                04750000
.LFORM   ANOP                                                           04800000
&NAME    DS    0F                                                       04850000
         AIF   ('&PRMSZE' EQ '').NOPRMAD                                04900000
         AIF   ('&PRMSZE'(1,1) EQ '(').NOPRMAD                          04950000
         DC    A(&PRMSZE)               ADDRESS OF PRIMARY PARM ADDR    05000000
         AGO   .CHKALT                                                  05050000
.NOPRMAD ANOP                                                           05100000
         DC    A(0)                     ADDRESS OF PRIMARY PARM ADDR    05150000
.CHKALT  AIF   ('&ALTSZE' EQ '').NOALTAD                                05200000
         AIF   ('&ALTSZE'(1,1) EQ '(').NOALTAD                          05250000
         DC    A(&ALTSZE)               ADDRESS OF ALTERNATE ADDR       05300000
         AGO   .LATTCK                                         @G76XRYU 05320000
.NOALTAD ANOP                                                           05400000
         DC    A(0)                     ADDR OF ALTERNATE      @G76XRYU 05420000
.*  PROCESS ATTRIBUTE PARM FOR LIST FORM                       @G76XRYU 05422000
.LATTCK  ANOP                                                  @G76XRYU 05424000
         AIF   ('&ATTRIB' NE '').CKATTR                        @G76XRYU 05426000
         DC    A(0)                     L-FORM--ATTRIB BYTE    @G76XRYU 05428000
         AGO   .CKTERM                                @G76XRYU @OW03892 05430990
.CKATTR  ANOP                                                  @G76XRYU 05432000
         AIF   ('&ATTRIB'(1,1) NE '(').ATTROK                  @G76XRYU 05434000
         MNOTE 12,'IHB300 INCOMPATIBLE OPERANDS: MF=L AND ATTRIB=&ATTRI*05436000
               B'                                              @G76XRYU 05438000
         AGO   .CKTERM                                @G76XRYU @OW03892 05440990
.ATTROK  ANOP                                                  @G76XRYU 05442000
         DC    A(&ATTRIB)               L-FORM--A(ATTR BYTE)   @G76XRYU 05444000
         AGO   .CKTERM                                         @OW03892 05558990
.CKTERM  AIF   ('&TERMID' EQ '').NOTRMAD                       @OW03892 05567980
         AIF   ('&TERMID'(1,1) EQ '(').NOTRMAD                 @OW03892 05576970
         DC    A(&TERMID)               ADDRESS OF TERMINAL ID ADDR     05585960
.*                                                             @OW03892 05594950
         MEXIT                                                 @OW03892 05603940
.NOTRMAD ANOP                                                  @OW03892 05612930
         DC    A(0)                     ADDRESS OF TERMINAL ID ADDR     05621920
.*                                                             @OW03892 05630910
         MEXIT                                                 @OW03892 05639900
.ERROR1  ANOP                                                           05650000
         IHBERMAC 1006,PRMSZE                                           05700000
         MEXIT                                                          05750000
.ERROR2  IHBERMAC 54,,&MF                                               05800000
         MEXIT                                                          05850000
         MEND                                                           05900000
/*
//SMPCNTL  DD  *
  RECEIVE SELECT(ZP60032).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV24
//*
//APPLY24  EXEC SMPAPP
//SMPCNTL  DD  *
  APPLY S(UZ44753 ZP60032) DIS(WRITE).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY24
//*
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
//*********************************************************************
//* Install USERMOD WM00017 (source: SHARE?) adds 2 JES2 console      *
//* commands: $U and $DP                                              *
//*********************************************************************
//*
//RECV25   EXEC SMPREC
//SMPPTFIN DD  *
++USERMOD (WM00017) /* $DP COMMAND AND $U COMMAND */  .
++VER (Z038) FMID(EJE1103) PRE(UZ31176 UZ33158 UZ35334
       UZ37263 UZ54837)
   /* SOURCE: JES2 MODS (SHARE?)
      TWO NEW COMMANDS HAVE BEEN ADDED TO JES2 TO ENHANCE OUTPUT
      PROCESSING.  THE TWO COMMANDS ARE:- $DP & $U.  THE FORMAT
      OF THE $DP COMMAND IS AS FOLLOWS:-
         $DP   ----  WILL DISPLAY ALL PRINTED OUTPUT.  IT WILL
                     GIVE BOTH THE NUMBER OF LINES AND THE
                     OUTPUT CLASS PLUS THE USUAL JES2 SPOOL
                     UTILIZATION MESSAGE.
         $DPX  ----  WHERE X IS THE SYSOUT CLASS TO BE DISPLAYED.
                     EG. $DPA WILL DISPLAY ALL OUTPUT FOR SYSOUT
                     CLASS=A.  IF THERE IS NO SYSOUT=A THEN THE
                     JES2 SPOOL UTILIZATION MESSAGE IS DISPLAYED.
                     THE $DPX FORMAT DOES NOT SUPPORT MULTIPLE
                     SYSOUT CLASSES.
      THE FORMAT OF THE $U COMMAND IS AS FOLLOWS:-
         $U JOBID,O= FROM CLASS,C= TO CLASS WHERE JOBID CAN BE
                     JOB/TSU/STC NUMBER OR RANGE OF NUMBERS EG
                     J10, S23-25, T51 OR JOBNAME IN QUOTES EG
                     'TSTJOB'.  FROM CLASS CAN BE ONE OR MORE
                     CLASSES EG A, ABV, ABCDEF OR * TO SIGNIFY
                     ALL CLASSES.  TO CLASS IS A SINGLE CLASS
                     SPECIFICATION EG C.
         EXAMPLES OF THE $U COMMAND:-
            $US1,C=P,O=L   WILL RESET 'L' CLASS OUTPUT FOR STARTED
                     TASK 1 TO CLASS 'P'.
            $UJ10,O=V,C=P  WILL RESET 'V' CLASS OUTPUT FOR JOB 10
                     TO CLASS = 'P'.
            $U'TESTJOB',O=2A,C=5  WILL RESET '2' CLASS & 'A' CLASS
                     OUTPUT FOR TESTJOB TO CLASS = '5'.
            $UJ1-999,C=2,O=*  WILL RESET OUTPUT FOR ALL JOBS TO
                     CLASS = '2'.
      POINTS TO NOTE:-
         THE OPERANDS 'O' & 'C' MAY BE IN ANY ORDER.
         OUTPUT CURRENTLY BEING PRINTED CANNOT BE RESET.
         RESETTING OUTPUT TO THE 'Z' QUEUE RE-QUEUES OUTPUT TO A
         'Z' QUEUE BUT DOES NOT AUTOMATICALLY DELETE.
         ('Z' CLASS BEING SYSOUT CLASS NOT PRINTED)
      THE RESPONSES TO THE $U COMMAND WILL BE:-
         $HASP000 SYSOUT CLASS/ES CHANGED
                       OR
         $HASP000 NO OUTPUT FOUND                        */ .
++SRCUPD (HASPCOMM) DISTLIB (HASPSRC).
./       CHANGE NAME=HASPCOMM
*        TO BE INSERTED BETWEEN $DO AND $DQ ENTRIES  ***********   BNSW K1689600
         $COMTAB DP,BNSWCMD        $DP DISPLAY OUTPUT QUEUE(S) *   BNSW K1689700
*                                                    ***********   BNSW K1689800
COMTBLU  $COMTAB U7D,BNSWCMD,REJECT=COMR+COMJ  $U'JOBNAME'     *   BNSW K1720600
         $COMTAB UJ,BNSWCMD,REJECT=COMR+COMJ   $UJ   * CHANGE  *   BNSW K1720602
         $COMTAB US,BNSWCMD,REJECT=COMR+COMJ   $US   * SYSOUT  *   BNSW K1720604
         $COMTAB UT,BNSWCMD,REJECT=COMR+COMJ   $UT   * CLASS.  *   BNSW K1720606
****************************************************************   BNSW K1720608
******** ENTRY FOR 'U' COMMANDS    *****************************   BNSW K1733250
         DC    C'U',AL3(COMTBLU)   $U - CHANGE OUTPUT CLASS    *   BNSW K1733252
****************************************************************   BNSW K1733254
 TITLE '   HASP COMMAND PROCESSOR BNSWCMD - $DP  *** BNSW ***'     BNSW K2577550
         PUSH  USING                                               BNSW K2577551
BNSWCMD  $COMGRUP DP,U7D,UJ,US,UT,DELAY=NO  ADDED COMMANDS         BNSW K2577552
CDP      EQU   *                   DISPLAY OUTPUT QUEUES (FOR A    BNSW K2577553
*                                  PARTICULAR CLASS IF REQUESTED)  BNSW K2577554
         SPACE 2                                                   BNSW K2577555
****************************************************************** BNSW K2577556
*                                                                * BNSW K2577557
*        $DP   OR   $DPX    X=CLASS TO BE DISPLAYED, DEFAULT ALL * BNSW K2577558
*                                                                * BNSW K2577559
****************************************************************** BNSW K2577560
         SPACE 2                                                   BNSW K2577561
         USING JOEDSECT,R1                                         BNSW K2577562
         SPACE 1                                                   BNSW K2577563
         L     R1,0(,WD)           A(1ST OPERAND) I.E. 'P'         BNSW K2577564
         SR    WB,WB               CLASS INDEX - 0=ALL             BNSW K2577565
         CLI   1(R1),C' '          IF NO CLASS SPECIFIED           BNSW K2577566
         BE    CDPALLC             THEN DISPLAY ALL CLASSES        BNSW K2577567
*                                  ELSE CHECK VALIDITY OF CLASS:   BNSW K2577568
         LA    R15,L'CDPCLSES      NUMBER OF VALID CLASSES         BNSW K2577569
CDPFNCLS LA    WB,1(,WB)           1=A , 2=B , ...                 BNSW K2577570
         IC    WC,CDPCLSES-1(WB)   CLASS FROM LIST                 BNSW K2577571
         CLM   WC,1,1(R1)          IF THIS IS THE CLASS            BNSW K2577572
         BE    CDPHAVCL            THEN GO FIND JOE'S              BNSW K2577573
         BCT   R15,CDPFNCLS        ELSE CHECK AGAINST NEXT IN LIST BNSW K2577574
         SPACE 1                                                   BNSW K2577575
         $CFINVO OPERAND=(R1)      MSG 'INVALID OPERAND' + GET OUT BNSW K2577576
         SPACE 1                                                   BNSW K2577577
CDPCLSES DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' CLASS LIST  BNSW K2577578
         SPACE 1                                                   BNSW K2577579
CDPHAVCL DS    0H                  RUN THRU CLASS QUEUE IN JOT     BNSW K2577580
         BAL   WC,CDPPRC           PROCESS SPECIFIED CLASS         BNSW K2577581
         B     CDPEND              AND GET OUT WITH FINAL MSG.     BNSW K2577582
         SPACE 2                                                   BNSW K2577583
CDPALLC  LA    WB,1(,WB)           1ST/NEXT CLASS TO PROCESS       BNSW K2577584
         BAL   WC,CDPPRC           PROCESS A CLASS                 BNSW K2577585
         LA    WC,L'CDPCLSES       NUMBER OF CLASES                BNSW K2577586
         CR    WB,WC               IF NOT ON LAST ONE              BNSW K2577587
         BNE   CDPALLC             THEN DO NEXT CLASS              BNSW K2577588
         SPACE 1                                                   BNSW K2577589
CDPEND   EQU   *                   ALL DONE - SETUP FINAL MSG AND  BNSW K2577590
*                                  GET OUT. CODE HERE IS EXACTLY   BNSW K2577591
*                                  THE SAME AS AT 'CDQEND'         BNSW K2577592
         L     R15,$SSVT           A(SSVT)                         BNSW K2577593
         L     R1,$SVTGALC-SSVT(,R15) GROUPS ALLOCATED             BNSW K2577594
         M     R0,=F'100'          CALCULATE                       BNSW K2577595
         D     R0,$SVTGTOT-SSVT(,R15) PERCENTAGE                   BNSW K2577596
         $CFCVE VALUE=(R1)         MAKE PRINTABLE                  BNSW K2577597
         MVC   COMMAND(3),COMDWORK+2 INTO MSG                      BNSW K2577598
         MVC   COMMAND+3(26),=C' PERCENT SPOOL UTILIZATION'        BNSW K2577599
         $CRET L=29                GET OUT AND ISSUE MSG           BNSW K2577600
         SPACE 3                                                   BNSW K2577601
CDPPRC   DS    0H                  PROCESS CLASS INDICATED BY WB   BNSW K2577602
         ST    WC,COMWREGS+12      KEEP RETURN ADDR                BNSW K2577603
         IC    R1,CDPCLSES-1(WB)   GET CHAR FOR CLASS              BNSW K2577604
         STC   R1,COMWREGS+4       AND KEEP IT                     BNSW K2577605
         LA    R1,0(WB,WB)         2,4,6,...                       BNSW K2577606
         LA    R1,(JOTCLSQ-JOTDSECT)-(JOENEXT-JOEDSECT+2)(R1) DISP BNSW K2577607
         AL    R1,$JOTABLE         ACTUAL ADDR TO START            BNSW K2577608
         ST    R1,COMWREGS         KEEP STARTING POINT FOR THIS Q  BNSW K2577609
         SPACE 1                                                   BNSW K2577610
CDPNXTJO LH    R1,JOENEXT          1ST/NEXT JOE OFFSET/4           BNSW K2577611
         N     R1,=X'0000FFFF'     ENSURE +                        BNSW K2577612
         BZ    CDPPRCR             GET OUT IF NO MORE JOE'S        BNSW K2577613
         SLL   R1,2                *4 FOR ACTUAL OFFSET            BNSW K2577614
         AL    R1,$JOTABLE         ADD ADDR OF JOT                 BNSW K2577615
         ST    R1,COMWREGS+8       KEEP ADDR OF CURRENT JOE        BNSW K2577616
         LH    R14,JOEJQE          JQE OFFSET/4                    BNSW K2577617
         N     R14,=X'0000FFFF'    ENSURE +                        BNSW K2577618
         SLL   R14,2               *4 FOR ACTUAL OFFSET            BNSW K2577619
         AL    R14,$JOBQPTR        A(JQE)                          BNSW K2577620
         SPACE 1                                                   BNSW K2577621
*        BUILD MSG AND ISSUE $CWTO                                 BNSW K2577622
         SPACE 1                                                   BNSW K2577623
         BAL   WC,CDPIJOB          IDENTIFY JOB                    BNSW K2577624
         BAL   WC,CDPICLAS         IDENTIFY OUTPUT CLASS           BNSW K2577625
         BAL   WC,CDPILNS          NUMBER OF LINES                 BNSW K2577626
         SPACE 1                                                   BNSW K2577627
         $CWTO L=CDPOLEN           ISSUE MSG                       BNSW K2577628
         SPACE 1                                                   BNSW K2577629
*        MAKE SURE THAT THE JOE THAT WE WERE WORKING WITH IS STILL BNSW K2577630
*        ON THE QUEUE.                                             BNSW K2577631
         L     R1,COMWREGS         GET START POINT FOR THE QUEUE   BNSW K2577632
CDPNXTJX LH    R1,JOENEXT          1ST/NEXT JOE                    BNSW K2577633
         N     R1,=X'0000FFFF'     ENSURE +                        BNSW K2577634
         BZ    CDPINCM             NOT FOUND - MSG 'LIST INCOMPLETE' SW K2577635
         SLL   R1,2                *4 FOR ACTUAL OFFSET            BNSW K2577636
         AL    R1,$JOTABLE         A(JOE)                          BNSW K2577637
         C     R1,COMWREGS+8       IF THIS IS THE ONE WE WERE WORKING W K2577638
         BNE   CDPNXTJX            WITH THEN CONTINUE AS NORMAL ELSE SW K2577639
*                                  TRY NEXT JOE ON THE QUEUE.      BNSW K2577640
         B     CDPNXTJO            JOE FOUND - CONTINUE            BNSW K2577641
         SPACE 2                                                   BNSW K2577642
CDPINCM  MVC   COMMAND(L'CDPCLIC),CDPCLIC 'LIST INCOMPLETE'        BNSW K2577643
         MVC   COMMAND+L'CDPCLIC(1),COMWREGS+4 CLASS               BNSW K2577644
         $CWTO L=L'CDPCLIC+1       ISSUE MSG                       BNSW K2577645
         SPACE 1                                                   BNSW K2577646
CDPPRCR  L     WC,COMWREGS+12      RESTORE RETURN ADDR             BNSW K2577647
         BR    WC                                                  BNSW K2577648
         SPACE 3                                                   BNSW K2577649
CDPIJOB  DS    0H                  PUT JOB IDENTITY IN MSG         BNSW K2577650
         MVC   CDPOJNAM,JQEJNAME-JQE(R14) MOVE IN JOBNAME          BNSW K2577651
         LH    R0,JQEJOBNO-JQE(R14) JOB NUMBER                     BNSW K2577652
         MVC   CDPOJID,CDPCJID     ASSUME 'JOB'                    BNSW K2577653
         CH    R0,=H'10000'        IS IT JOB                       BNSW K2577654
         BL    CDPCONJN            IF SO GO CONVERT NUMBER         BNSW K2577655
         MVC   CDPOJID,CDPCTID     TRY FOR 'TSU'                   BNSW K2577656
         SH    R0,=H'20000'        SUBTRACT TSUS BASE              BNSW K2577657
         BNM   CDPCONJN            GO CONVERT IF IT IS TSU         BNSW K2577658
         MVC   CDPOJID,CDPCSID     MUST BE STC                     BNSW K2577659
         AH    R0,=H'10000'        MAKE STC NUMBER +VE             BNSW K2577660
CDPCONJN CVD   R0,COMDWORK                                         BNSW K2577661
         MVC   CDPOJNUM,CDPCJPAT   EDIT PATTERN                    BNSW K2577662
         ED    CDPOJNUM,COMDWORK+(8-L'CDPOJNUM/2)                  BNSW K2577663
         MVC   CDPOJNID,CDPCJNID   '#'                             BNSW K2577664
         BR    WC                                                  BNSW K2577665
         SPACE 2                                                   BNSW K2577666
CDPICLAS DS    0H                  PUT OUTPUT CLASS INTO MSG       BNSW K2577667
         MVC   CDPOCLAS,COMWREGS+4 A,B,C,...                       BNSW K2577668
         MVC   CDPOCLID,CDPCCLID   'CLASS'                         BNSW K2577669
         BR    WC                                                  BNSW K2577670
         SPACE 2                                                   BNSW K2577671
CDPILNS  DS    0H                  NUMBER OF LINES AND INDICATION  BNSW K2577672
         MVC   CDPOPRIN,CDPCBLNK   IF THE JOB IS CURRENTLY PRINTING NSW K2577673
         L     R0,JOERECCT         NUMBER OF LINES                 BNSW K2577674
         TM    JOEFLAG,$JOEPRT     IF JOB IS NOT PRINTING          BNSW K2577675
         BNO   CDPNOTPR            THEN DON'T LOOK FOR CHKPT JOE   BNSW K2577676
         SPACE 1                                                   BNSW K2577677
         MVC   CDPOPRIN,CDPCPRIN   'PRINTING' TO MSG               BNSW K2577678
*        JOB PRINTING, SUBTRACT NUMBER OF LINES PRINTED FROM TOTAL. NSW K2577679
         TM    JOEFLAG,$JOECKV     IF CHKPT NOT VALID              BNSW K2577680
         BNO   CDPNOTPR            THEN DON'T LOOK AT IT           BNSW K2577681
         LH    R1,JOECKPT          OFFSET/4 FOR CHKPT JOE          BNSW K2577682
         N     R1,=X'0000FFFF'     ENSURE +                        BNSW K2577683
         SLA   R1,2                *4 FOR ACTUAL OFFSET            BNSW K2577684
         BZ    CDPNOTPR            SKIP IT IF NOT AVAILABLE        BNSW K2577685
         AL    R1,$JOTABLE         A(CHKPT JOE)                    BNSW K2577686
         S     R0,JOETLNC          TOTAL-(NO. PRINTED)             BNSW K2577687
         L     R1,COMWREGS+8       RESTORE A(WORK JOE)             BNSW K2577688
         SPACE 1                                                   BNSW K2577689
CDPNOTPR CVD   R0,COMDWORK         NUMBER OF LINES                 BNSW K2577690
         MVC   CDPONLIN,CDPCLPAT   EDIT PATTERN                    BNSW K2577691
         ED    CDPONLIN,COMDWORK+(8-L'CDPONLIN/2)                  BNSW K2577692
         MVC   CDPOLINS,CDPCLINS   'LINES'                         BNSW K2577693
         BR    WC                                                  BNSW K2577694
         SPACE 3                                                   BNSW K2577695
*        FIELD 'COMWREGS' USED AS FOLLOWS:                         BNSW K2577696
*                                                                  BNSW K2577697
*              COMWREGS+0(4)  OFFSET OF START OF CURRENT WORK JOE Q NSW K2577698
*              COMWREGS+4(1)  CLASS CURRENTLY BEING PROCESSED      BNSW K2577699
*              COMWREGS+8(4)  ADDR OF CURRENT WORK JOE             BNSW K2577700
*              COMWREGS+12(4) RETURN ADDR FROM 'CDPPRC'            BNSW K2577701
*                                                                  BNSW K2577702
         SPACE 1                                                   BNSW K2577703
CDPCJID  DC    C' JOB '            IDENTIFY 'JOB' IN MSG           BNSW K2577704
CDPCTID  DC    C' TSU '            IDENTIFY 'TSU' IN MSG           BNSW K2577705
CDPCSID  DC    C' STC '            IDENTIFY 'STC' IN MSG           BNSW K2577706
CDPCJNID DC    C'  #'              IDENTIFY JOB NUMBER             BNSW K2577707
CDPCJPAT DC    X'602020202021'     JOB NUMBER PATTERN              BNSW K2577708
CDPCCLID DC    C'  CLASS '         IDENTIFY CLASS IN MSG           BNSW K2577709
CDPCLINS DC    C'     LINES'                                       BNSW K2577710
CDPCLPAT DC    X'4020202020202021' NUMBER OF LINES PATTERN         BNSW K2577711
CDPCPRIN DC    C'  PRINTING'       IF JOB IS PRINTING              BNSW K2577712
CDPCBLNK DC    CL(L'CDPCPRIN)' '   IF JOB NOT PRINTING             BNSW K2577713
CDPCLIC  DC    C'LIST INCOMPLETE FOR CLASS '                       BNSW K2577714
         SPACE 2                                                   BNSW K2577715
*        EQUATES FOR OUTPUT LINE. THESE TOGETHER WITH THE ABOVE    BNSW K2577716
*        CONSTANTS DETERMINE THE FORMAT OF THE MESSAGE.            BNSW K2577717
         SPACE 1                                                   BNSW K2577718
CDPOJID  EQU   COMMAND,L'CDPCJID               'JOB','TSU','STC'   BNSW K2577719
CDPOJNAM EQU   CDPOJID+L'CDPOJID,8             JOBNAME             BNSW K2577720
CDPOJNID EQU   CDPOJNAM+L'CDPOJNAM,L'CDPCJNID  '#'                 BNSW K2577721
CDPOJNUM EQU   CDPOJNID+L'CDPOJNID-1,L'CDPCJPAT JOB NUMBER         BNSW K2577722
CDPOCLID EQU   CDPOJNUM+L'CDPOJNUM,L'CDPCCLID  'CLASS'             BNSW K2577723
CDPOCLAS EQU   CDPOCLID+L'CDPOCLID,1           CLASS BYTE          BNSW K2577724
CDPOLINS EQU   CDPOCLAS+L'CDPOCLAS,L'CDPCLINS  'LINES'             BNSW K2577725
CDPONLIN EQU   CDPOLINS+L'CDPOLINS-1,L'CDPCLPAT NUMBER OF LINES    BNSW K2577726
CDPOPRIN EQU   CDPONLIN+L'CDPONLIN,L'CDPCPRIN  'PRINTING'          BNSW K2577727
CDPOLEN  EQU   CDPOPRIN+L'CDPOPRIN-COMMAND     LENGTH OF MSG       BNSW K2577728
 TITLE '   HASP COMMAND PROCESSOR BNSWCMD - $U   *** BNSW ***'     BNSW K2577729
         EJECT                                                     BNSW K2577730
****************************************************************** BNSW K2577731
*                                                                * BNSW K2577732
*        ROUTINES FOR $U COMMAND:                                * BNSW K2577733
*                                                                * BNSW K2577734
*        EG'S  $U'JOBNAME',O=V,C=Z     (FROM CLASS V TO CLASS Z) * BNSW K2577735
*              $UJ101,O=*,C=A          (ALL CLASSES TO CLASS A)  * BNSW K2577736
*              $UT15-16,O=AB5,C=V      (CLASSES A,B,5 TO CLASS V)* BNSW K2577737
*                                                                * BNSW K2577738
****************************************************************** BNSW K2577739
         SPACE 2                                                   BNSW K2577740
CU7D     DS    0H                  $U'JOBNAME'                     BNSW K2577741
         L     R1,0(,WD)           A(OPERAND) IE 1ST "'"           BNSW K2577742
         L     WC,4(,WD)           END OF OPERAND +2               BNSW K2577743
         BCTR  WC,0                BACK TO END                     BNSW K2577744
         BCTR  WC,0                OF OPERAND                      BNSW K2577745
         CLI   0(WC),C''''         ENDING ' IS OPTIONAL            BNSW K2577746
         BNE   CUNOSUB             IF NOT ' LAST BYTE PART OF NAME BNSW K2577747
         BCTR  WC,0                END OF NAME                     BNSW K2577748
CUNOSUB  SR    WC,R1               LENGTH OF NAME                  BNSW K2577749
         BNP   CUJINVO             NO NAME    - GET OUT            BNSW K2577750
         BCTR  WC,0                LENGTH FOR EX                   BNSW K2577751
         LA    R0,7                MAX LEN                         BNSW K2577752
         CR    WC,R0               TRUNCATE                        BNSW K2577753
         BNH   CUOKL               IF                              BNSW K2577754
         LR    WC,R0               TOO LONG                        BNSW K2577755
CUOKL    MVC   COMJNAME,=CL8' '    INIT JOBNAME                    BNSW K2577756
         EX    WC,CUMVC                                            BNSW K2577757
         SPACE 1                                                   BNSW K2577758
*        LOOK FOR JOB IN JOB QUEUE.                                BNSW K2577759
         USING JQEDSECT,R1                                         BNSW K2577760
         $CFJSCAN PROCESS=CUPROC,NEXT=CUNEXTJ                      BNSW K2577761
         MVC   COMMAND(8),COMJNAME JOB NOT FOUND -                 BNSW K2577762
         MVC   COMMAND+8(14),=C' JOB NOT FOUND' SETUP MSG          BNSW K2577763
         $CRET L=22                AND GET OUT                     BNSW K2577764
         SPACE 1                                                   BNSW K2577765
CUMVC    MVC   COMJNAME(1),1(R1)   TO MOVE JOBNAME FROM COMMAND    BNSW K2577766
         SPACE 1                                                   BNSW K2577767
CUPROC   CLC   COMJNAME,JQEJNAME   IS THIS THE REQD JOB            BNSW K2577768
         BNE   CUNEXTJ             GET NEXT IF NO MATCH            BNSW K2577769
         LH    WC,JQEJOBNO         GET JOB NUMBER                  BNSW K2577770
         STH   WC,CUJWJLO          LO JOB NO                       BNSW K2577771
         STH   WC,CUJWJHI          SAME AS HI JOB NO               BNSW K2577772
         B     CUJHAVJ             PROCESS OTHER OPERANDS          BNSW K2577773
         SPACE 2                                                   BNSW K2577774
         USING JOEDSECT,R1                                         BNSW K2577775
CUS      DS    0H                  $US                             BNSW K2577776
         LH    WA,=H'10000'        STCS LO END                     BNSW K2577777
         B     CUJA                COMMON                          BNSW K2577778
         SPACE 2                                                   BNSW K2577779
CUT      DS    0H                  $UT                             BNSW K2577780
         LH    WA,=H'20000'        TSUS LO END                     BNSW K2577781
         B     CUJA                COMMON                          BNSW K2577782
         SPACE 2                                                   BNSW K2577783
CUJ      DS    0H                  $UJ                             BNSW K2577784
         SR    WA,WA               JOBS LO END                     BNSW K2577785
         SPACE 1                                                   BNSW K2577786
CUJA     $CFCVB POINTER=(WD),NOK=CUJINVO GET JOB NUBER RANGE       BNSW K2577787
         LTR   R0,R0               IF 'HI' JOB NUMBER NOT +VE      BNSW K2577788
         BNP   CUJINVO             THEN GET OUT WITH ERROR MSG     BNSW K2577789
         AR    R0,WA               HI JOB NUMBER                   BNSW K2577790
         STH   R0,CUJWJHI          KEEP HI JOB NUMBER              BNSW K2577791
         AR    R1,WA               LO JOB NUMBER                   BNSW K2577792
         STH   R1,CUJWJLO          KEEP LO JOB NUMBER              BNSW K2577793
CUJHAVJ  MVI   CUJWFLG,0           INIT FLAG                       BNSW K2577794
         SPACE  1                                                  BNSW K2577795
         CLR   WD,WF               IF NO MORE OPERANDS             BNSW K2577796
         BNL   CUJMISS             THEN ISSUE MISSING OP MSG       BNSW K2577797
CUJLOOP  BXH   WD,WE,CUJEND        LOOK AT NEXT OP                 BNSW K2577798
         L     R1,0(,WD)           A(OPERAND)                      BNSW K2577799
         CLI   1(R1),C'='          C=  OR  O=                      BNSW K2577800
         BNE   CUJINVO             GET OUT IF '=' NOT THERE        BNSW K2577801
         $CFSEL (C,CUJCLAS),(O,CUJOUT),OPERAND=(R1) B DEP ON C OR O NSW K2577802
         SPACE 1                                                   BNSW K2577803
CUJINVO  L     R1,0(,WD)           INVALID OPERAND POINTER         BNSW K2577804
         $CFINVO OPERAND=(R1)      GET OUT WITH MSG                BNSW K2577805
         SPACE 1                                                   BNSW K2577806
CUJMISS  $CRET MSG='OPERANDS MISSING FOR $U' GET OUT WITH MSG      BNSW K2577807
         SPACE 2                                                   BNSW K2577808
*        O=CLASSES  OR  O=* FOR ALL CLASSES  EG O=ABV              BNSW K2577809
CUJOUT   OI    CUJWFLG,CUJEOUT     O=  OPERAND FOUND               BNSW K2577810
         XC    CUJWOCLS,CUJWOCLS   CLEAR REQUIRED CLASES           BNSW K2577811
         L     R15,4(,WD)          NEXT OR NULL OPERAND            BNSW K2577812
         BCTR  R15,0               BACK TO ','                     BNSW K2577813
         LA    R1,2(,R1)           1ST OUT CLASS                   BNSW K2577814
         CLI   0(R1),C'*'          IF NOT 'ALL CLASSES'            BNSW K2577815
         BNE   CUJSCLS             THEN GO SCAN LIST               BNSW K2577816
         MVC   CUJWOCLS,CDPCLSES   ELSE MOVE IN LIST OF ALL CLASES BNSW K2577817
         B     CUJLOOP             AND GO GET NEXT OP              BNSW K2577818
         SPACE  1                                                  BNSW K2577819
CUJSCLS  CR    R1,R15              IF AT END OF THIS OPERAND       BNSW K2577820
         BNL   CUJLOOP             THEN GO GET NEXT                BNSW K2577821
         LA    R14,L'CDPCLSES      NUMBER OF VALID CLASSES         BNSW K2577822
CUJFCLSO IC    R0,CDPCLSES-1(R14)  PICK UP CLASS (WORKING BACWARDS) NSW K2577823
         CLM   R0,1,0(R1)          IF CLASS MATCHES                BNSW K2577824
         BE    CUJHCLSO            GO PUT IT IN LIST               BNSW K2577825
         BCT   R14,CUJFCLSO        ELSE TRY NEXT VALID CLASS       BNSW K2577826
         B     CUJINVO             CLASS NOT VALID - ISSUE MSG     BNSW K2577827
         SPACE 1                                                   BNSW K2577828
CUJHCLSO STC   R0,CUJWOCLS-1(R14)  CLASS REQUIRED INTO LIST        BNSW K2577829
         LA    R1,1(,R1)           NEXT IN COMMAND                 BNSW K2577830
         B     CUJSCLS             CHECK FOR MORE                  BNSW K2577831
         SPACE 2                                                   BNSW K2577832
CUJCLAS  OI    CUJWFLG,CUJECLAS    'TO' CLASS OPERAND              BNSW K2577833
         LA    R14,L'CDPCLSES      NUMBER OF VALID CLASSES         BNSW K2577834
CUJFCLSN IC    R0,CDPCLSES-1(R14)  GET A VALID CLASS               BNSW K2577835
         CLM   R0,1,2(R1)          IF CLASS IN LIST                BNSW K2577836
         BE    CUJHCLSN            GO STORE IT                     BNSW K2577837
         BCT   R14,CUJFCLSN        ELSE TRY NEXT                   BNSW K2577838
         B     CUJINVO             INVALID 'TO' CLASS              BNSW K2577839
         SPACE 1                                                   BNSW K2577840
CUJHCLSN STC   R0,CUJWNCLS         STORE NEW CLASS                 BNSW K2577841
         BCTR  R14,0               CLASS NO A=0,B=1,...            BNSW K2577842
         STH   R14,CUJWNCLN        USE LATER TO FIND CLASS Q IN JOT NSW K2577843
         B     CUJLOOP             GET NEXT OPERAND                BNSW K2577844
         SPACE 2                                                   BNSW K2577845
CUJEND   DS    0H                  ALL OPERANDS SCANNED            BNSW K2577846
         TM    CUJWFLG,CUJECLAS+CUJEOUT C=  AND  O=  BOTH REQD     BNSW K2577847
         BNO   CUJMISS             IF NOT BOTH THERE ISSUE MSG     BNSW K2577848
         LH    R14,CUJWNCLN        NEW CLASS NO. 0,1,2,...         BNSW K2577849
         SR    R0,R0               REMOVE ANY REQUEST TO CHANGE    BNSW K2577850
         STC   R0,CUJWOCLS(R14)    CLASS TO WHAT IT WAS (EG C=A,O=A) SW K2577851
         SPACE 2                                                   BNSW K2577852
CUJGETQ  $QSUSE ,                  ENQUEUE                         BNSW K2577853
         SPACE 1                                                   BNSW K2577854
*        FIND ANY OUTPUT WHICH MATCHES THAT SPECIFIED IN THE       BNSW K2577855
*        COMMAND.                                                  BNSW K2577856
*        SCAN JOT CLASS QUEUES FOR THE REQUIRED CLASSES AND CHECK  BNSW K2577857
*        IF THE JOES BELONG TO A REQUESTED JOB.                    BNSW K2577858
         SPACE 1                                                   BNSW K2577859
         SR    WA,WA               1ST CLASS NUMBER                BNSW K2577860
CUJSCNJ  SR    R1,R1                                               BNSW K2577861
         IC    R1,CUJWOCLS(WA)     GET CLASS OR 0 IF THAT CLASS    BNSW K2577862
         LTR   R1,R1               IS NOT REQUIRED.                BNSW K2577863
         BZ    CUJENDCL            GET NEXT CLASS IF NOT REQUIRED. BNSW K2577864
         STC   R1,CUJWCURC         KEEP CURRENT CLASS              BNSW K2577865
         LA    R1,(JOTCLSQ-JOTDSECT)-(JOENEXT-JOEDSECT)(WA,WA) DSP BNSW K2577866
         AL    R1,$JOTABLE         ADDR OF JOT CLASS QUEUE HEAD    BNSW K2577867
         LH    WB,JOENEXT          1ST JOE OFFSET/4                BNSW K2577868
CUJNXTJO LR    WC,R1               KEEP A(PREV JOE) (OR CLS Q HEAD) NSW K2577869
CUJNXTJX LR    R1,WB               NEXT/1ST JOE                    BNSW K2577870
         N     R1,=X'0000FFFF'     ENSURE +VE                      BNSW K2577871
         BZ    CUJENDCL            GET OUT IF NO MORE              BNSW K2577872
         SLL   R1,2                *4 FOR ACTUAL OFFSET            BNSW K2577873
         AL    R1,$JOTABLE         A(JOE)                          BNSW K2577874
         LH    WB,JOENEXT          OFFSET FOR NEXT JOE FOR THIS CLS NSW K2577875
         TM    JOEFLAG,$JOEPRT     IF PRINTING                     BNSW K2577876
         BO    CUJNXTJO            THEN DONT TOUCH IT              BNSW K2577877
         SPACE 1                                                   BNSW K2577878
*        WE HAVE FOUND OUTPUT OF A MATCHING CLASS, NOW CHECK JOB   BNSW K2577879
         LH    R14,JOEJQE          JQE OFFSET/4                    BNSW K2577880
         N     R14,=X'0000FFFF'    ENSURE +                        BNSW K2577881
         SLL   R14,2               ACTUAL OFFSET                   BNSW K2577882
         AL    R14,$JOBQPTR        A(JQE)                          BNSW K2577883
         LH    R15,JQEJOBNO-JQEDSECT(R14) GET JOB NUMBER AND       BNSW K2577884
         CH    R15,CUJWJLO         CHECK                           BNSW K2577885
         BL    CUJNXTJO            RANGE                           BNSW K2577886
         CH    R15,CUJWJHI         OF                              BNSW K2577887
         BH    CUJNXTJO            JOBNUMBERS                      BNSW K2577888
         SPACE 2                                                   BNSW K2577889
*        DO ACTUAL SWAP.                                           BNSW K2577890
         OI    CUJWFLG,CUJEDONE    INDICATE JOT UPDATED            BNSW K2577891
         SPACE 1                                                   BNSW K2577892
*        WC HAS ADDR OF PREV JOE OR CLASS QUEUE HEADER             BNSW K2577893
*        WB HAS NEXT JOE OFFSET                                    BNSW K2577894
         STH   WB,JOENEXT-JOEDSECT(WC) TAKE JOE OFF 'FROM' QUEUE   BNSW K2577895
         LH    R14,CUJWNCLN        NEW ('TO') CLASS NO   0,1,2,... BNSW K2577896
         LA    R14,JOTCLSQ-JOTDSECT(R14,R14) DISP OF CLASS Q       BNSW K2577897
         AL    R14,$JOTABLE        A(CLASS Q HEADER)               BNSW K2577898
         MVC   JOENEXT,0(R14)      HOOK REST OF Q ONTO THIS JOE    BNSW K2577899
         MVC   JOECURCL,CUJWNCLS   NEW CLASS TO JOE                BNSW K2577900
         SL    R1,$JOTABLE         JOE OFFSET                      BNSW K2577901
         SRL   R1,2                /4                              BNSW K2577902
         STH   R1,0(R14)           JOE ONTO 'TO' Q                 BNSW K2577903
         SLL   R1,2                *4 OFFSET AGAIN                 BNSW K2577904
         $#CKPT JOE=(R1),TYPE=D    REQUEST CHKPT OF CURRENT JOE    BNSW K2577905
         $#CKPT JOE=(WC),TYPE=A    REQ CHKPT OF PREV JOE OR Q HEADER SW K2577906
         B     CUJNXTJX            GET NEXT - PREVIOUS REMAINS SAME NSW K2577907
         SPACE 2                                                   BNSW K2577908
CUJENDCL LA    WA,1(,WA)           NEXT CLASS NUMBER               BNSW K2577909
         LA    R1,L'CUJWOCLS       NUMBER OF CLASSES               BNSW K2577910
         CR    WA,R1               IF NOT AT END                   BNSW K2577911
         BNE   CUJSCNJ             DO NEXT CLASS                   BNSW K2577912
         SPACE 1                                                   BNSW K2577913
*        AT END OF SCAN CHECK IF JOT HAS BEEN UPDATED              BNSW K2577914
         TM    CUJWFLG,CUJEDONE    IF JOT NOT UPDATED              BNSW K2577915
         BNO   CUJNOCH             ISSUE MSG + GET OUT             BNSW K2577916
         SPACE 1                                                   BNSW K2577917
         LH    R1,CUJWNCLN         'TO' CLASS NO. 0,1,2...         BNSW K2577918
         LA    R1,JOTCLSQ-JOTDSECT(R1,R1) DISP OF Q HEADER         BNSW K2577919
         $#CKPT JOE=(R1),TYPE=D    REQ CHPKT OF 'TO' Q HEADER      BNSW K2577920
         $POST $HASPECF,(JOT,CKPW) POST JOT AND REQUEST CHKPT WRITE NSW K2577921
         SPACE 1                                                   BNSW K2577922
         $CRET MSG='SYSOUT CLASS/ES CHANGED' ISSUE MSG + RETURN    BNSW K2577923
         SPACE 1                                                   BNSW K2577924
CUJNOCH  $CRET MSG='NO OUTPUT FOUND' RETURN WITH MSG               BNSW K2577925
         SPACE 2                                                   BNSW K2577926
****************************************************************** BNSW K2577927
*                                                                  BNSW K2577928
*        END OF 'COMMAND' USED AS WORK AREA                        BNSW K2577929
*                                                                  BNSW K2577930
CUJWNCLN EQU   COMMAND+80,2               NEW ('TO') CLASS NUMBER  BNSW K2577931
CUJWJLO  EQU   CUJWNCLN+L'CUJWNCLN,2      LO JOB NO.               BNSW K2577932
CUJWJHI  EQU   CUJWJLO+L'CUJWJLO,2        HI JOB NO.               BNSW K2577933
CUJWCURC EQU   CUJWJHI+L'CUJWJHI,1        CURRENT CLASS            BNSW K2577934
CUJWNCLS EQU   CUJWCURC+L'CUJWCURC,1      NEW ('TO') CLASS         BNSW K2577935
CUJWOCLS EQU   CUJWNCLS+L'CUJWNCLS,L'CDPCLSES OLD ('FROM') CLASSES BNSW K2577936
CUJWFLG  EQU   CUJWOCLS+L'CUJWOCLS,1      FLAG BYTE:               BNSW K2577937
CUJECLAS EQU   X'80'                      C= FOUND                 BNSW K2577938
CUJEOUT  EQU   X'40'                      O= FOUND                 BNSW K2577939
CUJEDONE EQU   X'20'                      JOT UPDATED              BNSW K2577940
*                                                                  BNSW K2577941
****************************************************************** BNSW K2577942
         SPACE 2                                                   BNSW K2577943
         POP   USING               BACK TO WHAT IT WAS             BNSW K2577944
         SPACE 2                                                   BNSW K2577945
         LTORG                                                     BNSW K2577946
****************************************************************** BNSW K2577947
./       ENDUP
//SMPCNTL  DD  *
 RECEIVE SELECT(WM00017).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -RECV25
//*
//APPLY25  EXEC SMPAPP
//HMASMP.SYSUT1 DD UNIT=&WORK,SPACE=(1700,(1000,200))
//HMASMP.SYSUT2 DD UNIT=&WORK,SPACE=(1700,(1000,200))
//HMASMP.SYSUT3 DD UNIT=&WORK,SPACE=(1700,(1000,200))
//HMASMP.SYSLIB DD
//         DD
//         DD
//         DD
//         DD
//         DD DSN=SYS1.HASPSRC,DISP=SHR
//SMPCNTL  DD  *
  APPLY SELECT(WM00017) DIS(WRITE).
//* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - APPLY25
//*
//
